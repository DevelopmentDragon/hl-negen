; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\cvar.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_cvar_vars
_DATA	SEGMENT
COMM	_cmd_scripting:DWORD
_DATA	ENDS
_BSS	SEGMENT
_cvar_vars DD	01H DUP (?)
_BSS	ENDS
PUBLIC	_Cvar_FindVarExt
PUBLIC	_Cvar_RegisterVariable
PUBLIC	_Cvar_Get
PUBLIC	_Cvar_LookupVars
PUBLIC	_Cvar_FullSet
PUBLIC	_Cvar_DirectSet
PUBLIC	_Cvar_Set
PUBLIC	_Cvar_SetValue
PUBLIC	_Cvar_BuildAutoDescription
PUBLIC	_Cvar_VariableValue
PUBLIC	_Cvar_VariableInteger
PUBLIC	_Cvar_VariableString
PUBLIC	_Cvar_WriteVariables
PUBLIC	_Cvar_Exists
PUBLIC	_Cvar_Reset
PUBLIC	_Cvar_SetCheatState
PUBLIC	_Cvar_Command
PUBLIC	_Cvar_Init
PUBLIC	_Cvar_Unlink
PUBLIC	_Cvar_ValidateString
PUBLIC	_Cvar_UnlinkVar
PUBLIC	_Cvar_Toggle_f
PUBLIC	_Cvar_SetGL_f
PUBLIC	_Cvar_Reset_f
PUBLIC	_Cvar_List_f
PUBLIC	??_C@_05ONEKDNPE@game?5@			; `string'
PUBLIC	??_C@_07OLADGDOO@client?5@			; `string'
PUBLIC	??_C@_07GHOACFPH@GameUI?5@			; `string'
PUBLIC	??_C@_07JPPNPDKP@server?5@			; `string'
PUBLIC	??_C@_05GFKJMHJM@user?5@			; `string'
PUBLIC	??_C@_09JFPDLNNM@archived?5@			; `string'
PUBLIC	??_C@_04PNAHEAFM@cvar@				; `string'
PUBLIC	??_C@_0BF@FKGNFJNH@fullserverinfo?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BD@NFJFLDNN@setinfo?5?$CC?$CFs?$CC?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BA@KPIBMHDJ@?$CK?$CK?$CKPROTECTED?$CK?$CK?$CK@ ; `string'
PUBLIC	??_C@_0BJ@KCLPALDI@Server?5cvar?5?$CC?$CFs?$CC?5?$DN?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BG@KOLAHKHP@?$CC?$CFs?$CC?5changed?5to?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_05LBJMNBOG@empty@				; `string'
PUBLIC	?__LINE__Var@?0??Cvar_UnlinkVar@@9@9		; `Cvar_UnlinkVar'::`1'::__LINE__Var
PUBLIC	??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@ ; `string'
PUBLIC	?__LINE__Var@?0??Cvar_Changed@@9@9		; `Cvar_Changed'::`1'::__LINE__Var
PUBLIC	??_C@_0M@GLNCENAD@var?5?$CB?$DN?5NULL@		; `string'
PUBLIC	??_C@_09NFOPKLIK@sv_cheats@			; `string'
PUBLIC	??_C@_0BB@JBGGLKDL@sv_infinite_ammo@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?__LINE__Var@?0??Cvar_Get@@9@9			; `Cvar_Get'::`1'::__LINE__Var
PUBLIC	??_C@_0BI@FECCGOFJ@assert?5failed?5at?5?$CFs?3?$CFi?6@ ; `string'
PUBLIC	??_C@_0EI@MBKPMNGH@?$FO1Error?3?$FO7?5can?8t?5register?5varia@ ; `string'
PUBLIC	??_C@_0CF@GNINODDH@?$CFs?5change?5description?5from?5?$CFs?5t@ ; `string'
PUBLIC	?__LINE__Var@?0??Cvar_RegisterVariable@@9@9	; `Cvar_RegisterVariable'::`1'::__LINE__Var
PUBLIC	??_C@_0DN@OFIIAGKB@?$FO1Error?3?$FO7?5can?8t?5register?5varia@ ; `string'
PUBLIC	?__LINE__Var@?0??Cvar_DirectSet@@9@9		; `Cvar_DirectSet'::`1'::__LINE__Var
PUBLIC	??_C@_0BC@GJJHMBGE@?$CFs?5is?5read?9only?4?6@	; `string'
PUBLIC	??_C@_0BI@NNDBDFOI@?$CFs?5is?5cheat?5protected?4?6@ ; `string'
PUBLIC	??_C@_0CF@MMBKLCAG@?$CFs?5will?5be?5changed?5upon?5restart@ ; `string'
PUBLIC	??_C@_0CN@DNGIKKAG@?$CFs?5has?5no?5default?5value?5and?5can@ ; `string'
PUBLIC	?__LINE__Var@?0??Cvar_FullSet@@9@9		; `Cvar_FullSet'::`1'::__LINE__Var
PUBLIC	??_C@_0CD@JNJDEPON@Cvar_Set?3?5variable?5?8?$CFs?8?5not?5fou@ ; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf@				; `string'
PUBLIC	??_C@_0BL@HMMCCENM@?$CC?$CFs?$CC?5is?5?$CC?$CFs?$CC?5?$CI?5?$FO3?$CC?$CFs?$CC?$FO7?5?$CJ?6@ ; `string'
PUBLIC	??_C@_0O@IICNENEG@?$CC?$CFs?$CC?5is?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BP@CMJJPGBI@can?8t?5set?5?$CC?$CFs?$CC?5in?5multiplayer?6@ ; `string'
PUBLIC	??_C@_08MHBLPCGN@?$CFs?5?$CC?$CFs?$CC?6@	; `string'
PUBLIC	??_C@_0BK@NMEHJMOB@Usage?3?5toggle?5?$DMvariable?$DO?6@ ; `string'
PUBLIC	??_C@_02IKAHHCAI@?$CFi@				; `string'
PUBLIC	??_C@_0CB@HNAABODN@Usage?3?5setgl?5?$DMvariable?$DO?5?$DMvalue?$DO@ ; `string'
PUBLIC	??_C@_0BJ@MCFGLAEM@Usage?3?5reset?5?$DMvariable?$DO?6@ ; `string'
PUBLIC	??_C@_04OEDFLLKD@?$CC?$CFs?$CC@			; `string'
PUBLIC	??_C@_08IOPGNHMF@?$CC?$FO2?$CFs?$FO7?$CC@	; `string'
PUBLIC	??_C@_0BB@KJCLBDLC@?5?$CF?9?$CKs?5?$CFs?5?$FO3?$CFs?$FO7?6@ ; `string'
PUBLIC	??_C@_0L@HIAMDLGH@?6?$CFi?5cvars?6@		; `string'
PUBLIC	??_C@_0BA@HFMOEDOL@host_gameloaded@		; `string'
PUBLIC	??_C@_0BC@CKKMCGJ@host_clientloaded@		; `string'
PUBLIC	??_C@_0BC@CFEOCCMF@host_gameuiloaded@		; `string'
PUBLIC	??_C@_0BB@LPBLHHDA@unlink?5?$CFi?5cvars?6@	; `string'
PUBLIC	??_C@_0DJ@BDPGICHD@enable?5simple?5condition?5checkin@ ; `string'
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_0O@PGFFBMFD@cmd_scripting@		; `string'
PUBLIC	??_C@_0DA@GBFDNONP@create?5or?5change?5the?5value?5of?5a@ ; `string'
PUBLIC	??_C@_05PCNEBHML@setgl@				; `string'
PUBLIC	??_C@_0DI@JKEPBPAM@toggles?5a?5console?5variable?8s?5va@ ; `string'
PUBLIC	??_C@_06FHLCKAHH@toggle@			; `string'
PUBLIC	??_C@_0CJ@PNMLKJHL@reset?5any?5type?5variable?5to?5init@ ; `string'
PUBLIC	??_C@_05CFMALAOA@reset@				; `string'
PUBLIC	??_C@_0EC@MGNJIILL@display?5all?5console?5variables?5b@ ; `string'
PUBLIC	??_C@_08HKAEGNIC@cvarlist@			; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3eb0c6f7a0b5ed8d
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_Sys_Error:PROC
EXTRN	_Cmd_Argc:PROC
EXTRN	_Cmd_Argv:PROC
EXTRN	_Cmd_AddCommand:PROC
EXTRN	_Cmd_Exists:PROC
EXTRN	_Q_strlen:PROC
EXTRN	_Q_colorstr:PROC
EXTRN	_Q_strncat:PROC
EXTRN	_Q_strncpy:PROC
EXTRN	__copystring:PROC
EXTRN	_Q_atoi:PROC
EXTRN	_Q_atof:PROC
EXTRN	_Q_strnicmp:PROC
EXTRN	_Q_strncmp:PROC
EXTRN	_Q_stricmpext:PROC
EXTRN	_Q_snprintf:PROC
EXTRN	_va:PROC
EXTRN	__Mem_Alloc:PROC
EXTRN	__Mem_Free:PROC
EXTRN	_DBG_AssertFunction:PROC
EXTRN	_FS_Printf:PROC
EXTRN	_CL_Active:PROC
EXTRN	_SV_Active:PROC
EXTRN	_Con_Reportf:PROC
EXTRN	_Con_DPrintf:PROC
EXTRN	_Con_Printf:PROC
EXTRN	_CL_Userinfo:PROC
EXTRN	_Log_Printf:PROC
EXTRN	_SV_BroadcastCommand:PROC
EXTRN	_SV_BroadcastPrintf:PROC
EXTRN	_CL_ServerCommand:PROC
EXTRN	_CL_GetMaxClients:PROC
EXTRN	_SV_Serverinfo:PROC
EXTRN	_Info_SetValueForKey:PROC
EXTRN	_fabs:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_host_developer:BYTE
EXTRN	_host:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?desc@?1??Cvar_BuildAutoDescription@@9@9 DB 080H DUP (?) ; `Cvar_BuildAutoDescription'::`2'::desc
?szNew@?1??Cvar_ValidateString@@9@9 DB 0100H DUP (?)	; `Cvar_ValidateString'::`2'::szNew
_BSS	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-06
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_08HKAEGNIC@cvarlist@
CONST	SEGMENT
??_C@_08HKAEGNIC@cvarlist@ DB 'cvarlist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@MGNJIILL@display?5all?5console?5variables?5b@
CONST	SEGMENT
??_C@_0EC@MGNJIILL@display?5all?5console?5variables?5b@ DB 'display all c'
	DB	'onsole variables beginning with the specified prefix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFMALAOA@reset@
CONST	SEGMENT
??_C@_05CFMALAOA@reset@ DB 'reset', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PNMLKJHL@reset?5any?5type?5variable?5to?5init@
CONST	SEGMENT
??_C@_0CJ@PNMLKJHL@reset?5any?5type?5variable?5to?5init@ DB 'reset any ty'
	DB	'pe variable to initial value', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHLCKAHH@toggle@
CONST	SEGMENT
??_C@_06FHLCKAHH@toggle@ DB 'toggle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@JKEPBPAM@toggles?5a?5console?5variable?8s?5va@
CONST	SEGMENT
??_C@_0DI@JKEPBPAM@toggles?5a?5console?5variable?8s?5va@ DB 'toggles a co'
	DB	'nsole variable''s values (use for more info)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PCNEBHML@setgl@
CONST	SEGMENT
??_C@_05PCNEBHML@setgl@ DB 'setgl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GBFDNONP@create?5or?5change?5the?5value?5of?5a@
CONST	SEGMENT
??_C@_0DA@GBFDNONP@create?5or?5change?5the?5value?5of?5a@ DB 'create or c'
	DB	'hange the value of a opengl variable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PGFFBMFD@cmd_scripting@
CONST	SEGMENT
??_C@_0O@PGFFBMFD@cmd_scripting@ DB 'cmd_scripting', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@BDPGICHD@enable?5simple?5condition?5checkin@
CONST	SEGMENT
??_C@_0DJ@BDPGICHD@enable?5simple?5condition?5checkin@ DB 'enable simple '
	DB	'condition checking and variable operations', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LPBLHHDA@unlink?5?$CFi?5cvars?6@
CONST	SEGMENT
??_C@_0BB@LPBLHHDA@unlink?5?$CFi?5cvars?6@ DB 'unlink %i cvars', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CFEOCCMF@host_gameuiloaded@
CONST	SEGMENT
??_C@_0BC@CFEOCCMF@host_gameuiloaded@ DB 'host_gameuiloaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CKKMCGJ@host_clientloaded@
CONST	SEGMENT
??_C@_0BC@CKKMCGJ@host_clientloaded@ DB 'host_clientloaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HFMOEDOL@host_gameloaded@
CONST	SEGMENT
??_C@_0BA@HFMOEDOL@host_gameloaded@ DB 'host_gameloaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HIAMDLGH@?6?$CFi?5cvars?6@
CONST	SEGMENT
??_C@_0L@HIAMDLGH@?6?$CFi?5cvars?6@ DB 0aH, '%i cvars', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KJCLBDLC@?5?$CF?9?$CKs?5?$CFs?5?$FO3?$CFs?$FO7?6@
CONST	SEGMENT
??_C@_0BB@KJCLBDLC@?5?$CF?9?$CKs?5?$CFs?5?$FO3?$CFs?$FO7?6@ DB ' %-*s %s '
	DB	'^3%s^7', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08IOPGNHMF@?$CC?$FO2?$CFs?$FO7?$CC@
CONST	SEGMENT
??_C@_08IOPGNHMF@?$CC?$FO2?$CFs?$FO7?$CC@ DB '"^2%s^7"', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OEDFLLKD@?$CC?$CFs?$CC@
CONST	SEGMENT
??_C@_04OEDFLLKD@?$CC?$CFs?$CC@ DB '"%s"', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MCFGLAEM@Usage?3?5reset?5?$DMvariable?$DO?6@
CONST	SEGMENT
??_C@_0BJ@MCFGLAEM@Usage?3?5reset?5?$DMvariable?$DO?6@ DB 'Usage: reset <'
	DB	'variable>', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HNAABODN@Usage?3?5setgl?5?$DMvariable?$DO?5?$DMvalue?$DO@
CONST	SEGMENT
??_C@_0CB@HNAABODN@Usage?3?5setgl?5?$DMvariable?$DO?5?$DMvalue?$DO@ DB 'U'
	DB	'sage: setgl <variable> <value>', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02IKAHHCAI@?$CFi@
CONST	SEGMENT
??_C@_02IKAHHCAI@?$CFi@ DB '%i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NMEHJMOB@Usage?3?5toggle?5?$DMvariable?$DO?6@
CONST	SEGMENT
??_C@_0BK@NMEHJMOB@Usage?3?5toggle?5?$DMvariable?$DO?6@ DB 'Usage: toggle'
	DB	' <variable>', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MHBLPCGN@?$CFs?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_08MHBLPCGN@?$CFs?5?$CC?$CFs?$CC?6@ DB '%s "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CMJJPGBI@can?8t?5set?5?$CC?$CFs?$CC?5in?5multiplayer?6@
CONST	SEGMENT
??_C@_0BP@CMJJPGBI@can?8t?5set?5?$CC?$CFs?$CC?5in?5multiplayer?6@ DB 'can'
	DB	'''t set "%s" in multiplayer', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IICNENEG@?$CC?$CFs?$CC?5is?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0O@IICNENEG@?$CC?$CFs?$CC?5is?5?$CC?$CFs?$CC?6@ DB '"%s" is "%s"', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HMMCCENM@?$CC?$CFs?$CC?5is?5?$CC?$CFs?$CC?5?$CI?5?$FO3?$CC?$CFs?$CC?$FO7?5?$CJ?6@
CONST	SEGMENT
??_C@_0BL@HMMCCENM@?$CC?$CFs?$CC?5is?5?$CC?$CFs?$CC?5?$CI?5?$FO3?$CC?$CFs?$CC?$FO7?5?$CJ?6@ DB '"'
	DB	'%s" is "%s" ( ^3"%s"^7 )', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JNJDEPON@Cvar_Set?3?5variable?5?8?$CFs?8?5not?5fou@
CONST	SEGMENT
??_C@_0CD@JNJDEPON@Cvar_Set?3?5variable?5?8?$CFs?8?5not?5fou@ DB 'Cvar_Se'
	DB	't: variable ''%s'' not found', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Cvar_FullSet@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Cvar_FullSet@@9@9 DD 021aH		; `Cvar_FullSet'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CN@DNGIKKAG@?$CFs?5has?5no?5default?5value?5and?5can@
CONST	SEGMENT
??_C@_0CN@DNGIKKAG@?$CFs?5has?5no?5default?5value?5and?5can@ DB '%s has n'
	DB	'o default value and can''t be reset.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MMBKLCAG@?$CFs?5will?5be?5changed?5upon?5restart@
CONST	SEGMENT
??_C@_0CF@MMBKLCAG@?$CFs?5will?5be?5changed?5upon?5restart@ DB '%s will b'
	DB	'e changed upon restarting.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NNDBDFOI@?$CFs?5is?5cheat?5protected?4?6@
CONST	SEGMENT
??_C@_0BI@NNDBDFOI@?$CFs?5is?5cheat?5protected?4?6@ DB '%s is cheat prote'
	DB	'cted.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GJJHMBGE@?$CFs?5is?5read?9only?4?6@
CONST	SEGMENT
??_C@_0BC@GJJHMBGE@?$CFs?5is?5read?9only?4?6@ DB '%s is read-only.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Cvar_DirectSet@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Cvar_DirectSet@@9@9 DD 01d3H		; `Cvar_DirectSet'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DN@OFIIAGKB@?$FO1Error?3?$FO7?5can?8t?5register?5varia@
CONST	SEGMENT
??_C@_0DN@OFIIAGKB@?$FO1Error?3?$FO7?5can?8t?5register?5varia@ DB '^1Erro'
	DB	'r:^7 can''t register variable ''%s'', is already defined', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Cvar_RegisterVariable@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Cvar_RegisterVariable@@9@9 DD 0195H	; `Cvar_RegisterVariable'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CF@GNINODDH@?$CFs?5change?5description?5from?5?$CFs?5t@
CONST	SEGMENT
??_C@_0CF@GNINODDH@?$CFs?5change?5description?5from?5?$CFs?5t@ DB '%s cha'
	DB	'nge description from %s to %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@MBKPMNGH@?$FO1Error?3?$FO7?5can?8t?5register?5varia@
CONST	SEGMENT
??_C@_0EI@MBKPMNGH@?$FO1Error?3?$FO7?5can?8t?5register?5varia@ DB '^1Erro'
	DB	'r:^7 can''t register variable ''%s'', is already defined as c'
	DB	'ommand', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FECCGOFJ@assert?5failed?5at?5?$CFs?3?$CFi?6@
CONST	SEGMENT
??_C@_0BI@FECCGOFJ@assert?5failed?5at?5?$CFs?3?$CFi?6@ DB 'assert failed '
	DB	'at %s:%i', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Cvar_Get@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Cvar_Get@@9@9 DD 013fH			; `Cvar_Get'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JBGGLKDL@sv_infinite_ammo@
CONST	SEGMENT
??_C@_0BB@JBGGLKDL@sv_infinite_ammo@ DB 'sv_infinite_ammo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NFOPKLIK@sv_cheats@
CONST	SEGMENT
??_C@_09NFOPKLIK@sv_cheats@ DB 'sv_cheats', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GLNCENAD@var?5?$CB?$DN?5NULL@
CONST	SEGMENT
??_C@_0M@GLNCENAD@var?5?$CB?$DN?5NULL@ DB 'var != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Cvar_Changed@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Cvar_Changed@@9@9 DD 0feH		; `Cvar_Changed'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
CONST	SEGMENT
??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@ DB 'D:\DevDrago'
	DB	'n\XashFE\dev\src\engine\common\cvar.c', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Cvar_UnlinkVar@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Cvar_UnlinkVar@@9@9 DD 0caH		; `Cvar_UnlinkVar'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05LBJMNBOG@empty@
CONST	SEGMENT
??_C@_05LBJMNBOG@empty@ DB 'empty', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KOLAHKHP@?$CC?$CFs?$CC?5changed?5to?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BG@KOLAHKHP@?$CC?$CFs?$CC?5changed?5to?5?$CC?$CFs?$CC?6@ DB '"%s" '
	DB	'changed to "%s"', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KCLPALDI@Server?5cvar?5?$CC?$CFs?$CC?5?$DN?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BJ@KCLPALDI@Server?5cvar?5?$CC?$CFs?$CC?5?$DN?5?$CC?$CFs?$CC?6@ DB 'S'
	DB	'erver cvar "%s" = "%s"', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KPIBMHDJ@?$CK?$CK?$CKPROTECTED?$CK?$CK?$CK@
CONST	SEGMENT
??_C@_0BA@KPIBMHDJ@?$CK?$CK?$CKPROTECTED?$CK?$CK?$CK@ DB '***PROTECTED***'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NFJFLDNN@setinfo?5?$CC?$CFs?$CC?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BD@NFJFLDNN@setinfo?5?$CC?$CFs?$CC?5?$CC?$CFs?$CC?6@ DB 'setinfo "'
	DB	'%s" "%s"', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FKGNFJNH@fullserverinfo?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BF@FKGNFJNH@fullserverinfo?5?$CC?$CFs?$CC?6@ DB 'fullserverinfo "%'
	DB	's"', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04PNAHEAFM@cvar@
CONST	SEGMENT
??_C@_04PNAHEAFM@cvar@ DB 'cvar', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09JFPDLNNM@archived?5@
CONST	SEGMENT
??_C@_09JFPDLNNM@archived?5@ DB 'archived ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFKJMHJM@user?5@
CONST	SEGMENT
??_C@_05GFKJMHJM@user?5@ DB 'user ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JPPNPDKP@server?5@
CONST	SEGMENT
??_C@_07JPPNPDKP@server?5@ DB 'server ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GHOACFPH@GameUI?5@
CONST	SEGMENT
??_C@_07GHOACFPH@GameUI?5@ DB 'GameUI ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OLADGDOO@client?5@
CONST	SEGMENT
??_C@_07OLADGDOO@client?5@ DB 'client ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ONEKDNPE@game?5@
CONST	SEGMENT
??_C@_05ONEKDNPE@game?5@ DB 'game ', 00H		; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	099H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_List_f
_TEXT	SEGMENT
_count$ = -16						; size = 4
_value$ = -12						; size = 4
_match$ = -8						; size = 4
_var$ = -4						; size = 4
_Cvar_List_f PROC					; COMDAT

; 817  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 818  : 	convar_t	*var;
; 819  : 	char	*match = NULL;

	mov	DWORD PTR _match$[ebp], 0

; 820  : 	char	*value;
; 821  : 	int	count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 822  : 
; 823  : 	if( Cmd_Argc() > 1 )

	call	_Cmd_Argc
	cmp	eax, 1
	jbe	SHORT $LN5@Cvar_List_

; 824  : 		match = Cmd_Argv( 1 );

	push	1
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _match$[ebp], eax
$LN5@Cvar_List_:

; 825  : 
; 826  : 	for( var = cvar_vars; var; var = var->next )

	mov	eax, DWORD PTR _cvar_vars
	mov	DWORD PTR _var$[ebp], eax
	jmp	SHORT $LN4@Cvar_List_
$LN2@Cvar_List_:
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _var$[ebp], ecx
$LN4@Cvar_List_:
	cmp	DWORD PTR _var$[ebp], 0
	je	$LN3@Cvar_List_

; 827  : 	{
; 828  : 		if( var->name[0] == '@' )

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 64					; 00000040H
	jne	SHORT $LN6@Cvar_List_

; 829  : 			continue;	// never shows system cvars

	jmp	SHORT $LN2@Cvar_List_
$LN6@Cvar_List_:

; 830  : 
; 831  : 		if( match && !Q_stricmpext( match, var->name ))

	cmp	DWORD PTR _match$[ebp], 0
	je	SHORT $LN7@Cvar_List_
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _match$[ebp]
	push	edx
	call	_Q_stricmpext
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@Cvar_List_

; 832  : 			continue;

	jmp	SHORT $LN2@Cvar_List_
$LN7@Cvar_List_:

; 833  : 
; 834  : 		if( Q_colorstr( var->string ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_colorstr
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@Cvar_List_

; 835  : 			value = va( "\"%s\"", var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_04OEDFLLKD@?$CC?$CFs?$CC@
	call	_va
	add	esp, 8
	mov	DWORD PTR _value$[ebp], eax
	jmp	SHORT $LN9@Cvar_List_
$LN8@Cvar_List_:

; 836  : 		else value = va( "\"^2%s^7\"", var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_08IOPGNHMF@?$CC?$FO2?$CFs?$FO7?$CC@
	call	_va
	add	esp, 8
	mov	DWORD PTR _value$[ebp], eax
$LN9@Cvar_List_:

; 837  : 
; 838  : 		if( FBitSet( var->flags, FCVAR_EXTENDED|FCVAR_ALLOCATED ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 786432				; 000c0000H
	je	SHORT $LN10@Cvar_List_

; 839  : 			Con_Printf( " %-*s %s ^3%s^7\n", 32, var->name, value, var->desc );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	32					; 00000020H
	push	OFFSET ??_C@_0BB@KJCLBDLC@?5?$CF?9?$CKs?5?$CFs?5?$FO3?$CFs?$FO7?6@
	call	_Con_Printf
	add	esp, 20					; 00000014H
	jmp	SHORT $LN11@Cvar_List_
$LN10@Cvar_List_:

; 840  : 		else Con_Printf( " %-*s %s ^3%s^7\n", 32, var->name, value, Cvar_BuildAutoDescription( var->flags ));

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_Cvar_BuildAutoDescription
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	32					; 00000020H
	push	OFFSET ??_C@_0BB@KJCLBDLC@?5?$CF?9?$CKs?5?$CFs?5?$FO3?$CFs?$FO7?6@
	call	_Con_Printf
	add	esp, 20					; 00000014H
$LN11@Cvar_List_:

; 841  : 
; 842  : 		count++;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 843  : 	}

	jmp	$LN2@Cvar_List_
$LN3@Cvar_List_:

; 844  : 
; 845  : 	Con_Printf( "\n%i cvars\n", count );

	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@HIAMDLGH@?6?$CFi?5cvars?6@
	call	_Con_Printf
	add	esp, 8

; 846  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_List_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_Reset_f
_TEXT	SEGMENT
_Cvar_Reset_f PROC					; COMDAT

; 801  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 802  : 	if( Cmd_Argc() != 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	je	SHORT $LN2@Cvar_Reset

; 803  : 	{
; 804  : 		Con_Printf( S_USAGE "reset <variable>\n" );

	push	OFFSET ??_C@_0BJ@MCFGLAEM@Usage?3?5reset?5?$DMvariable?$DO?6@
	call	_Con_Printf
	add	esp, 4

; 805  : 		return;

	jmp	SHORT $LN1@Cvar_Reset
$LN2@Cvar_Reset:

; 806  : 	}
; 807  : 
; 808  : 	Cvar_Reset( Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Cvar_Reset
	add	esp, 4
$LN1@Cvar_Reset:

; 809  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Reset_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_SetGL_f
_TEXT	SEGMENT
_Cvar_SetGL_f PROC					; COMDAT

; 785  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 786  : 	if( Cmd_Argc() != 3 )

	call	_Cmd_Argc
	cmp	eax, 3
	je	SHORT $LN2@Cvar_SetGL

; 787  : 	{
; 788  : 		Con_Printf( S_USAGE "setgl <variable> <value>\n" );

	push	OFFSET ??_C@_0CB@HNAABODN@Usage?3?5setgl?5?$DMvariable?$DO?5?$DMvalue?$DO@
	call	_Con_Printf
	add	esp, 4

; 789  : 		return;

	jmp	SHORT $LN1@Cvar_SetGL
$LN2@Cvar_SetGL:

; 790  : 	}
; 791  : 
; 792  : 	Cvar_FullSet( Cmd_Argv( 1 ), Cmd_Argv( 2 ), FCVAR_GLCONFIG );

	push	4096					; 00001000H
	push	2
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Cvar_FullSet
	add	esp, 12					; 0000000cH
$LN1@Cvar_SetGL:

; 793  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_SetGL_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_Toggle_f
_TEXT	SEGMENT
tv72 = -72						; size = 4
_v$ = -4						; size = 4
_Cvar_Toggle_f PROC					; COMDAT

; 763  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 764  : 	int	v;
; 765  : 
; 766  : 	if( Cmd_Argc() != 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	je	SHORT $LN2@Cvar_Toggl

; 767  : 	{
; 768  : 		Con_Printf( S_USAGE "toggle <variable>\n" );

	push	OFFSET ??_C@_0BK@NMEHJMOB@Usage?3?5toggle?5?$DMvariable?$DO?6@
	call	_Con_Printf
	add	esp, 4

; 769  : 		return;

	jmp	SHORT $LN1@Cvar_Toggl
$LN2@Cvar_Toggl:

; 770  : 	}
; 771  : 
; 772  : 	v = !Cvar_VariableInteger( Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Cvar_VariableInteger
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN4@Cvar_Toggl
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN5@Cvar_Toggl
$LN4@Cvar_Toggl:
	mov	DWORD PTR tv72[ebp], 0
$LN5@Cvar_Toggl:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 773  : 
; 774  : 	Cvar_Set( Cmd_Argv( 1 ), va( "%i", v ));

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	push	OFFSET ??_C@_02IKAHHCAI@?$CFi@
	call	_va
	add	esp, 8
	push	eax
	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Cvar_Set
	add	esp, 8
$LN1@Cvar_Toggl:

; 775  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Toggle_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_Changed
_TEXT	SEGMENT
tv70 = -68						; size = 4
_var$ = 8						; size = 4
_Cvar_Changed PROC					; COMDAT

; 254  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 255  : 	Assert( var != NULL );

	cmp	DWORD PTR _var$[ebp], 0
	je	SHORT $LN8@Cvar_Chang
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN9@Cvar_Chang
$LN8@Cvar_Chang:
	mov	DWORD PTR tv70[ebp], 0
$LN9@Cvar_Chang:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_Changed@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0M@GLNCENAD@var?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 256  : 
; 257  : 	// tell about changes
; 258  : 	SetBits( var->flags, FCVAR_CHANGED );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 8192				; 00002000H
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 259  : 
; 260  : 	// tell the engine parts with global state
; 261  : 	if( FBitSet( var->flags, FCVAR_USERINFO ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	je	SHORT $LN2@Cvar_Chang

; 262  : 		host.userinfo_changed = true;

	mov	DWORD PTR _host+34412, 1
$LN2@Cvar_Chang:

; 263  : 
; 264  : 	if( FBitSet( var->flags, FCVAR_MOVEVARS ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1024				; 00000400H
	je	SHORT $LN3@Cvar_Chang

; 265  : 		host.movevars_changed = true;

	mov	DWORD PTR _host+34416, 1
$LN3@Cvar_Chang:

; 266  : 
; 267  : 	if( FBitSet( var->flags, FCVAR_VIDRESTART ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1048576				; 00100000H
	je	SHORT $LN4@Cvar_Chang

; 268  : 		host.renderinfo_changed = true;

	mov	DWORD PTR _host+34420, 1
$LN4@Cvar_Chang:

; 269  : 
; 270  : 	if( !Q_strcmp( var->name, "sv_cheats" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_09NFOPKLIK@sv_cheats@
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN5@Cvar_Chang

; 271  : 		host.allow_cheats = Q_atoi( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_atoi
	add	esp, 4
	mov	DWORD PTR _host+34352, eax
$LN5@Cvar_Chang:

; 272  : 
; 273  : 	// Add this
; 274  : 	if (!Q_strcmp(var->name, "sv_infinite_ammo"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_0BB@JBGGLKDL@sv_infinite_ammo@
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@Cvar_Chang

; 275  : 		host.infinite_ammo = Q_atoi(var->string);

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_atoi
	add	esp, 4
	mov	DWORD PTR _host+34400, eax
$LN1@Cvar_Chang:

; 276  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Changed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_UnlinkVar
_TEXT	SEGMENT
_var$ = -12						; size = 4
_prev$ = -8						; size = 4
_count$ = -4						; size = 4
_var_name$ = 8						; size = 4
_group$ = 12						; size = 4
_Cvar_UnlinkVar PROC					; COMDAT

; 202  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 203  : 	int	count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 204  : 	convar_t	**prev;
; 205  : 	convar_t	*var;
; 206  : 
; 207  : 	prev = &cvar_vars;

	mov	DWORD PTR _prev$[ebp], OFFSET _cvar_vars
$LN2@Cvar_Unlin:

; 208  : 
; 209  : 	while( 1 )

	mov	eax, 1
	test	eax, eax
	je	$LN3@Cvar_Unlin

; 210  : 	{
; 211  : 		var = *prev;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _var$[ebp], ecx

; 212  : 		if( !var ) break;

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN4@Cvar_Unlin
	jmp	$LN3@Cvar_Unlin
$LN4@Cvar_Unlin:

; 213  : 
; 214  : 		// do filter by name
; 215  : 		if( var_name && Q_strcmp( var->name, var_name ))

	cmp	DWORD PTR _var_name$[ebp], 0
	je	SHORT $LN5@Cvar_Unlin
	push	99999					; 0001869fH
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN5@Cvar_Unlin

; 216  : 		{
; 217  : 			prev = &var->next;

	mov	eax, DWORD PTR _var$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _prev$[ebp], eax

; 218  : 			continue;

	jmp	SHORT $LN2@Cvar_Unlin
$LN5@Cvar_Unlin:

; 219  : 		}
; 220  : 
; 221  : 		// do filter by specified group
; 222  : 		if( group && !FBitSet( var->flags, group ))

	cmp	DWORD PTR _group$[ebp], 0
	je	SHORT $LN6@Cvar_Unlin
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR _group$[ebp]
	jne	SHORT $LN6@Cvar_Unlin

; 223  : 		{
; 224  : 			prev = &var->next;

	mov	eax, DWORD PTR _var$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _prev$[ebp], eax

; 225  : 			continue;

	jmp	SHORT $LN2@Cvar_Unlin
$LN6@Cvar_Unlin:

; 226  : 		}
; 227  : 
; 228  : 		// unlink variable from list
; 229  : 		freestring( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN7@Cvar_Unlin
	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_UnlinkVar@@9@9
	add	eax, 27					; 0000001bH
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN7@Cvar_Unlin:

; 230  : 		*prev = var->next;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx

; 231  : 
; 232  : 		// only allocated cvars can throw these fields
; 233  : 		if( FBitSet( var->flags, FCVAR_ALLOCATED ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 524288				; 00080000H
	je	$LN8@Cvar_Unlin

; 234  : 		{
; 235  : 			freestring( var->name );

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN9@Cvar_Unlin
	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_UnlinkVar@@9@9
	add	eax, 33					; 00000021H
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax], 0
$LN9@Cvar_Unlin:

; 236  : 			freestring( var->def_string );

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN10@Cvar_Unlin
	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_UnlinkVar@@9@9
	add	eax, 34					; 00000022H
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN10@Cvar_Unlin:

; 237  : 			freestring( var->desc );

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN11@Cvar_Unlin
	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_UnlinkVar@@9@9
	add	eax, 35					; 00000023H
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+20], 0
$LN11@Cvar_Unlin:

; 238  : 			Mem_Free( var );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_UnlinkVar@@9@9
	add	eax, 36					; 00000024H
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _var$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN8@Cvar_Unlin:

; 239  : 		}
; 240  : 		count++;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 241  : 	}

	jmp	$LN2@Cvar_Unlin
$LN3@Cvar_Unlin:

; 242  : 
; 243  : 	return count;

	mov	eax, DWORD PTR _count$[ebp]

; 244  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_UnlinkVar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_ValidateString
_TEXT	SEGMENT
$T1 = -88						; size = 4
_len$2 = -20						; size = 4
_szVal$3 = -16						; size = 4
_len$4 = -12						; size = 4
_szVal$5 = -8						; size = 4
_pszValue$ = -4						; size = 4
_var$ = 8						; size = 4
_value$ = 12						; size = 4
_Cvar_ValidateString PROC				; COMDAT

; 137  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 138  : 	const char	*pszValue;
; 139  : 	static char	szNew[MAX_STRING];
; 140  : 
; 141  : 	pszValue = value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _pszValue$[ebp], eax

; 142  : 	szNew[0] = 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 256			; 00000100H
	jae	SHORT $LN12@Cvar_Valid
	jmp	SHORT $LN13@Cvar_Valid
$LN12@Cvar_Valid:
	call	___report_rangecheckfailure
$LN13@Cvar_Valid:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR ?szNew@?1??Cvar_ValidateString@@9@9[edx], 0

; 143  : 
; 144  : 	// this cvar's string must only contain printable characters.
; 145  : 	// strip out any other crap. we'll fill in "empty" if nothing is left
; 146  : 	if( FBitSet( var->flags, FCVAR_PRINTABLEONLY ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 128				; 00000080H
	je	$LN6@Cvar_Valid

; 147  : 	{
; 148  : 		char	*szVal = szNew;

	mov	DWORD PTR _szVal$5[ebp], OFFSET ?szNew@?1??Cvar_ValidateString@@9@9

; 149  : 		int	len = 0;

	mov	DWORD PTR _len$4[ebp], 0
$LN2@Cvar_Valid:

; 150  : 
; 151  : 		// step through the string, only copying back in characters that are printable
; 152  : 		while( *pszValue && len < MAX_STRING )

	mov	eax, DWORD PTR _pszValue$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@Cvar_Valid
	cmp	DWORD PTR _len$4[ebp], 256		; 00000100H
	jge	SHORT $LN3@Cvar_Valid

; 153  : 		{
; 154  : 			if( ((byte)*pszValue) < 32 )

	mov	eax, DWORD PTR _pszValue$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jge	SHORT $LN7@Cvar_Valid

; 155  : 			{
; 156  : 				pszValue++;

	mov	eax, DWORD PTR _pszValue$[ebp]
	add	eax, 1
	mov	DWORD PTR _pszValue$[ebp], eax

; 157  : 				continue;

	jmp	SHORT $LN2@Cvar_Valid
$LN7@Cvar_Valid:

; 158  : 			}
; 159  : 			*szVal++ = *pszValue++;

	mov	eax, DWORD PTR _szVal$5[ebp]
	mov	ecx, DWORD PTR _pszValue$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _szVal$5[ebp]
	add	eax, 1
	mov	DWORD PTR _szVal$5[ebp], eax
	mov	ecx, DWORD PTR _pszValue$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pszValue$[ebp], ecx

; 160  : 			len++;

	mov	eax, DWORD PTR _len$4[ebp]
	add	eax, 1
	mov	DWORD PTR _len$4[ebp], eax

; 161  : 		}

	jmp	SHORT $LN2@Cvar_Valid
$LN3@Cvar_Valid:

; 162  : 
; 163  : 		*szVal = '\0';

	mov	eax, DWORD PTR _szVal$5[ebp]
	mov	BYTE PTR [eax], 0

; 164  : 		pszValue = szNew;

	mov	DWORD PTR _pszValue$[ebp], OFFSET ?szNew@?1??Cvar_ValidateString@@9@9

; 165  : 
; 166  : 		// g-cont. is this even need?
; 167  : 		if( !Q_strlen( szNew )) Q_strncpy( szNew, "empty", sizeof( szNew ));

	push	OFFSET ?szNew@?1??Cvar_ValidateString@@9@9
	call	_Q_strlen
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@Cvar_Valid
	push	256					; 00000100H
	push	OFFSET ??_C@_05LBJMNBOG@empty@
	push	OFFSET ?szNew@?1??Cvar_ValidateString@@9@9
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
$LN6@Cvar_Valid:

; 168  : 	}
; 169  : 
; 170  : 	if( FBitSet( var->flags, FCVAR_NOEXTRAWHITEPACE ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 512				; 00000200H
	je	SHORT $LN9@Cvar_Valid

; 171  : 	{
; 172  : 		char	*szVal = szNew;

	mov	DWORD PTR _szVal$3[ebp], OFFSET ?szNew@?1??Cvar_ValidateString@@9@9

; 173  : 		int	len = 0;

	mov	DWORD PTR _len$2[ebp], 0
$LN4@Cvar_Valid:

; 174  : 
; 175  : 		// step through the string, only copying back in characters that are printable
; 176  : 		while( *pszValue && len < MAX_STRING )

	mov	eax, DWORD PTR _pszValue$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@Cvar_Valid
	cmp	DWORD PTR _len$2[ebp], 256		; 00000100H
	jge	SHORT $LN5@Cvar_Valid

; 177  : 		{
; 178  : 			if( *pszValue == ' ' )

	mov	eax, DWORD PTR _pszValue$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN10@Cvar_Valid

; 179  : 			{
; 180  : 				pszValue++;

	mov	eax, DWORD PTR _pszValue$[ebp]
	add	eax, 1
	mov	DWORD PTR _pszValue$[ebp], eax

; 181  : 				continue;

	jmp	SHORT $LN4@Cvar_Valid
$LN10@Cvar_Valid:

; 182  : 			}
; 183  : 			*szVal++ = *pszValue++;

	mov	eax, DWORD PTR _szVal$3[ebp]
	mov	ecx, DWORD PTR _pszValue$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _szVal$3[ebp]
	add	eax, 1
	mov	DWORD PTR _szVal$3[ebp], eax
	mov	ecx, DWORD PTR _pszValue$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pszValue$[ebp], ecx

; 184  : 			len++;

	mov	eax, DWORD PTR _len$2[ebp]
	add	eax, 1
	mov	DWORD PTR _len$2[ebp], eax

; 185  : 		}

	jmp	SHORT $LN4@Cvar_Valid
$LN5@Cvar_Valid:

; 186  : 
; 187  : 		*szVal = '\0';

	mov	eax, DWORD PTR _szVal$3[ebp]
	mov	BYTE PTR [eax], 0

; 188  : 		pszValue = szNew;

	mov	DWORD PTR _pszValue$[ebp], OFFSET ?szNew@?1??Cvar_ValidateString@@9@9
$LN9@Cvar_Valid:

; 189  : 	}
; 190  : 
; 191  : 	return pszValue;

	mov	eax, DWORD PTR _pszValue$[ebp]
$LN11@Cvar_Valid:

; 192  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_ValidateString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_UpdateInfo
_TEXT	SEGMENT
_var$ = 8						; size = 4
_value$ = 12						; size = 4
_notify$ = 16						; size = 4
_Cvar_UpdateInfo PROC					; COMDAT

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 91   : 	if( FBitSet( var->flags, FCVAR_USERINFO ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	je	SHORT $LN2@Cvar_Updat

; 92   : 	{
; 93   : 		if ( host.type == HOST_DEDICATED )

	cmp	DWORD PTR _host+164, 1
	jne	SHORT $LN3@Cvar_Updat

; 94   : 		{
; 95   : 			// g-cont. this is a very strange behavior...
; 96   : 			Info_SetValueForKey( SV_Serverinfo(), var->name, value, MAX_SERVERINFO_STRING ),

	push	512					; 00000200H
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_SV_Serverinfo
	push	eax
	call	_Info_SetValueForKey
	add	esp, 16					; 00000010H
	call	_SV_Serverinfo
	push	eax
	push	OFFSET ??_C@_0BF@FKGNFJNH@fullserverinfo?5?$CC?$CFs?$CC?6@
	call	_SV_BroadcastCommand
	add	esp, 8

; 97   : 			SV_BroadcastCommand( "fullserverinfo \"%s\"\n", SV_Serverinfo( ));
; 98   : 		}

	jmp	SHORT $LN2@Cvar_Updat
$LN3@Cvar_Updat:

; 99   : 		else
; 100  : 		{
; 101  : 			if( !Info_SetValueForKey( CL_Userinfo(), var->name, value, MAX_INFO_STRING ))

	push	256					; 00000100H
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CL_Userinfo
	push	eax
	call	_Info_SetValueForKey
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN5@Cvar_Updat

; 102  : 				return false; // failed to change value

	xor	eax, eax
	jmp	$LN1@Cvar_Updat
$LN5@Cvar_Updat:

; 103  : 
; 104  : 			// time to update server copy of userinfo
; 105  : 			CL_ServerCommand( true, "setinfo \"%s\" \"%s\"\n", var->name, value );

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_0BD@NFJFLDNN@setinfo?5?$CC?$CFs?$CC?5?$CC?$CFs?$CC?6@
	push	1
	call	_CL_ServerCommand
	add	esp, 16					; 00000010H
$LN2@Cvar_Updat:

; 106  : 		}
; 107  : 	}
; 108  : 
; 109  : 	if( FBitSet( var->flags, FCVAR_SERVER ) && notify )

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 4
	je	$LN6@Cvar_Updat
	cmp	DWORD PTR _notify$[ebp], 0
	je	SHORT $LN6@Cvar_Updat

; 110  : 	{
; 111  : 		if( !FBitSet( var->flags, FCVAR_UNLOGGED ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 256				; 00000100H
	jne	SHORT $LN6@Cvar_Updat

; 112  : 		{
; 113  : 			if( FBitSet( var->flags, FCVAR_PROTECTED ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN8@Cvar_Updat

; 114  : 			{
; 115  : 				Log_Printf( "Server cvar \"%s\" = \"%s\"\n", var->name, "***PROTECTED***" );

	push	OFFSET ??_C@_0BA@KPIBMHDJ@?$CK?$CK?$CKPROTECTED?$CK?$CK?$CK@
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0BJ@KCLPALDI@Server?5cvar?5?$CC?$CFs?$CC?5?$DN?5?$CC?$CFs?$CC?6@
	call	_Log_Printf
	add	esp, 12					; 0000000cH

; 116  : 				SV_BroadcastPrintf( NULL, "\"%s\" changed to \"%s\"\n", var->name, "***PROTECTED***" );

	push	OFFSET ??_C@_0BA@KPIBMHDJ@?$CK?$CK?$CKPROTECTED?$CK?$CK?$CK@
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0BG@KOLAHKHP@?$CC?$CFs?$CC?5changed?5to?5?$CC?$CFs?$CC?6@
	push	0
	call	_SV_BroadcastPrintf
	add	esp, 16					; 00000010H

; 117  : 			}

	jmp	SHORT $LN6@Cvar_Updat
$LN8@Cvar_Updat:

; 118  : 			else
; 119  : 			{
; 120  : 				Log_Printf( "Server cvar \"%s\" = \"%s\"\n", var->name, value );

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_0BJ@KCLPALDI@Server?5cvar?5?$CC?$CFs?$CC?5?$DN?5?$CC?$CFs?$CC?6@
	call	_Log_Printf
	add	esp, 12					; 0000000cH

; 121  : 				SV_BroadcastPrintf( NULL, "\"%s\" changed to \"%s\"\n", var->name, value );

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_0BG@KOLAHKHP@?$CC?$CFs?$CC?5changed?5to?5?$CC?$CFs?$CC?6@
	push	0
	call	_SV_BroadcastPrintf
	add	esp, 16					; 00000010H
$LN6@Cvar_Updat:

; 122  : 			}
; 123  : 		}
; 124  : 	}
; 125  : 
; 126  : 	return true;

	mov	eax, 1
$LN1@Cvar_Updat:

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_UpdateInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_Unlink
_TEXT	SEGMENT
_count$ = -4						; size = 4
_group$ = 8						; size = 4
_Cvar_Unlink PROC					; COMDAT

; 856  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 857  : 	int	count;
; 858  : 
; 859  : 	if( Cvar_VariableInteger( "host_gameloaded" ) && FBitSet( group, FCVAR_EXTDLL ))

	push	OFFSET ??_C@_0BA@HFMOEDOL@host_gameloaded@
	call	_Cvar_VariableInteger
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@Cvar_Unlin
	mov	eax, DWORD PTR _group$[ebp]
	and	eax, 8
	je	SHORT $LN2@Cvar_Unlin

; 860  : 		return;

	jmp	SHORT $LN1@Cvar_Unlin
$LN2@Cvar_Unlin:

; 861  : 
; 862  : 	if( Cvar_VariableInteger( "host_clientloaded" ) && FBitSet( group, FCVAR_CLIENTDLL ))

	push	OFFSET ??_C@_0BC@CKKMCGJ@host_clientloaded@
	call	_Cvar_VariableInteger
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@Cvar_Unlin
	mov	eax, DWORD PTR _group$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN3@Cvar_Unlin

; 863  : 		return;

	jmp	SHORT $LN1@Cvar_Unlin
$LN3@Cvar_Unlin:

; 864  : 
; 865  : 	if( Cvar_VariableInteger( "host_gameuiloaded" ) && FBitSet( group, FCVAR_GAMEUIDLL ))

	push	OFFSET ??_C@_0BC@CFEOCCMF@host_gameuiloaded@
	call	_Cvar_VariableInteger
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@Cvar_Unlin
	mov	eax, DWORD PTR _group$[ebp]
	and	eax, 16384				; 00004000H
	je	SHORT $LN4@Cvar_Unlin

; 866  : 		return;

	jmp	SHORT $LN1@Cvar_Unlin
$LN4@Cvar_Unlin:

; 867  : 
; 868  : 	count = Cvar_UnlinkVar( NULL, group );

	mov	eax, DWORD PTR _group$[ebp]
	push	eax
	push	0
	call	_Cvar_UnlinkVar
	add	esp, 8
	mov	DWORD PTR _count$[ebp], eax

; 869  : 	Con_Reportf( "unlink %i cvars\n", count );

	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	OFFSET ??_C@_0BB@LPBLHHDA@unlink?5?$CFi?5cvars?6@
	call	_Con_Reportf
	add	esp, 8
$LN1@Cvar_Unlin:

; 870  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Unlink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_Init
_TEXT	SEGMENT
_Cvar_Init PROC						; COMDAT

; 880  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 881  : 	cvar_vars = NULL;

	mov	DWORD PTR _cvar_vars, 0

; 882  : 	cmd_scripting = Cvar_Get( "cmd_scripting", "0", FCVAR_ARCHIVE, "enable simple condition checking and variable operations" );

	push	OFFSET ??_C@_0DJ@BDPGICHD@enable?5simple?5condition?5checkin@
	push	1
	push	OFFSET ??_C@_01GBGANLPD@0@
	push	OFFSET ??_C@_0O@PGFFBMFD@cmd_scripting@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cmd_scripting, eax

; 883  : 	Cvar_RegisterVariable (&host_developer); // early registering for dev 

	push	OFFSET _host_developer
	call	_Cvar_RegisterVariable
	add	esp, 4

; 884  : 
; 885  : 	Cmd_AddCommand( "setgl", Cvar_SetGL_f, "create or change the value of a opengl variable" );	// OBSOLETE

	push	OFFSET ??_C@_0DA@GBFDNONP@create?5or?5change?5the?5value?5of?5a@
	push	OFFSET _Cvar_SetGL_f
	push	OFFSET ??_C@_05PCNEBHML@setgl@
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 886  : 	Cmd_AddCommand( "toggle", Cvar_Toggle_f, "toggles a console variable's values (use for more info)" );

	push	OFFSET ??_C@_0DI@JKEPBPAM@toggles?5a?5console?5variable?8s?5va@
	push	OFFSET _Cvar_Toggle_f
	push	OFFSET ??_C@_06FHLCKAHH@toggle@
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 887  : 	Cmd_AddCommand( "reset", Cvar_Reset_f, "reset any type variable to initial value" );

	push	OFFSET ??_C@_0CJ@PNMLKJHL@reset?5any?5type?5variable?5to?5init@
	push	OFFSET _Cvar_Reset_f
	push	OFFSET ??_C@_05CFMALAOA@reset@
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 888  : 	Cmd_AddCommand( "cvarlist", Cvar_List_f, "display all console variables beginning with the specified prefix" );

	push	OFFSET ??_C@_0EC@MGNJIILL@display?5all?5console?5variables?5b@
	push	OFFSET _Cvar_List_f
	push	OFFSET ??_C@_08HKAEGNIC@cvarlist@
	call	_Cmd_AddCommand
	add	esp, 12					; 0000000cH

; 889  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_Command
_TEXT	SEGMENT
_v$ = -4						; size = 4
_Cvar_Command PROC					; COMDAT

; 692  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 693  : 	convar_t	*v;
; 694  : 
; 695  : 	// special case for setup opengl configuration
; 696  : 	if( host.apply_opengl_config )

	cmp	DWORD PTR _host+34392, 0
	je	SHORT $LN2@Cvar_Comma

; 697  : 	{
; 698  : 		Cvar_FullSet( Cmd_Argv( 0 ), Cmd_Argv( 1 ), FCVAR_GLCONFIG );

	push	4096					; 00001000H
	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	0
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Cvar_FullSet
	add	esp, 12					; 0000000cH

; 699  : 		return true;

	mov	eax, 1
	jmp	$LN1@Cvar_Comma
$LN2@Cvar_Comma:

; 700  : 	}
; 701  : 
; 702  : 	// check variables
; 703  : 	v = Cvar_FindVar( Cmd_Argv( 0 ));

	push	0
	push	0
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _v$[ebp], eax

; 704  : 	if( !v ) return false;

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@Cvar_Comma
	xor	eax, eax
	jmp	$LN1@Cvar_Comma
$LN3@Cvar_Comma:

; 705  : 
; 706  : 	// perform a variable print or set
; 707  : 	if( Cmd_Argc() == 1 )

	call	_Cmd_Argc
	cmp	eax, 1
	jne	SHORT $LN4@Cvar_Comma

; 708  : 	{
; 709  : 		if( FBitSet( v->flags, FCVAR_ALLOCATED|FCVAR_EXTENDED ))

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 786432				; 000c0000H
	je	SHORT $LN5@Cvar_Comma

; 710  : 			Con_Printf( "\"%s\" is \"%s\" ( ^3\"%s\"^7 )\n", v->name, v->string, v->def_string );

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_0BL@HMMCCENM@?$CC?$CFs?$CC?5is?5?$CC?$CFs?$CC?5?$CI?5?$FO3?$CC?$CFs?$CC?$FO7?5?$CJ?6@
	call	_Con_Printf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN6@Cvar_Comma
$LN5@Cvar_Comma:

; 711  : 		else Con_Printf( "\"%s\" is \"%s\"\n", v->name, v->string );

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET ??_C@_0O@IICNENEG@?$CC?$CFs?$CC?5is?5?$CC?$CFs?$CC?6@
	call	_Con_Printf
	add	esp, 12					; 0000000cH
$LN6@Cvar_Comma:

; 712  : 
; 713  : 		return true;

	mov	eax, 1
	jmp	SHORT $LN1@Cvar_Comma
$LN4@Cvar_Comma:

; 714  : 	}
; 715  : 
; 716  : 	if( host.apply_game_config )

	cmp	DWORD PTR _host+34388, 0
	je	SHORT $LN7@Cvar_Comma

; 717  : 	{
; 718  : 		if( !FBitSet( v->flags, FCVAR_EXTDLL ))

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	jne	SHORT $LN7@Cvar_Comma

; 719  : 			return true; // only game.dll cvars passed

	mov	eax, 1
	jmp	SHORT $LN1@Cvar_Comma
$LN7@Cvar_Comma:

; 720  : 	}
; 721  : 
; 722  : 	if( FBitSet( v->flags, FCVAR_SPONLY ) && CL_GetMaxClients() > 1 )

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 64					; 00000040H
	je	SHORT $LN9@Cvar_Comma
	call	_CL_GetMaxClients
	cmp	eax, 1
	jle	SHORT $LN9@Cvar_Comma

; 723  : 	{
; 724  : 		Con_Printf( "can't set \"%s\" in multiplayer\n", v->name );

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0BP@CMJJPGBI@can?8t?5set?5?$CC?$CFs?$CC?5in?5multiplayer?6@
	call	_Con_Printf
	add	esp, 8

; 725  : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@Cvar_Comma

; 726  : 	}

	jmp	SHORT $LN1@Cvar_Comma
$LN9@Cvar_Comma:

; 727  : 	else
; 728  : 	{
; 729  : 		Cvar_DirectSet( v, Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_Cvar_DirectSet
	add	esp, 8

; 730  : 		if( host.apply_game_config )

	cmp	DWORD PTR _host+34388, 0
	je	SHORT $LN11@Cvar_Comma

; 731  : 			host.sv_cvars_restored++;

	mov	eax, DWORD PTR _host+34404
	add	eax, 1
	mov	DWORD PTR _host+34404, eax
$LN11@Cvar_Comma:

; 732  : 		return true;

	mov	eax, 1
$LN1@Cvar_Comma:

; 733  : 	}
; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Command ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_SetCheatState
_TEXT	SEGMENT
_var$ = -4						; size = 4
_Cvar_SetCheatState PROC				; COMDAT

; 666  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 667  : 	convar_t	*var;
; 668  : 
; 669  : 	// set all default vars to the safe value
; 670  : 	for( var = cvar_vars; var; var = var->next )

	mov	eax, DWORD PTR _cvar_vars
	mov	DWORD PTR _var$[ebp], eax
	jmp	SHORT $LN4@Cvar_SetCh
$LN2@Cvar_SetCh:
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _var$[ebp], ecx
$LN4@Cvar_SetCh:
	cmp	DWORD PTR _var$[ebp], 0
	je	SHORT $LN1@Cvar_SetCh

; 671  : 	{
; 672  : 		// can't process dll cvars - missed def_string
; 673  : 		if( !FBitSet( var->flags, FCVAR_ALLOCATED|FCVAR_EXTENDED ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 786432				; 000c0000H
	jne	SHORT $LN5@Cvar_SetCh

; 674  : 			continue;

	jmp	SHORT $LN2@Cvar_SetCh
$LN5@Cvar_SetCh:

; 675  : 
; 676  : 		if( FBitSet( var->flags, FCVAR_CHEAT ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Cvar_SetCh

; 677  : 		{
; 678  : 			if( Q_strcmp( var->def_string, var->string ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@Cvar_SetCh

; 679  : 				Cvar_DirectSet( var, var->def_string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	push	edx
	call	_Cvar_DirectSet
	add	esp, 8
$LN6@Cvar_SetCh:

; 680  : 		}
; 681  : 	}

	jmp	SHORT $LN2@Cvar_SetCh
$LN1@Cvar_SetCh:

; 682  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_SetCheatState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_Reset
_TEXT	SEGMENT
_var_name$ = 8						; size = 4
_Cvar_Reset PROC					; COMDAT

; 597  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 598  : 	Cvar_Set( var_name, NULL );

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_Set
	add	esp, 8

; 599  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_Exists
_TEXT	SEGMENT
_var_name$ = 8						; size = 4
_Cvar_Exists PROC					; COMDAT

; 652  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 653  : 	if( Cvar_FindVar( var_name ))

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@Cvar_Exist

; 654  : 		return true;

	mov	eax, 1
	jmp	SHORT $LN1@Cvar_Exist
$LN2@Cvar_Exist:

; 655  : 	return false;

	xor	eax, eax
$LN1@Cvar_Exist:

; 656  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Exists ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_WriteVariables
_TEXT	SEGMENT
_var$ = -4						; size = 4
_f$ = 8							; size = 4
_group$ = 12						; size = 4
_Cvar_WriteVariables PROC				; COMDAT

; 745  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 746  : 	convar_t	*var;
; 747  : 	
; 748  : 	for( var = cvar_vars; var; var = var->next )

	mov	eax, DWORD PTR _cvar_vars
	mov	DWORD PTR _var$[ebp], eax
	jmp	SHORT $LN4@Cvar_Write
$LN2@Cvar_Write:
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _var$[ebp], ecx
$LN4@Cvar_Write:
	cmp	DWORD PTR _var$[ebp], 0
	je	SHORT $LN1@Cvar_Write

; 749  : 	{
; 750  : 		if( FBitSet( var->flags, group ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR _group$[ebp]
	je	SHORT $LN5@Cvar_Write

; 751  : 			FS_Printf( f, "%s \"%s\"\n", var->name, var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET ??_C@_08MHBLPCGN@?$CFs?5?$CC?$CFs?$CC?6@
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	_FS_Printf
	add	esp, 16					; 00000010H
$LN5@Cvar_Write:

; 752  : 	}

	jmp	SHORT $LN2@Cvar_Write
$LN1@Cvar_Write:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_WriteVariables ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_VariableString
_TEXT	SEGMENT
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_Cvar_VariableString PROC				; COMDAT

; 637  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 638  : 	convar_t	*var;
; 639  : 
; 640  : 	var = Cvar_FindVar( var_name );

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _var$[ebp], eax

; 641  : 	if( !var ) return "";

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN2@Cvar_Varia
	mov	eax, OFFSET ??_C@_00CNPNBAHC@@
	jmp	SHORT $LN1@Cvar_Varia
$LN2@Cvar_Varia:

; 642  : 
; 643  : 	return var->string;

	mov	eax, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN1@Cvar_Varia:

; 644  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_VariableString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_VariableInteger
_TEXT	SEGMENT
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_Cvar_VariableInteger PROC				; COMDAT

; 622  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 623  : 	convar_t	*var;
; 624  : 
; 625  : 	var = Cvar_FindVar( var_name );

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _var$[ebp], eax

; 626  : 	if( !var ) return 0;

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN2@Cvar_Varia
	xor	eax, eax
	jmp	SHORT $LN1@Cvar_Varia
$LN2@Cvar_Varia:

; 627  : 
; 628  : 	return Q_atoi( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_atoi
	add	esp, 4
$LN1@Cvar_Varia:

; 629  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_VariableInteger ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_VariableValue
_TEXT	SEGMENT
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_Cvar_VariableValue PROC				; COMDAT

; 607  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 608  : 	convar_t	*var;
; 609  : 
; 610  : 	var = Cvar_FindVar( var_name );

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _var$[ebp], eax

; 611  : 	if( !var ) return 0.0f;

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN2@Cvar_Varia
	fldz
	jmp	SHORT $LN1@Cvar_Varia
$LN2@Cvar_Varia:

; 612  : 
; 613  : 	return Q_atof( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_atof
	add	esp, 4
$LN1@Cvar_Varia:

; 614  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_VariableValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_BuildAutoDescription
_TEXT	SEGMENT
$T1 = -68						; size = 4
_flags$ = 8						; size = 4
_Cvar_BuildAutoDescription PROC				; COMDAT

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 57   : 	static char	desc[128];
; 58   : 
; 59   : 	desc[0] = '\0';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 128			; 00000080H
	jae	SHORT $LN11@Cvar_Build
	jmp	SHORT $LN12@Cvar_Build
$LN11@Cvar_Build:
	call	___report_rangecheckfailure
$LN12@Cvar_Build:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR ?desc@?1??Cvar_BuildAutoDescription@@9@9[edx], 0

; 60   : 
; 61   : 	if( FBitSet( flags, FCVAR_EXTDLL ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 8
	je	SHORT $LN2@Cvar_Build

; 62   : 		Q_strncpy( desc, "game ", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET ??_C@_05ONEKDNPE@game?5@
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN3@Cvar_Build
$LN2@Cvar_Build:

; 63   : 	else if( FBitSet( flags, FCVAR_CLIENTDLL ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN4@Cvar_Build

; 64   : 		Q_strncpy( desc, "client ", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET ??_C@_07OLADGDOO@client?5@
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN3@Cvar_Build
$LN4@Cvar_Build:

; 65   : 	else if( FBitSet( flags, FCVAR_GAMEUIDLL ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 16384				; 00004000H
	je	SHORT $LN3@Cvar_Build

; 66   : 		Q_strncpy( desc, "GameUI ", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET ??_C@_07GHOACFPH@GameUI?5@
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
$LN3@Cvar_Build:

; 67   : 
; 68   : 	if( FBitSet( flags, FCVAR_SERVER ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4
	je	SHORT $LN7@Cvar_Build

; 69   : 		Q_strncat( desc, "server ", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET ??_C@_07JPPNPDKP@server?5@
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncat
	add	esp, 12					; 0000000cH
$LN7@Cvar_Build:

; 70   : 
; 71   : 	if( FBitSet( flags, FCVAR_USERINFO ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 2
	je	SHORT $LN8@Cvar_Build

; 72   : 		Q_strncat( desc, "user ", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET ??_C@_05GFKJMHJM@user?5@
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncat
	add	esp, 12					; 0000000cH
$LN8@Cvar_Build:

; 73   : 
; 74   : 	if( FBitSet( flags, FCVAR_ARCHIVE ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1
	je	SHORT $LN9@Cvar_Build

; 75   : 		Q_strncat( desc, "archived ", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET ??_C@_09JFPDLNNM@archived?5@
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncat
	add	esp, 12					; 0000000cH
$LN9@Cvar_Build:

; 76   : 
; 77   : 	Q_strncat( desc, "cvar", sizeof( desc ));

	push	128					; 00000080H
	push	OFFSET ??_C@_04PNAHEAFM@cvar@
	push	OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
	call	_Q_strncat
	add	esp, 12					; 0000000cH

; 78   : 
; 79   : 	return desc;

	mov	eax, OFFSET ?desc@?1??Cvar_BuildAutoDescription@@9@9
$LN10@Cvar_Build:

; 80   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_BuildAutoDescription ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_SetValue
_TEXT	SEGMENT
tv88 = -108						; size = 8
_val$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_var_name$ = 8						; size = 4
_value$ = 12						; size = 4
_Cvar_SetValue PROC					; COMDAT

; 581  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 582  : 	char	val[32];
; 583  : 	
; 584  : 	if( fabs( value - (int)value ) < 0.000001 )

	cvttss2si eax, DWORD PTR _value$[ebp]
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _value$[ebp]
	subss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv88[ebp]
	movsd	xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
	comisd	xmm0, QWORD PTR tv88[ebp]
	jbe	SHORT $LN2@Cvar_SetVa

; 585  : 		Q_snprintf( val, sizeof( val ), "%d", (int)value );

	cvttss2si eax, DWORD PTR _value$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd@
	push	32					; 00000020H
	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	_Q_snprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@Cvar_SetVa
$LN2@Cvar_SetVa:

; 586  : 	else Q_snprintf( val, sizeof( val ), "%f", value );

	cvtss2sd xmm0, DWORD PTR _value$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02NJPGOMH@?$CFf@
	push	32					; 00000020H
	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_Q_snprintf
	add	esp, 20					; 00000014H
$LN3@Cvar_SetVa:

; 587  : 
; 588  : 	Cvar_Set( var_name, val );

	lea	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var_name$[ebp]
	push	ecx
	call	_Cvar_Set
	add	esp, 8

; 589  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_SetValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_Set
_TEXT	SEGMENT
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_value$ = 12						; size = 4
_Cvar_Set PROC						; COMDAT

; 562  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 563  : 	convar_t	*var = Cvar_FindVar( var_name );

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _var$[ebp], eax

; 564  : 
; 565  : 	if( !var )

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN2@Cvar_Set

; 566  : 	{
; 567  : 		// there is an error in C code if this happens
; 568  : 		Con_Printf( "Cvar_Set: variable '%s' not found\n", var_name );

	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	push	OFFSET ??_C@_0CD@JNJDEPON@Cvar_Set?3?5variable?5?8?$CFs?8?5not?5fou@
	call	_Con_Printf
	add	esp, 8

; 569  : 		return;

	jmp	SHORT $LN1@Cvar_Set
$LN2@Cvar_Set:

; 570  : 	}
; 571  : 
; 572  : 	Cvar_DirectSet( var, value );

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	push	ecx
	call	_Cvar_DirectSet
	add	esp, 8
$LN1@Cvar_Set:

; 573  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_DirectSet
_TEXT	SEGMENT
_pszValue$ = -4						; size = 4
_var$ = 8						; size = 4
_value$ = 12						; size = 4
_Cvar_DirectSet PROC					; COMDAT

; 467  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 468  : 	const char	*pszValue;
; 469  : 	
; 470  : 	if( !var ) return;	// ???

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN2@Cvar_Direc
	jmp	$LN1@Cvar_Direc
$LN2@Cvar_Direc:

; 471  : 
; 472  : 	// lookup for registration
; 473  : 	if( CVAR_CHECK_SENTINEL( var ) || ( var->next == NULL && !FBitSet( var->flags, FCVAR_EXTENDED|FCVAR_ALLOCATED )))

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+16], -559038737		; deadbeefH
	je	SHORT $LN4@Cvar_Direc
	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN3@Cvar_Direc
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 786432				; 000c0000H
	jne	SHORT $LN3@Cvar_Direc
$LN4@Cvar_Direc:

; 474  : 	{
; 475  : 		// need to registering cvar fisrt
; 476  : 		Cvar_RegisterVariable( var );	// ok, register it

	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	_Cvar_RegisterVariable
	add	esp, 4
$LN3@Cvar_Direc:

; 477  : 	}
; 478  : 
; 479  : 	// lookup for registration again
; 480  : 	if( var != Cvar_FindVar( var->name ))

	push	0
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Cvar_FindVarExt
	add	esp, 8
	cmp	DWORD PTR _var$[ebp], eax
	je	SHORT $LN5@Cvar_Direc

; 481  : 		return; // how this possible?

	jmp	$LN1@Cvar_Direc
$LN5@Cvar_Direc:

; 482  : 
; 483  : 	if( FBitSet( var->flags, FCVAR_READ_ONLY|FCVAR_GLCONFIG ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 135168				; 00021000H
	je	SHORT $LN6@Cvar_Direc

; 484  : 	{
; 485  : 		Con_Printf( "%s is read-only.\n", var->name );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0BC@GJJHMBGE@?$CFs?5is?5read?9only?4?6@
	call	_Con_Printf
	add	esp, 8

; 486  : 		return;

	jmp	$LN1@Cvar_Direc
$LN6@Cvar_Direc:

; 487  : 	}
; 488  : 	
; 489  : 	if( FBitSet( var->flags, FCVAR_CHEAT ) && !host.allow_cheats )

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN7@Cvar_Direc
	cmp	DWORD PTR _host+34352, 0
	jne	SHORT $LN7@Cvar_Direc

; 490  : 	{
; 491  : 		Con_Printf( "%s is cheat protected.\n", var->name );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0BI@NNDBDFOI@?$CFs?5is?5cheat?5protected?4?6@
	call	_Con_Printf
	add	esp, 8

; 492  : 		return;

	jmp	$LN1@Cvar_Direc
$LN7@Cvar_Direc:

; 493  : 	}
; 494  : 
; 495  : 	// just tell user about deferred changes
; 496  : 	if( FBitSet( var->flags, FCVAR_LATCH ) && ( SV_Active() || CL_Active( )))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2048				; 00000800H
	je	SHORT $LN8@Cvar_Direc
	call	_SV_Active
	test	eax, eax
	jne	SHORT $LN9@Cvar_Direc
	call	_CL_Active
	test	eax, eax
	je	SHORT $LN8@Cvar_Direc
$LN9@Cvar_Direc:

; 497  : 		Con_Printf( "%s will be changed upon restarting.\n", var->name );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0CF@MMBKLCAG@?$CFs?5will?5be?5changed?5upon?5restart@
	call	_Con_Printf
	add	esp, 8
$LN8@Cvar_Direc:

; 498  : 
; 499  : 	// check value
; 500  : 	if( !value )

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN10@Cvar_Direc

; 501  : 	{
; 502  : 		if( !FBitSet( var->flags, FCVAR_EXTENDED|FCVAR_ALLOCATED ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 786432				; 000c0000H
	jne	SHORT $LN11@Cvar_Direc

; 503  : 		{
; 504  : 			Con_Printf( "%s has no default value and can't be reset.\n", var->name );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0CN@DNGIKKAG@?$CFs?5has?5no?5default?5value?5and?5can@
	call	_Con_Printf
	add	esp, 8

; 505  : 			return;

	jmp	$LN1@Cvar_Direc
$LN11@Cvar_Direc:

; 506  : 		}
; 507  : 
; 508  : 		value = var->def_string; // reset to default value

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _value$[ebp], ecx
$LN10@Cvar_Direc:

; 509  : 	}
; 510  : 
; 511  : 	pszValue = Cvar_ValidateString( var, value );

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	push	ecx
	call	_Cvar_ValidateString
	add	esp, 8
	mov	DWORD PTR _pszValue$[ebp], eax

; 512  : 
; 513  : 	// nothing to change
; 514  : 	if( !Q_strcmp( pszValue, var->string ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pszValue$[ebp]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@Cvar_Direc

; 515  : 		return;

	jmp	$LN1@Cvar_Direc
$LN12@Cvar_Direc:

; 516  : 
; 517  : 	// fill it cls.userinfo, svs.serverinfo
; 518  : 	if( !Cvar_UpdateInfo( var, pszValue, true ))

	push	1
	mov	eax, DWORD PTR _pszValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	push	ecx
	call	_Cvar_UpdateInfo
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN13@Cvar_Direc

; 519  : 		return;

	jmp	SHORT $LN1@Cvar_Direc
$LN13@Cvar_Direc:

; 520  : 
; 521  : 	// and finally changed the cvar itself
; 522  : 	freestring( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN14@Cvar_Direc
	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_DirectSet@@9@9
	add	eax, 55					; 00000037H
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN14@Cvar_Direc:

; 523  : 	var->string = copystring( pszValue );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_DirectSet@@9@9
	add	eax, 56					; 00000038H
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _pszValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 524  : 	var->value = Q_atof( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_atof
	add	esp, 4
	mov	edx, DWORD PTR _var$[ebp]
	fstp	DWORD PTR [edx+12]

; 525  : 
; 526  : 	// tell engine about changes
; 527  : 	Cvar_Changed( var );

	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	_Cvar_Changed
	add	esp, 4
$LN1@Cvar_Direc:

; 528  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_DirectSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_FullSet
_TEXT	SEGMENT
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_value$ = 12						; size = 4
_flags$ = 16						; size = 4
_Cvar_FullSet PROC					; COMDAT

; 538  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 539  : 	convar_t	*var = Cvar_FindVar( var_name );

	push	0
	mov	eax, DWORD PTR _var_name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _var$[ebp], eax

; 540  : 
; 541  : 	if( !var )

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN2@Cvar_FullS

; 542  : 	{
; 543  : 		Cvar_Get( var_name, value, flags, "" );

	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _var_name$[ebp]
	push	edx
	call	_Cvar_Get
	add	esp, 16					; 00000010H

; 544  : 		return;

	jmp	$LN1@Cvar_FullS
$LN2@Cvar_FullS:

; 545  : 	}
; 546  : 
; 547  : 	freestring( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Cvar_FullS
	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_FullSet@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN3@Cvar_FullS:

; 548  : 	var->string = copystring( value );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_FullSet@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 549  : 	var->value = Q_atof( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_atof
	add	esp, 4
	mov	edx, DWORD PTR _var$[ebp]
	fstp	DWORD PTR [edx+12]

; 550  : 	SetBits( var->flags, flags );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 551  : 
; 552  : 	// tell engine about changes
; 553  : 	Cvar_Changed( var );

	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	_Cvar_Changed
	add	esp, 4
$LN1@Cvar_FullS:

; 554  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_FullSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_LookupVars
_TEXT	SEGMENT
_var$ = -4						; size = 4
_checkbit$ = 8						; size = 4
_buffer$ = 12						; size = 4
_ptr$ = 16						; size = 4
_callback$ = 20						; size = 4
_Cvar_LookupVars PROC					; COMDAT

; 284  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 285  : 	convar_t	*var;
; 286  : 
; 287  : 	// nothing to process ?
; 288  : 	if( !callback ) return;

	cmp	DWORD PTR _callback$[ebp], 0
	jne	SHORT $LN5@Cvar_Looku
	jmp	$LN1@Cvar_Looku
$LN5@Cvar_Looku:

; 289  : 
; 290  : 	// force checkbit to 0 for lookup all cvars
; 291  : 	for( var = cvar_vars; var; var = var->next )

	mov	eax, DWORD PTR _cvar_vars
	mov	DWORD PTR _var$[ebp], eax
	jmp	SHORT $LN4@Cvar_Looku
$LN2@Cvar_Looku:
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _var$[ebp], ecx
$LN4@Cvar_Looku:
	cmp	DWORD PTR _var$[ebp], 0
	je	$LN1@Cvar_Looku

; 292  : 	{
; 293  : 		if( checkbit && !FBitSet( var->flags, checkbit ))

	cmp	DWORD PTR _checkbit$[ebp], 0
	je	SHORT $LN6@Cvar_Looku
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, DWORD PTR _checkbit$[ebp]
	jne	SHORT $LN6@Cvar_Looku

; 294  : 			continue;

	jmp	SHORT $LN2@Cvar_Looku
$LN6@Cvar_Looku:

; 295  : 
; 296  : 		if( buffer )

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN7@Cvar_Looku

; 297  : 		{
; 298  : 			callback( var->name, var->string, buffer, ptr );

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _callback$[ebp]
	add	esp, 16					; 00000010H

; 299  : 		}

	jmp	SHORT $LN8@Cvar_Looku
$LN7@Cvar_Looku:

; 300  : 		else
; 301  : 		{
; 302  : 			// NOTE: dlls cvars doesn't have description
; 303  : 			if( FBitSet( var->flags, FCVAR_ALLOCATED|FCVAR_EXTENDED ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 786432				; 000c0000H
	je	SHORT $LN9@Cvar_Looku

; 304  : 				callback( var->name, var->string, var->desc, ptr );

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR _callback$[ebp]
	add	esp, 16					; 00000010H
	jmp	SHORT $LN8@Cvar_Looku
$LN9@Cvar_Looku:

; 305  : 			else callback( var->name, var->string, "", ptr );

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR _callback$[ebp]
	add	esp, 16					; 00000010H
$LN8@Cvar_Looku:

; 306  : 		}
; 307  : 	}

	jmp	$LN2@Cvar_Looku
$LN1@Cvar_Looku:

; 308  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_LookupVars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_Get
_TEXT	SEGMENT
_var$ = -12						; size = 4
_find$ = -8						; size = 4
_cur$ = -4						; size = 4
_name$ = 8						; size = 4
_value$ = 12						; size = 4
_flags$ = 16						; size = 4
_var_desc$ = 20						; size = 4
_Cvar_Get PROC						; COMDAT

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 320  : 	convar_t	*cur, *find, *var;
; 321  : 	
; 322  : 	ASSERT( name && *name );

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN6@Cvar_Get
	mov	eax, DWORD PTR _name$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@Cvar_Get
$LN6@Cvar_Get:
	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_Get@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BI@FECCGOFJ@assert?5failed?5at?5?$CFs?3?$CFi?6@
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN5@Cvar_Get:

; 323  : 
; 324  : 	// check for command coexisting
; 325  : 	if( Cmd_Exists( name ))

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_Cmd_Exists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@Cvar_Get

; 326  : 	{
; 327  : 		Con_DPrintf( S_ERROR "can't register variable '%s', is already defined as command\n", name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0EI@MBKPMNGH@?$FO1Error?3?$FO7?5can?8t?5register?5varia@
	call	_Con_DPrintf
	add	esp, 8

; 328  : 		return NULL;

	xor	eax, eax
	jmp	$LN1@Cvar_Get
$LN7@Cvar_Get:

; 329  : 	}
; 330  : 
; 331  : 	var = Cvar_FindVar( name );

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _var$[ebp], eax

; 332  : 
; 333  : 	if( var )

	cmp	DWORD PTR _var$[ebp], 0
	je	$LN8@Cvar_Get

; 334  : 	{
; 335  : 		// already existed?
; 336  : 		if( FBitSet( flags, FCVAR_GLCONFIG ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4096				; 00001000H
	je	$LN9@Cvar_Get

; 337  : 		{
; 338  : 			// NOTE: cvars without description produced by Cvar_FullSet
; 339  : 			// which executed from the config file. So we don't need to
; 340  : 			// change value here: we *already* have actual value from config.
; 341  : 			// in other cases we need to rewrite them
; 342  : 			if( Q_strcmp( var->desc, "" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN11@Cvar_Get

; 343  : 			{
; 344  : 				// directly set value
; 345  : 				freestring( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN12@Cvar_Get
	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_Get@@9@9
	add	eax, 26					; 0000001aH
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN12@Cvar_Get:

; 346  : 				var->string = copystring( value );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_Get@@9@9
	add	eax, 27					; 0000001bH
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 347  : 				var->value = Q_atof( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_atof
	add	esp, 4
	mov	edx, DWORD PTR _var$[ebp]
	fstp	DWORD PTR [edx+12]

; 348  : 				SetBits( var->flags, flags );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 349  : 
; 350  : 				// tell engine about changes
; 351  : 				Cvar_Changed( var );

	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	_Cvar_Changed
	add	esp, 4
$LN11@Cvar_Get:

; 352  : 			}
; 353  : 		}

	jmp	SHORT $LN10@Cvar_Get
$LN9@Cvar_Get:

; 354  : 		else
; 355  : 		{
; 356  : 			SetBits( var->flags, flags );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, DWORD PTR _flags$[ebp]
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 357  : 			Cvar_DirectSet( var, value );

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	push	ecx
	call	_Cvar_DirectSet
	add	esp, 8
$LN10@Cvar_Get:

; 358  : 		}
; 359  : 
; 360  : 		if( FBitSet( var->flags, FCVAR_ALLOCATED ) && Q_strcmp( var_desc, var->desc ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 524288				; 00080000H
	je	$LN13@Cvar_Get
	push	99999					; 0001869fH
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _var_desc$[ebp]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN13@Cvar_Get

; 361  : 		{
; 362  : 			if( !FBitSet( flags, FCVAR_GLCONFIG ))

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4096				; 00001000H
	jne	SHORT $LN14@Cvar_Get

; 363  : 				Con_Reportf( "%s change description from %s to %s\n", var->name, var->desc, var_desc );

	mov	eax, DWORD PTR _var_desc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0CF@GNINODDH@?$CFs?5change?5description?5from?5?$CFs?5t@
	call	_Con_Reportf
	add	esp, 16					; 00000010H
$LN14@Cvar_Get:

; 364  : 			// update description if needs
; 365  : 			freestring( var->desc );

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN15@Cvar_Get
	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_Get@@9@9
	add	eax, 46					; 0000002eH
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+20], 0
$LN15@Cvar_Get:

; 366  : 			var->desc = copystring( var_desc );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_Get@@9@9
	add	eax, 47					; 0000002fH
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _var_desc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN13@Cvar_Get:

; 367  : 		}
; 368  : 
; 369  : 		return var;

	mov	eax, DWORD PTR _var$[ebp]
	jmp	$LN1@Cvar_Get
$LN8@Cvar_Get:

; 370  : 	}
; 371  : 
; 372  : 	// allocate a new cvar
; 373  : 	var = Z_Malloc( sizeof( *var ));

	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_Get@@9@9
	add	eax, 54					; 00000036H
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	0
	push	28					; 0000001cH
	mov	ecx, DWORD PTR _host+236
	push	ecx
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _var$[ebp], eax

; 374  : 	var->name = copystring( name );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_Get@@9@9
	add	eax, 55					; 00000037H
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx], eax

; 375  : 	var->string = copystring( value );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_Get@@9@9
	add	eax, 56					; 00000038H
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 376  : 	var->def_string = copystring( value );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_Get@@9@9
	add	eax, 57					; 00000039H
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 377  : 	var->desc = copystring( var_desc );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_Get@@9@9
	add	eax, 58					; 0000003aH
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _var_desc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 378  : 	var->value = Q_atof( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_atof
	add	esp, 4
	mov	edx, DWORD PTR _var$[ebp]
	fstp	DWORD PTR [edx+12]

; 379  : 	var->flags = flags|FCVAR_ALLOCATED;

	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 524288				; 00080000H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 380  : 
; 381  : 	// link the variable in alphanumerical order
; 382  : 	for( cur = NULL, find = cvar_vars; find && Q_strcmp( find->name, var->name ) < 0; cur = find, find = find->next );

	mov	DWORD PTR _cur$[ebp], 0
	mov	eax, DWORD PTR _cvar_vars
	mov	DWORD PTR _find$[ebp], eax
	jmp	SHORT $LN4@Cvar_Get
$LN2@Cvar_Get:
	mov	eax, DWORD PTR _find$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
	mov	ecx, DWORD PTR _find$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _find$[ebp], edx
$LN4@Cvar_Get:
	cmp	DWORD PTR _find$[ebp], 0
	je	SHORT $LN3@Cvar_Get
	push	99999					; 0001869fH
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _find$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN3@Cvar_Get
	jmp	SHORT $LN2@Cvar_Get
$LN3@Cvar_Get:

; 383  : 
; 384  : 	if( cur ) cur->next = var;

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN16@Cvar_Get
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+16], ecx
	jmp	SHORT $LN17@Cvar_Get
$LN16@Cvar_Get:

; 385  : 	else cvar_vars = var;

	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR _cvar_vars, eax
$LN17@Cvar_Get:

; 386  : 	var->next = find;

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR _find$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 387  : 
; 388  : 	// fill it cls.userinfo, svs.serverinfo
; 389  : 	Cvar_UpdateInfo( var, var->string, false );

	push	0
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	push	edx
	call	_Cvar_UpdateInfo
	add	esp, 12					; 0000000cH

; 390  : 
; 391  : 	// tell engine about changes
; 392  : 	Cvar_Changed( var );

	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	_Cvar_Changed
	add	esp, 4

; 393  : 
; 394  : 	return var;

	mov	eax, DWORD PTR _var$[ebp]
$LN1@Cvar_Get:

; 395  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_Get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_RegisterVariable
_TEXT	SEGMENT
_dup$ = -12						; size = 4
_find$ = -8						; size = 4
_cur$ = -4						; size = 4
_var$ = 8						; size = 4
_Cvar_RegisterVariable PROC				; COMDAT

; 405  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 406  : 	convar_t	*cur, *find, *dup;
; 407  : 
; 408  : 	ASSERT( var != NULL );

	cmp	DWORD PTR _var$[ebp], 0
	jne	SHORT $LN5@Cvar_Regis
	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_RegisterVariable@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BI@FECCGOFJ@assert?5failed?5at?5?$CFs?3?$CFi?6@
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN5@Cvar_Regis:

; 409  : 
; 410  : 	// first check to see if it has allready been defined
; 411  : 	dup = Cvar_FindVar( var->name );

	push	0
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Cvar_FindVarExt
	add	esp, 8
	mov	DWORD PTR _dup$[ebp], eax

; 412  : 
; 413  : 	if( dup )

	cmp	DWORD PTR _dup$[ebp], 0
	je	SHORT $LN6@Cvar_Regis

; 414  : 	{
; 415  : 		if( !FBitSet( dup->flags, FCVAR_TEMPORARY ))

	mov	eax, DWORD PTR _dup$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2097152				; 00200000H
	jne	SHORT $LN7@Cvar_Regis

; 416  : 		{
; 417  : 			Con_DPrintf( S_ERROR "can't register variable '%s', is already defined\n", var->name );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0DN@OFIIAGKB@?$FO1Error?3?$FO7?5can?8t?5register?5varia@
	call	_Con_DPrintf
	add	esp, 8

; 418  : 			return;

	jmp	$LN1@Cvar_Regis
$LN7@Cvar_Regis:

; 419  : 		}
; 420  : 
; 421  : 		// time to replace temp variable with real
; 422  : 		Cvar_UnlinkVar( var->name, FCVAR_TEMPORARY );

	push	2097152					; 00200000H
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Cvar_UnlinkVar
	add	esp, 8
$LN6@Cvar_Regis:

; 423  : 	}
; 424  : 
; 425  : 	// check for overlap with a command
; 426  : 	if( Cmd_Exists( var->name ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Cmd_Exists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@Cvar_Regis

; 427  : 	{
; 428  : 		Con_DPrintf( S_ERROR "can't register variable '%s', is already defined as command\n", var->name );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0EI@MBKPMNGH@?$FO1Error?3?$FO7?5can?8t?5register?5varia@
	call	_Con_DPrintf
	add	esp, 8

; 429  : 		return;

	jmp	$LN1@Cvar_Regis
$LN8@Cvar_Regis:

; 430  : 	}
; 431  : 
; 432  : 	// NOTE: all the 'long' engine cvars have an special setntinel on static declaration
; 433  : 	// (all the engine cvars should be declared through CVAR_DEFINE macros or they shouldn't working properly anyway)
; 434  : 	// so we can determine long version 'convar_t' and short version 'cvar_t' more reliable than by FCVAR_EXTDLL flag
; 435  : 	if( CVAR_CHECK_SENTINEL( var )) SetBits( var->flags, FCVAR_EXTENDED );

	mov	eax, DWORD PTR _var$[ebp]
	cmp	DWORD PTR [eax+16], -559038737		; deadbeefH
	jne	SHORT $LN9@Cvar_Regis
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 262144				; 00040000H
	mov	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN9@Cvar_Regis:

; 436  : 
; 437  : 	// copy the value off, because future sets will free it
; 438  : 	if( FBitSet( var->flags, FCVAR_EXTENDED ))

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN10@Cvar_Regis

; 439  : 		var->def_string = var->string; // just swap pointers

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+24], edx
$LN10@Cvar_Regis:

; 440  : 
; 441  : 	var->string = copystring( var->string );	

	mov	eax, DWORD PTR ?__LINE__Var@?0??Cvar_RegisterVariable@@9@9
	add	eax, 36					; 00000024H
	push	eax
	push	OFFSET ??_C@_0DB@LHDIDEPK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _host+236
	push	eax
	call	__copystring
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 442  : 	var->value = Q_atof( var->string );

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_atof
	add	esp, 4
	mov	edx, DWORD PTR _var$[ebp]
	fstp	DWORD PTR [edx+12]

; 443  : 
; 444  : 	// find the supposed position in chain (alphanumerical order)
; 445  : 	for( cur = NULL, find = cvar_vars; find && Q_strcmp( find->name, var->name ) < 0; cur = find, find = find->next );

	mov	DWORD PTR _cur$[ebp], 0
	mov	eax, DWORD PTR _cvar_vars
	mov	DWORD PTR _find$[ebp], eax
	jmp	SHORT $LN4@Cvar_Regis
$LN2@Cvar_Regis:
	mov	eax, DWORD PTR _find$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
	mov	ecx, DWORD PTR _find$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _find$[ebp], edx
$LN4@Cvar_Regis:
	cmp	DWORD PTR _find$[ebp], 0
	je	SHORT $LN3@Cvar_Regis
	push	99999					; 0001869fH
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _find$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN3@Cvar_Regis
	jmp	SHORT $LN2@Cvar_Regis
$LN3@Cvar_Regis:

; 446  : 
; 447  : 	// now link variable	
; 448  : 	if( cur ) cur->next = var;

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN11@Cvar_Regis
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+16], ecx
	jmp	SHORT $LN12@Cvar_Regis
$LN11@Cvar_Regis:

; 449  : 	else cvar_vars = var;

	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR _cvar_vars, eax
$LN12@Cvar_Regis:

; 450  : 	var->next = find;

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR _find$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 451  : 
; 452  : 	// fill it cls.userinfo, svs.serverinfo
; 453  : 	Cvar_UpdateInfo( var, var->string, false );

	push	0
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	push	edx
	call	_Cvar_UpdateInfo
	add	esp, 12					; 0000000cH

; 454  : 
; 455  : 	// tell engine about changes
; 456  : 	Cvar_Changed( var );

	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	_Cvar_Changed
	add	esp, 4
$LN1@Cvar_Regis:

; 457  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_RegisterVariable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\cvar.c
;	COMDAT _Cvar_FindVarExt
_TEXT	SEGMENT
_var$ = -4						; size = 4
_var_name$ = 8						; size = 4
_ignore_group$ = 12					; size = 4
_Cvar_FindVarExt PROC					; COMDAT

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 31   : 	convar_t	*var;
; 32   : 
; 33   : 	if( !var_name )

	cmp	DWORD PTR _var_name$[ebp], 0
	jne	SHORT $LN5@Cvar_FindV

; 34   : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@Cvar_FindV
$LN5@Cvar_FindV:

; 35   : 
; 36   : 	for( var = cvar_vars; var; var = var->next )

	mov	eax, DWORD PTR _cvar_vars
	mov	DWORD PTR _var$[ebp], eax
	jmp	SHORT $LN4@Cvar_FindV
$LN2@Cvar_FindV:
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _var$[ebp], ecx
$LN4@Cvar_FindV:
	cmp	DWORD PTR _var$[ebp], 0
	je	SHORT $LN3@Cvar_FindV

; 37   : 	{
; 38   : 		if( ignore_group && FBitSet( ignore_group, var->flags ))

	cmp	DWORD PTR _ignore_group$[ebp], 0
	je	SHORT $LN6@Cvar_FindV
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR _ignore_group$[ebp]
	and	ecx, DWORD PTR [eax+8]
	je	SHORT $LN6@Cvar_FindV

; 39   : 			continue;

	jmp	SHORT $LN2@Cvar_FindV
$LN6@Cvar_FindV:

; 40   : 
; 41   : 		if( !Q_stricmp( var_name, var->name ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _var_name$[ebp]
	push	edx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Cvar_FindV

; 42   : 			return var;

	mov	eax, DWORD PTR _var$[ebp]
	jmp	SHORT $LN1@Cvar_FindV
$LN7@Cvar_FindV:

; 43   : 	}

	jmp	SHORT $LN2@Cvar_FindV
$LN3@Cvar_FindV:

; 44   : 
; 45   : 	return NULL;

	xor	eax, eax
$LN1@Cvar_FindV:

; 46   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Cvar_FindVarExt ENDP
_TEXT	ENDS
END
