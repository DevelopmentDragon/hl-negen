; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\gl_warp.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_r_skyBoxSuffix
PUBLIC	??_C@_02BMJICGCB@rt@				; `string'
PUBLIC	??_C@_02MNOEILMP@bk@				; `string'
PUBLIC	??_C@_02HCNENIII@lf@				; `string'
PUBLIC	??_C@_02HLHCNIN@ft@				; `string'
PUBLIC	??_C@_02HNLLPFKA@up@				; `string'
PUBLIC	??_C@_02LEBOADDI@dn@				; `string'
PUBLIC	_r_turbsin
_DATA	SEGMENT
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
_DATA	ENDS
CONST	SEGMENT
_r_skyTexOrder DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	04H
	DD	05H
_skyclip DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	03f800000r			; 1
_st_to_vec DD	03H
	DD	0ffffffffH
	DD	02H
	DD	0fffffffdH
	DD	01H
	DD	02H
	DD	01H
	DD	03H
	DD	02H
	DD	0ffffffffH
	DD	0fffffffdH
	DD	02H
	DD	0fffffffeH
	DD	0ffffffffH
	DD	03H
	DD	02H
	DD	0ffffffffH
	DD	0fffffffdH
_vec_to_st DD	0fffffffeH
	DD	03H
	DD	01H
	DD	02H
	DD	03H
	DD	0ffffffffH
	DD	01H
	DD	03H
	DD	02H
	DD	0ffffffffH
	DD	03H
	DD	0fffffffeH
	DD	0fffffffeH
	DD	0ffffffffH
	DD	03H
	DD	0fffffffeH
	DD	01H
	DD	0fffffffdH
CONST	ENDS
;	COMDAT ??_C@_02LEBOADDI@dn@
CONST	SEGMENT
??_C@_02LEBOADDI@dn@ DB 'dn', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HNLLPFKA@up@
CONST	SEGMENT
??_C@_02HNLLPFKA@up@ DB 'up', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HLHCNIN@ft@
CONST	SEGMENT
??_C@_02HLHCNIN@ft@ DB 'ft', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HCNENIII@lf@
CONST	SEGMENT
??_C@_02HCNENIII@lf@ DB 'lf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MNOEILMP@bk@
CONST	SEGMENT
??_C@_02MNOEILMP@bk@ DB 'bk', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BMJICGCB@rt@
CONST	SEGMENT
??_C@_02BMJICGCB@rt@ DB 'rt', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
_r_skyBoxSuffix DD FLAT:??_C@_02BMJICGCB@rt@
	DD	FLAT:??_C@_02MNOEILMP@bk@
	DD	FLAT:??_C@_02HCNENIII@lf@
	DD	FLAT:??_C@_02HLHCNIN@ft@
	DD	FLAT:??_C@_02HNLLPFKA@up@
	DD	FLAT:??_C@_02LEBOADDI@dn@
_r_turbsin DD	000000000r			; 0
	DD	03dc90abbr			; 0.098165
	DD	03e48fb01r			; 0.19627
	DD	03e96a91er			; 0.294259
	DD	03ec8bd45r			; 0.392069
	DD	03efab27dr			; 0.489643
	DD	03f164064r			; 0.58692
	DD	03f2f10cbr			; 0.68385
	DD	03f47c5acr			; 0.78036
	DD	03f605c14r			; 0.876405
	DD	03f78cfc0r			; 0.97192
	DD	03f888e8ar			; 1.06685
	DD	03f94a03cr			; 1.16114
	DD	03fa09ad4r			; 1.25472
	DD	03fac7cd9r			; 1.34756
	DD	03fb84428r			; 1.43958
	DD	03fc3ef20r			; 1.53074
	DD	03fcf7bc8r			; 1.62097
	DD	03fdae87dr			; 1.71022
	DD	03fe63372r			; 1.79844
	DD	03ff15ad9r			; 1.88558
	DD	03ffc5d3ar			; 1.9716
	DD	040039c39r			; 2.05641
	DD	04008f599r			; 2.13999
	DD	0400e39d6r			; 2.22228
	DD	040136834r			; 2.30324
	DD	040187fb7r			; 2.3828
	DD	0401d7fccr			; 2.46093
	DD	0402267a1r			; 2.53758
	DD	040273650r			; 2.61269
	DD	0402beb46r			; 2.68623
	DD	0403085b2r			; 2.75816
	DD	0403504ear			; 2.82842
	DD	040396849r			; 2.89699
	DD	0403daefbr			; 2.9638
	DD	04041d86fr			; 3.02884
	DD	04045e3fcr			; 3.09204
	DD	04049d10fr			; 3.15338
	DD	0404d9f02r			; 3.21283
	DD	040514d40r			; 3.27034
	DD	04054db38r			; 3.32588
	DD	040584856r			; 3.37942
	DD	0405b941dr			; 3.43092
	DD	0405ebe0er			; 3.48035
	DD	04061c597r			; 3.52768
	DD	04064aa50r			; 3.5729
	DD	040676bcfr			; 3.61596
	DD	0406a09abr			; 3.65684
	DD	0406c8366r			; 3.69552
	DD	0406ed899r			; 3.73197
	DD	040710903r			; 3.76618
	DD	040731451r			; 3.79812
	DD	04074fa05r			; 3.82776
	DD	04076ba0ar			; 3.8551
	DD	0407853f8r			; 3.88013
	DD	04079c7a4r			; 3.90281
	DD	0407b14bar			; 3.92314
	DD	0407c3b25r			; 3.94111
	DD	0407d3aa8r			; 3.95671
	DD	0407e132br			; 3.96992
	DD	0407ec472r			; 3.98074
	DD	0407f4e66r			; 3.98916
	DD	0407fb107r			; 3.99518
	DD	0407fec42r			; 3.9988
	DD	040800000r			; 4
	DD	0407fec42r			; 3.9988
	DD	0407fb107r			; 3.99518
	DD	0407f4e66r			; 3.98916
	DD	0407ec472r			; 3.98074
	DD	0407e132br			; 3.96992
	DD	0407d3aa8r			; 3.95671
	DD	0407c3b25r			; 3.94111
	DD	0407b14bar			; 3.92314
	DD	04079c7a4r			; 3.90281
	DD	0407853f8r			; 3.88013
	DD	04076ba0ar			; 3.8551
	DD	04074fa05r			; 3.82776
	DD	040731451r			; 3.79812
	DD	040710903r			; 3.76618
	DD	0406ed899r			; 3.73197
	DD	0406c8366r			; 3.69552
	DD	0406a09abr			; 3.65684
	DD	040676bcfr			; 3.61596
	DD	04064aa50r			; 3.5729
	DD	04061c597r			; 3.52768
	DD	0405ebe0er			; 3.48035
	DD	0405b941dr			; 3.43092
	DD	040584856r			; 3.37942
	DD	04054db38r			; 3.32588
	DD	040514d40r			; 3.27034
	DD	0404d9f02r			; 3.21283
	DD	04049d10fr			; 3.15338
	DD	04045e3fcr			; 3.09204
	DD	04041d86fr			; 3.02884
	DD	0403daefbr			; 2.9638
	DD	040396849r			; 2.89699
	DD	0403504ear			; 2.82842
	DD	0403085b2r			; 2.75816
	DD	0402beb46r			; 2.68623
	DD	040273650r			; 2.61269
	DD	0402267a1r			; 2.53758
	DD	0401d7fccr			; 2.46093
	DD	040187fb7r			; 2.3828
	DD	040136834r			; 2.30324
	DD	0400e39d6r			; 2.22228
	DD	04008f599r			; 2.13999
	DD	040039c39r			; 2.05641
	DD	03ffc5d3ar			; 1.9716
	DD	03ff15ad9r			; 1.88558
	DD	03fe63372r			; 1.79844
	DD	03fdae87dr			; 1.71022
	DD	03fcf7bc8r			; 1.62097
	DD	03fc3ef20r			; 1.53074
	DD	03fb84428r			; 1.43958
	DD	03fac7cd9r			; 1.34756
	DD	03fa09ad4r			; 1.25472
	DD	03f94a03cr			; 1.16114
	DD	03f888e8ar			; 1.06685
	DD	03f78cfc0r			; 0.97192
	DD	03f605c14r			; 0.876405
	DD	03f47c5acr			; 0.78036
	DD	03f2f10cbr			; 0.68385
	DD	03f164064r			; 0.58692
	DD	03efab27dr			; 0.489643
	DD	03ec8bd45r			; 0.392069
	DD	03e96a91er			; 0.294259
	DD	03e48fb01r			; 0.19627
	DD	03dc90abbr			; 0.098165
	DD	000000000r			; 0
	DD	0bdc90abbr			; -0.098165
	DD	0be48fb01r			; -0.19627
	DD	0be96a91er			; -0.294259
	DD	0bec8bd45r			; -0.392069
	DD	0befab27dr			; -0.489643
	DD	0bf164064r			; -0.58692
	DD	0bf2f10cbr			; -0.68385
	DD	0bf47c5acr			; -0.78036
	DD	0bf605c14r			; -0.876405
	DD	0bf78cfc0r			; -0.97192
	DD	0bf888e8ar			; -1.06685
	DD	0bf94a03cr			; -1.16114
	DD	0bfa09ad4r			; -1.25472
	DD	0bfac7cd9r			; -1.34756
	DD	0bfb84428r			; -1.43958
	DD	0bfc3ef20r			; -1.53074
	DD	0bfcf7bc8r			; -1.62097
	DD	0bfdae87dr			; -1.71022
	DD	0bfe63372r			; -1.79844
	DD	0bff15ad9r			; -1.88558
	DD	0bffc5d3ar			; -1.9716
	DD	0c0039c39r			; -2.05641
	DD	0c008f599r			; -2.13999
	DD	0c00e39d6r			; -2.22228
	DD	0c0136834r			; -2.30324
	DD	0c0187fb7r			; -2.3828
	DD	0c01d7fccr			; -2.46093
	DD	0c02267a1r			; -2.53758
	DD	0c0273650r			; -2.61269
	DD	0c02beb46r			; -2.68623
	DD	0c03085b2r			; -2.75816
	DD	0c03504ear			; -2.82842
	DD	0c0396849r			; -2.89699
	DD	0c03daefbr			; -2.9638
	DD	0c041d86fr			; -3.02884
	DD	0c045e3fcr			; -3.09204
	DD	0c049d10fr			; -3.15338
	DD	0c04d9f02r			; -3.21283
	DD	0c0514d40r			; -3.27034
	DD	0c054db38r			; -3.32588
	DD	0c0584856r			; -3.37942
	DD	0c05b941dr			; -3.43092
	DD	0c05ebe0er			; -3.48035
	DD	0c061c597r			; -3.52768
	DD	0c064aa50r			; -3.5729
	DD	0c0676bcfr			; -3.61596
	DD	0c06a09abr			; -3.65684
	DD	0c06c8366r			; -3.69552
	DD	0c06ed899r			; -3.73197
	DD	0c0710903r			; -3.76618
	DD	0c0731451r			; -3.79812
	DD	0c074fa05r			; -3.82776
	DD	0c076ba0ar			; -3.8551
	DD	0c07853f8r			; -3.88013
	DD	0c079c7a4r			; -3.90281
	DD	0c07b14bar			; -3.92314
	DD	0c07c3b25r			; -3.94111
	DD	0c07d3aa8r			; -3.95671
	DD	0c07e132br			; -3.96992
	DD	0c07ec472r			; -3.98074
	DD	0c07f4e66r			; -3.98916
	DD	0c07fb107r			; -3.99518
	DD	0c07fec42r			; -3.9988
	DD	0c0800000r			; -4
	DD	0c07fec42r			; -3.9988
	DD	0c07fb107r			; -3.99518
	DD	0c07f4e66r			; -3.98916
	DD	0c07ec472r			; -3.98074
	DD	0c07e132br			; -3.96992
	DD	0c07d3aa8r			; -3.95671
	DD	0c07c3b25r			; -3.94111
	DD	0c07b14bar			; -3.92314
	DD	0c079c7a4r			; -3.90281
	DD	0c07853f8r			; -3.88013
	DD	0c076ba0ar			; -3.8551
	DD	0c074fa05r			; -3.82776
	DD	0c0731451r			; -3.79812
	DD	0c0710903r			; -3.76618
	DD	0c06ed899r			; -3.73197
	DD	0c06c8366r			; -3.69552
	DD	0c06a09abr			; -3.65684
	DD	0c0676bcfr			; -3.61596
	DD	0c064aa50r			; -3.5729
	DD	0c061c597r			; -3.52768
	DD	0c05ebe0er			; -3.48035
	DD	0c05b941dr			; -3.43092
	DD	0c0584856r			; -3.37942
	DD	0c054db38r			; -3.32588
	DD	0c0514d40r			; -3.27034
	DD	0c04d9f02r			; -3.21283
	DD	0c049d10fr			; -3.15338
	DD	0c045e3fcr			; -3.09204
	DD	0c041d86fr			; -3.02884
	DD	0c03daefbr			; -2.9638
	DD	0c0396849r			; -2.89699
	DD	0c03504ear			; -2.82842
	DD	0c03085b2r			; -2.75816
	DD	0c02beb46r			; -2.68623
	DD	0c0273650r			; -2.61269
	DD	0c02267a1r			; -2.53758
	DD	0c01d7fccr			; -2.46093
	DD	0c0187fb7r			; -2.3828
	DD	0c0136834r			; -2.30324
	DD	0c00e39d6r			; -2.22228
	DD	0c008f599r			; -2.13999
	DD	0c0039c39r			; -2.05641
	DD	0bffc5d3ar			; -1.9716
	DD	0bff15ad9r			; -1.88558
	DD	0bfe63372r			; -1.79844
	DD	0bfdae87dr			; -1.71022
	DD	0bfcf7bc8r			; -1.62097
	DD	0bfc3ef20r			; -1.53074
	DD	0bfb84428r			; -1.43958
	DD	0bfac7cd9r			; -1.34756
	DD	0bfa09ad4r			; -1.25472
	DD	0bf94a03cr			; -1.16114
	DD	0bf888e8ar			; -1.06685
	DD	0bf78cfc0r			; -0.97192
	DD	0bf605c14r			; -0.876405
	DD	0bf47c5acr			; -0.78036
	DD	0bf2f10cbr			; -0.68385
	DD	0bf164064r			; -0.58692
	DD	0befab27dr			; -0.489643
	DD	0bec8bd45r			; -0.392069
	DD	0be96a91er			; -0.294259
	DD	0be48fb01r			; -0.19627
	DD	0bdc90abbr			; -0.098165
_DATA	ENDS
PUBLIC	_R_InitSkyClouds
PUBLIC	_R_AddSkyBoxSurface
PUBLIC	_R_ClearSkyBox
PUBLIC	_R_DrawSkyBox
PUBLIC	_R_DrawClouds
PUBLIC	_EmitWaterPolys
PUBLIC	_R_SetupSky
PUBLIC	_DrawSkyPolygon
PUBLIC	_ClipSkyPolygon
PUBLIC	_MakeSkyVec
PUBLIC	_R_UnloadSkybox
PUBLIC	_R_CloudVertex
PUBLIC	_R_CloudTexCoord
PUBLIC	_R_CloudDrawPoly
PUBLIC	_R_CloudRenderSide
PUBLIC	??_C@_03CBDDAJHO@dds@				; `string'
PUBLIC	??_C@_03LJIJAGL@tga@				; `string'
PUBLIC	??_C@_03CAKEDOOO@bmp@				; `string'
PUBLIC	??_C@_07GFKBPOLL@?$CFs?$CFs?4?$CFs@		; `string'
PUBLIC	??_C@_08LFLIFLDJ@?$CFs_?$CFs?4?$CFs@		; `string'
PUBLIC	??_C@_0CA@BKNCOCCA@ClipSkyPolygon?3?5MAX_CLIP_VERTS?6@ ; `string'
PUBLIC	??_C@_0L@FGEKBPJ@gfx?1env?1?$CFs@		; `string'
PUBLIC	??_C@_0P@MLHADGPP@gfx?1env?1desert@		; `string'
PUBLIC	??_C@_0CP@IGLALFEG@?$FO3Warning?3?$FO7?5missed?5or?5incomple@ ; `string'
PUBLIC	??_C@_06OLPPELHM@desert@			; `string'
PUBLIC	??_C@_06BCGNPODJ@SKY?3?5?5@			; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs@			; `string'
PUBLIC	??_C@_05ONEOBAM@?$CFs_?$CFs@			; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5@				; `string'
PUBLIC	??_C@_02KHOJGJKF@?4?5@				; `string'
PUBLIC	??_C@_06DIJPEION@?$CFs?$CFs?$CFs@		; `string'
PUBLIC	??_C@_05KJDAJCPN@done?6@			; `string'
PUBLIC	??_C@_09EKNKGPNC@?$FO2failed?6@			; `string'
PUBLIC	?__LINE__Var@?0??R_InitSkyClouds@@9@9		; `R_InitSkyClouds'::`1'::__LINE__Var
PUBLIC	??_C@_01IPJKGB@?$CD@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_08DMPIOEHI@?$CFs?$CFs?4mip@		; `string'
PUBLIC	??_C@_0DF@LLAMPHFL@?$FO1Error?3?$FO7?5R_InitSky?3?5unable?5to@ ; `string'
PUBLIC	??_C@_0DE@MGOHFNID@D?3?2DevDragon?2XashFE?2dev?2src?2eng@ ; `string'
PUBLIC	??_C@_09PBGIKHPP@solid_sky@			; `string'
PUBLIC	??_C@_09DGBAHEIM@alpha_sky@			; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3b000000
PUBLIC	__real@3c000000
PUBLIC	__real@3c800000
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e000000
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f7f8000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40445f3060000000
PUBLIC	__real@4064000000000000
PUBLIC	__real@4065600000000000
PUBLIC	__real@40a00000
PUBLIC	__real@41000000
PUBLIC	__real@41400000
PUBLIC	__real@41800000
PUBLIC	__real@43bd0000
PUBLIC	__real@4b18967f
PUBLIC	__real@bdcccccd
PUBLIC	__real@bf800000
PUBLIC	__real@cb18967f
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memset:PROC
EXTRN	_Q_strlen:PROC
EXTRN	_Q_strnicmp:PROC
EXTRN	_Q_snprintf:PROC
EXTRN	_va:PROC
EXTRN	__Mem_Alloc:PROC
EXTRN	__Mem_Free:PROC
EXTRN	_COM_CheckString:PROC
EXTRN	_FS_FileExists:PROC
EXTRN	_COM_StripExtension:PROC
EXTRN	_FS_LoadImage:PROC
EXTRN	_FS_FreeImage:PROC
EXTRN	_Host_Error:PROC
EXTRN	_Con_Reportf:PROC
EXTRN	_Con_DPrintf:PROC
EXTRN	_fabs:PROC
EXTRN	_sqrt:PROC
EXTRN	_Matrix4x4_ConcatTransforms:PROC
EXTRN	_GL_Bind:PROC
EXTRN	_GL_LoadMatrix:PROC
EXTRN	_GL_SetRenderMode:PROC
EXTRN	_GL_LoadTexture:PROC
EXTRN	_GL_LoadTextureFromBuffer:PROC
EXTRN	_GL_FreeTexture:PROC
EXTRN	_R_LoadIdentity:PROC
EXTRN	_R_AllowFog:PROC
EXTRN	_Matrix4x4_ConcatTranslate:PROC
EXTRN	_Matrix4x4_CreateRotate:PROC
EXTRN	_GL_SetupFogColorForSurfaces:PROC
EXTRN	_GL_ResetFogColor:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_world:BYTE
EXTRN	_cl:BYTE
EXTRN	_clgame:BYTE
EXTRN	_r_temppool:DWORD
EXTRN	_RI:BYTE
EXTRN	_tr:BYTE
EXTRN	_glw_state:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@cb18967f
CONST	SEGMENT
__real@cb18967f DD 0cb18967fr			; -1e+07
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@4b18967f
CONST	SEGMENT
__real@4b18967f DD 04b18967fr			; 1e+07
CONST	ENDS
;	COMDAT __real@43bd0000
CONST	SEGMENT
__real@43bd0000 DD 043bd0000r			; 378
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4065600000000000
CONST	SEGMENT
__real@4065600000000000 DQ 04065600000000000r	; 171
CONST	ENDS
;	COMDAT __real@4064000000000000
CONST	SEGMENT
__real@4064000000000000 DQ 04064000000000000r	; 160
CONST	ENDS
;	COMDAT __real@40445f3060000000
CONST	SEGMENT
__real@40445f3060000000 DQ 040445f3060000000r	; 40.7437
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7f8000
CONST	SEGMENT
__real@3f7f8000 DD 03f7f8000r			; 0.998047
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c800000
CONST	SEGMENT
__real@3c800000 DD 03c800000r			; 0.015625
CONST	ENDS
;	COMDAT __real@3c000000
CONST	SEGMENT
__real@3c000000 DD 03c000000r			; 0.0078125
CONST	ENDS
;	COMDAT __real@3b000000
CONST	SEGMENT
__real@3b000000 DD 03b000000r			; 0.00195312
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_09DGBAHEIM@alpha_sky@
CONST	SEGMENT
??_C@_09DGBAHEIM@alpha_sky@ DB 'alpha_sky', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBGIKHPP@solid_sky@
CONST	SEGMENT
??_C@_09PBGIKHPP@solid_sky@ DB 'solid_sky', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MGOHFNID@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
CONST	SEGMENT
??_C@_0DE@MGOHFNID@D?3?2DevDragon?2XashFE?2dev?2src?2eng@ DB 'D:\DevDrago'
	DB	'n\XashFE\dev\src\engine\client\gl_warp.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LLAMPHFL@?$FO1Error?3?$FO7?5R_InitSky?3?5unable?5to@
CONST	SEGMENT
??_C@_0DF@LLAMPHFL@?$FO1Error?3?$FO7?5R_InitSky?3?5unable?5to@ DB '^1Erro'
	DB	'r:^7 R_InitSky: unable to load sky texture %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DMPIOEHI@?$CFs?$CFs?4mip@
CONST	SEGMENT
??_C@_08DMPIOEHI@?$CFs?$CFs?4mip@ DB '%s%s.mip', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01IPJKGB@?$CD@
CONST	SEGMENT
??_C@_01IPJKGB@?$CD@ DB '#', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??R_InitSkyClouds@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??R_InitSkyClouds@@9@9 DD 02a2H		; `R_InitSkyClouds'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09EKNKGPNC@?$FO2failed?6@
CONST	SEGMENT
??_C@_09EKNKGPNC@?$FO2failed?6@ DB '^2failed', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJDAJCPN@done?6@
CONST	SEGMENT
??_C@_05KJDAJCPN@done?6@ DB 'done', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DIJPEION@?$CFs?$CFs?$CFs@
CONST	SEGMENT
??_C@_06DIJPEION@?$CFs?$CFs?$CFs@ DB '%s%s%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02KHOJGJKF@?4?5@
CONST	SEGMENT
??_C@_02KHOJGJKF@?4?5@ DB '. ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ONEOBAM@?$CFs_?$CFs@
CONST	SEGMENT
??_C@_05ONEOBAM@?$CFs_?$CFs@ DB '%s_%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BCGNPODJ@SKY?3?5?5@
CONST	SEGMENT
??_C@_06BCGNPODJ@SKY?3?5?5@ DB 'SKY:  ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLPPELHM@desert@
CONST	SEGMENT
??_C@_06OLPPELHM@desert@ DB 'desert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@IGLALFEG@?$FO3Warning?3?$FO7?5missed?5or?5incomple@
CONST	SEGMENT
??_C@_0CP@IGLALFEG@?$FO3Warning?3?$FO7?5missed?5or?5incomple@ DB '^3Warni'
	DB	'ng:^7 missed or incomplete skybox ''%s''', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MLHADGPP@gfx?1env?1desert@
CONST	SEGMENT
??_C@_0P@MLHADGPP@gfx?1env?1desert@ DB 'gfx/env/desert', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FGEKBPJ@gfx?1env?1?$CFs@
CONST	SEGMENT
??_C@_0L@FGEKBPJ@gfx?1env?1?$CFs@ DB 'gfx/env/%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BKNCOCCA@ClipSkyPolygon?3?5MAX_CLIP_VERTS?6@
CONST	SEGMENT
??_C@_0CA@BKNCOCCA@ClipSkyPolygon?3?5MAX_CLIP_VERTS?6@ DB 'ClipSkyPolygon'
	DB	': MAX_CLIP_VERTS', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LFLIFLDJ@?$CFs_?$CFs?4?$CFs@
CONST	SEGMENT
??_C@_08LFLIFLDJ@?$CFs_?$CFs?4?$CFs@ DB '%s_%s.%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GFKBPOLL@?$CFs?$CFs?4?$CFs@
CONST	SEGMENT
??_C@_07GFKBPOLL@?$CFs?$CFs?4?$CFs@ DB '%s%s.%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CAKEDOOO@bmp@
CONST	SEGMENT
??_C@_03CAKEDOOO@bmp@ DB 'bmp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LJIJAGL@tga@
CONST	SEGMENT
??_C@_03LJIJAGL@tga@ DB 'tga', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CBDDAJHO@dds@
CONST	SEGMENT
??_C@_03CBDDAJHO@dds@ DB 'dds', 00H			; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0a5fH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	01caH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	0fcH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	01cfH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	014H
	DW	0813H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	048cH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0127H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0241H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	03d0H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0327H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0417H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _R_CloudRenderSide
_TEXT	SEGMENT
tv469 = -320						; size = 4
tv436 = -320						; size = 4
tv403 = -320						; size = 4
tv388 = -320						; size = 4
tv355 = -320						; size = 4
tv340 = -320						; size = 4
tv307 = -320						; size = 4
tv286 = -320						; size = 4
tv262 = -320						; size = 4
tv191 = -320						; size = 4
tv185 = -320						; size = 4
tv152 = -320						; size = 4
_j$ = -252						; size = 4
_i$ = -248						; size = 4
_p$ = -244						; size = 128
_temp2$ = -116						; size = 12
_temp$ = -104						; size = 12
_vright$ = -92						; size = 12
_vup$ = -80						; size = 12
_qj$ = -68						; size = 4
_dj$ = -64						; size = 4
_qi$ = -60						; size = 4
_di$ = -56						; size = 4
_verts$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_axis$ = 8						; size = 4
_R_CloudRenderSide PROC					; COMDAT

; 584  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 585  : 	vec3_t	verts[4];
; 586  : 	float	di, qi, dj, qj;
; 587  : 	vec3_t	vup, vright;
; 588  : 	vec3_t	temp, temp2;
; 589  : 	glpoly_t	p[1];
; 590  : 	int	i, j;
; 591  : 
; 592  : 	R_CloudVertex( -1.0f, -1.0f, axis, verts[0] );

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _verts$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	call	_R_CloudVertex
	add	esp, 16					; 00000010H

; 593  : 	R_CloudVertex( -1.0f,  1.0f, axis, verts[1] );

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR _verts$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _axis$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	call	_R_CloudVertex
	add	esp, 16					; 00000010H

; 594  : 	R_CloudVertex(  1.0f,  1.0f, axis, verts[2] );

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR _verts$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _axis$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	_R_CloudVertex
	add	esp, 16					; 00000010H

; 595  : 	R_CloudVertex(  1.0f, -1.0f, axis, verts[3] );

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _verts$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	_R_CloudVertex
	add	esp, 16					; 00000010H

; 596  : 
; 597  : 	VectorSubtract( verts[2], verts[3], vup );

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR _verts$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 12					; 0000000cH
	imul	edx, edx, 3
	lea	edx, DWORD PTR _verts$[ebp+edx]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	subss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _vup$[ebp+ecx], xmm0
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR _verts$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 12					; 0000000cH
	imul	edx, edx, 3
	lea	edx, DWORD PTR _verts$[ebp+edx]
	mov	esi, 4
	shl	esi, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	subss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _vup$[ebp+eax], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR _verts$[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 12					; 0000000cH
	imul	ecx, ecx, 3
	lea	ecx, DWORD PTR _verts$[ebp+ecx]
	mov	esi, 4
	shl	esi, 1
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR [ecx+esi]
	movss	DWORD PTR tv152[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv152[ebp]
	movss	DWORD PTR _vup$[ebp+edx], xmm0

; 598  : 	VectorSubtract( verts[2], verts[1], vright );

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR _verts$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	edx, DWORD PTR _verts$[ebp+edx]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	subss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _vright$[ebp+ecx], xmm0
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR _verts$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	edx, DWORD PTR _verts$[ebp+edx]
	mov	esi, 4
	shl	esi, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	subss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _vright$[ebp+eax], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR _verts$[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	ecx, DWORD PTR _verts$[ebp+ecx]
	mov	esi, 4
	shl	esi, 1
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR [ecx+esi]
	movss	DWORD PTR tv185[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv185[ebp]
	movss	DWORD PTR _vright$[ebp+edx], xmm0

; 599  : 
; 600  : 	p->numverts = 4;

	mov	DWORD PTR _p$[ebp+8], 4

; 601  : 	di = SKYCLOUDS_QUALITY;

	movss	xmm0, DWORD PTR __real@41400000
	movss	DWORD PTR _di$[ebp], xmm0

; 602  : 	qi = 1.0 / di;

	cvtss2sd xmm0, DWORD PTR _di$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _qi$[ebp], xmm0

; 603  : 	dj = (axis < 4) ? di * 2 : di; //subdivide vertically more than horizontally on skybox sides

	cmp	DWORD PTR _axis$[ebp], 4
	jge	SHORT $LN11@R_CloudRen
	movss	xmm0, DWORD PTR _di$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv191[ebp], xmm0
	jmp	SHORT $LN12@R_CloudRen
$LN11@R_CloudRen:
	movss	xmm0, DWORD PTR _di$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
$LN12@R_CloudRen:
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR _dj$[ebp], xmm0

; 604  : 	qj = 1.0 / dj;

	cvtss2sd xmm0, DWORD PTR _dj$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _qj$[ebp], xmm0

; 605  : 
; 606  : 	for( i = 0; i < di; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_CloudRen
$LN2@R_CloudRen:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_CloudRen:
	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	movss	xmm1, DWORD PTR _di$[ebp]
	comiss	xmm1, xmm0
	jbe	$LN3@R_CloudRen

; 607  : 	{
; 608  : 		for( j = 0; j < dj; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@R_CloudRen
$LN5@R_CloudRen:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@R_CloudRen:
	cvtsi2ss xmm0, DWORD PTR _j$[ebp]
	movss	xmm1, DWORD PTR _dj$[ebp]
	comiss	xmm1, xmm0
	jbe	$LN6@R_CloudRen

; 609  : 		{
; 610  : 			if( i * qi < RI.skyMins[0][axis] / 2 + 0.5f - qi
; 611  : 			 || i * qi > RI.skyMaxs[0][axis] / 2 + 0.5f
; 612  : 			 || j * qj < RI.skyMins[1][axis] / 2 + 0.5f - qj
; 613  : 			 || j * qj > RI.skyMaxs[1][axis] / 2 + 0.5f )

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR _qi$[ebp]
	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _axis$[ebp]
	movss	xmm1, DWORD PTR _RI[ecx+edx*4+360]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm1, DWORD PTR __real@3f000000
	subss	xmm1, DWORD PTR _qi$[ebp]
	comiss	xmm1, xmm0
	ja	$LN9@R_CloudRen
	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR _qi$[ebp]
	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _axis$[ebp]
	movss	xmm1, DWORD PTR _RI[ecx+edx*4+408]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm1, DWORD PTR __real@3f000000
	comiss	xmm0, xmm1
	ja	SHORT $LN9@R_CloudRen
	cvtsi2ss xmm0, DWORD PTR _j$[ebp]
	mulss	xmm0, DWORD PTR _qj$[ebp]
	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	xmm1, DWORD PTR _RI[eax+ecx*4+360]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm1, DWORD PTR __real@3f000000
	subss	xmm1, DWORD PTR _qj$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN9@R_CloudRen
	cvtsi2ss xmm0, DWORD PTR _j$[ebp]
	mulss	xmm0, DWORD PTR _qj$[ebp]
	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	xmm1, DWORD PTR _RI[eax+ecx*4+408]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm1, DWORD PTR __real@3f000000
	comiss	xmm0, xmm1
	jbe	SHORT $LN8@R_CloudRen
$LN9@R_CloudRen:

; 614  : 				continue;

	jmp	$LN5@R_CloudRen
$LN8@R_CloudRen:

; 615  : 
; 616  : 			VectorScale( vright, qi * i, temp );

	mov	eax, 4
	imul	ecx, eax, 0
	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR _qi$[ebp]
	mulss	xmm0, DWORD PTR _vright$[ebp+ecx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _temp$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR _qi$[ebp]
	mulss	xmm0, DWORD PTR _vright$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _temp$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR _qi$[ebp]
	movss	xmm1, DWORD PTR _vright$[ebp+eax]
	mulss	xmm1, xmm0
	movss	DWORD PTR tv262[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv262[ebp]
	movss	DWORD PTR _temp$[ebp+ecx], xmm0

; 617  : 			VectorScale( vup, qj * j, temp2 );

	mov	eax, 4
	imul	ecx, eax, 0
	cvtsi2ss xmm0, DWORD PTR _j$[ebp]
	mulss	xmm0, DWORD PTR _qj$[ebp]
	mulss	xmm0, DWORD PTR _vup$[ebp+ecx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _temp2$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	cvtsi2ss xmm0, DWORD PTR _j$[ebp]
	mulss	xmm0, DWORD PTR _qj$[ebp]
	mulss	xmm0, DWORD PTR _vup$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _temp2$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	cvtsi2ss xmm0, DWORD PTR _j$[ebp]
	mulss	xmm0, DWORD PTR _qj$[ebp]
	movss	xmm1, DWORD PTR _vup$[ebp+eax]
	mulss	xmm1, xmm0
	movss	DWORD PTR tv286[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv286[ebp]
	movss	DWORD PTR _temp2$[ebp+ecx], xmm0

; 618  : 			VectorAdd( temp, temp2, temp );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _temp$[ebp+ecx]
	addss	xmm0, DWORD PTR _temp2$[ebp+eax]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _temp$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _temp$[ebp+eax]
	addss	xmm0, DWORD PTR _temp2$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _temp$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _temp$[ebp+eax]
	addss	xmm0, DWORD PTR _temp2$[ebp+ecx]
	movss	DWORD PTR tv307[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR _temp$[ebp+edx], xmm0

; 619  : 			VectorAdd( verts[0], temp, p->verts[0] );

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _verts$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, 4
	imul	eax, eax, 0
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR _temp$[ebp+eax]
	mov	ecx, 28					; 0000001cH
	imul	edx, ecx, 0
	lea	eax, DWORD PTR _p$[ebp+edx+16]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _verts$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _temp$[ebp+ecx]
	mov	edx, 28					; 0000001cH
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _p$[ebp+eax+16]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _verts$[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _temp$[ebp+ecx]
	movss	DWORD PTR tv340[ebp], xmm0
	mov	edx, 28					; 0000001cH
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _p$[ebp+eax+16]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv340[ebp]
	movss	DWORD PTR [ecx+edx], xmm0

; 620  : 
; 621  : 			VectorScale( vup, qj, temp );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _vup$[ebp+ecx]
	mulss	xmm0, DWORD PTR _qj$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _temp$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _vup$[ebp+ecx]
	mulss	xmm0, DWORD PTR _qj$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _temp$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _vup$[ebp+eax]
	mulss	xmm0, DWORD PTR _qj$[ebp]
	movss	DWORD PTR tv355[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv355[ebp]
	movss	DWORD PTR _temp$[ebp+ecx], xmm0

; 622  : 			VectorAdd( p->verts[0], temp, p->verts[1] );

	mov	eax, 28					; 0000001cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _p$[ebp+ecx+16]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, 4
	imul	eax, eax, 0
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR _temp$[ebp+eax]
	mov	ecx, 28					; 0000001cH
	shl	ecx, 0
	lea	edx, DWORD PTR _p$[ebp+ecx+16]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR [edx+ecx], xmm0
	mov	edx, 28					; 0000001cH
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _p$[ebp+eax+16]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	addss	xmm0, DWORD PTR _temp$[ebp+eax]
	mov	ecx, 28					; 0000001cH
	shl	ecx, 0
	lea	edx, DWORD PTR _p$[ebp+ecx+16]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 28					; 0000001cH
	imul	edx, ecx, 0
	lea	eax, DWORD PTR _p$[ebp+edx+16]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	addss	xmm0, DWORD PTR _temp$[ebp+edx]
	movss	DWORD PTR tv388[ebp], xmm0
	mov	eax, 28					; 0000001cH
	shl	eax, 0
	lea	ecx, DWORD PTR _p$[ebp+eax+16]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv388[ebp]
	movss	DWORD PTR [ecx+edx], xmm0

; 623  : 
; 624  : 			VectorScale( vright, qi, temp );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _vright$[ebp+ecx]
	mulss	xmm0, DWORD PTR _qi$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _temp$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _vright$[ebp+ecx]
	mulss	xmm0, DWORD PTR _qi$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _temp$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _vright$[ebp+eax]
	mulss	xmm0, DWORD PTR _qi$[ebp]
	movss	DWORD PTR tv403[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv403[ebp]
	movss	DWORD PTR _temp$[ebp+ecx], xmm0

; 625  : 			VectorAdd( p->verts[1], temp, p->verts[2] );

	mov	eax, 28					; 0000001cH
	shl	eax, 0
	lea	ecx, DWORD PTR _p$[ebp+eax+16]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 4
	imul	edx, edx, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	addss	xmm0, DWORD PTR _temp$[ebp+edx]
	mov	eax, 28					; 0000001cH
	shl	eax, 1
	lea	ecx, DWORD PTR _p$[ebp+eax+16]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 28					; 0000001cH
	shl	ecx, 0
	lea	edx, DWORD PTR _p$[ebp+ecx+16]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _temp$[ebp+ecx]
	mov	edx, 28					; 0000001cH
	shl	edx, 1
	lea	eax, DWORD PTR _p$[ebp+edx+16]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 28					; 0000001cH
	shl	edx, 0
	lea	eax, DWORD PTR _p$[ebp+edx+16]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	addss	xmm0, DWORD PTR _temp$[ebp+edx]
	movss	DWORD PTR tv436[ebp], xmm0
	mov	eax, 28					; 0000001cH
	shl	eax, 1
	lea	ecx, DWORD PTR _p$[ebp+eax+16]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv436[ebp]
	movss	DWORD PTR [ecx+edx], xmm0

; 626  : 
; 627  : 			VectorAdd( p->verts[0], temp, p->verts[3] );

	mov	eax, 28					; 0000001cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _p$[ebp+ecx+16]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, 4
	imul	eax, eax, 0
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR _temp$[ebp+eax]
	mov	ecx, 28					; 0000001cH
	imul	edx, ecx, 3
	lea	eax, DWORD PTR _p$[ebp+edx+16]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 28					; 0000001cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _p$[ebp+ecx+16]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _temp$[ebp+ecx]
	mov	edx, 28					; 0000001cH
	imul	eax, edx, 3
	lea	ecx, DWORD PTR _p$[ebp+eax+16]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 28					; 0000001cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _p$[ebp+ecx+16]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _temp$[ebp+ecx]
	movss	DWORD PTR tv469[ebp], xmm0
	mov	edx, 28					; 0000001cH
	imul	eax, edx, 3
	lea	ecx, DWORD PTR _p$[ebp+eax+16]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv469[ebp]
	movss	DWORD PTR [ecx+edx], xmm0

; 628  : 
; 629  : 			R_CloudDrawPoly( p );

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_R_CloudDrawPoly
	add	esp, 4

; 630  : 		}

	jmp	$LN5@R_CloudRen
$LN6@R_CloudRen:

; 631  : 	}

	jmp	$LN2@R_CloudRen
$LN3@R_CloudRen:

; 632  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_CloudRenderSide ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _R_CloudDrawPoly
_TEXT	SEGMENT
_i$ = -16						; size = 4
_v$ = -12						; size = 4
_t$ = -8						; size = 4
_s$ = -4						; size = 4
_p$ = 8							; size = 4
_R_CloudDrawPoly PROC					; COMDAT

; 546  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 547  : 	float	s, t;
; 548  : 	float	*v;
; 549  : 	int		i;
; 550  : 
; 551  : 	GL_SetRenderMode( kRenderNormal );

	push	0
	call	_GL_SetRenderMode
	add	esp, 4

; 552  : 	GL_Bind( GL_TEXTURE0, tr.solidskyTexture );

	mov	eax, DWORD PTR _tr+20
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 553  : 
; 554  : 	pglBegin( GL_QUADS );

	push	7
	call	DWORD PTR _pglBegin

; 555  : 	for( i = 0, v = p->verts[0]; i < 4; i++, v += VERTEXSIZE )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, 28					; 0000001cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN4@R_CloudDra
$LN2@R_CloudDra:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _v$[ebp], ecx
$LN4@R_CloudDra:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN3@R_CloudDra

; 556  : 	{
; 557  : 		R_CloudTexCoord( v, 8.0f, &s, &t );

	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_R_CloudTexCoord
	add	esp, 16					; 00000010H

; 558  : 		pglTexCoord2f( s, t );

	push	ecx
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 559  : 		pglVertex3fv( v );

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	DWORD PTR _pglVertex3fv

; 560  : 	}

	jmp	SHORT $LN2@R_CloudDra
$LN3@R_CloudDra:

; 561  : 	pglEnd();

	call	DWORD PTR _pglEnd

; 562  : 
; 563  : 	GL_SetRenderMode( kRenderTransTexture );

	push	2
	call	_GL_SetRenderMode
	add	esp, 4

; 564  : 	GL_Bind( GL_TEXTURE0, tr.alphaskyTexture );

	mov	eax, DWORD PTR _tr+24
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 565  : 
; 566  : 	pglBegin( GL_QUADS );

	push	7
	call	DWORD PTR _pglBegin

; 567  : 	for( i = 0, v = p->verts[0]; i < 4; i++, v += VERTEXSIZE )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, 28					; 0000001cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN7@R_CloudDra
$LN5@R_CloudDra:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _v$[ebp], ecx
$LN7@R_CloudDra:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN6@R_CloudDra

; 568  : 	{
; 569  : 		R_CloudTexCoord( v, 16.0f, &s, &t );

	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_R_CloudTexCoord
	add	esp, 16					; 00000010H

; 570  : 		pglTexCoord2f( s, t );

	push	ecx
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 571  : 		pglVertex3fv( v );

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	DWORD PTR _pglVertex3fv

; 572  : 	}

	jmp	SHORT $LN5@R_CloudDra
$LN6@R_CloudDra:

; 573  : 	pglEnd();

	call	DWORD PTR _pglEnd

; 574  : 
; 575  : 	pglDisable( GL_BLEND );

	push	3042					; 00000be2H
	call	DWORD PTR _pglDisable

; 576  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_CloudDrawPoly ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _R_CloudTexCoord
_TEXT	SEGMENT
tv91 = -92						; size = 4
_dir$ = -24						; size = 12
_speedscale$ = -12					; size = 4
_length$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
_speed$ = 12						; size = 4
_s$ = 16						; size = 4
_t$ = 20						; size = 4
_R_CloudTexCoord PROC					; COMDAT

; 523  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 524  : 	float	length, speedscale;
; 525  : 	vec3_t	dir;
; 526  : 
; 527  : 	speedscale = cl.time * speed;

	cvtss2sd xmm0, DWORD PTR _speed$[ebp]
	mulsd	xmm0, QWORD PTR _cl+2167640
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _speedscale$[ebp], xmm0

; 528  : 	speedscale -= (int)speedscale & ~127;

	cvttss2si eax, DWORD PTR _speedscale$[ebp]
	and	eax, -128				; ffffff80H
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _speedscale$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _speedscale$[ebp], xmm1

; 529  : 
; 530  : 	VectorSubtract( v, RI.vieworg, dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR _RI[eax+200]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR _RI[eax+200]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _dir$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR _RI[ecx+200]
	movss	DWORD PTR tv91[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv91[ebp]
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 531  : 	dir[2] *= 3.0f; // flatten the sphere

	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _dir$[ebp+eax]
	mulss	xmm0, DWORD PTR __real@40400000
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _dir$[ebp+ecx], xmm0

; 532  : 
; 533  : 	length = VectorLength( dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _dir$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm1, DWORD PTR _dir$[ebp+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR _dir$[ebp+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _length$[ebp]

; 534  : 	length = 6.0f * 63.0f / length;

	movss	xmm0, DWORD PTR __real@43bd0000
	divss	xmm0, DWORD PTR _length$[ebp]
	movss	DWORD PTR _length$[ebp], xmm0

; 535  : 
; 536  : 	*s = ( speedscale + dir[0] * length ) * (1.0f / 128.0f);

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _length$[ebp]
	addss	xmm0, DWORD PTR _speedscale$[ebp]
	mulss	xmm0, DWORD PTR __real@3c000000
	mov	edx, DWORD PTR _s$[ebp]
	movss	DWORD PTR [edx], xmm0

; 537  : 	*t = ( speedscale + dir[1] * length ) * (1.0f / 128.0f);

	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _dir$[ebp+eax]
	mulss	xmm0, DWORD PTR _length$[ebp]
	addss	xmm0, DWORD PTR _speedscale$[ebp]
	mulss	xmm0, DWORD PTR __real@3c000000
	mov	ecx, DWORD PTR _t$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 538  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_CloudTexCoord ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _R_CloudVertex
_TEXT	SEGMENT
tv128 = -96						; size = 4
_b$ = -28						; size = 12
_farclip$ = -16						; size = 4
_k$ = -12						; size = 4
_j$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_t$ = 12						; size = 4
_axis$ = 16						; size = 4
_v$ = 20						; size = 4
_R_CloudVertex PROC					; COMDAT

; 499  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 500  : 	int	j, k, farclip;
; 501  : 	vec3_t	b;
; 502  : 
; 503  : 	farclip = RI.farClip;

	cvttss2si eax, DWORD PTR _RI+308
	mov	DWORD PTR _farclip$[ebp], eax

; 504  : 
; 505  : 	b[0] = s * (farclip >> 1);

	mov	eax, DWORD PTR _farclip$[ebp]
	sar	eax, 1
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _b$[ebp+edx], xmm0

; 506  : 	b[1] = t * (farclip >> 1);

	mov	eax, DWORD PTR _farclip$[ebp]
	sar	eax, 1
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _b$[ebp+ecx], xmm0

; 507  : 	b[2] = (farclip >> 1);

	mov	eax, DWORD PTR _farclip$[ebp]
	sar	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _b$[ebp+ecx], xmm0

; 508  : 
; 509  : 	for( j = 0; j < 3; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@R_CloudVer
$LN2@R_CloudVer:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@R_CloudVer:
	cmp	DWORD PTR _j$[ebp], 3
	jge	SHORT $LN3@R_CloudVer

; 510  : 	{
; 511  : 		k = st_to_vec[axis][j];

	imul	eax, DWORD PTR _axis$[ebp], 12
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _st_to_vec[eax+ecx*4]
	mov	DWORD PTR _k$[ebp], edx

; 512  : 		v[j] = (k < 0) ? -b[-k-1] : b[k-1];

	cmp	DWORD PTR _k$[ebp], 0
	jge	SHORT $LN6@R_CloudVer
	mov	eax, DWORD PTR _k$[ebp]
	neg	eax
	movss	xmm0, DWORD PTR _b$[ebp+eax*4-4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv128[ebp], xmm0
	jmp	SHORT $LN7@R_CloudVer
$LN6@R_CloudVer:
	mov	ecx, DWORD PTR _k$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp+ecx*4-4]
	movss	DWORD PTR tv128[ebp], xmm0
$LN7@R_CloudVer:
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR tv128[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0

; 513  : 		v[j] += RI.cullorigin[j];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	addss	xmm0, DWORD PTR _RI[edx*4+260]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0

; 514  : 	}

	jmp	$LN2@R_CloudVer
$LN3@R_CloudVer:

; 515  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_CloudVertex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _R_UnloadSkybox
_TEXT	SEGMENT
_i$ = -4						; size = 4
_R_UnloadSkybox PROC					; COMDAT

; 356  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 357  : 	int	i;
; 358  : 
; 359  : 	// release old skybox
; 360  : 	for( i = 0; i < 6; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_UnloadSk
$LN2@R_UnloadSk:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_UnloadSk:
	cmp	DWORD PTR _i$[ebp], 6
	jge	SHORT $LN3@R_UnloadSk

; 361  : 	{
; 362  : 		if( !tr.skyboxTextures[i] ) continue;

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _tr[eax*4+1056], 0
	jne	SHORT $LN5@R_UnloadSk
	jmp	SHORT $LN2@R_UnloadSk
$LN5@R_UnloadSk:

; 363  : 		GL_FreeTexture( tr.skyboxTextures[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tr[eax*4+1056]
	push	ecx
	call	_GL_FreeTexture
	add	esp, 4

; 364  : 	}

	jmp	SHORT $LN2@R_UnloadSk
$LN3@R_UnloadSk:

; 365  : 
; 366  : 	tr.skyboxbasenum = 5800;	// set skybox base (to let some mods load hi-res skyboxes)

	mov	DWORD PTR _tr+1220, 5800		; 000016a8H

; 367  : 
; 368  : 	memset( tr.skyboxTextures, 0, sizeof( tr.skyboxTextures ));

	push	24					; 00000018H
	push	0
	push	OFFSET _tr+1056
	call	_memset
	add	esp, 12					; 0000000cH

; 369  : 	ClearBits( world.flags, FWORLD_CUSTOM_SKYBOX );

	mov	eax, DWORD PTR _world+8
	and	eax, -3					; fffffffdH
	mov	DWORD PTR _world+8, eax

; 370  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_UnloadSkybox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _MakeSkyVec
_TEXT	SEGMENT
tv128 = -108						; size = 4
_b$ = -40						; size = 12
_v$ = -28						; size = 12
_farclip$ = -16						; size = 4
_k$ = -12						; size = 4
_j$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_t$ = 12						; size = 4
_axis$ = 16						; size = 4
_MakeSkyVec PROC					; COMDAT

; 250  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 251  : 	int	j, k, farclip;
; 252  : 	vec3_t	v, b;
; 253  : 
; 254  : 	farclip = RI.farClip;

	cvttss2si eax, DWORD PTR _RI+308
	mov	DWORD PTR _farclip$[ebp], eax

; 255  : 
; 256  : 	b[0] = s * (farclip >> 1);

	mov	eax, DWORD PTR _farclip$[ebp]
	sar	eax, 1
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _b$[ebp+edx], xmm0

; 257  : 	b[1] = t * (farclip >> 1);

	mov	eax, DWORD PTR _farclip$[ebp]
	sar	eax, 1
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _b$[ebp+ecx], xmm0

; 258  : 	b[2] = (farclip >> 1);

	mov	eax, DWORD PTR _farclip$[ebp]
	sar	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _b$[ebp+ecx], xmm0

; 259  : 
; 260  : 	for( j = 0; j < 3; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@MakeSkyVec
$LN2@MakeSkyVec:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@MakeSkyVec:
	cmp	DWORD PTR _j$[ebp], 3
	jge	SHORT $LN3@MakeSkyVec

; 261  : 	{
; 262  : 		k = st_to_vec[axis][j];

	imul	eax, DWORD PTR _axis$[ebp], 12
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _st_to_vec[eax+ecx*4]
	mov	DWORD PTR _k$[ebp], edx

; 263  : 		v[j] = (k < 0) ? -b[-k-1] : b[k-1];

	cmp	DWORD PTR _k$[ebp], 0
	jge	SHORT $LN12@MakeSkyVec
	mov	eax, DWORD PTR _k$[ebp]
	neg	eax
	movss	xmm0, DWORD PTR _b$[ebp+eax*4-4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv128[ebp], xmm0
	jmp	SHORT $LN13@MakeSkyVec
$LN12@MakeSkyVec:
	mov	ecx, DWORD PTR _k$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp+ecx*4-4]
	movss	DWORD PTR tv128[ebp], xmm0
$LN13@MakeSkyVec:
	mov	edx, DWORD PTR _j$[ebp]
	movss	xmm0, DWORD PTR tv128[ebp]
	movss	DWORD PTR _v$[ebp+edx*4], xmm0

; 264  : 		v[j] += RI.cullorigin[j];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp+eax*4]
	addss	xmm0, DWORD PTR _RI[ecx*4+260]
	mov	edx, DWORD PTR _j$[ebp]
	movss	DWORD PTR _v$[ebp+edx*4], xmm0

; 265  : 	}

	jmp	SHORT $LN2@MakeSkyVec
$LN3@MakeSkyVec:

; 266  : 
; 267  : 	// avoid bilerp seam
; 268  : 	s = (s + 1.0f) * 0.5f;

	movss	xmm0, DWORD PTR _s$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _s$[ebp], xmm0

; 269  : 	t = (t + 1.0f) * 0.5f;

	movss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _t$[ebp], xmm0

; 270  : 
; 271  : 	if( s < 1.0f / 512.0f )

	movss	xmm0, DWORD PTR __real@3b000000
	comiss	xmm0, DWORD PTR _s$[ebp]
	jbe	SHORT $LN5@MakeSkyVec

; 272  : 		s = 1.0f / 512.0f;

	movss	xmm0, DWORD PTR __real@3b000000
	movss	DWORD PTR _s$[ebp], xmm0
	jmp	SHORT $LN7@MakeSkyVec
$LN5@MakeSkyVec:

; 273  : 	else if( s > 511.0f / 512.0f )

	movss	xmm0, DWORD PTR _s$[ebp]
	comiss	xmm0, DWORD PTR __real@3f7f8000
	jbe	SHORT $LN7@MakeSkyVec

; 274  : 		s = 511.0f / 512.0f;

	movss	xmm0, DWORD PTR __real@3f7f8000
	movss	DWORD PTR _s$[ebp], xmm0
$LN7@MakeSkyVec:

; 275  : 	if( t < 1.0f / 512.0f )

	movss	xmm0, DWORD PTR __real@3b000000
	comiss	xmm0, DWORD PTR _t$[ebp]
	jbe	SHORT $LN8@MakeSkyVec

; 276  : 		t = 1.0f / 512.0f;

	movss	xmm0, DWORD PTR __real@3b000000
	movss	DWORD PTR _t$[ebp], xmm0
	jmp	SHORT $LN10@MakeSkyVec
$LN8@MakeSkyVec:

; 277  : 	else if( t > 511.0f / 512.0f )

	movss	xmm0, DWORD PTR _t$[ebp]
	comiss	xmm0, DWORD PTR __real@3f7f8000
	jbe	SHORT $LN10@MakeSkyVec

; 278  : 		t = 511.0f / 512.0f;

	movss	xmm0, DWORD PTR __real@3f7f8000
	movss	DWORD PTR _t$[ebp], xmm0
$LN10@MakeSkyVec:

; 279  : 
; 280  : 	t = 1.0f - t;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR _t$[ebp], xmm0

; 281  : 
; 282  : 	pglTexCoord2f( s, t );

	push	ecx
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 283  : 	pglVertex3fv( v );

	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	DWORD PTR _pglVertex3fv

; 284  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_MakeSkyVec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _ClipSkyPolygon
_TEXT	SEGMENT
tv175 = -4688						; size = 4
_j$ = -4172						; size = 4
_i$ = -4168						; size = 4
_newc$ = -4164						; size = 8
_newv$ = -4156						; size = 3096
_sides$ = -1060						; size = 516
_dists$ = -544						; size = 516
_back$ = -28						; size = 4
_front$ = -24						; size = 4
_e$ = -20						; size = 4
_d$ = -16						; size = 4
_v$ = -12						; size = 4
_norm$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_nump$ = 8						; size = 4
_vecs$ = 12						; size = 4
_stage$ = 16						; size = 4
_ClipSkyPolygon PROC					; COMDAT

; 155  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 4688				; 00001250H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 156  : 	const float	*norm;
; 157  : 	float		*v, d, e;
; 158  : 	qboolean		front, back;
; 159  : 	float		dists[MAX_CLIP_VERTS + 1];
; 160  : 	int		sides[MAX_CLIP_VERTS + 1];
; 161  : 	vec3_t		newv[2][MAX_CLIP_VERTS + 1];
; 162  : 	int		newc[2];
; 163  : 	int		i, j;
; 164  : 
; 165  : 	if( nump > MAX_CLIP_VERTS )

	cmp	DWORD PTR _nump$[ebp], 128		; 00000080H
	jle	SHORT $loc1$27

; 166  : 		Host_Error( "ClipSkyPolygon: MAX_CLIP_VERTS\n" );

	push	OFFSET ??_C@_0CA@BKNCOCCA@ClipSkyPolygon?3?5MAX_CLIP_VERTS?6@
	call	_Host_Error
	add	esp, 4
$loc1$27:

; 167  : loc1:
; 168  : 	if( stage == 6 )

	cmp	DWORD PTR _stage$[ebp], 6
	jne	SHORT $LN14@ClipSkyPol

; 169  : 	{	
; 170  : 		// fully clipped, so draw it
; 171  : 		DrawSkyPolygon( nump, vecs );

	mov	eax, DWORD PTR _vecs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nump$[ebp]
	push	ecx
	call	_DrawSkyPolygon
	add	esp, 8

; 172  : 		return;

	jmp	$LN1@ClipSkyPol
$LN14@ClipSkyPol:

; 173  : 	}
; 174  : 
; 175  : 	front = back = false;

	mov	DWORD PTR _back$[ebp], 0
	mov	eax, DWORD PTR _back$[ebp]
	mov	DWORD PTR _front$[ebp], eax

; 176  : 	norm = skyclip[stage];

	imul	eax, DWORD PTR _stage$[ebp], 12
	add	eax, OFFSET _skyclip
	mov	DWORD PTR _norm$[ebp], eax

; 177  : 	for( i = 0, v = vecs; i < nump; i++, v += 3 )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _vecs$[ebp]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN4@ClipSkyPol
$LN2@ClipSkyPol:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _v$[ebp], ecx
$LN4@ClipSkyPol:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nump$[ebp]
	jge	$LN3@ClipSkyPol

; 178  : 	{
; 179  : 		d = DotProduct( v, norm );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _v$[ebp]
	mov	esi, DWORD PTR _norm$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _v$[ebp]
	mov	esi, DWORD PTR _norm$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _v$[ebp]
	mov	esi, DWORD PTR _norm$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _d$[ebp], xmm0

; 180  : 		if( d > ON_EPSILON )

	movss	xmm0, DWORD PTR _d$[ebp]
	comiss	xmm0, DWORD PTR __real@3dcccccd
	jbe	SHORT $LN15@ClipSkyPol

; 181  : 		{
; 182  : 			front = true;

	mov	DWORD PTR _front$[ebp], 1

; 183  : 			sides[i] = SIDE_FRONT;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _sides$[ebp+eax*4], 0

; 184  : 		}

	jmp	SHORT $LN18@ClipSkyPol
$LN15@ClipSkyPol:

; 185  : 		else if( d < -ON_EPSILON )

	movss	xmm0, DWORD PTR __real@bdcccccd
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN17@ClipSkyPol

; 186  : 		{
; 187  : 			back = true;

	mov	DWORD PTR _back$[ebp], 1

; 188  : 			sides[i] = SIDE_BACK;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _sides$[ebp+eax*4], 1

; 189  : 		}

	jmp	SHORT $LN18@ClipSkyPol
$LN17@ClipSkyPol:

; 190  : 		else
; 191  : 		{
; 192  : 			sides[i] = SIDE_ON;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _sides$[ebp+eax*4], 2
$LN18@ClipSkyPol:

; 193  : 		}
; 194  : 		dists[i] = d;

	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _dists$[ebp+eax*4], xmm0

; 195  : 	}

	jmp	$LN2@ClipSkyPol
$LN3@ClipSkyPol:

; 196  : 
; 197  : 	if( !front || !back )

	cmp	DWORD PTR _front$[ebp], 0
	je	SHORT $LN20@ClipSkyPol
	cmp	DWORD PTR _back$[ebp], 0
	jne	SHORT $LN19@ClipSkyPol
$LN20@ClipSkyPol:

; 198  : 	{	
; 199  : 		// not clipped
; 200  : 		stage++;

	mov	eax, DWORD PTR _stage$[ebp]
	add	eax, 1
	mov	DWORD PTR _stage$[ebp], eax

; 201  : 		goto loc1;

	jmp	$loc1$27
$LN19@ClipSkyPol:

; 202  : 	}
; 203  : 
; 204  : 	// clip it
; 205  : 	sides[i] = sides[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _sides$[ebp+ecx]
	mov	DWORD PTR _sides$[ebp+edx*4], eax

; 206  : 	dists[i] = dists[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _dists$[ebp+ecx]
	mov	DWORD PTR _dists$[ebp+edx*4], eax

; 207  : 	VectorCopy( vecs, ( vecs + ( i * 3 )));

	mov	eax, 4
	imul	ecx, eax, 0
	imul	edx, DWORD PTR _i$[ebp], 3
	mov	eax, DWORD PTR _vecs$[ebp]
	lea	edx, DWORD PTR [eax+edx*4]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _vecs$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _i$[ebp], 3
	mov	ecx, DWORD PTR _vecs$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _vecs$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [eax+ecx], edx
	mov	eax, 4
	shl	eax, 1
	imul	ecx, DWORD PTR _i$[ebp], 3
	mov	edx, DWORD PTR _vecs$[ebp]
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _vecs$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 208  : 	newc[0] = newc[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _newc$[ebp+eax], 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _newc$[ebp+edx], 0

; 209  : 
; 210  : 	for( i = 0, v = vecs; i < nump; i++, v += 3 )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _vecs$[ebp]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN7@ClipSkyPol
$LN5@ClipSkyPol:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _v$[ebp], ecx
$LN7@ClipSkyPol:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nump$[ebp]
	jge	$LN6@ClipSkyPol

; 211  : 	{
; 212  : 		switch( sides[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _sides$[ebp+eax*4]
	mov	DWORD PTR tv175[ebp], ecx
	cmp	DWORD PTR tv175[ebp], 0
	je	SHORT $LN21@ClipSkyPol
	cmp	DWORD PTR tv175[ebp], 1
	je	$LN22@ClipSkyPol
	cmp	DWORD PTR tv175[ebp], 2
	je	$LN23@ClipSkyPol
	jmp	$LN8@ClipSkyPol
$LN21@ClipSkyPol:

; 213  : 		{
; 214  : 		case SIDE_FRONT:
; 215  : 			VectorCopy( v, newv[0][newc[0]] );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 1548				; 0000060cH
	imul	eax, edx, 0
	lea	edx, DWORD PTR _newv$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 0
	imul	eax, DWORD PTR _newc$[ebp+eax], 12
	add	edx, eax
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 1548				; 0000060cH
	imul	ecx, eax, 0
	lea	eax, DWORD PTR _newv$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 0
	imul	ecx, DWORD PTR _newc$[ebp+ecx], 12
	add	eax, ecx
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [eax+ecx], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 1548				; 0000060cH
	imul	edx, ecx, 0
	lea	ecx, DWORD PTR _newv$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 0
	imul	edx, DWORD PTR _newc$[ebp+edx], 12
	add	ecx, edx
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 216  : 			newc[0]++;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _newc$[ebp+ecx]
	add	edx, 1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _newc$[ebp+ecx], edx

; 217  : 			break;

	jmp	$LN8@ClipSkyPol
$LN22@ClipSkyPol:

; 218  : 		case SIDE_BACK:
; 219  : 			VectorCopy( v, newv[1][newc[1]] );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 1548				; 0000060cH
	shl	edx, 0
	lea	eax, DWORD PTR _newv$[ebp+edx]
	mov	edx, 4
	shl	edx, 0
	imul	edx, DWORD PTR _newc$[ebp+edx], 12
	add	eax, edx
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 1548				; 0000060cH
	shl	eax, 0
	lea	ecx, DWORD PTR _newv$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	imul	eax, DWORD PTR _newc$[ebp+eax], 12
	add	ecx, eax
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 1548				; 0000060cH
	shl	ecx, 0
	lea	edx, DWORD PTR _newv$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	imul	ecx, DWORD PTR _newc$[ebp+ecx], 12
	add	edx, ecx
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 220  : 			newc[1]++;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _newc$[ebp+eax]
	add	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _newc$[ebp+edx], ecx

; 221  : 			break;

	jmp	$LN8@ClipSkyPol
$LN23@ClipSkyPol:

; 222  : 		case SIDE_ON:
; 223  : 			VectorCopy( v, newv[0][newc[0]] );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 1548				; 0000060cH
	imul	eax, edx, 0
	lea	edx, DWORD PTR _newv$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 0
	imul	eax, DWORD PTR _newc$[ebp+eax], 12
	add	edx, eax
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 1548				; 0000060cH
	imul	ecx, eax, 0
	lea	eax, DWORD PTR _newv$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 0
	imul	ecx, DWORD PTR _newc$[ebp+ecx], 12
	add	eax, ecx
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [eax+ecx], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 1548				; 0000060cH
	imul	edx, ecx, 0
	lea	ecx, DWORD PTR _newv$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 0
	imul	edx, DWORD PTR _newc$[ebp+edx], 12
	add	ecx, edx
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 224  : 			newc[0]++;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _newc$[ebp+ecx]
	add	edx, 1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _newc$[ebp+ecx], edx

; 225  : 			VectorCopy( v, newv[1][newc[1]] );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 1548				; 0000060cH
	shl	edx, 0
	lea	eax, DWORD PTR _newv$[ebp+edx]
	mov	edx, 4
	shl	edx, 0
	imul	edx, DWORD PTR _newc$[ebp+edx], 12
	add	eax, edx
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 1548				; 0000060cH
	shl	eax, 0
	lea	ecx, DWORD PTR _newv$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	imul	eax, DWORD PTR _newc$[ebp+eax], 12
	add	ecx, eax
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 1548				; 0000060cH
	shl	ecx, 0
	lea	edx, DWORD PTR _newv$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	imul	ecx, DWORD PTR _newc$[ebp+ecx], 12
	add	edx, ecx
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 226  : 			newc[1]++;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _newc$[ebp+eax]
	add	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _newc$[ebp+edx], ecx
$LN8@ClipSkyPol:

; 227  : 			break;
; 228  : 		}
; 229  : 
; 230  : 		if( sides[i] == SIDE_ON || sides[i+1] == SIDE_ON || sides[i+1] == sides[i] )

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _sides$[ebp+eax*4], 2
	je	SHORT $LN25@ClipSkyPol
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _sides$[ebp+eax*4+4], 2
	je	SHORT $LN25@ClipSkyPol
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _sides$[ebp+eax*4+4]
	cmp	edx, DWORD PTR _sides$[ebp+ecx*4]
	jne	SHORT $LN24@ClipSkyPol
$LN25@ClipSkyPol:

; 231  : 			continue;

	jmp	$LN5@ClipSkyPol
$LN24@ClipSkyPol:

; 232  : 
; 233  : 		d = dists[i] / ( dists[i] - dists[i+1] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _dists$[ebp+eax*4]
	subss	xmm0, DWORD PTR _dists$[ebp+ecx*4+4]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm1, DWORD PTR _dists$[ebp+edx*4]
	divss	xmm1, xmm0
	movss	DWORD PTR _d$[ebp], xmm1

; 234  : 		for( j = 0; j < 3; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN12@ClipSkyPol
$LN10@ClipSkyPol:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN12@ClipSkyPol:
	cmp	DWORD PTR _j$[ebp], 3
	jge	$LN11@ClipSkyPol

; 235  : 		{
; 236  : 			e = v[j] + d * ( v[j+3] - v[j] );

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+12]
	subss	xmm0, DWORD PTR [esi+edx*4]
	mulss	xmm0, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR _e$[ebp], xmm0

; 237  : 			newv[0][newc[0]][j] = e;

	mov	eax, 1548				; 0000060cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _newv$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	imul	eax, DWORD PTR _newc$[ebp+ecx], 12
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	movss	xmm0, DWORD PTR _e$[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0

; 238  : 			newv[1][newc[1]][j] = e;

	mov	eax, 1548				; 0000060cH
	shl	eax, 0
	lea	ecx, DWORD PTR _newv$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _newc$[ebp+edx], 12
	add	ecx, eax
	mov	edx, DWORD PTR _j$[ebp]
	movss	xmm0, DWORD PTR _e$[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0

; 239  : 		}

	jmp	$LN10@ClipSkyPol
$LN11@ClipSkyPol:

; 240  : 		newc[0]++;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _newc$[ebp+ecx]
	add	edx, 1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _newc$[ebp+ecx], edx

; 241  : 		newc[1]++;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _newc$[ebp+eax]
	add	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _newc$[ebp+edx], ecx

; 242  : 	}

	jmp	$LN5@ClipSkyPol
$LN6@ClipSkyPol:

; 243  : 
; 244  : 	// continue
; 245  : 	ClipSkyPolygon( newc[0], newv[0][0], stage + 1 );

	mov	eax, DWORD PTR _stage$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, 1548				; 0000060cH
	imul	edx, ecx, 0
	lea	eax, DWORD PTR _newv$[ebp+edx]
	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 0
	add	eax, edx
	push	eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _newc$[ebp+ecx]
	push	edx
	call	_ClipSkyPolygon
	add	esp, 12					; 0000000cH

; 246  : 	ClipSkyPolygon( newc[1], newv[1][0], stage + 1 );

	mov	eax, DWORD PTR _stage$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, 1548				; 0000060cH
	shl	ecx, 0
	lea	edx, DWORD PTR _newv$[ebp+ecx]
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	edx, ecx
	push	edx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _newc$[ebp+edx]
	push	eax
	call	_ClipSkyPolygon
	add	esp, 12					; 0000000cH
$LN1@ClipSkyPol:

; 247  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ClipSkyPolygon ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _DrawSkyPolygon
_TEXT	SEGMENT
tv231 = -124						; size = 4
tv215 = -124						; size = 4
tv198 = -124						; size = 4
tv181 = -124						; size = 4
tv177 = -124						; size = 4
tv163 = -124						; size = 4
tv93 = -124						; size = 4
_av$ = -56						; size = 12
_v$ = -44						; size = 12
_vp$ = -32						; size = 4
_dv$ = -28						; size = 4
_t$ = -24						; size = 4
_s$ = -20						; size = 4
_axis$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_nump$ = 8						; size = 4
_vecs$ = 12						; size = 4
_DrawSkyPolygon PROC					; COMDAT

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 108  : 	int	i, j, axis;
; 109  : 	float	s, t, dv, *vp;
; 110  : 	vec3_t	v, av;
; 111  : 
; 112  : 	// decide which face it maps to
; 113  : 	VectorClear( v );

	mov	eax, 4
	shl	eax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR _v$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR _v$[ebp+ecx], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR _v$[ebp+eax], xmm0

; 114  : 
; 115  : 	for( i = 0, vp = vecs; i < nump; i++, vp += 3 )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _vecs$[ebp]
	mov	DWORD PTR _vp$[ebp], eax
	jmp	SHORT $LN4@DrawSkyPol
$LN2@DrawSkyPol:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _vp$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _vp$[ebp], ecx
$LN4@DrawSkyPol:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nump$[ebp]
	jge	$LN3@DrawSkyPol

; 116  : 		VectorAdd( vp, v, v );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _vp$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR _v$[ebp+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _v$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _vp$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	addss	xmm0, DWORD PTR _v$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _v$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _vp$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _v$[ebp+ecx]
	movss	DWORD PTR tv93[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv93[ebp]
	movss	DWORD PTR _v$[ebp+eax], xmm0
	jmp	$LN2@DrawSkyPol
$LN3@DrawSkyPol:

; 117  : 
; 118  : 	av[0] = fabs( v[0] );

	mov	eax, 4
	imul	ecx, eax, 0
	cvtss2sd xmm0, DWORD PTR _v$[ebp+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	mov	edx, 4
	imul	eax, edx, 0
	fstp	DWORD PTR _av$[ebp+eax]

; 119  : 	av[1] = fabs( v[1] );

	mov	eax, 4
	shl	eax, 0
	cvtss2sd xmm0, DWORD PTR _v$[ebp+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	fstp	DWORD PTR _av$[ebp+ecx]

; 120  : 	av[2] = fabs( v[2] );

	mov	eax, 4
	shl	eax, 1
	cvtss2sd xmm0, DWORD PTR _v$[ebp+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	fstp	DWORD PTR _av$[ebp+ecx]

; 121  : 
; 122  : 	if( av[0] > av[1] && av[0] > av[2] )

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _av$[ebp+ecx]
	comiss	xmm0, DWORD PTR _av$[ebp+edx]
	jbe	SHORT $LN8@DrawSkyPol
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _av$[ebp+ecx]
	comiss	xmm0, DWORD PTR _av$[ebp+edx]
	jbe	SHORT $LN8@DrawSkyPol

; 123  : 		axis = (v[0] < 0) ? 1 : 0;

	mov	eax, 4
	imul	ecx, eax, 0
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR _v$[ebp+ecx]
	jbe	SHORT $LN18@DrawSkyPol
	mov	DWORD PTR tv163[ebp], 1
	jmp	SHORT $LN19@DrawSkyPol
$LN18@DrawSkyPol:
	mov	DWORD PTR tv163[ebp], 0
$LN19@DrawSkyPol:
	mov	edx, DWORD PTR tv163[ebp]
	mov	DWORD PTR _axis$[ebp], edx
	jmp	$LN11@DrawSkyPol
$LN8@DrawSkyPol:

; 124  : 	else if( av[1] > av[2] && av[1] > av[0] )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _av$[ebp+eax]
	comiss	xmm0, DWORD PTR _av$[ebp+ecx]
	jbe	SHORT $LN10@DrawSkyPol
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR _av$[ebp+eax]
	comiss	xmm0, DWORD PTR _av$[ebp+edx]
	jbe	SHORT $LN10@DrawSkyPol

; 125  : 		axis = (v[1] < 0) ? 3 : 2;

	mov	eax, 4
	shl	eax, 0
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR _v$[ebp+eax]
	jbe	SHORT $LN20@DrawSkyPol
	mov	DWORD PTR tv177[ebp], 3
	jmp	SHORT $LN21@DrawSkyPol
$LN20@DrawSkyPol:
	mov	DWORD PTR tv177[ebp], 2
$LN21@DrawSkyPol:
	mov	ecx, DWORD PTR tv177[ebp]
	mov	DWORD PTR _axis$[ebp], ecx
	jmp	SHORT $LN11@DrawSkyPol
$LN10@DrawSkyPol:

; 126  : 	else axis = (v[2] < 0) ? 5 : 4;

	mov	eax, 4
	shl	eax, 1
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR _v$[ebp+eax]
	jbe	SHORT $LN22@DrawSkyPol
	mov	DWORD PTR tv181[ebp], 5
	jmp	SHORT $LN23@DrawSkyPol
$LN22@DrawSkyPol:
	mov	DWORD PTR tv181[ebp], 4
$LN23@DrawSkyPol:
	mov	ecx, DWORD PTR tv181[ebp]
	mov	DWORD PTR _axis$[ebp], ecx
$LN11@DrawSkyPol:

; 127  : 
; 128  : 	// project new texture coords
; 129  : 	for( i = 0; i < nump; i++, vecs += 3 )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@DrawSkyPol
$LN5@DrawSkyPol:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _vecs$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _vecs$[ebp], ecx
$LN7@DrawSkyPol:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nump$[ebp]
	jge	$LN6@DrawSkyPol

; 130  : 	{
; 131  : 		j = vec_to_st[axis][2];

	imul	eax, DWORD PTR _axis$[ebp], 12
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _vec_to_st[eax+ecx]
	mov	DWORD PTR _j$[ebp], edx

; 132  : 		dv = (j > 0) ? vecs[j-1] : -vecs[-j-1];

	cmp	DWORD PTR _j$[ebp], 0
	jle	SHORT $LN24@DrawSkyPol
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _vecs$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4-4]
	movss	DWORD PTR tv198[ebp], xmm0
	jmp	SHORT $LN25@DrawSkyPol
$LN24@DrawSkyPol:
	mov	edx, DWORD PTR _j$[ebp]
	neg	edx
	mov	eax, DWORD PTR _vecs$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4-4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv198[ebp], xmm0
$LN25@DrawSkyPol:
	movss	xmm0, DWORD PTR tv198[ebp]
	movss	DWORD PTR _dv$[ebp], xmm0

; 133  : 
; 134  : 		if( dv == 0.0f ) continue;

	movss	xmm0, DWORD PTR _dv$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN12@DrawSkyPol
	jmp	$LN5@DrawSkyPol
$LN12@DrawSkyPol:

; 135  : 
; 136  : 		j = vec_to_st[axis][0];

	imul	eax, DWORD PTR _axis$[ebp], 12
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _vec_to_st[eax+edx]
	mov	DWORD PTR _j$[ebp], eax

; 137  : 		s = (j < 0) ? -vecs[-j-1] / dv : vecs[j-1] / dv;

	cmp	DWORD PTR _j$[ebp], 0
	jge	SHORT $LN26@DrawSkyPol
	mov	eax, DWORD PTR _j$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _vecs$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4-4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR _dv$[ebp]
	movss	DWORD PTR tv215[ebp], xmm0
	jmp	SHORT $LN27@DrawSkyPol
$LN26@DrawSkyPol:
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _vecs$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4-4]
	divss	xmm0, DWORD PTR _dv$[ebp]
	movss	DWORD PTR tv215[ebp], xmm0
$LN27@DrawSkyPol:
	movss	xmm0, DWORD PTR tv215[ebp]
	movss	DWORD PTR _s$[ebp], xmm0

; 138  : 
; 139  : 		j = vec_to_st[axis][1];

	imul	eax, DWORD PTR _axis$[ebp], 12
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _vec_to_st[eax+ecx]
	mov	DWORD PTR _j$[ebp], edx

; 140  : 		t = (j < 0) ? -vecs[-j-1] / dv : vecs[j-1] / dv;

	cmp	DWORD PTR _j$[ebp], 0
	jge	SHORT $LN28@DrawSkyPol
	mov	eax, DWORD PTR _j$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _vecs$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4-4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR _dv$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	jmp	SHORT $LN29@DrawSkyPol
$LN28@DrawSkyPol:
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _vecs$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4-4]
	divss	xmm0, DWORD PTR _dv$[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
$LN29@DrawSkyPol:
	movss	xmm0, DWORD PTR tv231[ebp]
	movss	DWORD PTR _t$[ebp], xmm0

; 141  : 
; 142  : 		if( s < RI.skyMins[0][axis] ) RI.skyMins[0][axis] = s;

	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _axis$[ebp]
	movss	xmm0, DWORD PTR _RI[ecx+edx*4+360]
	comiss	xmm0, DWORD PTR _s$[ebp]
	jbe	SHORT $LN13@DrawSkyPol
	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _axis$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _RI[ecx+edx*4+360], xmm0
$LN13@DrawSkyPol:

; 143  : 		if( t < RI.skyMins[1][axis] ) RI.skyMins[1][axis] = t;

	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	xmm0, DWORD PTR _RI[eax+ecx*4+360]
	comiss	xmm0, DWORD PTR _t$[ebp]
	jbe	SHORT $LN14@DrawSkyPol
	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR _RI[eax+ecx*4+360], xmm0
$LN14@DrawSkyPol:

; 144  : 		if( s > RI.skyMaxs[0][axis] ) RI.skyMaxs[0][axis] = s;

	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _axis$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	comiss	xmm0, DWORD PTR _RI[ecx+edx*4+408]
	jbe	SHORT $LN15@DrawSkyPol
	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _axis$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _RI[ecx+edx*4+408], xmm0
$LN15@DrawSkyPol:

; 145  : 		if( t > RI.skyMaxs[1][axis] ) RI.skyMaxs[1][axis] = t;

	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	xmm0, DWORD PTR _t$[ebp]
	comiss	xmm0, DWORD PTR _RI[eax+ecx*4+408]
	jbe	SHORT $LN16@DrawSkyPol
	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, DWORD PTR _axis$[ebp]
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR _RI[eax+ecx*4+408], xmm0
$LN16@DrawSkyPol:

; 146  : 	}

	jmp	$LN5@DrawSkyPol
$LN6@DrawSkyPol:

; 147  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_DrawSkyPolygon ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _CheckSkybox
_TEXT	SEGMENT
_sidename$ = -32					; size = 4
_num_checked_sides$ = -28				; size = 4
_j$ = -24						; size = 4
_i$ = -20						; size = 4
_skybox_ext$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_CheckSkybox PROC					; COMDAT

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 71   : 	const char	*skybox_ext[3] = { "dds", "tga", "bmp" };

	mov	DWORD PTR _skybox_ext$[ebp], OFFSET ??_C@_03CBDDAJHO@dds@
	mov	DWORD PTR _skybox_ext$[ebp+4], OFFSET ??_C@_03LJIJAGL@tga@
	mov	DWORD PTR _skybox_ext$[ebp+8], OFFSET ??_C@_03CAKEDOOO@bmp@

; 72   : 	int		i, j, num_checked_sides;
; 73   : 	const char	*sidename;
; 74   : 
; 75   : 	// search for skybox images				
; 76   : 	for( i = 0; i < 3; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CheckSkybo
$LN2@CheckSkybo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CheckSkybo:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN3@CheckSkybo

; 77   : 	{	
; 78   : 		num_checked_sides = 0;

	mov	DWORD PTR _num_checked_sides$[ebp], 0

; 79   : 		for( j = 0; j < 6; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@CheckSkybo
$LN5@CheckSkybo:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@CheckSkybo:
	cmp	DWORD PTR _j$[ebp], 6
	jge	SHORT $LN6@CheckSkybo

; 80   : 		{         
; 81   : 			// build side name
; 82   : 			sidename = va( "%s%s.%s", name, r_skyBoxSuffix[j], skybox_ext[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _skybox_ext$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _r_skyBoxSuffix[edx*4]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_07GFKBPOLL@?$CFs?$CFs?4?$CFs@
	call	_va
	add	esp, 16					; 00000010H
	mov	DWORD PTR _sidename$[ebp], eax

; 83   : 			if( FS_FileExists( sidename, false ))

	push	0
	mov	eax, DWORD PTR _sidename$[ebp]
	push	eax
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@CheckSkybo

; 84   : 				num_checked_sides++;

	mov	eax, DWORD PTR _num_checked_sides$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_checked_sides$[ebp], eax
$LN11@CheckSkybo:

; 85   : 
; 86   : 		}

	jmp	SHORT $LN5@CheckSkybo
$LN6@CheckSkybo:

; 87   : 
; 88   : 		if( num_checked_sides == 6 )

	cmp	DWORD PTR _num_checked_sides$[ebp], 6
	jne	SHORT $LN12@CheckSkybo

; 89   : 			return SKYBOX_HLSTYLE; // image exists

	mov	eax, 1
	jmp	SHORT $LN1@CheckSkybo
$LN12@CheckSkybo:

; 90   : 
; 91   : 		for( j = 0; j < 6; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN10@CheckSkybo
$LN8@CheckSkybo:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN10@CheckSkybo:
	cmp	DWORD PTR _j$[ebp], 6
	jge	SHORT $LN9@CheckSkybo

; 92   : 		{         
; 93   : 			// build side name
; 94   : 			sidename = va( "%s_%s.%s", name, r_skyBoxSuffix[j], skybox_ext[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _skybox_ext$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _r_skyBoxSuffix[edx*4]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_08LFLIFLDJ@?$CFs_?$CFs?4?$CFs@
	call	_va
	add	esp, 16					; 00000010H
	mov	DWORD PTR _sidename$[ebp], eax

; 95   : 			if( FS_FileExists( sidename, false ))

	push	0
	mov	eax, DWORD PTR _sidename$[ebp]
	push	eax
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@CheckSkybo

; 96   : 				num_checked_sides++;

	mov	eax, DWORD PTR _num_checked_sides$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_checked_sides$[ebp], eax
$LN13@CheckSkybo:

; 97   : 		}

	jmp	SHORT $LN8@CheckSkybo
$LN9@CheckSkybo:

; 98   : 
; 99   : 		if( num_checked_sides == 6 )

	cmp	DWORD PTR _num_checked_sides$[ebp], 6
	jne	SHORT $LN14@CheckSkybo

; 100  : 			return SKYBOX_Q1STYLE; // images exists

	mov	eax, 2
	jmp	SHORT $LN1@CheckSkybo
$LN14@CheckSkybo:

; 101  : 	}

	jmp	$LN2@CheckSkybo
$LN3@CheckSkybo:

; 102  : 
; 103  : 	return SKYBOX_MISSED;

	xor	eax, eax
$LN1@CheckSkybo:

; 104  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckSkybox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _R_SetupSky
_TEXT	SEGMENT
tv156 = -212						; size = 4
$T1 = -208						; size = 4
_result$ = -140						; size = 4
_i$ = -136						; size = 4
_sidename$ = -132					; size = 64
_loadname$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_skyboxname$ = 8					; size = 4
_R_SetupSky PROC					; COMDAT

; 435  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 436  : 	char	loadname[MAX_QPATH];
; 437  : 	char	sidename[MAX_QPATH];
; 438  : 	int	i, result;
; 439  : 
; 440  : 	if( !COM_CheckString( skyboxname ))

	mov	eax, DWORD PTR _skyboxname$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@R_SetupSky

; 441  : 	{
; 442  : 		R_UnloadSkybox();

	call	_R_UnloadSkybox

; 443  : 		return; // clear old skybox

	jmp	$LN12@R_SetupSky
$LN5@R_SetupSky:

; 444  : 	}
; 445  : 
; 446  : 	Q_snprintf( loadname, sizeof( loadname ), "gfx/env/%s", skyboxname );

	mov	eax, DWORD PTR _skyboxname$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@FGEKBPJ@gfx?1env?1?$CFs@
	push	64					; 00000040H
	lea	ecx, DWORD PTR _loadname$[ebp]
	push	ecx
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 447  : 	COM_StripExtension( loadname );

	lea	eax, DWORD PTR _loadname$[ebp]
	push	eax
	call	_COM_StripExtension
	add	esp, 4

; 448  : 
; 449  : 	// kill the underline suffix to find them manually later
; 450  : 	if( loadname[Q_strlen( loadname ) - 1] == '_' )

	lea	eax, DWORD PTR _loadname$[ebp]
	push	eax
	call	_Q_strlen
	add	esp, 4
	movsx	ecx, BYTE PTR _loadname$[ebp+eax-1]
	cmp	ecx, 95					; 0000005fH
	jne	SHORT $LN6@R_SetupSky

; 451  : 		loadname[Q_strlen( loadname ) - 1] = '\0';

	lea	eax, DWORD PTR _loadname$[ebp]
	push	eax
	call	_Q_strlen
	add	esp, 4
	sub	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 64			; 00000040H
	jae	SHORT $LN13@R_SetupSky
	jmp	SHORT $LN14@R_SetupSky
$LN13@R_SetupSky:
	call	___report_rangecheckfailure
$LN14@R_SetupSky:
	mov	ecx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _loadname$[ebp+ecx], 0
$LN6@R_SetupSky:

; 452  : 	result = CheckSkybox( loadname );

	lea	eax, DWORD PTR _loadname$[ebp]
	push	eax
	call	_CheckSkybox
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax

; 453  : 
; 454  : 	// to prevent infinite recursion if default skybox was missed
; 455  : 	if( result == SKYBOX_MISSED && Q_stricmp( loadname, DEFAULT_SKYBOX_PATH ))

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN7@R_SetupSky
	push	99999					; 0001869fH
	push	OFFSET ??_C@_0P@MLHADGPP@gfx?1env?1desert@
	lea	eax, DWORD PTR _loadname$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@R_SetupSky

; 456  : 	{
; 457  : 		Con_Reportf( S_WARN "missed or incomplete skybox '%s'\n", skyboxname );

	mov	eax, DWORD PTR _skyboxname$[ebp]
	push	eax
	push	OFFSET ??_C@_0CP@IGLALFEG@?$FO3Warning?3?$FO7?5missed?5or?5incomple@
	call	_Con_Reportf
	add	esp, 8

; 458  : 		R_SetupSky( "desert" ); // force to default

	push	OFFSET ??_C@_06OLPPELHM@desert@
	call	_R_SetupSky
	add	esp, 4

; 459  : 		return; 

	jmp	$LN12@R_SetupSky
$LN7@R_SetupSky:

; 460  : 	}
; 461  : 
; 462  : 	// release old skybox
; 463  : 	R_UnloadSkybox();

	call	_R_UnloadSkybox

; 464  : 	Con_DPrintf( "SKY:  " );

	push	OFFSET ??_C@_06BCGNPODJ@SKY?3?5?5@
	call	_Con_DPrintf
	add	esp, 4

; 465  : 
; 466  : 	for( i = 0; i < 6; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_SetupSky
$LN2@R_SetupSky:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_SetupSky:
	cmp	DWORD PTR _i$[ebp], 6
	jge	$LN3@R_SetupSky

; 467  : 	{
; 468  : 		if( result == SKYBOX_HLSTYLE )

	cmp	DWORD PTR _result$[ebp], 1
	jne	SHORT $LN8@R_SetupSky

; 469  : 			Q_snprintf( sidename, sizeof( sidename ), "%s%s", loadname, r_skyBoxSuffix[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _r_skyBoxSuffix[eax*4]
	push	ecx
	lea	edx, DWORD PTR _loadname$[ebp]
	push	edx
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs@
	push	64					; 00000040H
	lea	eax, DWORD PTR _sidename$[ebp]
	push	eax
	call	_Q_snprintf
	add	esp, 20					; 00000014H
	jmp	SHORT $LN9@R_SetupSky
$LN8@R_SetupSky:

; 470  : 		else Q_snprintf( sidename, sizeof( sidename ), "%s_%s", loadname, r_skyBoxSuffix[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _r_skyBoxSuffix[eax*4]
	push	ecx
	lea	edx, DWORD PTR _loadname$[ebp]
	push	edx
	push	OFFSET ??_C@_05ONEOBAM@?$CFs_?$CFs@
	push	64					; 00000040H
	lea	eax, DWORD PTR _sidename$[ebp]
	push	eax
	call	_Q_snprintf
	add	esp, 20					; 00000014H
$LN9@R_SetupSky:

; 471  : 
; 472  : 		tr.skyboxTextures[i] = GL_LoadTexture( sidename, NULL, 0, TF_CLAMP|TF_SKY );

	push	7168					; 00001c00H
	push	0
	push	0
	lea	eax, DWORD PTR _sidename$[ebp]
	push	eax
	call	_GL_LoadTexture
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _tr[ecx*4+1056], eax

; 473  : 		if( !tr.skyboxTextures[i] ) break;

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _tr[eax*4+1056], 0
	jne	SHORT $LN10@R_SetupSky
	jmp	SHORT $LN3@R_SetupSky
$LN10@R_SetupSky:

; 474  : 		Con_DPrintf( "%s%s%s", skyboxname, r_skyBoxSuffix[i], i != 5 ? ", " : ". " );

	cmp	DWORD PTR _i$[ebp], 5
	je	SHORT $LN15@R_SetupSky
	mov	DWORD PTR tv156[ebp], OFFSET ??_C@_02KEGNLNML@?0?5@
	jmp	SHORT $LN16@R_SetupSky
$LN15@R_SetupSky:
	mov	DWORD PTR tv156[ebp], OFFSET ??_C@_02KHOJGJKF@?4?5@
$LN16@R_SetupSky:
	mov	eax, DWORD PTR tv156[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _r_skyBoxSuffix[ecx*4]
	push	edx
	mov	eax, DWORD PTR _skyboxname$[ebp]
	push	eax
	push	OFFSET ??_C@_06DIJPEION@?$CFs?$CFs?$CFs@
	call	_Con_DPrintf
	add	esp, 16					; 00000010H

; 475  : 	}

	jmp	$LN2@R_SetupSky
$LN3@R_SetupSky:

; 476  : 
; 477  : 	if( i == 6 )

	cmp	DWORD PTR _i$[ebp], 6
	jne	SHORT $LN11@R_SetupSky

; 478  : 	{
; 479  : 		SetBits( world.flags, FWORLD_CUSTOM_SKYBOX );

	mov	eax, DWORD PTR _world+8
	or	eax, 2
	mov	DWORD PTR _world+8, eax

; 480  : 		Con_DPrintf( "done\n" );

	push	OFFSET ??_C@_05KJDAJCPN@done?6@
	call	_Con_DPrintf
	add	esp, 4

; 481  : 		return; // loaded

	jmp	SHORT $LN12@R_SetupSky
$LN11@R_SetupSky:

; 482  : 	}
; 483  : 
; 484  : 	Con_DPrintf( "^2failed\n" );

	push	OFFSET ??_C@_09EKNKGPNC@?$FO2failed?6@
	call	_Con_DPrintf
	add	esp, 4

; 485  : 	R_UnloadSkybox();

	call	_R_UnloadSkybox
$LN12@R_SetupSky:

; 486  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_SetupSky ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _EmitWaterPolys
_TEXT	SEGMENT
_i$ = -36						; size = 4
_p$ = -32						; size = 4
_ot$ = -28						; size = 4
_os$ = -24						; size = 4
_t$ = -20						; size = 4
_s$ = -16						; size = 4
_waveHeight$ = -12					; size = 4
_nv$ = -8						; size = 4
_v$ = -4						; size = 4
_warp$ = 8						; size = 4
_reverse$ = 12						; size = 4
_EmitWaterPolys PROC					; COMDAT

; 780  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 781  : 	float	*v, nv, waveHeight;
; 782  : 	float	s, t, os, ot;
; 783  : 	glpoly_t	*p;
; 784  : 	int	i;
; 785  : 
; 786  : 	if( !warp->polys ) return;

	mov	eax, DWORD PTR _warp$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN8@EmitWaterP
	jmp	$LN1@EmitWaterP
$LN8@EmitWaterP:

; 787  : 
; 788  : 	// set the current waveheight
; 789  : 	if( warp->polys->verts[0][2] >= RI.vieworg[2] )

	mov	eax, DWORD PTR _warp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, 28					; 0000001cH
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+16]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	comiss	xmm0, DWORD PTR _RI[eax+200]
	jb	SHORT $LN9@EmitWaterP

; 790  : 		waveHeight = -RI.currententity->curstate.scale;

	mov	eax, DWORD PTR _RI+28
	movss	xmm0, DWORD PTR [eax+976]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _waveHeight$[ebp], xmm0
	jmp	SHORT $LN10@EmitWaterP
$LN9@EmitWaterP:

; 791  : 	else waveHeight = RI.currententity->curstate.scale;

	mov	eax, DWORD PTR _RI+28
	movss	xmm0, DWORD PTR [eax+976]
	movss	DWORD PTR _waveHeight$[ebp], xmm0
$LN10@EmitWaterP:

; 792  : 
; 793  : 	// reset fog color for nonlightmapped water
; 794  : 	GL_ResetFogColor();

	call	_GL_ResetFogColor

; 795  : 
; 796  : 	if( FBitSet( warp->flags, SURF_DRAWTURB_QUADS ))

	mov	eax, DWORD PTR _warp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	je	SHORT $LN11@EmitWaterP

; 797  : 		pglBegin( GL_QUADS );

	push	7
	call	DWORD PTR _pglBegin
$LN11@EmitWaterP:

; 798  : 
; 799  : 	for( p = warp->polys; p; p = p->next )

	mov	eax, DWORD PTR _warp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN4@EmitWaterP
$LN2@EmitWaterP:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
$LN4@EmitWaterP:
	cmp	DWORD PTR _p$[ebp], 0
	je	$LN3@EmitWaterP

; 800  : 	{
; 801  : 		if( reverse )

	cmp	DWORD PTR _reverse$[ebp], 0
	je	SHORT $LN12@EmitWaterP

; 802  : 			v = p->verts[0] + ( p->numverts - 1 ) * VERTEXSIZE;

	mov	eax, 28					; 0000001cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	imul	ecx, edx, 7
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _v$[ebp], edx
	jmp	SHORT $LN13@EmitWaterP
$LN12@EmitWaterP:

; 803  : 		else v = p->verts[0];

	mov	eax, 28					; 0000001cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	mov	DWORD PTR _v$[ebp], eax
$LN13@EmitWaterP:

; 804  : 
; 805  : 		if( !FBitSet( warp->flags, SURF_DRAWTURB_QUADS ))

	mov	eax, DWORD PTR _warp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	jne	SHORT $LN14@EmitWaterP

; 806  : 			pglBegin( GL_POLYGON );

	push	9
	call	DWORD PTR _pglBegin
$LN14@EmitWaterP:

; 807  : 
; 808  : 		for( i = 0; i < p->numverts; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@EmitWaterP
$LN5@EmitWaterP:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@EmitWaterP:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	$LN6@EmitWaterP

; 809  : 		{
; 810  : 			if( waveHeight )

	movss	xmm0, DWORD PTR _waveHeight$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN15@EmitWaterP

; 811  : 			{
; 812  : 				nv = r_turbsin[(int)(cl.time * 160.0f + v[1] + v[0]) & 255] + 8.0f;

	movsd	xmm0, QWORD PTR _cl+2167640
	mulsd	xmm0, QWORD PTR __real@4064000000000000
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _v$[ebp]
	cvtss2sd xmm1, DWORD PTR [ecx+eax]
	addsd	xmm0, xmm1
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _v$[ebp]
	cvtss2sd xmm1, DWORD PTR [ecx+eax]
	addsd	xmm0, xmm1
	cvttsd2si edx, xmm0
	and	edx, 255				; 000000ffH
	movss	xmm0, DWORD PTR _r_turbsin[edx*4]
	addss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR _nv$[ebp], xmm0

; 813  : 				nv = (r_turbsin[(int)(v[0] * 5.0f + cl.time * 171.0f - v[1]) & 255] + 8.0f ) * 0.8f + nv;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@40a00000
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR _cl+2167640
	mulsd	xmm1, QWORD PTR __real@4065600000000000
	addsd	xmm0, xmm1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _v$[ebp]
	cvtss2sd xmm1, DWORD PTR [ecx+eax]
	subsd	xmm0, xmm1
	cvttsd2si edx, xmm0
	and	edx, 255				; 000000ffH
	movss	xmm0, DWORD PTR _r_turbsin[edx*4]
	addss	xmm0, DWORD PTR __real@41000000
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR _nv$[ebp]
	movss	DWORD PTR _nv$[ebp], xmm0

; 814  : 				nv = nv * waveHeight + v[2];

	movss	xmm0, DWORD PTR _nv$[ebp]
	mulss	xmm0, DWORD PTR _waveHeight$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _v$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _nv$[ebp], xmm0

; 815  : 			}

	jmp	SHORT $LN16@EmitWaterP
$LN15@EmitWaterP:

; 816  : 			else nv = v[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _nv$[ebp], xmm0
$LN16@EmitWaterP:

; 817  : 
; 818  : 			os = v[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _os$[ebp], xmm0

; 819  : 			ot = v[4];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _ot$[ebp], xmm0

; 820  : 
; 821  : 			s = os + r_turbsin[(int)((ot * 0.125f + cl.time) * TURBSCALE) & 255];

	movss	xmm0, DWORD PTR _ot$[ebp]
	mulss	xmm0, DWORD PTR __real@3e000000
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR _cl+2167640
	mulsd	xmm0, QWORD PTR __real@40445f3060000000
	cvttsd2si eax, xmm0
	and	eax, 255				; 000000ffH
	movss	xmm0, DWORD PTR _os$[ebp]
	addss	xmm0, DWORD PTR _r_turbsin[eax*4]
	movss	DWORD PTR _s$[ebp], xmm0

; 822  : 			s *= ( 1.0f / SUBDIVIDE_SIZE );

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR __real@3c800000
	movss	DWORD PTR _s$[ebp], xmm0

; 823  : 
; 824  : 			t = ot + r_turbsin[(int)((os * 0.125f + cl.time) * TURBSCALE) & 255];

	movss	xmm0, DWORD PTR _os$[ebp]
	mulss	xmm0, DWORD PTR __real@3e000000
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR _cl+2167640
	mulsd	xmm0, QWORD PTR __real@40445f3060000000
	cvttsd2si eax, xmm0
	and	eax, 255				; 000000ffH
	movss	xmm0, DWORD PTR _ot$[ebp]
	addss	xmm0, DWORD PTR _r_turbsin[eax*4]
	movss	DWORD PTR _t$[ebp], xmm0

; 825  : 			t *= ( 1.0f / SUBDIVIDE_SIZE );

	movss	xmm0, DWORD PTR _t$[ebp]
	mulss	xmm0, DWORD PTR __real@3c800000
	movss	DWORD PTR _t$[ebp], xmm0

; 826  : 
; 827  : 			pglTexCoord2f( s, t );

	push	ecx
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 828  : 			pglVertex3f( v[0], v[1], nv );

	push	ecx
	movss	xmm0, DWORD PTR _nv$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex3f

; 829  : 
; 830  : 			if( reverse )

	cmp	DWORD PTR _reverse$[ebp], 0
	je	SHORT $LN17@EmitWaterP

; 831  : 				v -= VERTEXSIZE;

	mov	eax, DWORD PTR _v$[ebp]
	sub	eax, 28					; 0000001cH
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN18@EmitWaterP
$LN17@EmitWaterP:

; 832  : 			else v += VERTEXSIZE;

	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _v$[ebp], eax
$LN18@EmitWaterP:

; 833  : 		}

	jmp	$LN5@EmitWaterP
$LN6@EmitWaterP:

; 834  : 
; 835  : 		if( !FBitSet( warp->flags, SURF_DRAWTURB_QUADS ))

	mov	eax, DWORD PTR _warp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	jne	SHORT $LN19@EmitWaterP

; 836  : 			pglEnd();

	call	DWORD PTR _pglEnd
$LN19@EmitWaterP:

; 837  : 	}

	jmp	$LN2@EmitWaterP
$LN3@EmitWaterP:

; 838  : 
; 839  : 	if( FBitSet( warp->flags, SURF_DRAWTURB_QUADS ))

	mov	eax, DWORD PTR _warp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	je	SHORT $LN20@EmitWaterP

; 840  : 		pglEnd();

	call	DWORD PTR _pglEnd
$LN20@EmitWaterP:

; 841  : 
; 842  : 	GL_SetupFogColorForSurfaces();

	call	_GL_SetupFogColorForSurfaces
$LN1@EmitWaterP:

; 843  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_EmitWaterPolys ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _R_DrawClouds
_TEXT	SEGMENT
_i$ = -4						; size = 4
_R_DrawClouds PROC					; COMDAT

; 642  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 643  : 	int	i;
; 644  : 
; 645  : 	RI.isSkyVisible = true;

	mov	DWORD PTR _RI+8, 1

; 646  : 
; 647  : 	if( RI.fogEnabled )

	cmp	DWORD PTR _RI+316, 0
	je	SHORT $LN5@R_DrawClou

; 648  : 		pglFogf( GL_FOG_DENSITY, RI.fogDensity * 0.25f );

	movss	xmm0, DWORD PTR _RI+340
	mulss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2914					; 00000b62H
	call	DWORD PTR _pglFogf
$LN5@R_DrawClou:

; 649  : 	pglDepthFunc( GL_GEQUAL );

	push	518					; 00000206H
	call	DWORD PTR _pglDepthFunc

; 650  : 	pglDepthMask( GL_FALSE );

	push	0
	call	DWORD PTR _pglDepthMask

; 651  : 
; 652  : 	for( i = 0; i < 6; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_DrawClou
$LN2@R_DrawClou:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_DrawClou:
	cmp	DWORD PTR _i$[ebp], 6
	jge	SHORT $LN3@R_DrawClou

; 653  : 	{
; 654  : 		if( RI.skyMins[0][i] >= RI.skyMaxs[0][i] || RI.skyMins[1][i] >= RI.skyMaxs[1][i] )

	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	mov	edx, 24					; 00000018H
	imul	eax, edx, 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _RI[ecx+edx*4+360]
	comiss	xmm0, DWORD PTR _RI[eax+esi*4+408]
	jae	SHORT $LN7@R_DrawClou
	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, 24					; 00000018H
	shl	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _RI[eax+edx*4+360]
	comiss	xmm0, DWORD PTR _RI[ecx+esi*4+408]
	jb	SHORT $LN6@R_DrawClou
$LN7@R_DrawClou:

; 655  : 			continue;

	jmp	SHORT $LN2@R_DrawClou
$LN6@R_DrawClou:

; 656  : 		R_CloudRenderSide( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_R_CloudRenderSide
	add	esp, 4

; 657  : 	}

	jmp	SHORT $LN2@R_DrawClou
$LN3@R_DrawClou:

; 658  : 
; 659  : 	pglDepthFunc( GL_LEQUAL );

	push	515					; 00000203H
	call	DWORD PTR _pglDepthFunc

; 660  : 	pglDepthMask( GL_TRUE );

	push	1
	call	DWORD PTR _pglDepthMask

; 661  : 
; 662  : 	if( RI.fogEnabled )

	cmp	DWORD PTR _RI+316, 0
	je	SHORT $LN8@R_DrawClou

; 663  : 		pglFogf( GL_FOG_DENSITY, RI.fogDensity );

	push	ecx
	movss	xmm0, DWORD PTR _RI+340
	movss	DWORD PTR [esp], xmm0
	push	2914					; 00000b62H
	call	DWORD PTR _pglFogf
$LN8@R_DrawClou:

; 664  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_DrawClouds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _R_DrawSkyBox
_TEXT	SEGMENT
_m$1 = -72						; size = 64
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_R_DrawSkyBox PROC					; COMDAT

; 378  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 379  : 	int	i;
; 380  : 
; 381  : 	RI.isSkyVisible = true;

	mov	DWORD PTR _RI+8, 1

; 382  : 
; 383  : 	// don't fogging skybox (this fix old Half-Life bug)
; 384  : 	if( !RI.fogSkybox ) R_AllowFog( false );

	cmp	DWORD PTR _RI+320, 0
	jne	SHORT $LN5@R_DrawSkyB
	push	0
	call	_R_AllowFog
	add	esp, 4
$LN5@R_DrawSkyB:

; 385  : 
; 386  : 	if( RI.fogEnabled )

	cmp	DWORD PTR _RI+316, 0
	je	SHORT $LN6@R_DrawSkyB

; 387  : 		pglFogf( GL_FOG_DENSITY, RI.fogDensity * 0.5f );

	movss	xmm0, DWORD PTR _RI+340
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	2914					; 00000b62H
	call	DWORD PTR _pglFogf
$LN6@R_DrawSkyB:

; 388  : 
; 389  : 	pglDisable( GL_BLEND );

	push	3042					; 00000be2H
	call	DWORD PTR _pglDisable

; 390  : 	pglDisable( GL_ALPHA_TEST );

	push	3008					; 00000bc0H
	call	DWORD PTR _pglDisable

; 391  : 	pglTexEnvi( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE );

	push	7681					; 00001e01H
	push	8704					; 00002200H
	push	8960					; 00002300H
	call	DWORD PTR _pglTexEnvi

; 392  : 
; 393  : 	if (clgame.movevars.skyangle && !VectorIsNull((float*)&clgame.movevars.skydir_x))

	movss	xmm0, DWORD PTR _clgame+1168
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN7@R_DrawSkyB
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _clgame[ecx+1156]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@R_DrawSkyB
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _clgame[eax+1156]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@R_DrawSkyB
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _clgame[eax+1156]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN7@R_DrawSkyB
$LN8@R_DrawSkyB:

; 394  : 	{
; 395  : 		matrix4x4	m;
; 396  : 		Matrix4x4_CreateRotate(m, clgame.movevars.skyangle, clgame.movevars.skydir_x, clgame.movevars.skydir_y, clgame.movevars.skydir_z);

	push	ecx
	movss	xmm0, DWORD PTR _clgame+1164
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _clgame+1160
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _clgame+1156
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _clgame+1168
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _m$1[ebp]
	push	eax
	call	_Matrix4x4_CreateRotate
	add	esp, 20					; 00000014H

; 397  : 		Matrix4x4_ConcatTranslate(m, -RI.vieworg[0], -RI.vieworg[1], -RI.vieworg[2]);

	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _RI[eax+200]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _RI[ecx+200]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _RI[eax+200]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _m$1[ebp]
	push	ecx
	call	_Matrix4x4_ConcatTranslate
	add	esp, 16					; 00000010H

; 398  : 		Matrix4x4_ConcatTransforms(RI.modelviewMatrix, RI.worldviewMatrix, m);

	lea	eax, DWORD PTR _m$1[ebp]
	push	eax
	push	OFFSET _RI+520
	push	OFFSET _RI+584
	call	_Matrix4x4_ConcatTransforms
	add	esp, 12					; 0000000cH

; 399  : 		GL_LoadMatrix(RI.modelviewMatrix);

	push	OFFSET _RI+584
	call	_GL_LoadMatrix
	add	esp, 4

; 400  : 		tr.modelviewIdentity = false;

	mov	DWORD PTR _tr+83184, 0
$LN7@R_DrawSkyB:

; 401  : 	}
; 402  : 
; 403  : 	for( i = 0; i < 6; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_DrawSkyB
$LN2@R_DrawSkyB:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_DrawSkyB:
	cmp	DWORD PTR _i$[ebp], 6
	jge	$LN3@R_DrawSkyB

; 404  : 	{
; 405  : 		if( RI.skyMins[0][i] >= RI.skyMaxs[0][i] || RI.skyMins[1][i] >= RI.skyMaxs[1][i] )

	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	mov	edx, 24					; 00000018H
	imul	eax, edx, 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _RI[ecx+edx*4+360]
	comiss	xmm0, DWORD PTR _RI[eax+esi*4+408]
	jae	SHORT $LN10@R_DrawSkyB
	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, 24					; 00000018H
	shl	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _RI[eax+edx*4+360]
	comiss	xmm0, DWORD PTR _RI[ecx+esi*4+408]
	jb	SHORT $LN9@R_DrawSkyB
$LN10@R_DrawSkyB:

; 406  : 			continue;

	jmp	SHORT $LN2@R_DrawSkyB
$LN9@R_DrawSkyB:

; 407  : 
; 408  : 		if( tr.skyboxTextures[r_skyTexOrder[i]] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _r_skyTexOrder[eax*4]
	cmp	DWORD PTR _tr[ecx*4+1056], 0
	je	SHORT $LN11@R_DrawSkyB

; 409  : 			GL_Bind( GL_TEXTURE0, tr.skyboxTextures[r_skyTexOrder[i]] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _r_skyTexOrder[eax*4]
	mov	edx, DWORD PTR _tr[ecx*4+1056]
	push	edx
	push	0
	call	_GL_Bind
	add	esp, 8
	jmp	SHORT $LN12@R_DrawSkyB
$LN11@R_DrawSkyB:

; 410  : 		else GL_Bind( GL_TEXTURE0, tr.grayTexture ); // stub

	mov	eax, DWORD PTR _tr+12
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8
$LN12@R_DrawSkyB:

; 411  : 
; 412  : 		pglBegin( GL_QUADS );

	push	7
	call	DWORD PTR _pglBegin

; 413  : 		MakeSkyVec( RI.skyMins[0][i], RI.skyMins[1][i], i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, 24					; 00000018H
	shl	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _RI[ecx+edx*4+360]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _RI[ecx+edx*4+360]
	movss	DWORD PTR [esp], xmm0
	call	_MakeSkyVec
	add	esp, 12					; 0000000cH

; 414  : 		MakeSkyVec( RI.skyMins[0][i], RI.skyMaxs[1][i], i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, 24					; 00000018H
	shl	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _RI[ecx+edx*4+408]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _RI[ecx+edx*4+360]
	movss	DWORD PTR [esp], xmm0
	call	_MakeSkyVec
	add	esp, 12					; 0000000cH

; 415  : 		MakeSkyVec( RI.skyMaxs[0][i], RI.skyMaxs[1][i], i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, 24					; 00000018H
	shl	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _RI[ecx+edx*4+408]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _RI[ecx+edx*4+408]
	movss	DWORD PTR [esp], xmm0
	call	_MakeSkyVec
	add	esp, 12					; 0000000cH

; 416  : 		MakeSkyVec( RI.skyMaxs[0][i], RI.skyMins[1][i], i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, 24					; 00000018H
	shl	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _RI[ecx+edx*4+360]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 24					; 00000018H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _RI[ecx+edx*4+408]
	movss	DWORD PTR [esp], xmm0
	call	_MakeSkyVec
	add	esp, 12					; 0000000cH

; 417  : 		pglEnd();

	call	DWORD PTR _pglEnd

; 418  : 	}

	jmp	$LN2@R_DrawSkyB
$LN3@R_DrawSkyB:

; 419  : 
; 420  : 	if( !RI.fogSkybox )

	cmp	DWORD PTR _RI+320, 0
	jne	SHORT $LN13@R_DrawSkyB

; 421  : 		R_AllowFog( true );

	push	1
	call	_R_AllowFog
	add	esp, 4
$LN13@R_DrawSkyB:

; 422  : 
; 423  : 	if( RI.fogEnabled )

	cmp	DWORD PTR _RI+316, 0
	je	SHORT $LN14@R_DrawSkyB

; 424  : 		pglFogf( GL_FOG_DENSITY, RI.fogDensity );

	push	ecx
	movss	xmm0, DWORD PTR _RI+340
	movss	DWORD PTR [esp], xmm0
	push	2914					; 00000b62H
	call	DWORD PTR _pglFogf
$LN14@R_DrawSkyB:

; 425  : 
; 426  : 	R_LoadIdentity();

	call	_R_LoadIdentity

; 427  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_DrawSkyBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _R_ClearSkyBox
_TEXT	SEGMENT
_i$ = -4						; size = 4
_R_ClearSkyBox PROC					; COMDAT

; 292  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 293  : 	int	i;
; 294  : 
; 295  : 	for( i = 0; i < 6; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_ClearSky
$LN2@R_ClearSky:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_ClearSky:
	cmp	DWORD PTR _i$[ebp], 6
	jge	SHORT $LN3@R_ClearSky

; 296  : 	{
; 297  : 		RI.skyMins[0][i] = RI.skyMins[1][i] = 9999999.0f;

	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR __real@4b18967f
	movss	DWORD PTR _RI[eax+ecx*4+360], xmm0
	mov	edx, 24					; 00000018H
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR __real@4b18967f
	movss	DWORD PTR _RI[eax+ecx*4+360], xmm0

; 298  : 		RI.skyMaxs[0][i] = RI.skyMaxs[1][i] = -9999999.0f;

	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR __real@cb18967f
	movss	DWORD PTR _RI[eax+ecx*4+408], xmm0
	mov	edx, 24					; 00000018H
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR __real@cb18967f
	movss	DWORD PTR _RI[eax+ecx*4+408], xmm0

; 299  : 	}

	jmp	$LN2@R_ClearSky
$LN3@R_ClearSky:

; 300  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_ClearSkyBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _R_AddSkyBoxSurface
_TEXT	SEGMENT
tv178 = -1816						; size = 4
_p$1 = -1556						; size = 4
_i$ = -1552						; size = 4
_v$ = -1548						; size = 4
_p$ = -1544						; size = 4
_verts$ = -1540						; size = 1536
__$ArrayPad$ = -4					; size = 4
_fa$ = 8						; size = 4
_R_AddSkyBoxSurface PROC				; COMDAT

; 308  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1816				; 00000718H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 309  : 	vec3_t	verts[MAX_CLIP_VERTS];
; 310  : 	glpoly_t	*p;
; 311  : 	float	*v;
; 312  : 	int	i;
; 313  : 
; 314  : 	if (clgame.movevars.skyangle)

	movss	xmm0, DWORD PTR _clgame+1168
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN3@R_AddSkyBo

; 315  : 	{
; 316  : 		// HACK: force full sky to draw when it has angle
; 317  : 		for (i = 0; i < 6; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_AddSkyBo
$LN2@R_AddSkyBo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_AddSkyBo:
	cmp	DWORD PTR _i$[ebp], 6
	jge	$LN3@R_AddSkyBo

; 318  : 		{
; 319  : 			RI.skyMins[0][i] = RI.skyMins[1][i] = -1.0f;

	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _RI[eax+ecx*4+360], xmm0
	mov	edx, 24					; 00000018H
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _RI[eax+ecx*4+360], xmm0

; 320  : 			RI.skyMaxs[0][i] = RI.skyMaxs[1][i] = 1.0f;

	mov	eax, 24					; 00000018H
	shl	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _RI[eax+ecx*4+408], xmm0
	mov	edx, 24					; 00000018H
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _RI[eax+ecx*4+408], xmm0

; 321  : 		}

	jmp	$LN2@R_AddSkyBo
$LN3@R_AddSkyBo:

; 322  : 	}
; 323  : 
; 324  : 
; 325  : 	if( FBitSet( world.flags, FWORLD_SKYSPHERE ) && fa->polys && !FBitSet( world.flags, FWORLD_CUSTOM_SKYBOX ))

	mov	eax, DWORD PTR _world+8
	and	eax, 1
	je	$LN15@R_AddSkyBo
	mov	eax, DWORD PTR _fa$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	$LN15@R_AddSkyBo
	mov	eax, DWORD PTR _world+8
	and	eax, 2
	jne	$LN15@R_AddSkyBo

; 326  : 	{
; 327  : 		glpoly_t	*p = fa->polys;

	mov	eax, DWORD PTR _fa$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _p$1[ebp], ecx

; 328  : 
; 329  : 		// draw the sky poly
; 330  : 		pglBegin( GL_POLYGON );

	push	9
	call	DWORD PTR _pglBegin

; 331  : 		for( i = 0, v = p->verts[0]; i < p->numverts; i++, v += VERTEXSIZE )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, 28					; 0000001cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$1[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN7@R_AddSkyBo
$LN5@R_AddSkyBo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _v$[ebp], ecx
$LN7@R_AddSkyBo:
	mov	eax, DWORD PTR _p$1[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN6@R_AddSkyBo

; 332  : 		{
; 333  : 			pglTexCoord2f( v[3], v[4] );

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 334  : 			pglVertex3fv( v );

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	DWORD PTR _pglVertex3fv

; 335  : 		}

	jmp	SHORT $LN5@R_AddSkyBo
$LN6@R_AddSkyBo:

; 336  : 		pglEnd ();

	call	DWORD PTR _pglEnd
$LN15@R_AddSkyBo:

; 337  : 	}
; 338  : 
; 339  : 	// calculate vertex values for sky box
; 340  : 	for( p = fa->polys; p; p = p->next )

	mov	eax, DWORD PTR _fa$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN10@R_AddSkyBo
$LN8@R_AddSkyBo:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
$LN10@R_AddSkyBo:
	cmp	DWORD PTR _p$[ebp], 0
	je	$LN9@R_AddSkyBo

; 341  : 	{
; 342  : 		for( i = 0; i < p->numverts; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@R_AddSkyBo
$LN11@R_AddSkyBo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@R_AddSkyBo:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	$LN12@R_AddSkyBo

; 343  : 			VectorSubtract( p->verts[i], RI.cullorigin, verts[i] );

	imul	eax, DWORD PTR _i$[ebp], 28
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+16]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, 4
	imul	eax, eax, 0
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR _RI[eax+260]
	imul	ecx, DWORD PTR _i$[ebp], 12
	lea	edx, DWORD PTR _verts$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR [edx+ecx], xmm0
	imul	edx, DWORD PTR _i$[ebp], 28
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+16]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR _RI[eax+260]
	imul	ecx, DWORD PTR _i$[ebp], 12
	lea	edx, DWORD PTR _verts$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0
	imul	ecx, DWORD PTR _i$[ebp], 28
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	subss	xmm0, DWORD PTR _RI[edx+260]
	movss	DWORD PTR tv178[ebp], xmm0
	imul	eax, DWORD PTR _i$[ebp], 12
	lea	ecx, DWORD PTR _verts$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv178[ebp]
	movss	DWORD PTR [ecx+edx], xmm0
	jmp	$LN11@R_AddSkyBo
$LN12@R_AddSkyBo:

; 344  : 		ClipSkyPolygon( p->numverts, verts[0], 0 );

	push	0
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _verts$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_ClipSkyPolygon
	add	esp, 12					; 0000000cH

; 345  : 	}

	jmp	$LN8@R_AddSkyBo
$LN9@R_AddSkyBo:

; 346  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_AddSkyBoxSurface ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_warp.c
;	COMDAT _R_InitSkyClouds
_TEXT	SEGMENT
tv72 = -184						; size = 4
_size$1 = -116						; size = 4
_texname$ = -112					; size = 32
_p$ = -80						; size = 4
_j$ = -76						; size = 4
_i$ = -72						; size = 4
_b$ = -68						; size = 4
_g$ = -64						; size = 4
_r$ = -60						; size = 4
_transpix$ = -56					; size = 4
_rgba$ = -52						; size = 4
_trans$ = -48						; size = 4
_r_sky$ = -44						; size = 4
_r_temp$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_mt$ = 8						; size = 4
_tx$ = 12						; size = 4
_custom_palette$ = 16					; size = 4
_R_InitSkyClouds PROC					; COMDAT

; 674  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 675  : 	rgbdata_t	r_temp, *r_sky;
; 676  : 	uint	*trans, *rgba;
; 677  : 	uint	transpix;
; 678  : 	int	r, g, b;
; 679  : 	int	i, j, p;
; 680  : 	char	texname[32];
; 681  : 
; 682  : 	if( !glw_state.initialized )

	cmp	DWORD PTR _glw_state+20, 0
	jne	SHORT $LN14@R_InitSkyC

; 683  : 		return;

	jmp	$LN1@R_InitSkyC
$LN14@R_InitSkyC:

; 684  : 
; 685  : 	Q_snprintf( texname, sizeof( texname ), "%s%s.mip", ( mt->offsets[0] > 0 ) ? "#" : "", tx->name );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mt$[ebp]
	cmp	DWORD PTR [edx+ecx+24], 0
	jbe	SHORT $LN24@R_InitSkyC
	mov	DWORD PTR tv72[ebp], OFFSET ??_C@_01IPJKGB@?$CD@
	jmp	SHORT $LN25@R_InitSkyC
$LN24@R_InitSkyC:
	mov	DWORD PTR tv72[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN25@R_InitSkyC:
	mov	eax, DWORD PTR _tx$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	push	OFFSET ??_C@_08DMPIOEHI@?$CFs?$CFs?4mip@
	push	32					; 00000020H
	lea	edx, DWORD PTR _texname$[ebp]
	push	edx
	call	_Q_snprintf
	add	esp, 20					; 00000014H

; 686  : 
; 687  : 	if( mt->offsets[0] > 0 )

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mt$[ebp]
	cmp	DWORD PTR [edx+ecx+24], 0
	jbe	SHORT $LN15@R_InitSkyC

; 688  : 	{
; 689  : 		int	size = (int)sizeof( mip_t ) + ((mt->width * mt->height * 85)>>6);

	mov	eax, DWORD PTR _mt$[ebp]
	mov	ecx, DWORD PTR _mt$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+20]
	imul	eax, edx, 85
	shr	eax, 6
	add	eax, 40					; 00000028H
	mov	DWORD PTR _size$1[ebp], eax

; 690  : 
; 691  : 		if( custom_palette ) size += sizeof( short ) + 768;

	cmp	DWORD PTR _custom_palette$[ebp], 0
	je	SHORT $LN17@R_InitSkyC
	mov	eax, DWORD PTR _size$1[ebp]
	add	eax, 770				; 00000302H
	mov	DWORD PTR _size$1[ebp], eax
$LN17@R_InitSkyC:

; 692  : 		r_sky = FS_LoadImage( texname, (byte *)mt, size );

	mov	eax, DWORD PTR _size$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _mt$[ebp]
	push	ecx
	lea	edx, DWORD PTR _texname$[ebp]
	push	edx
	call	_FS_LoadImage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r_sky$[ebp], eax

; 693  : 	}

	jmp	SHORT $LN16@R_InitSkyC
$LN15@R_InitSkyC:

; 694  : 	else
; 695  : 	{
; 696  : 		// okay, loading it from wad
; 697  : 		r_sky = FS_LoadImage( texname, NULL, 0 );

	push	0
	push	0
	lea	eax, DWORD PTR _texname$[ebp]
	push	eax
	call	_FS_LoadImage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r_sky$[ebp], eax
$LN16@R_InitSkyC:

; 698  : 	}
; 699  : 
; 700  : 	// make sure what sky image is valid
; 701  : 	if( !r_sky || !r_sky->palette || r_sky->type != PF_INDEXED_32 || r_sky->height == 0 )

	cmp	DWORD PTR _r_sky$[ebp], 0
	je	SHORT $LN19@R_InitSkyC
	mov	eax, DWORD PTR _r_sky$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN19@R_InitSkyC
	mov	eax, DWORD PTR _r_sky$[ebp]
	cmp	DWORD PTR [eax+8], 2
	jne	SHORT $LN19@R_InitSkyC
	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN18@R_InitSkyC
$LN19@R_InitSkyC:

; 702  : 	{
; 703  : 		Con_Reportf( S_ERROR "R_InitSky: unable to load sky texture %s\n", tx->name );

	mov	eax, DWORD PTR _tx$[ebp]
	push	eax
	push	OFFSET ??_C@_0DF@LLAMPHFL@?$FO1Error?3?$FO7?5R_InitSky?3?5unable?5to@
	call	_Con_Reportf
	add	esp, 8

; 704  : 		if( r_sky ) FS_FreeImage( r_sky );

	cmp	DWORD PTR _r_sky$[ebp], 0
	je	SHORT $LN20@R_InitSkyC
	mov	eax, DWORD PTR _r_sky$[ebp]
	push	eax
	call	_FS_FreeImage
	add	esp, 4
$LN20@R_InitSkyC:

; 705  : 		return;

	jmp	$LN1@R_InitSkyC
$LN18@R_InitSkyC:

; 706  : 	}
; 707  : 
; 708  : 	// make an average value for the back to avoid
; 709  : 	// a fringe on the top level
; 710  : 	trans = Mem_Malloc( r_temppool, r_sky->height * r_sky->height * sizeof( *trans ));

	mov	eax, DWORD PTR ?__LINE__Var@?0??R_InitSkyClouds@@9@9
	add	eax, 36					; 00000024H
	push	eax
	push	OFFSET ??_C@_0DE@MGOHFNID@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	0
	mov	ecx, DWORD PTR _r_sky$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	imul	edx, ecx
	shl	edx, 2
	push	edx
	mov	edx, DWORD PTR _r_temppool
	push	edx
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _trans$[ebp], eax

; 711  : 	r = g = b = 0;

	mov	DWORD PTR _b$[ebp], 0
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _g$[ebp], eax
	mov	ecx, DWORD PTR _g$[ebp]
	mov	DWORD PTR _r$[ebp], ecx

; 712  : 
; 713  : 	for( i = 0; i < r_sky->width >> 1; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_InitSkyC
$LN2@R_InitSkyC:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_InitSkyC:
	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax]
	sar	ecx, 1
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN3@R_InitSkyC

; 714  : 	{
; 715  : 		for( j = 0; j < r_sky->height; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@R_InitSkyC
$LN5@R_InitSkyC:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@R_InitSkyC:
	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	DWORD PTR _j$[ebp], ecx
	jge	$LN6@R_InitSkyC

; 716  : 		{
; 717  : 			p = r_sky->buffer[i * r_sky->width + j + r_sky->height];

	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax]
	imul	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _r_sky$[ebp]
	movzx	eax, WORD PTR [edx+2]
	add	ecx, eax
	mov	edx, DWORD PTR _r_sky$[ebp]
	mov	eax, DWORD PTR [edx+24]
	movzx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR _p$[ebp], ecx

; 718  : 			rgba = (uint *)r_sky->palette + p;

	mov	eax, DWORD PTR _r_sky$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _rgba$[ebp], eax

; 719  : 			trans[(i * r_sky->height) + j] = *rgba;

	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	imul	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _trans$[ebp]
	mov	eax, DWORD PTR _rgba$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 720  : 			r += ((byte *)rgba)[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _rgba$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _r$[ebp], eax

; 721  : 			g += ((byte *)rgba)[1];

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _rgba$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _g$[ebp]
	mov	DWORD PTR _g$[ebp], edx

; 722  : 			b += ((byte *)rgba)[2];

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _rgba$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 723  : 		}

	jmp	$LN5@R_InitSkyC
$LN6@R_InitSkyC:

; 724  : 	}

	jmp	$LN2@R_InitSkyC
$LN3@R_InitSkyC:

; 725  : 
; 726  : 	((byte *)&transpix)[0] = r / ( r_sky->height * r_sky->height );

	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _r_sky$[ebp]
	movzx	eax, WORD PTR [edx+2]
	imul	ecx, eax
	mov	eax, DWORD PTR _r$[ebp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	BYTE PTR _transpix$[ebp+edx], al

; 727  : 	((byte *)&transpix)[1] = g / ( r_sky->height * r_sky->height );

	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _r_sky$[ebp]
	movzx	eax, WORD PTR [edx+2]
	imul	ecx, eax
	mov	eax, DWORD PTR _g$[ebp]
	cdq
	idiv	ecx
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR _transpix$[ebp+ecx], al

; 728  : 	((byte *)&transpix)[2] = b / ( r_sky->height * r_sky->height );

	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _r_sky$[ebp]
	movzx	eax, WORD PTR [edx+2]
	imul	ecx, eax
	mov	eax, DWORD PTR _b$[ebp]
	cdq
	idiv	ecx
	mov	ecx, 1
	shl	ecx, 1
	mov	BYTE PTR _transpix$[ebp+ecx], al

; 729  : 	((byte *)&transpix)[3] = 0;

	mov	eax, 1
	imul	ecx, eax, 3
	mov	BYTE PTR _transpix$[ebp+ecx], 0

; 730  : 
; 731  : 	// build a temporary image
; 732  : 	r_temp = *r_sky;

	mov	ecx, 9
	mov	esi, DWORD PTR _r_sky$[ebp]
	lea	edi, DWORD PTR _r_temp$[ebp]
	rep movsd

; 733  : 	r_temp.width = r_sky->width >> 1;

	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax]
	sar	ecx, 1
	mov	WORD PTR _r_temp$[ebp], cx

; 734  : 	r_temp.height = r_sky->height;

	mov	eax, DWORD PTR _r_sky$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR _r_temp$[ebp+2], cx

; 735  : 	r_temp.type = PF_RGBA_32;

	mov	DWORD PTR _r_temp$[ebp+8], 3

; 736  : 	r_temp.flags = IMAGE_HAS_COLOR;

	mov	DWORD PTR _r_temp$[ebp+12], 4

; 737  : 	r_temp.size = r_temp.width * r_temp.height * 4;

	movzx	eax, WORD PTR _r_temp$[ebp]
	movzx	ecx, WORD PTR _r_temp$[ebp+2]
	imul	eax, ecx
	shl	eax, 2
	mov	DWORD PTR _r_temp$[ebp+32], eax

; 738  : 	r_temp.buffer = (byte *)trans;

	mov	eax, DWORD PTR _trans$[ebp]
	mov	DWORD PTR _r_temp$[ebp+24], eax

; 739  : 	r_temp.palette = NULL;

	mov	DWORD PTR _r_temp$[ebp+20], 0

; 740  : 
; 741  : 	// load it in
; 742  : 	tr.solidskyTexture = GL_LoadTextureInternal( "solid_sky", &r_temp, TF_NOMIPMAP );

	push	0
	push	4096					; 00001000H
	lea	eax, DWORD PTR _r_temp$[ebp]
	push	eax
	push	OFFSET ??_C@_09PBGIKHPP@solid_sky@
	call	_GL_LoadTextureFromBuffer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tr+20, eax

; 743  : 
; 744  : 	for( i = 0; i < r_sky->width >> 1; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@R_InitSkyC
$LN8@R_InitSkyC:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@R_InitSkyC:
	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax]
	sar	ecx, 1
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN9@R_InitSkyC

; 745  : 	{
; 746  : 		for( j = 0; j < r_sky->height; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN13@R_InitSkyC
$LN11@R_InitSkyC:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN13@R_InitSkyC:
	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	DWORD PTR _j$[ebp], ecx
	jge	SHORT $LN12@R_InitSkyC

; 747  : 		{
; 748  : 			p = r_sky->buffer[i * r_sky->width + j];

	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax]
	imul	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _r_sky$[ebp]
	mov	eax, DWORD PTR [edx+24]
	movzx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR _p$[ebp], ecx

; 749  : 
; 750  : 			if( p == 0 )

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN21@R_InitSkyC

; 751  : 			{
; 752  : 				trans[(i * r_sky->height) + j] = transpix;

	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	imul	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _trans$[ebp]
	mov	eax, DWORD PTR _transpix$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 753  : 			}

	jmp	SHORT $LN22@R_InitSkyC
$LN21@R_InitSkyC:

; 754  : 			else
; 755  : 			{         
; 756  : 				rgba = (uint *)r_sky->palette + p;

	mov	eax, DWORD PTR _r_sky$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _rgba$[ebp], eax

; 757  : 				trans[(i * r_sky->height) + j] = *rgba;

	mov	eax, DWORD PTR _r_sky$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	imul	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _trans$[ebp]
	mov	eax, DWORD PTR _rgba$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax
$LN22@R_InitSkyC:

; 758  : 			}
; 759  : 		}

	jmp	SHORT $LN11@R_InitSkyC
$LN12@R_InitSkyC:

; 760  : 	}

	jmp	$LN8@R_InitSkyC
$LN9@R_InitSkyC:

; 761  : 
; 762  : 	r_temp.flags = IMAGE_HAS_COLOR|IMAGE_HAS_ALPHA;

	mov	DWORD PTR _r_temp$[ebp+12], 6

; 763  : 
; 764  : 	// load it in
; 765  : 	tr.alphaskyTexture = GL_LoadTextureInternal( "alpha_sky", &r_temp, TF_NOMIPMAP );

	push	0
	push	4096					; 00001000H
	lea	eax, DWORD PTR _r_temp$[ebp]
	push	eax
	push	OFFSET ??_C@_09DGBAHEIM@alpha_sky@
	call	_GL_LoadTextureFromBuffer
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tr+24, eax

; 766  : 
; 767  : 	// clean up
; 768  : 	FS_FreeImage( r_sky );

	mov	eax, DWORD PTR _r_sky$[ebp]
	push	eax
	call	_FS_FreeImage
	add	esp, 4

; 769  : 	Mem_Free( trans );

	mov	eax, DWORD PTR ?__LINE__Var@?0??R_InitSkyClouds@@9@9
	add	eax, 95					; 0000005fH
	push	eax
	push	OFFSET ??_C@_0DE@MGOHFNID@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _trans$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN1@R_InitSkyC:

; 770  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_InitSkyClouds ENDP
_TEXT	ENDS
END
