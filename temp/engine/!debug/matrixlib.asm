; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\matrixlib.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_matrix3x4_identity
PUBLIC	_matrix4x4_identity
CONST	SEGMENT
_matrix3x4_identity DD 03f800000r		; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
_matrix4x4_identity DD 03f800000r		; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
PUBLIC	_Matrix3x4_VectorTransform
PUBLIC	_Matrix3x4_VectorITransform
PUBLIC	_Matrix3x4_VectorRotate
PUBLIC	_Matrix3x4_VectorIRotate
PUBLIC	_Matrix3x4_ConcatTransforms
PUBLIC	_Matrix3x4_FromOriginQuat
PUBLIC	_Matrix3x4_CreateFromEntity
PUBLIC	_Matrix3x4_TransformPositivePlane
PUBLIC	_Matrix3x4_TransformAABB
PUBLIC	_Matrix3x4_SetOrigin
PUBLIC	_Matrix3x4_Invert_Simple
PUBLIC	_Matrix3x4_OriginFromMatrix
PUBLIC	_Matrix3x4_AnglesFromMatrix
PUBLIC	_Matrix3x4_Transpose
PUBLIC	_Matrix4x4_VectorTransform
PUBLIC	_Matrix4x4_VectorITransform
PUBLIC	_Matrix4x4_VectorRotate
PUBLIC	_Matrix4x4_VectorIRotate
PUBLIC	_Matrix4x4_ConcatTransforms
PUBLIC	_Matrix4x4_FromOriginQuat
PUBLIC	_Matrix4x4_CreateFromEntity
PUBLIC	_Matrix4x4_TransformPositivePlane
PUBLIC	_Matrix4x4_TransformStandardPlane
PUBLIC	_Matrix4x4_ConvertToEntity
PUBLIC	_Matrix4x4_SetOrigin
PUBLIC	_Matrix4x4_Invert_Simple
PUBLIC	_Matrix4x4_OriginFromMatrix
PUBLIC	_Matrix4x4_Transpose
PUBLIC	_Matrix4x4_Invert_Full
PUBLIC	__real@00000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@42652ee0
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_abs:PROC
EXTRN	_atan2:PROC
EXTRN	_fabs:PROC
EXTRN	_sqrt:PROC
EXTRN	_SinCos:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	02847H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0249H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0495H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0249H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_Invert_Full
_TEXT	SEGMENT
tv2563 = -260						; size = 8
tv2409 = -260						; size = 8
tv2388 = -260						; size = 8
tv2164 = -260						; size = 8
tv2143 = -260						; size = 8
tv2122 = -260						; size = 8
tv3009 = -252						; size = 8
tv3007 = -252						; size = 8
tv3005 = -252						; size = 8
tv3003 = -252						; size = 8
tv3001 = -252						; size = 8
tv2999 = -252						; size = 8
tv2556 = -244						; size = 8
tv2402 = -244						; size = 8
tv2381 = -244						; size = 8
tv2157 = -244						; size = 8
tv2136 = -244						; size = 8
tv2115 = -244						; size = 8
_s$ = -172						; size = 4
_m$ = -168						; size = 16
_rtemp$ = -152						; size = 128
_r$ = -24						; size = 16
_temp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_in1$ = 12						; size = 4
_Matrix4x4_Invert_Full PROC				; COMDAT

; 589  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 590  : 	float	*temp;
; 591  : 	float	*r[4];
; 592  : 	float	rtemp[4][8];
; 593  : 	float	m[4];
; 594  : 	float	s;
; 595  : 
; 596  : 	r[0] = rtemp[0];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _rtemp$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _r$[ebp+ecx], edx

; 597  : 	r[1] = rtemp[1];

	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _rtemp$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _r$[ebp+edx], ecx

; 598  : 	r[2] = rtemp[2];

	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _rtemp$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR _r$[ebp+edx], ecx

; 599  : 	r[3] = rtemp[3];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _rtemp$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	DWORD PTR _r$[ebp+ecx], edx

; 600  : 
; 601  : 	r[0][0] = in1[0][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, 4
	imul	esi, esi, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [esi+edx], eax

; 602  : 	r[0][1] = in1[0][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [esi+eax], ecx

; 603  : 	r[0][2] = in1[0][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, 4
	shl	esi, 1
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [esi+eax], ecx

; 604  : 	r[0][3] = in1[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, 4
	imul	esi, esi, 3
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [esi+edx], eax

; 605  : 	r[0][4] = 1.0f;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0

; 606  : 	r[0][5] =	0.0f;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 607  : 	r[0][6] =	0.0f;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 608  : 	r[0][7] = 0.0f;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 609  : 
; 610  : 	r[1][0] = in1[1][0];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 611  : 	r[1][1] = in1[1][1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 612  : 	r[1][2] = in1[1][2];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	esi, 4
	shl	esi, 1
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 613  : 	r[1][3] = in1[1][3];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 614  : 	r[1][5] = 1.0f;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0

; 615  : 	r[1][4] =	0.0f;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 616  : 	r[1][6] =	0.0f;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+eax], xmm0

; 617  : 	r[1][7] = 0.0f;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+eax], xmm0

; 618  : 
; 619  : 	r[2][0] = in1[2][0];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 620  : 	r[2][1] = in1[2][1];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 621  : 	r[2][2] = in1[2][2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	shl	esi, 1
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 622  : 	r[2][3] = in1[2][3];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 623  : 	r[2][6] = 1.0f;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0

; 624  : 	r[2][4] =	0.0f;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 625  : 	r[2][5] =	0.0f;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+eax], xmm0

; 626  : 	r[2][7] = 0.0f;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+eax], xmm0

; 627  : 
; 628  : 	r[3][0] = in1[3][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	imul	esi, esi, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [esi+edx], eax

; 629  : 	r[3][1] = in1[3][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [esi+eax], ecx

; 630  : 	r[3][2] = in1[3][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, 4
	shl	esi, 1
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [esi+eax], ecx

; 631  : 	r[3][3] = in1[3][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	imul	esi, esi, 3
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [esi+edx], eax

; 632  : 	r[3][4] =	0.0f;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+eax], xmm0

; 633  : 	r[3][5] = 0.0f;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 634  : 	r[3][6] = 0.0f;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 635  : 	r[3][7] = 1.0f;	

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0

; 636  : 
; 637  : 	if( fabs( r[3][0] ) > fabs( r[2][0] ))

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2115[ebp]
	movsd	xmm0, QWORD PTR tv2115[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	cvtss2sd xmm1, DWORD PTR [edx+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv2999[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2122[ebp]
	movsd	xmm0, QWORD PTR tv2999[ebp]
	comisd	xmm0, QWORD PTR tv2122[ebp]
	jbe	SHORT $LN2@Matrix4x4_

; 638  : 	{
; 639  : 		temp = r[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp+ecx]
	mov	DWORD PTR _temp$[ebp], edx

; 640  : 		r[3] = r[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	DWORD PTR _r$[ebp+edx], eax

; 641  : 		r[2] = temp;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _r$[ebp+eax], ecx
$LN2@Matrix4x4_:

; 642  : 	}
; 643  : 
; 644  : 	if( fabs( r[2][0] ) > fabs( r[1][0] ))

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _r$[ebp+eax]
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2136[ebp]
	movsd	xmm0, QWORD PTR tv2136[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm1, DWORD PTR [ecx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv3001[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2143[ebp]
	movsd	xmm0, QWORD PTR tv3001[ebp]
	comisd	xmm0, QWORD PTR tv2143[ebp]
	jbe	SHORT $LN3@Matrix4x4_

; 645  : 	{
; 646  : 		temp = r[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _r$[ebp+eax]
	mov	DWORD PTR _temp$[ebp], ecx

; 647  : 		r[2] = r[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	DWORD PTR _r$[ebp+ecx], edx

; 648  : 		r[1] = temp;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _r$[ebp+eax], ecx
$LN3@Matrix4x4_:

; 649  : 	}
; 650  : 
; 651  : 	if( fabs( r[1][0] ) > fabs( r[0][0] ))

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _r$[ebp+eax]
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2157[ebp]
	movsd	xmm0, QWORD PTR tv2157[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	cvtss2sd xmm1, DWORD PTR [edx+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv3003[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2164[ebp]
	movsd	xmm0, QWORD PTR tv3003[ebp]
	comisd	xmm0, QWORD PTR tv2164[ebp]
	jbe	SHORT $LN4@Matrix4x4_

; 652  : 	{
; 653  : 		temp = r[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _r$[ebp+eax]
	mov	DWORD PTR _temp$[ebp], ecx

; 654  : 		r[1] = r[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	DWORD PTR _r$[ebp+edx], eax

; 655  : 		r[0] = temp;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _r$[ebp+ecx], edx
$LN4@Matrix4x4_:

; 656  : 	}
; 657  : 
; 658  : 	if( r[0][0] )

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN19@Matrix4x4_

; 659  : 	{
; 660  : 		m[1] = r[1][0] / r[0][0];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+edx]
	divss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _m$[ebp+edx], xmm0

; 661  : 		m[2] = r[2][0] / r[0][0];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+edx]
	divss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR _m$[ebp+edx], xmm0

; 662  : 		m[3] = r[3][0] / r[0][0];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, 4
	imul	esi, esi, 0
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	xmm0, DWORD PTR [ecx+eax]
	divss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	imul	ecx, eax, 3
	movss	DWORD PTR _m$[ebp+ecx], xmm0

; 663  : 
; 664  : 		s = r[0][1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 665  : 		r[1][1] -= m[1] * s;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 666  : 		r[2][1] -= m[2] * s;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 667  : 		r[3][1] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 668  : 
; 669  : 		s = r[0][2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 670  : 		r[1][2] -= m[1] * s;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 671  : 		r[2][2] -= m[2] * s;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 672  : 		r[3][2] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 673  : 
; 674  : 		s = r[0][3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _s$[ebp], xmm0

; 675  : 		r[1][3] -= m[1] * s;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 676  : 		r[2][3] -= m[2] * s;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 677  : 		r[3][3] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 678  : 
; 679  : 		s = r[0][4];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 680  : 		if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN6@Matrix4x4_

; 681  : 		{
; 682  : 			r[1][4] -= m[1] * s;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 683  : 			r[2][4] -= m[2] * s;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 684  : 			r[3][4] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1
$LN6@Matrix4x4_:

; 685  : 		}
; 686  : 
; 687  : 		s = r[0][5];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _s$[ebp], xmm0

; 688  : 		if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN7@Matrix4x4_

; 689  : 		{
; 690  : 			r[1][5] -= m[1] * s;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 691  : 			r[2][5] -= m[2] * s;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 692  : 			r[3][5] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1
$LN7@Matrix4x4_:

; 693  : 		}
; 694  : 
; 695  : 		s = r[0][6];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _s$[ebp], xmm0

; 696  : 		if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN8@Matrix4x4_

; 697  : 		{
; 698  : 			r[1][6] -= m[1] * s;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 699  : 			r[2][6] -= m[2] * s;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 700  : 			r[3][6] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1
$LN8@Matrix4x4_:

; 701  : 		}
; 702  : 
; 703  : 		s = r[0][7];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _s$[ebp], xmm0

; 704  : 		if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN9@Matrix4x4_

; 705  : 		{
; 706  : 			r[1][7] -= m[1] * s;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 707  : 			r[2][7] -= m[2] * s;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 708  : 			r[3][7] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1
$LN9@Matrix4x4_:

; 709  : 		}
; 710  : 
; 711  : 		if( fabs( r[3][1] ) > fabs( r[2][1] ))

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2381[ebp]
	movsd	xmm0, QWORD PTR tv2381[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm1, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv3005[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2388[ebp]
	movsd	xmm0, QWORD PTR tv3005[ebp]
	comisd	xmm0, QWORD PTR tv2388[ebp]
	jbe	SHORT $LN10@Matrix4x4_

; 712  : 		{
; 713  : 			temp = r[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp+ecx]
	mov	DWORD PTR _temp$[ebp], edx

; 714  : 			r[3] = r[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	DWORD PTR _r$[ebp+edx], eax

; 715  : 			r[2] = temp;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _r$[ebp+eax], ecx
$LN10@Matrix4x4_:

; 716  : 		}
; 717  : 
; 718  : 		if( fabs( r[2][1] ) > fabs( r[1][1] ))

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+eax]
	cvtss2sd xmm0, DWORD PTR [edx+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2402[ebp]
	movsd	xmm0, QWORD PTR tv2402[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+eax]
	cvtss2sd xmm1, DWORD PTR [edx+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv3007[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2409[ebp]
	movsd	xmm0, QWORD PTR tv3007[ebp]
	comisd	xmm0, QWORD PTR tv2409[ebp]
	jbe	SHORT $LN11@Matrix4x4_

; 719  : 		{
; 720  : 			temp = r[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _r$[ebp+eax]
	mov	DWORD PTR _temp$[ebp], ecx

; 721  : 			r[2] = r[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	DWORD PTR _r$[ebp+ecx], edx

; 722  : 			r[1] = temp;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _r$[ebp+eax], ecx
$LN11@Matrix4x4_:

; 723  : 		}
; 724  : 
; 725  : 		if( r[1][1] )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [ecx+edx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN19@Matrix4x4_

; 726  : 		{
; 727  : 			m[2] = r[2][1] / r[1][1];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [edx+ecx]
	divss	xmm0, DWORD PTR [eax+esi]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _m$[ebp+ecx], xmm0

; 728  : 			m[3] = r[3][1] / r[1][1];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, 4
	shl	esi, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+edx]
	divss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR _m$[ebp+eax], xmm0

; 729  : 			r[2][2] -= m[2] * r[1][2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 1
	mov	esi, 4
	shl	esi, 0
	mov	edi, 4
	shl	edi, 1
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 730  : 			r[3][2] -= m[3] * r[1][2];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	shl	esi, 0
	mov	edi, 4
	shl	edi, 1
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 731  : 			r[2][3] -= m[2] * r[1][3];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, 4
	shl	esi, 0
	mov	edi, 4
	imul	edi, edi, 3
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 732  : 			r[3][3] -= m[3] * r[1][3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	shl	esi, 0
	mov	edi, 4
	imul	edi, edi, 3
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 733  : 
; 734  : 			s = r[1][4];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [ecx+edx]
	movss	DWORD PTR _s$[ebp], xmm0

; 735  : 			if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN13@Matrix4x4_

; 736  : 			{
; 737  : 				r[2][4] -= m[2] * s;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _m$[ebp+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 738  : 				r[3][4] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1
$LN13@Matrix4x4_:

; 739  : 			}
; 740  : 
; 741  : 			s = r[1][5];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 742  : 			if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN14@Matrix4x4_

; 743  : 			{
; 744  : 				r[2][5] -= m[2] * s;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 745  : 				r[3][5] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1
$LN14@Matrix4x4_:

; 746  : 			}
; 747  : 
; 748  : 			s = r[1][6];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 749  : 			if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN15@Matrix4x4_

; 750  : 			{
; 751  : 				r[2][6] -= m[2] * s;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 752  : 				r[3][6] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1
$LN15@Matrix4x4_:

; 753  : 			}
; 754  : 
; 755  : 			s = r[1][7];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 756  : 			if( s )

	movss	xmm0, DWORD PTR _s$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN16@Matrix4x4_

; 757  : 			{
; 758  : 				r[2][7] -= m[2] * s;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 759  : 				r[3][7] -= m[3] * s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1
$LN16@Matrix4x4_:

; 760  : 			}
; 761  : 
; 762  : 			if( fabs( r[3][2] ) > fabs( r[2][2] ))

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2556[ebp]
	movsd	xmm0, QWORD PTR tv2556[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	cvtss2sd xmm1, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv3009[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv2563[ebp]
	movsd	xmm0, QWORD PTR tv3009[ebp]
	comisd	xmm0, QWORD PTR tv2563[ebp]
	jbe	SHORT $LN17@Matrix4x4_

; 763  : 			{
; 764  : 				temp = r[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp+ecx]
	mov	DWORD PTR _temp$[ebp], edx

; 765  : 				r[3] = r[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	DWORD PTR _r$[ebp+edx], eax

; 766  : 				r[2] = temp;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _r$[ebp+eax], ecx
$LN17@Matrix4x4_:

; 767  : 			}
; 768  : 
; 769  : 			if( r[2][2] )

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR [ecx+edx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN19@Matrix4x4_

; 770  : 			{
; 771  : 				m[3] = r[3][2] / r[2][2];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, 4
	shl	esi, 1
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+edx]
	divss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR _m$[ebp+eax], xmm0

; 772  : 				r[3][3] -= m[3] * r[2][3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	shl	esi, 1
	mov	edi, 4
	imul	edi, edi, 3
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 773  : 				r[3][4] -= m[3] * r[2][4];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	shl	esi, 1
	mov	edi, 4
	shl	edi, 2
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+ecx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 774  : 				r[3][5] -= m[3] * r[2][5];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	shl	esi, 1
	mov	edi, 4
	imul	edi, edi, 5
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 775  : 				r[3][6] -= m[3] * r[2][6];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	shl	esi, 1
	mov	edi, 4
	imul	edi, edi, 6
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 776  : 				r[3][7] -= m[3] * r[2][7];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	shl	esi, 1
	mov	edi, 4
	imul	edi, edi, 7
	mov	esi, DWORD PTR _r$[ebp+esi]
	movss	xmm0, DWORD PTR _m$[ebp+edx]
	mulss	xmm0, DWORD PTR [esi+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 777  : 
; 778  : 				if( r[3][3] )

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN19@Matrix4x4_

; 779  : 				{
; 780  : 					s = 1.0f / r[3][3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 781  : 					r[3][4] *= s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [eax+ecx], xmm0

; 782  : 					r[3][5] *= s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm0

; 783  : 					r[3][6] *= s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm0

; 784  : 					r[3][7] *= s;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [edx+eax], xmm0

; 785  : 
; 786  : 					m[2] = r[2][3];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR _m$[ebp+ecx], edx

; 787  : 					s = 1.0f / r[2][2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _s$[ebp], xmm0

; 788  : 					r[2][4] = s * (r[2][4] - r[3][4] * m[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, 4
	shl	esi, 2
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	edi, 4
	shl	edi, 1
	movss	xmm0, DWORD PTR [eax+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 789  : 					r[2][5] = s * (r[2][5] - r[3][5] * m[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	imul	esi, esi, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 1
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 790  : 					r[2][6] = s * (r[2][6] - r[3][6] * m[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	imul	esi, esi, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 1
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 791  : 					r[2][7] = s * (r[2][7] - r[3][7] * m[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	imul	esi, esi, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 1
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 792  : 
; 793  : 					m[1] = r[1][3];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR _m$[ebp+ecx], edx

; 794  : 					r[1][4] -= r[3][4] * m[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, 4
	shl	esi, 2
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [eax+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 795  : 					r[1][5] -= r[3][5] * m[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	imul	esi, esi, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 796  : 					r[1][6] -= r[3][6] * m[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	imul	esi, esi, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 797  : 					r[1][7] -= r[3][7] * m[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	imul	esi, esi, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 798  : 
; 799  : 					m[0] = r[0][3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 0
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR _m$[ebp+edx], eax

; 800  : 					r[0][4] -= r[3][4] * m[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, 4
	shl	esi, 2
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 801  : 					r[0][5] -= r[3][5] * m[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	imul	esi, esi, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 802  : 					r[0][6] -= r[3][6] * m[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	imul	esi, esi, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 803  : 					r[0][7] -= r[3][7] * m[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, 4
	imul	esi, esi, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 804  : 
; 805  : 					m[1] = r[1][2];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR _m$[ebp+eax], ecx

; 806  : 					s = 1.0f / r[1][1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _s$[ebp], xmm0

; 807  : 					r[1][4] = s * (r[1][4] - r[2][4] * m[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 4
	shl	eax, 1
	mov	esi, 4
	shl	esi, 2
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [eax+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [edx+eax], xmm1

; 808  : 					r[1][5] = s * (r[1][5] - r[2][5] * m[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, 4
	imul	esi, esi, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 809  : 					r[1][6] = s * (r[1][6] - r[2][6] * m[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, 4
	imul	esi, esi, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 810  : 					r[1][7] = s * (r[1][7] - r[2][7] * m[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, 4
	imul	esi, esi, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	shl	edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	movss	DWORD PTR [ecx+edx], xmm1

; 811  : 
; 812  : 					m[0] = r[0][2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR _m$[ebp+ecx], edx

; 813  : 					r[0][4] -= r[2][4] * m[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, 4
	shl	esi, 2
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 814  : 					r[0][5] -= r[2][5] * m[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	imul	esi, esi, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 815  : 					r[0][6] -= r[2][6] * m[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	imul	esi, esi, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 816  : 					r[0][7] -= r[2][7] * m[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, 4
	imul	esi, esi, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 817  : 
; 818  : 					m[0] = r[0][1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR _m$[ebp+ecx], edx

; 819  : 					s = 1.0f / r[0][0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _s$[ebp], xmm0

; 820  : 					r[0][4] = s * (r[0][4] - r[1][4] * m[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, 4
	shl	esi, 2
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	movss	DWORD PTR [ecx+edx], xmm1

; 821  : 					r[0][5] = s * (r[0][5] - r[1][5] * m[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	mov	esi, 4
	imul	esi, esi, 5
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 822  : 					r[0][6] = s * (r[0][6] - r[1][6] * m[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	mov	esi, 4
	imul	esi, esi, 6
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 823  : 					r[0][7] = s * (r[0][7] - r[1][7] * m[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	mov	esi, 4
	imul	esi, esi, 7
	mov	edx, DWORD PTR _r$[ebp+edx]
	mov	edi, 4
	imul	edi, edi, 0
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR _m$[ebp+edi]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _s$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	movss	DWORD PTR [eax+ecx], xmm1

; 824  : 
; 825  : 					out[0][0]	= r[0][4];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+esi], edx

; 826  : 					out[0][1]	= r[0][5];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 827  : 					out[0][2]	= r[0][6];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 828  : 					out[0][3]	= r[0][7];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 829  : 					out[1][0]	= r[1][4];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+esi], ecx

; 830  : 					out[1][1]	= r[1][5];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+esi], edx

; 831  : 					out[1][2]	= r[1][6];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+esi], edx

; 832  : 					out[1][3]	= r[1][7];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+esi], edx

; 833  : 					out[2][0]	= r[2][4];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _r$[ebp+eax]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+esi], ecx

; 834  : 					out[2][1]	= r[2][5];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+esi], edx

; 835  : 					out[2][2]	= r[2][6];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+esi], edx

; 836  : 					out[2][3]	= r[2][7];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _r$[ebp+eax]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+esi], edx

; 837  : 					out[3][0]	= r[3][4];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _r$[ebp+ecx]
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+esi], edx

; 838  : 					out[3][1]	= r[3][5];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 16					; 00000010H
	imul	edx, edx, 3
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 839  : 					out[3][2]	= r[3][6];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 16					; 00000010H
	imul	edx, edx, 3
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 840  : 					out[3][3]	= r[3][7];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _r$[ebp+ecx]
	mov	edx, 16					; 00000010H
	imul	edx, edx, 3
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 841  : 
; 842  : 					return true;

	mov	eax, 1
	jmp	SHORT $LN1@Matrix4x4_
$LN19@Matrix4x4_:

; 843  : 				}
; 844  : 			}
; 845  : 		}
; 846  : 	}
; 847  : 	return false;

	xor	eax, eax
$LN1@Matrix4x4_:

; 848  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_Invert_Full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_Transpose
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in1$ = 12						; size = 4
_Matrix4x4_Transpose PROC				; COMDAT

; 569  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 570  : 	out[0][0] = in1[0][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [edx+esi], eax

; 571  : 	out[0][1] = in1[1][0];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [ecx+esi], edx

; 572  : 	out[0][2] = in1[2][0];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [ecx+esi], edx

; 573  : 	out[0][3] = in1[3][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [edx+esi], eax

; 574  : 	out[1][0] = in1[0][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+esi], ecx

; 575  : 	out[1][1] = in1[1][1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 576  : 	out[1][2] = in1[2][1];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 577  : 	out[1][3] = in1[3][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+esi], ecx

; 578  : 	out[2][0] = in1[0][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+esi], ecx

; 579  : 	out[2][1] = in1[1][2];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 580  : 	out[2][2] = in1[2][2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 581  : 	out[2][3] = in1[3][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+esi], ecx

; 582  : 	out[3][0] = in1[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 16					; 00000010H
	imul	edx, edx, 3
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [edx+esi], eax

; 583  : 	out[3][1] = in1[1][3];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [ecx+esi], edx

; 584  : 	out[3][2] = in1[2][3];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [ecx+esi], edx

; 585  : 	out[3][3] = in1[3][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 16					; 00000010H
	imul	edx, edx, 3
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [edx+esi], eax

; 586  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_Transpose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_OriginFromMatrix
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_Matrix4x4_OriginFromMatrix PROC			; COMDAT

; 368  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 369  : 	out[0] = in[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [esi+edx], eax

; 370  : 	out[1] = in[1][3];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 371  : 	out[2] = in[2][3];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 372  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_OriginFromMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_Invert_Simple
_TEXT	SEGMENT
_scale$ = -4						; size = 4
_out$ = 8						; size = 4
_in1$ = 12						; size = 4
_Matrix4x4_Invert_Simple PROC				; COMDAT

; 537  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 538  : 	// we only support uniform scaling, so assume the first row is enough
; 539  : 	// (note the lack of sqrt here, because we're trying to undo the scaling,
; 540  : 	// this means multiplying by the inverse scale twice - squaring it, which
; 541  : 	// makes the sqrt a waste of time)
; 542  : 	float	scale = 1.0f / (in1[0][0] * in1[0][0] + in1[0][1] * in1[0][1] + in1[0][2] * in1[0][2]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _scale$[ebp], xmm1

; 543  : 
; 544  : 	// invert the rotation by transposing and multiplying by the squared
; 545  : 	// recipricol of the input matrix scale as described above
; 546  : 	out[0][0] = in1[0][0] * scale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR [edx+ecx], xmm0

; 547  : 	out[0][1] = in1[1][0] * scale;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 548  : 	out[0][2] = in1[2][0] * scale;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 549  : 	out[1][0] = in1[0][1] * scale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 550  : 	out[1][1] = in1[1][1] * scale;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 551  : 	out[1][2] = in1[2][1] * scale;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR [edx+eax], xmm0

; 552  : 	out[2][0] = in1[0][2] * scale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 553  : 	out[2][1] = in1[1][2] * scale;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 554  : 	out[2][2] = in1[2][2] * scale;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR [edx+eax], xmm0

; 555  : 
; 556  : 	// invert the translate
; 557  : 	out[0][3] = -(in1[0][3] * out[0][0] + in1[1][3] * out[0][1] + in1[2][3] * out[0][2]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	imul	eax, eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	movss	DWORD PTR [edx+ecx], xmm0

; 558  : 	out[1][3] = -(in1[0][3] * out[1][0] + in1[1][3] * out[1][1] + in1[2][3] * out[1][2]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR [ecx+eax], xmm0

; 559  : 	out[2][3] = -(in1[0][3] * out[2][0] + in1[1][3] * out[2][1] + in1[2][3] * out[2][2]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR [ecx+eax], xmm0

; 560  : 
; 561  : 	// don't know if there's anything worth doing here
; 562  : 	out[3][0] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 563  : 	out[3][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 564  : 	out[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 565  : 	out[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0

; 566  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_Invert_Simple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_SetOrigin
_TEXT	SEGMENT
_out$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_Matrix4x4_SetOrigin PROC				; COMDAT

; 361  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 362  : 	out[0][3] = x;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 363  : 	out[1][3] = y;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 364  : 	out[2][3] = z;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 365  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_SetOrigin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_ConvertToEntity
_TEXT	SEGMENT
tv310 = -76						; size = 8
tv296 = -76						; size = 8
tv284 = -76						; size = 8
tv271 = -76						; size = 8
tv258 = -76						; size = 8
_xyDist$ = -4						; size = 4
_in$ = 8						; size = 4
_angles$ = 12						; size = 4
_origin$ = 16						; size = 4
_Matrix4x4_ConvertToEntity PROC				; COMDAT

; 492  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 493  : 	float xyDist = sqrt( in[0][0] * in[0][0] + in[1][0] * in[1][0] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _xyDist$[ebp]

; 494  : 
; 495  : 	// enough here to get angles?
; 496  : 	if( xyDist > 0.001f )

	movss	xmm0, DWORD PTR _xyDist$[ebp]
	comiss	xmm0, DWORD PTR __real@3a83126f
	jbe	$LN2@Matrix4x4_

; 497  : 	{
; 498  : 		angles[0] = RAD2DEG( atan2( -in[2][0], xyDist ));

	cvtss2sd xmm0, DWORD PTR _xyDist$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv258[ebp]
	movsd	xmm0, QWORD PTR tv258[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _angles$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 499  : 		angles[1] = RAD2DEG( atan2( in[1][0], in[0][0] ));

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv271[ebp]
	movsd	xmm0, QWORD PTR tv271[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _angles$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 500  : 		angles[2] = RAD2DEG( atan2( in[2][1], in[2][2] ));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	cvtss2sd xmm0, DWORD PTR [edx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv284[ebp]
	movsd	xmm0, QWORD PTR tv284[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _angles$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 501  : 	}

	jmp	$LN3@Matrix4x4_
$LN2@Matrix4x4_:

; 502  : 	else	// forward is mostly Z, gimbal lock
; 503  : 	{
; 504  : 		angles[0] = RAD2DEG( atan2( -in[2][0], xyDist ));

	cvtss2sd xmm0, DWORD PTR _xyDist$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv296[ebp]
	movsd	xmm0, QWORD PTR tv296[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _angles$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 505  : 		angles[1] = RAD2DEG( atan2( -in[0][1], in[1][1] ));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv310[ebp]
	movsd	xmm0, QWORD PTR tv310[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _angles$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 506  : 		angles[2] = 0.0f;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _angles$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
$LN3@Matrix4x4_:

; 507  : 	}
; 508  : 
; 509  : 	origin[0] = in[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [esi+edx], eax

; 510  : 	origin[1] = in[1][3];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 511  : 	origin[2] = in[2][3];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, DWORD PTR _origin$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 512  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_ConvertToEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_TransformStandardPlane
_TEXT	SEGMENT
_iscale$ = -8						; size = 4
_scale$ = -4						; size = 4
_in$ = 8						; size = 4
_normal$ = 12						; size = 4
_d$ = 16						; size = 4
_out$ = 20						; size = 4
_dist$ = 24						; size = 4
_Matrix4x4_TransformStandardPlane PROC			; COMDAT

; 526  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 527  : 	float scale = sqrt( in[0][0] * in[0][0] + in[0][1] * in[0][1] + in[0][2] * in[0][2] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _scale$[ebp]

; 528  : 	float iscale = 1.0f / scale;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _iscale$[ebp], xmm0

; 529  : 
; 530  : 	out[0] = (normal[0] * in[0][0] + normal[1] * in[0][1] + normal[2] * in[0][2]) * iscale;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [ecx+eax]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _iscale$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 531  : 	out[1] = (normal[0] * in[1][0] + normal[1] * in[1][1] + normal[2] * in[1][2]) * iscale;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _iscale$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 532  : 	out[2] = (normal[0] * in[2][0] + normal[1] * in[2][1] + normal[2] * in[2][2]) * iscale;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _iscale$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 533  : 	*dist = d * scale - ( out[0] * in[0][3] + out[1] * in[1][3] + out[2] * in[2][3] );

	movss	xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _out$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _out$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [ecx+edx]
	addss	xmm1, xmm2
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _out$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [ecx+edx]
	addss	xmm1, xmm2
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _dist$[ebp]
	movss	DWORD PTR [eax], xmm0

; 534  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_TransformStandardPlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_TransformPositivePlane
_TEXT	SEGMENT
_iscale$ = -8						; size = 4
_scale$ = -4						; size = 4
_in$ = 8						; size = 4
_normal$ = 12						; size = 4
_d$ = 16						; size = 4
_out$ = 20						; size = 4
_dist$ = 24						; size = 4
_Matrix4x4_TransformPositivePlane PROC			; COMDAT

; 515  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 516  : 	float	scale = sqrt( in[0][0] * in[0][0] + in[0][1] * in[0][1] + in[0][2] * in[0][2] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _scale$[ebp]

; 517  : 	float	iscale = 1.0f / scale;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _iscale$[ebp], xmm0

; 518  : 
; 519  : 	out[0] = (normal[0] * in[0][0] + normal[1] * in[0][1] + normal[2] * in[0][2]) * iscale;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [ecx+eax]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _iscale$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 520  : 	out[1] = (normal[0] * in[1][0] + normal[1] * in[1][1] + normal[2] * in[1][2]) * iscale;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _iscale$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 521  : 	out[2] = (normal[0] * in[2][0] + normal[1] * in[2][1] + normal[2] * in[2][2]) * iscale;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _iscale$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 522  : 	*dist = d * scale + ( out[0] * in[0][3] + out[1] * in[1][3] + out[2] * in[2][3] );

	movss	xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _out$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _out$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [ecx+edx]
	addss	xmm1, xmm2
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _out$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [ecx+edx]
	addss	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _dist$[ebp]
	movss	DWORD PTR [eax], xmm0

; 523  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_TransformPositivePlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_CreateFromEntity
_TEXT	SEGMENT
_cy$ = -28						; size = 4
_cp$ = -24						; size = 4
_cr$ = -20						; size = 4
_sy$ = -16						; size = 4
_sp$ = -12						; size = 4
_sr$ = -8						; size = 4
_angle$ = -4						; size = 4
_out$ = 8						; size = 4
_angles$ = 12						; size = 4
_origin$ = 16						; size = 4
_scale$ = 20						; size = 4
_Matrix4x4_CreateFromEntity PROC			; COMDAT

; 395  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 396  : 	float	angle, sr, sp, sy, cr, cp, cy;
; 397  : 
; 398  : 	if( angles[ROLL] )

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN2@Matrix4x4_

; 399  : 	{
; 400  : 		angle = angles[YAW] * (M_PI2 / 360.0f);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 401  : 		SinCos( angle, &sy, &cy );

	lea	eax, DWORD PTR _cy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sy$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 402  : 		angle = angles[PITCH] * (M_PI2 / 360.0f);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 403  : 		SinCos( angle, &sp, &cp );

	lea	eax, DWORD PTR _cp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sp$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 404  : 		angle = angles[ROLL] * (M_PI2 / 360.0f);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 405  : 		SinCos( angle, &sr, &cr );

	lea	eax, DWORD PTR _cr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 406  : 
; 407  : 		out[0][0] = (cp*cy) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 408  : 		out[0][1] = (sr*sp*cy+cr*-sy) * scale;

	movss	xmm0, DWORD PTR _sr$[ebp]
	mulss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	movss	xmm1, DWORD PTR _sy$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _cr$[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 409  : 		out[0][2] = (cr*sp*cy+-sr*-sy) * scale;

	movss	xmm0, DWORD PTR _cr$[ebp]
	mulss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	movss	xmm1, DWORD PTR _sr$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm2, DWORD PTR _sy$[ebp]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 410  : 		out[0][3] = origin[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 411  : 		out[1][0] = (cp*sy) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 412  : 		out[1][1] = (sr*sp*sy+cr*cy) * scale;

	movss	xmm0, DWORD PTR _sr$[ebp]
	mulss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	movss	xmm1, DWORD PTR _cr$[ebp]
	mulss	xmm1, DWORD PTR _cy$[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 413  : 		out[1][2] = (cr*sp*sy+-sr*cy) * scale;

	movss	xmm0, DWORD PTR _cr$[ebp]
	mulss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	movss	xmm1, DWORD PTR _sr$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _cy$[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 414  : 		out[1][3] = origin[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 415  : 		out[2][0] = (-sp) * scale;

	movss	xmm0, DWORD PTR _sp$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 416  : 		out[2][1] = (sr*cp) * scale;

	movss	xmm0, DWORD PTR _sr$[ebp]
	mulss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 417  : 		out[2][2] = (cr*cp) * scale;

	movss	xmm0, DWORD PTR _cr$[ebp]
	mulss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 418  : 		out[2][3] = origin[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 419  : 		out[3][0] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 420  : 		out[3][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 421  : 		out[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 422  : 		out[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0

; 423  : 	}

	jmp	$LN7@Matrix4x4_
$LN2@Matrix4x4_:

; 424  : 	else if( angles[PITCH] )

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN4@Matrix4x4_

; 425  : 	{
; 426  : 		angle = angles[YAW] * (M_PI2 / 360.0f);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 427  : 		SinCos( angle, &sy, &cy );

	lea	eax, DWORD PTR _cy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sy$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 428  : 		angle = angles[PITCH] * (M_PI2 / 360.0f);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 429  : 		SinCos( angle, &sp, &cp );

	lea	eax, DWORD PTR _cp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sp$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 430  : 
; 431  : 		out[0][0] = (cp*cy) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 432  : 		out[0][1] = (-sy) * scale;

	movss	xmm0, DWORD PTR _sy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 433  : 		out[0][2] = (sp*cy) * scale;

	movss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 434  : 		out[0][3] = origin[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 435  : 		out[1][0] = (cp*sy) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 436  : 		out[1][1] = (cy) * scale;

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 437  : 		out[1][2] = (sp*sy) * scale;

	movss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 438  : 		out[1][3] = origin[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 439  : 		out[2][0] = (-sp) * scale;

	movss	xmm0, DWORD PTR _sp$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 440  : 		out[2][1] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 441  : 		out[2][2] = (cp) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 442  : 		out[2][3] = origin[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 443  : 		out[3][0] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 444  : 		out[3][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 445  : 		out[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 446  : 		out[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0

; 447  : 	}

	jmp	$LN7@Matrix4x4_
$LN4@Matrix4x4_:

; 448  : 	else if( angles[YAW] )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN6@Matrix4x4_

; 449  : 	{
; 450  : 		angle = angles[YAW] * (M_PI2 / 360.0f);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 451  : 		SinCos( angle, &sy, &cy );

	lea	eax, DWORD PTR _cy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sy$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 452  : 
; 453  : 		out[0][0] = (cy) * scale;

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 454  : 		out[0][1] = (-sy) * scale;

	movss	xmm0, DWORD PTR _sy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 455  : 		out[0][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 456  : 		out[0][3] = origin[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 457  : 		out[1][0] = (sy) * scale;

	movss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 458  : 		out[1][1] = (cy) * scale;

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 459  : 		out[1][2] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 460  : 		out[1][3] = origin[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 461  : 		out[2][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 462  : 		out[2][1] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 463  : 		out[2][2] = scale;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 464  : 		out[2][3] = origin[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 465  : 		out[3][0] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 466  : 		out[3][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 467  : 		out[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 468  : 		out[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0

; 469  : 	}

	jmp	$LN7@Matrix4x4_
$LN6@Matrix4x4_:

; 470  : 	else
; 471  : 	{
; 472  : 		out[0][0] = scale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 473  : 		out[0][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 474  : 		out[0][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 475  : 		out[0][3] = origin[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 476  : 		out[1][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 477  : 		out[1][1] = scale;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 478  : 		out[1][2] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 479  : 		out[1][3] = origin[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 480  : 		out[2][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 481  : 		out[2][1] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 482  : 		out[2][2] = scale;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 483  : 		out[2][3] = origin[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 484  : 		out[3][0] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 485  : 		out[3][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 486  : 		out[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 487  : 		out[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0
$LN7@Matrix4x4_:

; 488  : 	}
; 489  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_CreateFromEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_FromOriginQuat
_TEXT	SEGMENT
_out$ = 8						; size = 4
_quaternion$ = 12					; size = 4
_origin$ = 16						; size = 4
_Matrix4x4_FromOriginQuat PROC				; COMDAT

; 375  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 376  : 	out[0][0] = 1.0f - 2.0f * quaternion[1] * quaternion[1] - 2.0f * quaternion[2] * quaternion[2];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm1

; 377  : 	out[1][0] = 2.0f * quaternion[0] * quaternion[1] + 2.0f * quaternion[3] * quaternion[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 378  : 	out[2][0] = 2.0f * quaternion[0] * quaternion[2] - 2.0f * quaternion[3] * quaternion[1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	subss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 379  : 	out[0][3] = origin[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 380  : 	out[0][1] = 2.0f * quaternion[0] * quaternion[1] - 2.0f * quaternion[3] * quaternion[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	subss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 381  : 	out[1][1] = 1.0f - 2.0f * quaternion[0] * quaternion[0] - 2.0f * quaternion[2] * quaternion[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [edx+ecx]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm1

; 382  : 	out[2][1] = 2.0f * quaternion[1] * quaternion[2] + 2.0f * quaternion[3] * quaternion[0];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _quaternion$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 383  : 	out[1][3] = origin[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 384  : 	out[0][2] = 2.0f * quaternion[0] * quaternion[2] + 2.0f * quaternion[3] * quaternion[1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR [edx+eax], xmm0

; 385  : 	out[1][2] = 2.0f * quaternion[1] * quaternion[2] - 2.0f * quaternion[3] * quaternion[0];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _quaternion$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	subss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 386  : 	out[2][2] = 1.0f - 2.0f * quaternion[0] * quaternion[0] - 2.0f * quaternion[1] * quaternion[1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [edx+ecx]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm1

; 387  : 	out[2][3] = origin[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 388  : 	out[3][0] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 389  : 	out[3][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 390  : 	out[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 391  : 	out[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0

; 392  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_FromOriginQuat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_ConcatTransforms
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in1$ = 12						; size = 4
_in2$ = 16						; size = 4
_Matrix4x4_ConcatTransforms PROC			; COMDAT

; 345  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 346  : 	out[0][0] = in1[0][0] * in2[0][0] + in1[0][1] * in2[1][0] + in1[0][2] * in2[2][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 347  : 	out[0][1] = in1[0][0] * in2[0][1] + in1[0][1] * in2[1][1] + in1[0][2] * in2[2][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 348  : 	out[0][2] = in1[0][0] * in2[0][2] + in1[0][1] * in2[1][2] + in1[0][2] * in2[2][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 349  : 	out[0][3] = in1[0][0] * in2[0][3] + in1[0][1] * in2[1][3] + in1[0][2] * in2[2][3] + in1[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	addss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR [ecx+eax], xmm0

; 350  : 	out[1][0] = in1[1][0] * in2[0][0] + in1[1][1] * in2[1][0] + in1[1][2] * in2[2][0];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR [edx+ecx], xmm0

; 351  : 	out[1][1] = in1[1][0] * in2[0][1] + in1[1][1] * in2[1][1] + in1[1][2] * in2[2][1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 352  : 	out[1][2] = in1[1][0] * in2[0][2] + in1[1][1] * in2[1][2] + in1[1][2] * in2[2][2];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR [edx+eax], xmm0

; 353  : 	out[1][3] = in1[1][0] * in2[0][3] + in1[1][1] * in2[1][3] + in1[1][2] * in2[2][3] + in1[1][3];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	addss	xmm0, DWORD PTR [edx+ecx]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	movss	DWORD PTR [edx+ecx], xmm0

; 354  : 	out[2][0] = in1[2][0] * in2[0][0] + in1[2][1] * in2[1][0] + in1[2][2] * in2[2][0];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR [edx+ecx], xmm0

; 355  : 	out[2][1] = in1[2][0] * in2[0][1] + in1[2][1] * in2[1][1] + in1[2][2] * in2[2][1];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 356  : 	out[2][2] = in1[2][0] * in2[0][2] + in1[2][1] * in2[1][2] + in1[2][2] * in2[2][2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR [edx+eax], xmm0

; 357  : 	out[2][3] = in1[2][0] * in2[0][3] + in1[2][1] * in2[1][3] + in1[2][2] * in2[2][3] + in1[2][3];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	addss	xmm0, DWORD PTR [edx+ecx]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	movss	DWORD PTR [edx+ecx], xmm0

; 358  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_ConcatTransforms ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_VectorIRotate
_TEXT	SEGMENT
_in$ = 8						; size = 4
_v$ = 12						; size = 4
_out$ = 16						; size = 4
_Matrix4x4_VectorIRotate PROC				; COMDAT

; 338  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 339  : 	out[0] = v[0] * in[0][0] + v[1] * in[1][0] + v[2] * in[2][0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 340  : 	out[1] = v[0] * in[0][1] + v[1] * in[1][1] + v[2] * in[2][1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 341  : 	out[2] = v[0] * in[0][2] + v[1] * in[1][2] + v[2] * in[2][2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 342  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_VectorIRotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_VectorRotate
_TEXT	SEGMENT
_in$ = 8						; size = 4
_v$ = 12						; size = 4
_out$ = 16						; size = 4
_Matrix4x4_VectorRotate PROC				; COMDAT

; 331  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 332  : 	out[0] = v[0] * in[0][0] + v[1] * in[0][1] + v[2] * in[0][2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [ecx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 333  : 	out[1] = v[0] * in[1][0] + v[1] * in[1][1] + v[2] * in[1][2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 334  : 	out[2] = v[0] * in[2][0] + v[1] * in[2][1] + v[2] * in[2][2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 335  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_VectorRotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_VectorITransform
_TEXT	SEGMENT
_dir$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_v$ = 12						; size = 4
_out$ = 16						; size = 4
_Matrix4x4_VectorITransform PROC			; COMDAT

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 319  : 	vec3_t	dir;
; 320  : 
; 321  : 	dir[0] = v[0] - in[0][3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	subss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0

; 322  : 	dir[1] = v[1] - in[1][3];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+eax]
	subss	xmm0, DWORD PTR [ecx+edx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 323  : 	dir[2] = v[2] - in[2][3];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+eax]
	subss	xmm0, DWORD PTR [ecx+edx]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 324  : 
; 325  : 	out[0] = dir[0] * in[0][0] + dir[1] * in[1][0] + dir[2] * in[2][0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 326  : 	out[1] = dir[0] * in[0][1] + dir[1] * in[1][1] + dir[2] * in[2][1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 327  : 	out[2] = dir[0] * in[0][2] + dir[1] * in[1][2] + dir[2] * in[2][2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 328  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_VectorITransform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix4x4_VectorTransform
_TEXT	SEGMENT
_in$ = 8						; size = 4
_v$ = 12						; size = 4
_out$ = 16						; size = 4
_Matrix4x4_VectorTransform PROC				; COMDAT

; 311  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 312  : 	out[0] = v[0] * in[0][0] + v[1] * in[0][1] + v[2] * in[0][2] + in[0][3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [ecx+eax]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	addss	xmm0, DWORD PTR [edx+ecx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 313  : 	out[1] = v[0] * in[1][0] + v[1] * in[1][1] + v[2] * in[1][2] + in[1][3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	addss	xmm0, DWORD PTR [ecx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 314  : 	out[2] = v[0] * in[2][0] + v[1] * in[2][1] + v[2] * in[2][2] + in[2][3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	addss	xmm0, DWORD PTR [ecx+eax]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 315  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_VectorTransform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_Transpose
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in1$ = 12						; size = 4
_Matrix3x4_Transpose PROC				; COMDAT

; 255  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 256  : 	// transpose only rotational component
; 257  : 	out[0][0] = in1[0][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [edx+esi], eax

; 258  : 	out[0][1] = in1[1][0];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [ecx+esi], edx

; 259  : 	out[0][2] = in1[2][0];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [ecx+esi], edx

; 260  : 	out[1][0] = in1[0][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+esi], ecx

; 261  : 	out[1][1] = in1[1][1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 262  : 	out[1][2] = in1[2][1];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 263  : 	out[2][0] = in1[0][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+esi], ecx

; 264  : 	out[2][1] = in1[1][2];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 265  : 	out[2][2] = in1[2][2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 266  : 
; 267  : 	// copy origin
; 268  : 	out[0][3] = in1[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [edx+esi], eax

; 269  : 	out[1][3] = in1[1][3];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [ecx+esi], edx

; 270  : 	out[2][3] = in1[2][3];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [ecx+esi], edx

; 271  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_Transpose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_AnglesFromMatrix
_TEXT	SEGMENT
tv292 = -76						; size = 8
tv278 = -76						; size = 8
tv266 = -76						; size = 8
tv253 = -76						; size = 8
tv240 = -76						; size = 8
_xyDist$ = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_Matrix3x4_AnglesFromMatrix PROC			; COMDAT

; 98   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 99   : 	float xyDist = sqrt( in[0][0] * in[0][0] + in[1][0] * in[1][0] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _xyDist$[ebp]

; 100  : 
; 101  : 	if( xyDist > 0.001f )

	movss	xmm0, DWORD PTR _xyDist$[ebp]
	comiss	xmm0, DWORD PTR __real@3a83126f
	jbe	$LN2@Matrix3x4_

; 102  : 	{
; 103  : 		// enough here to get angles?
; 104  : 		out[0] = RAD2DEG( atan2( -in[2][0], xyDist ));

	cvtss2sd xmm0, DWORD PTR _xyDist$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv240[ebp]
	movsd	xmm0, QWORD PTR tv240[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 105  : 		out[1] = RAD2DEG( atan2( in[1][0], in[0][0] ));

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv253[ebp]
	movsd	xmm0, QWORD PTR tv253[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 106  : 		out[2] = RAD2DEG( atan2( in[2][1], in[2][2] ));

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	cvtss2sd xmm0, DWORD PTR [edx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv266[ebp]
	movsd	xmm0, QWORD PTR tv266[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 107  : 	}

	jmp	$LN3@Matrix3x4_
$LN2@Matrix3x4_:

; 108  : 	else
; 109  : 	{
; 110  : 		// forward is mostly Z, gimbal lock
; 111  : 		out[0] = RAD2DEG( atan2( -in[2][0], xyDist ));

	cvtss2sd xmm0, DWORD PTR _xyDist$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv278[ebp]
	movsd	xmm0, QWORD PTR tv278[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 112  : 		out[1] = RAD2DEG( atan2( -in[0][1], in[1][1] ));

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv292[ebp]
	movsd	xmm0, QWORD PTR tv292[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 113  : 		out[2] = 0.0f;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _out$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
$LN3@Matrix3x4_:

; 114  : 	}
; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_AnglesFromMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_OriginFromMatrix
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_Matrix3x4_OriginFromMatrix PROC			; COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 92   : 	out[0] = in[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [esi+edx], eax

; 93   : 	out[1] = in[1][3];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 94   : 	out[2] = in[2][3];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 95   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_OriginFromMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_Invert_Simple
_TEXT	SEGMENT
_scale$ = -4						; size = 4
_out$ = 8						; size = 4
_in1$ = 12						; size = 4
_Matrix3x4_Invert_Simple PROC				; COMDAT

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 230  : 	// we only support uniform scaling, so assume the first row is enough
; 231  : 	// (note the lack of sqrt here, because we're trying to undo the scaling,
; 232  : 	// this means multiplying by the inverse scale twice - squaring it, which
; 233  : 	// makes the sqrt a waste of time)
; 234  : 	float	scale = 1.0f / (in1[0][0] * in1[0][0] + in1[0][1] * in1[0][1] + in1[0][2] * in1[0][2]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _scale$[ebp], xmm1

; 235  : 
; 236  : 	// invert the rotation by transposing and multiplying by the squared
; 237  : 	// recipricol of the input matrix scale as described above
; 238  : 	out[0][0] = in1[0][0] * scale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR [edx+ecx], xmm0

; 239  : 	out[0][1] = in1[1][0] * scale;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 240  : 	out[0][2] = in1[2][0] * scale;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 241  : 	out[1][0] = in1[0][1] * scale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 242  : 	out[1][1] = in1[1][1] * scale;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 243  : 	out[1][2] = in1[2][1] * scale;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR [edx+eax], xmm0

; 244  : 	out[2][0] = in1[0][2] * scale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 245  : 	out[2][1] = in1[1][2] * scale;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 246  : 	out[2][2] = in1[2][2] * scale;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR [edx+eax], xmm0

; 247  : 
; 248  : 	// invert the translate
; 249  : 	out[0][3] = -(in1[0][3] * out[0][0] + in1[1][3] * out[0][1] + in1[2][3] * out[0][2]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	imul	eax, eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	movss	DWORD PTR [edx+ecx], xmm0

; 250  : 	out[1][3] = -(in1[0][3] * out[1][0] + in1[1][3] * out[1][1] + in1[2][3] * out[1][2]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR [ecx+eax], xmm0

; 251  : 	out[2][3] = -(in1[0][3] * out[2][0] + in1[1][3] * out[2][1] + in1[2][3] * out[2][2]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR [ecx+eax], xmm0

; 252  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_Invert_Simple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_SetOrigin
_TEXT	SEGMENT
_out$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_Matrix3x4_SetOrigin PROC				; COMDAT

; 84   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 85   : 	out[0][3] = x;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 86   : 	out[1][3] = y;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 87   : 	out[2][3] = z;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_SetOrigin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_TransformAABB
_TEXT	SEGMENT
tv299 = -120						; size = 4
tv278 = -120						; size = 4
tv149 = -120						; size = 4
tv128 = -120						; size = 4
_worldExtents$ = -52					; size = 12
_worldCenter$ = -40					; size = 12
_localExtents$ = -28					; size = 12
_localCenter$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_world$ = 8						; size = 4
_mins$ = 12						; size = 4
_maxs$ = 16						; size = 4
_absmin$ = 20						; size = 4
_absmax$ = 24						; size = 4
_Matrix3x4_TransformAABB PROC				; COMDAT

; 279  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 280  : 	vec3_t	localCenter, localExtents;
; 281  : 	vec3_t	worldCenter, worldExtents;
; 282  : 
; 283  : 	VectorAverage( mins, maxs, localCenter );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _mins$[ebp]
	mov	esi, DWORD PTR _maxs$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR [esi+eax]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	mov	eax, 4
	imul	ecx, eax, 0
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _localCenter$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _mins$[ebp]
	mov	esi, DWORD PTR _maxs$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	addss	xmm0, DWORD PTR [esi+eax]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	mov	edx, 4
	shl	edx, 0
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _localCenter$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _mins$[ebp]
	mov	esi, DWORD PTR _maxs$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR [esi+ecx]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv128[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv128[ebp]
	movss	DWORD PTR _localCenter$[ebp+eax], xmm0

; 284  : 	VectorSubtract( maxs, localCenter, localExtents );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _maxs$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR _localCenter$[ebp+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _localExtents$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _maxs$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR _localCenter$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _localExtents$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _maxs$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR _localCenter$[ebp+ecx]
	movss	DWORD PTR tv149[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv149[ebp]
	movss	DWORD PTR _localExtents$[ebp+eax], xmm0

; 285  : 
; 286  : 	Matrix3x4_VectorTransform( world, localCenter, worldCenter );

	lea	eax, DWORD PTR _worldCenter$[ebp]
	push	eax
	lea	ecx, DWORD PTR _localCenter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _world$[ebp]
	push	edx
	call	_Matrix3x4_VectorTransform
	add	esp, 12					; 0000000cH

; 287  : 	worldExtents[0] = DotProductAbs( localExtents, world[0] );	// auto-transposed!

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _world$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	movss	xmm0, DWORD PTR _localExtents$[ebp+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	cvttss2si eax, xmm0
	push	eax
	call	_abs
	add	esp, 4
	mov	esi, eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _world$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _localExtents$[ebp+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	cvttss2si eax, xmm0
	push	eax
	call	_abs
	add	esp, 4
	add	esi, eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _world$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _localExtents$[ebp+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	cvttss2si eax, xmm0
	push	eax
	call	_abs
	add	esp, 4
	add	esi, eax
	mov	ecx, 4
	imul	edx, ecx, 0
	cvtsi2ss xmm0, esi
	movss	DWORD PTR _worldExtents$[ebp+edx], xmm0

; 288  : 	worldExtents[1] = DotProductAbs( localExtents, world[1] );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _world$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	movss	xmm0, DWORD PTR _localExtents$[ebp+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	cvttss2si ecx, xmm0
	push	ecx
	call	_abs
	add	esp, 4
	mov	esi, eax
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _world$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _localExtents$[ebp+edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	cvttss2si edx, xmm0
	push	edx
	call	_abs
	add	esp, 4
	add	esi, eax
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _world$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _localExtents$[ebp+eax]
	mulss	xmm0, DWORD PTR [ecx+edx]
	cvttss2si eax, xmm0
	push	eax
	call	_abs
	add	esp, 4
	add	esi, eax
	mov	ecx, 4
	shl	ecx, 0
	cvtsi2ss xmm0, esi
	movss	DWORD PTR _worldExtents$[ebp+ecx], xmm0

; 289  : 	worldExtents[2] = DotProductAbs( localExtents, world[2] );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _world$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	movss	xmm0, DWORD PTR _localExtents$[ebp+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	cvttss2si ecx, xmm0
	push	ecx
	call	_abs
	add	esp, 4
	mov	esi, eax
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _world$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _localExtents$[ebp+edx]
	mulss	xmm0, DWORD PTR [eax+ecx]
	cvttss2si edx, xmm0
	push	edx
	call	_abs
	add	esp, 4
	add	esi, eax
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _world$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _localExtents$[ebp+eax]
	mulss	xmm0, DWORD PTR [ecx+edx]
	cvttss2si eax, xmm0
	push	eax
	call	_abs
	add	esp, 4
	add	esi, eax
	mov	ecx, 4
	shl	ecx, 1
	cvtsi2ss xmm0, esi
	movss	DWORD PTR _worldExtents$[ebp+ecx], xmm0

; 290  : 
; 291  : 	VectorSubtract( worldCenter, worldExtents, absmin );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _worldCenter$[ebp+ecx]
	subss	xmm0, DWORD PTR _worldExtents$[ebp+eax]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _absmin$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _worldCenter$[ebp+ecx]
	subss	xmm0, DWORD PTR _worldExtents$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _absmin$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _worldCenter$[ebp+edx]
	subss	xmm0, DWORD PTR _worldExtents$[ebp+eax]
	movss	DWORD PTR tv278[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _absmin$[ebp]
	movss	xmm0, DWORD PTR tv278[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 292  : 	VectorAdd( worldCenter, worldExtents, absmax );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _worldCenter$[ebp+ecx]
	addss	xmm0, DWORD PTR _worldExtents$[ebp+eax]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _absmax$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _worldCenter$[ebp+ecx]
	addss	xmm0, DWORD PTR _worldExtents$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _absmax$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _worldCenter$[ebp+edx]
	addss	xmm0, DWORD PTR _worldExtents$[ebp+eax]
	movss	DWORD PTR tv299[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _absmax$[ebp]
	movss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 293  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_TransformAABB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_TransformPositivePlane
_TEXT	SEGMENT
_iscale$ = -8						; size = 4
_scale$ = -4						; size = 4
_in$ = 8						; size = 4
_normal$ = 12						; size = 4
_d$ = 16						; size = 4
_out$ = 20						; size = 4
_dist$ = 24						; size = 4
_Matrix3x4_TransformPositivePlane PROC			; COMDAT

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 219  : 	float	scale = sqrt( in[0][0] * in[0][0] + in[0][1] * in[0][1] + in[0][2] * in[0][2] );

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	imul	eax, eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _scale$[ebp]

; 220  : 	float	iscale = 1.0f / scale;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _iscale$[ebp], xmm0

; 221  : 
; 222  : 	out[0] = (normal[0] * in[0][0] + normal[1] * in[0][1] + normal[2] * in[0][2]) * iscale;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [ecx+eax]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _iscale$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 223  : 	out[1] = (normal[0] * in[1][0] + normal[1] * in[1][1] + normal[2] * in[1][2]) * iscale;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _iscale$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 224  : 	out[2] = (normal[0] * in[2][0] + normal[1] * in[2][1] + normal[2] * in[2][2]) * iscale;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _normal$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _iscale$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 225  : 	*dist = d * scale + ( out[0] * in[0][3] + out[1] * in[1][3] + out[2] * in[2][3] );

	movss	xmm0, DWORD PTR _d$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _out$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _out$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [ecx+edx]
	addss	xmm1, xmm2
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _out$[ebp]
	movss	xmm2, DWORD PTR [esi+eax]
	mulss	xmm2, DWORD PTR [ecx+edx]
	addss	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _dist$[ebp]
	movss	DWORD PTR [eax], xmm0

; 226  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_TransformPositivePlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_CreateFromEntity
_TEXT	SEGMENT
_cy$ = -28						; size = 4
_cp$ = -24						; size = 4
_cr$ = -20						; size = 4
_sy$ = -16						; size = 4
_sp$ = -12						; size = 4
_sr$ = -8						; size = 4
_angle$ = -4						; size = 4
_out$ = 8						; size = 4
_angles$ = 12						; size = 4
_origin$ = 16						; size = 4
_scale$ = 20						; size = 4
_Matrix3x4_CreateFromEntity PROC			; COMDAT

; 137  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 138  : 	float	angle, sr, sp, sy, cr, cp, cy;
; 139  : 
; 140  : 	if( angles[ROLL] )

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN2@Matrix3x4_

; 141  : 	{
; 142  : 		angle = angles[YAW] * (M_PI2 / 360.0f);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 143  : 		SinCos( angle, &sy, &cy );

	lea	eax, DWORD PTR _cy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sy$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 144  : 		angle = angles[PITCH] * (M_PI2 / 360.0f);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 145  : 		SinCos( angle, &sp, &cp );

	lea	eax, DWORD PTR _cp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sp$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 146  : 		angle = angles[ROLL] * (M_PI2 / 360.0f);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 147  : 		SinCos( angle, &sr, &cr );

	lea	eax, DWORD PTR _cr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 148  : 
; 149  : 		out[0][0] = (cp*cy) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 150  : 		out[0][1] = (sr*sp*cy+cr*-sy) * scale;

	movss	xmm0, DWORD PTR _sr$[ebp]
	mulss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	movss	xmm1, DWORD PTR _sy$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _cr$[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 151  : 		out[0][2] = (cr*sp*cy+-sr*-sy) * scale;

	movss	xmm0, DWORD PTR _cr$[ebp]
	mulss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	movss	xmm1, DWORD PTR _sr$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm2, DWORD PTR _sy$[ebp]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 152  : 		out[0][3] = origin[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 153  : 		out[1][0] = (cp*sy) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 154  : 		out[1][1] = (sr*sp*sy+cr*cy) * scale;

	movss	xmm0, DWORD PTR _sr$[ebp]
	mulss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	movss	xmm1, DWORD PTR _cr$[ebp]
	mulss	xmm1, DWORD PTR _cy$[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 155  : 		out[1][2] = (cr*sp*sy+-sr*cy) * scale;

	movss	xmm0, DWORD PTR _cr$[ebp]
	mulss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	movss	xmm1, DWORD PTR _sr$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _cy$[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 156  : 		out[1][3] = origin[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 157  : 		out[2][0] = (-sp) * scale;

	movss	xmm0, DWORD PTR _sp$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 158  : 		out[2][1] = (sr*cp) * scale;

	movss	xmm0, DWORD PTR _sr$[ebp]
	mulss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 159  : 		out[2][2] = (cr*cp) * scale;

	movss	xmm0, DWORD PTR _cr$[ebp]
	mulss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 160  : 		out[2][3] = origin[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 161  : 	}

	jmp	$LN7@Matrix3x4_
$LN2@Matrix3x4_:

; 162  : 	else if( angles[PITCH] )

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN4@Matrix3x4_

; 163  : 	{
; 164  : 		angle = angles[YAW] * (M_PI2 / 360.0f);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 165  : 		SinCos( angle, &sy, &cy );

	lea	eax, DWORD PTR _cy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sy$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 166  : 		angle = angles[PITCH] * (M_PI2 / 360.0f);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 167  : 		SinCos( angle, &sp, &cp );

	lea	eax, DWORD PTR _cp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sp$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 168  : 
; 169  : 		out[0][0] = (cp*cy) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 170  : 		out[0][1] = (-sy) * scale;

	movss	xmm0, DWORD PTR _sy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 171  : 		out[0][2] = (sp*cy) * scale;

	movss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 172  : 		out[0][3] = origin[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 173  : 		out[1][0] = (cp*sy) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 174  : 		out[1][1] = (cy) * scale;

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 175  : 		out[1][2] = (sp*sy) * scale;

	movss	xmm0, DWORD PTR _sp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 176  : 		out[1][3] = origin[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 177  : 		out[2][0] = (-sp) * scale;

	movss	xmm0, DWORD PTR _sp$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 178  : 		out[2][1] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 179  : 		out[2][2] = (cp) * scale;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 180  : 		out[2][3] = origin[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 181  : 	}

	jmp	$LN7@Matrix3x4_
$LN4@Matrix3x4_:

; 182  : 	else if( angles[YAW] )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN6@Matrix3x4_

; 183  : 	{
; 184  : 		angle = angles[YAW] * (M_PI2 / 360.0f);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _angles$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 185  : 		SinCos( angle, &sy, &cy );

	lea	eax, DWORD PTR _cy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sy$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 186  : 
; 187  : 		out[0][0] = (cy) * scale;

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 188  : 		out[0][1] = (-sy) * scale;

	movss	xmm0, DWORD PTR _sy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 189  : 		out[0][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 190  : 		out[0][3] = origin[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 191  : 		out[1][0] = (sy) * scale;

	movss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 192  : 		out[1][1] = (cy) * scale;

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 193  : 		out[1][2] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 194  : 		out[1][3] = origin[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 195  : 		out[2][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 196  : 		out[2][1] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 197  : 		out[2][2] = scale;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 198  : 		out[2][3] = origin[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 199  : 	}

	jmp	$LN7@Matrix3x4_
$LN6@Matrix3x4_:

; 200  : 	else
; 201  : 	{
; 202  : 		out[0][0] = scale;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 203  : 		out[0][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 204  : 		out[0][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 205  : 		out[0][3] = origin[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 206  : 		out[1][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 207  : 		out[1][1] = scale;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 208  : 		out[1][2] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 209  : 		out[1][3] = origin[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 210  : 		out[2][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 211  : 		out[2][1] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 212  : 		out[2][2] = scale;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 213  : 		out[2][3] = origin[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax
$LN7@Matrix3x4_:

; 214  : 	}
; 215  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_CreateFromEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_FromOriginQuat
_TEXT	SEGMENT
_out$ = 8						; size = 4
_quaternion$ = 12					; size = 4
_origin$ = 16						; size = 4
_Matrix3x4_FromOriginQuat PROC				; COMDAT

; 118  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 119  : 	out[0][0] = 1.0f - 2.0f * quaternion[1] * quaternion[1] - 2.0f * quaternion[2] * quaternion[2];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm1

; 120  : 	out[1][0] = 2.0f * quaternion[0] * quaternion[1] + 2.0f * quaternion[3] * quaternion[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 121  : 	out[2][0] = 2.0f * quaternion[0] * quaternion[2] - 2.0f * quaternion[3] * quaternion[1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	subss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 122  : 
; 123  : 	out[0][1] = 2.0f * quaternion[0] * quaternion[1] - 2.0f * quaternion[3] * quaternion[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	subss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 124  : 	out[1][1] = 1.0f - 2.0f * quaternion[0] * quaternion[0] - 2.0f * quaternion[2] * quaternion[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [edx+ecx]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm1

; 125  : 	out[2][1] = 2.0f * quaternion[1] * quaternion[2] + 2.0f * quaternion[3] * quaternion[0];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _quaternion$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 126  : 
; 127  : 	out[0][2] = 2.0f * quaternion[0] * quaternion[2] + 2.0f * quaternion[3] * quaternion[1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR [edx+eax], xmm0

; 128  : 	out[1][2] = 2.0f * quaternion[1] * quaternion[2] - 2.0f * quaternion[3] * quaternion[0];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _quaternion$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	subss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 129  : 	out[2][2] = 1.0f - 2.0f * quaternion[0] * quaternion[0] - 2.0f * quaternion[1] * quaternion[1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [edx+ecx]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _quaternion$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _quaternion$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx]
	subss	xmm1, xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm1

; 130  : 
; 131  : 	out[0][3] = origin[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 132  : 	out[1][3] = origin[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 133  : 	out[2][3] = origin[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _origin$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_FromOriginQuat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_ConcatTransforms
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in1$ = 12						; size = 4
_in2$ = 16						; size = 4
_Matrix3x4_ConcatTransforms PROC			; COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 69   : 	out[0][0] = in1[0][0] * in2[0][0] + in1[0][1] * in2[1][0] + in1[0][2] * in2[2][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 70   : 	out[0][1] = in1[0][0] * in2[0][1] + in1[0][1] * in2[1][1] + in1[0][2] * in2[2][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 71   : 	out[0][2] = in1[0][0] * in2[0][2] + in1[0][1] * in2[1][2] + in1[0][2] * in2[2][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 72   : 	out[0][3] = in1[0][0] * in2[0][3] + in1[0][1] * in2[1][3] + in1[0][2] * in2[2][3] + in1[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	addss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR [ecx+eax], xmm0

; 73   : 	out[1][0] = in1[1][0] * in2[0][0] + in1[1][1] * in2[1][0] + in1[1][2] * in2[2][0];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR [edx+ecx], xmm0

; 74   : 	out[1][1] = in1[1][0] * in2[0][1] + in1[1][1] * in2[1][1] + in1[1][2] * in2[2][1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 75   : 	out[1][2] = in1[1][0] * in2[0][2] + in1[1][1] * in2[1][2] + in1[1][2] * in2[2][2];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR [edx+eax], xmm0

; 76   : 	out[1][3] = in1[1][0] * in2[0][3] + in1[1][1] * in2[1][3] + in1[1][2] * in2[2][3] + in1[1][3];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	addss	xmm0, DWORD PTR [edx+ecx]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	movss	DWORD PTR [edx+ecx], xmm0

; 77   : 	out[2][0] = in1[2][0] * in2[0][0] + in1[2][1] * in2[1][0] + in1[2][2] * in2[2][0];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR [edx+ecx], xmm0

; 78   : 	out[2][1] = in1[2][0] * in2[0][1] + in1[2][1] * in2[1][1] + in1[2][2] * in2[2][1];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 79   : 	out[2][2] = in1[2][0] * in2[0][2] + in1[2][1] * in2[1][2] + in1[2][2] * in2[2][2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR [edx+eax], xmm0

; 80   : 	out[2][3] = in1[2][0] * in2[0][3] + in1[2][1] * in2[1][3] + in1[2][2] * in2[2][3] + in1[2][3];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	addss	xmm0, DWORD PTR [edx+ecx]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	movss	DWORD PTR [edx+ecx], xmm0

; 81   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_ConcatTransforms ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_VectorIRotate
_TEXT	SEGMENT
_in$ = 8						; size = 4
_v$ = 12						; size = 4
_out$ = 16						; size = 4
_Matrix3x4_VectorIRotate PROC				; COMDAT

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 62   : 	out[0] = v[0] * in[0][0] + v[1] * in[1][0] + v[2] * in[2][0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 63   : 	out[1] = v[0] * in[0][1] + v[1] * in[1][1] + v[2] * in[2][1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 64   : 	out[2] = v[0] * in[0][2] + v[1] * in[1][2] + v[2] * in[2][2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 65   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_VectorIRotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_VectorRotate
_TEXT	SEGMENT
_in$ = 8						; size = 4
_v$ = 12						; size = 4
_out$ = 16						; size = 4
_Matrix3x4_VectorRotate PROC				; COMDAT

; 54   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 55   : 	out[0] = v[0] * in[0][0] + v[1] * in[0][1] + v[2] * in[0][2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [ecx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _out$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 56   : 	out[1] = v[0] * in[1][0] + v[1] * in[1][1] + v[2] * in[1][2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 57   : 	out[2] = v[0] * in[2][0] + v[1] * in[2][1] + v[2] * in[2][2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 58   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_VectorRotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_VectorITransform
_TEXT	SEGMENT
_dir$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_v$ = 12						; size = 4
_out$ = 16						; size = 4
_Matrix3x4_VectorITransform PROC			; COMDAT

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 42   : 	vec3_t	dir;
; 43   : 
; 44   : 	dir[0] = v[0] - in[0][3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	subss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0

; 45   : 	dir[1] = v[1] - in[1][3];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+eax]
	subss	xmm0, DWORD PTR [ecx+edx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 46   : 	dir[2] = v[2] - in[2][3];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+eax]
	subss	xmm0, DWORD PTR [ecx+edx]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 47   : 
; 48   : 	out[0] = dir[0] * in[0][0] + dir[1] * in[1][0] + dir[2] * in[2][0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 49   : 	out[1] = dir[0] * in[0][1] + dir[1] * in[1][1] + dir[2] * in[2][1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 50   : 	out[2] = dir[0] * in[0][2] + dir[1] * in[1][2] + dir[2] * in[2][2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 51   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_VectorITransform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\matrixlib.c
;	COMDAT _Matrix3x4_VectorTransform
_TEXT	SEGMENT
_in$ = 8						; size = 4
_v$ = 12						; size = 4
_out$ = 16						; size = 4
_Matrix3x4_VectorTransform PROC				; COMDAT

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 35   : 	out[0] = v[0] * in[0][0] + v[1] * in[0][1] + v[2] * in[0][2] + in[0][3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+eax]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+edx]
	mulss	xmm1, DWORD PTR [ecx+eax]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	addss	xmm0, DWORD PTR [edx+ecx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 36   : 	out[1] = v[0] * in[1][0] + v[1] * in[1][1] + v[2] * in[1][2] + in[1][3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	addss	xmm0, DWORD PTR [ecx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 37   : 	out[2] = v[0] * in[2][0] + v[1] * in[2][1] + v[2] * in[2][2] + in[2][3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [esi+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	addss	xmm0, DWORD PTR [ecx+eax]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 38   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix3x4_VectorTransform ENDP
_TEXT	ENDS
END
