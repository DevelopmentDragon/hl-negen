; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\net_encode.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09CGHLMGFJ@lerp_msec@			; `string'
PUBLIC	??_C@_04CBDJIFMD@msec@				; `string'
PUBLIC	??_C@_0O@DPOCACIC@viewangles?$FL0?$FN@		; `string'
PUBLIC	??_C@_0O@DOCAGILF@viewangles?$FL1?$FN@		; `string'
PUBLIC	??_C@_0O@DMGGNGOM@viewangles?$FL2?$FN@		; `string'
PUBLIC	??_C@_0M@FINFJKPN@forwardmove@			; `string'
PUBLIC	??_C@_08HCKNIGGH@sidemove@			; `string'
PUBLIC	??_C@_06JNPAANGF@upmove@			; `string'
PUBLIC	??_C@_0L@CHILCDDB@lightlevel@			; `string'
PUBLIC	??_C@_07PLMFKEO@buttons@			; `string'
PUBLIC	??_C@_07LKMFNFAN@impulse@			; `string'
PUBLIC	??_C@_0N@HCBEOIIM@weaponselect@			; `string'
PUBLIC	??_C@_0N@IDDJIPBK@impact_index@			; `string'
PUBLIC	??_C@_0BD@CNIBFDJE@impact_position?$FL0?$FN@	; `string'
PUBLIC	??_C@_0BD@CMEDDJKD@impact_position?$FL1?$FN@	; `string'
PUBLIC	??_C@_0BD@COAFIHPK@impact_position?$FL2?$FN@	; `string'
PUBLIC	??_C@_07GFBFDLBM@gravity@			; `string'
PUBLIC	??_C@_09HOPGGGAO@stopspeed@			; `string'
PUBLIC	??_C@_08EAANIMDC@maxspeed@			; `string'
PUBLIC	??_C@_0BC@KAGEBNNG@spectatormaxspeed@		; `string'
PUBLIC	??_C@_0L@JNMCGPPJ@accelerate@			; `string'
PUBLIC	??_C@_0O@HHDLAGFA@airaccelerate@		; `string'
PUBLIC	??_C@_0BA@OLMKAKFP@wateraccelerate@		; `string'
PUBLIC	??_C@_08LKDNMFOC@friction@			; `string'
PUBLIC	??_C@_0N@CFOJOFHL@edgefriction@			; `string'
PUBLIC	??_C@_0O@CFDLGHIB@waterfriction@		; `string'
PUBLIC	??_C@_06DPMIMFNG@bounce@			; `string'
PUBLIC	??_C@_08JDNOLFFK@stepsize@			; `string'
PUBLIC	??_C@_0M@NNKMOAFL@maxvelocity@			; `string'
PUBLIC	??_C@_04ONAAINLL@zmax@				; `string'
PUBLIC	??_C@_0L@HGGPCLLG@waveHeight@			; `string'
PUBLIC	??_C@_09IPEFJHNA@footsteps@			; `string'
PUBLIC	??_C@_07CBECEDCM@skyName@			; `string'
PUBLIC	??_C@_09LMFNGIPD@rollangle@			; `string'
PUBLIC	??_C@_09JBFACAMF@rollspeed@			; `string'
PUBLIC	??_C@_0L@HKKOFOOP@skycolor_r@			; `string'
PUBLIC	??_C@_0L@ENBLLIPL@skycolor_g@			; `string'
PUBLIC	??_C@_0L@DAGMEMLO@skycolor_b@			; `string'
PUBLIC	??_C@_08BJFOJCL@skyvec_x@			; `string'
PUBLIC	??_C@_08BIIONIGK@skyvec_y@			; `string'
PUBLIC	??_C@_08DDKDILKJ@skyvec_z@			; `string'
PUBLIC	??_C@_0N@OKELJJEF@fog_settings@			; `string'
PUBLIC	??_C@_0L@PNIALNHI@wateralpha@			; `string'
PUBLIC	??_C@_08GCNOJHEA@skydir_x@			; `string'
PUBLIC	??_C@_08HLMFKGAB@skydir_y@			; `string'
PUBLIC	??_C@_08FAOIPFMC@skydir_z@			; `string'
PUBLIC	??_C@_08DOLFEKJL@skyangle@			; `string'
PUBLIC	??_C@_05GECEPKB@flags@				; `string'
PUBLIC	??_C@_08MGADGENE@entindex@			; `string'
PUBLIC	??_C@_09FNPCDDEI@origin?$FL0?$FN@		; `string'
PUBLIC	??_C@_09FMDAFJHP@origin?$FL1?$FN@		; `string'
PUBLIC	??_C@_09FOHGOHCG@origin?$FL2?$FN@		; `string'
PUBLIC	??_C@_09PBPAGHBO@angles?$FL0?$FN@		; `string'
PUBLIC	??_C@_09PADCANCJ@angles?$FL1?$FN@		; `string'
PUBLIC	??_C@_09PCHELDHA@angles?$FL2?$FN@		; `string'
PUBLIC	??_C@_0M@DFJGKAFI@velocity?$FL0?$FN@		; `string'
PUBLIC	??_C@_0M@DEFEMKGP@velocity?$FL1?$FN@		; `string'
PUBLIC	??_C@_0M@DGBCHEDG@velocity?$FL2?$FN@		; `string'
PUBLIC	??_C@_07DOHFOJDA@ducking@			; `string'
PUBLIC	??_C@_07CFEDPJHG@fparam1@			; `string'
PUBLIC	??_C@_07OGOKKLF@fparam2@			; `string'
PUBLIC	??_C@_07PMGDOLNK@iparam1@			; `string'
PUBLIC	??_C@_07NHEOLIBJ@iparam2@			; `string'
PUBLIC	??_C@_07KBAJPHIM@bparam1@			; `string'
PUBLIC	??_C@_07IKCEKEEP@bparam2@			; `string'
PUBLIC	??_C@_0L@ODFDNEPI@vparam1?$FL0?$FN@		; `string'
PUBLIC	??_C@_0L@OCJBLOMP@vparam1?$FL1?$FN@		; `string'
PUBLIC	??_C@_0L@OANHAAJG@vparam1?$FL2?$FN@		; `string'
PUBLIC	??_C@_0L@KEPDKOCI@vparam2?$FL0?$FN@		; `string'
PUBLIC	??_C@_0L@KFDBMEBP@vparam2?$FL1?$FN@		; `string'
PUBLIC	??_C@_0L@KHHHHKEG@vparam2?$FL2?$FN@		; `string'
PUBLIC	??_C@_07CPIGPAGP@aparam1@			; `string'
PUBLIC	??_C@_07EKLKDKM@aparam2@			; `string'
PUBLIC	??_C@_07BNLAJCON@aparam3@			; `string'
PUBLIC	??_C@_0BG@IBOJPCLN@m_flNextPrimaryAttack@	; `string'
PUBLIC	??_C@_0BI@BCKKEFEG@m_flNextSecondaryAttack@	; `string'
PUBLIC	??_C@_0BH@CMECKPPL@m_flNextTertiaryAttack@	; `string'
PUBLIC	??_C@_0BJ@NDACAAHG@m_flNextQuaternaryAttack@	; `string'
PUBLIC	??_C@_0BG@PIHHHDJC@m_flNextQuinaryAttack@	; `string'
PUBLIC	??_C@_0P@CPCMIHDG@m_flNextReload@		; `string'
PUBLIC	??_C@_0BD@MPBNDLOM@m_flNextWeaponIdle@		; `string'
PUBLIC	??_C@_0P@GLLGMLFH@m_flNextRecoil@		; `string'
PUBLIC	??_C@_0P@BFGOAFJC@m_flNextCharge@		; `string'
PUBLIC	??_C@_0N@EOKMGHJE@m_flNextPump@			; `string'
PUBLIC	??_C@_0P@CHIMOLJO@m_flNextSwitch@		; `string'
PUBLIC	??_C@_0BF@IHAHJFLF@m_fWeaponStatusFlags@	; `string'
PUBLIC	??_C@_05HIOALKKH@m_iId@				; `string'
PUBLIC	??_C@_07CNMPLBEL@m_iClip@			; `string'
PUBLIC	??_C@_0P@GLEAOLBP@m_fAimedDamage@		; `string'
PUBLIC	??_C@_0BA@PJJHECKH@m_fNextAimBonus@		; `string'
PUBLIC	??_C@_09OCFAMIJK@m_fInZoom@			; `string'
PUBLIC	??_C@_0P@FFOBDHLJ@m_iWeaponState@		; `string'
PUBLIC	??_C@_06EPAJDGH@iuser1@				; `string'
PUBLIC	??_C@_06CPNNMAKE@iuser2@			; `string'
PUBLIC	??_C@_06DGMGPBOF@iuser3@			; `string'
PUBLIC	??_C@_06HJIHGHCC@iuser4@			; `string'
PUBLIC	??_C@_06PCLIODIO@fuser1@			; `string'
PUBLIC	??_C@_06NJJFLAEN@fuser2@			; `string'
PUBLIC	??_C@_06MAIOIBAM@fuser3@			; `string'
PUBLIC	??_C@_06IPMPBHML@fuser4@			; `string'
PUBLIC	??_C@_09DKDOKEPP@viewmodel@			; `string'
PUBLIC	??_C@_0O@HAGLNNHC@punchangle?$FL0?$FN@		; `string'
PUBLIC	??_C@_0O@HBKJLHEF@punchangle?$FL1?$FN@		; `string'
PUBLIC	??_C@_0O@HDOPAJBM@punchangle?$FL2?$FN@		; `string'
PUBLIC	??_C@_0L@NEBDHOBF@waterlevel@			; `string'
PUBLIC	??_C@_09KCJIJCMG@watertype@			; `string'
PUBLIC	??_C@_0M@GBJNDBAF@view_ofs?$FL0?$FN@		; `string'
PUBLIC	??_C@_0M@GAFPFLDC@view_ofs?$FL1?$FN@		; `string'
PUBLIC	??_C@_0M@GCBJOFGL@view_ofs?$FL2?$FN@		; `string'
PUBLIC	??_C@_06KJINILIP@health@			; `string'
PUBLIC	??_C@_0M@DEAAHNID@health_type@			; `string'
PUBLIC	??_C@_0L@KEIBIKGL@health_max@			; `string'
PUBLIC	??_C@_0BA@IDANHMAE@health_over_max@		; `string'
PUBLIC	??_C@_0M@NIEEDJD@health_temp@			; `string'
PUBLIC	??_C@_0BA@CBILHJAM@health_temp_max@		; `string'
PUBLIC	??_C@_05JJEJIJLL@armor@				; `string'
PUBLIC	??_C@_0L@IDEIKDCB@armor_type@			; `string'
PUBLIC	??_C@_09FBADBDBF@armor_max@			; `string'
PUBLIC	??_C@_0P@IONNFGJC@armor_over_max@		; `string'
PUBLIC	??_C@_0L@LKMMJNDB@armor_temp@			; `string'
PUBLIC	??_C@_0P@CMFLFDJK@armor_temp_max@		; `string'
PUBLIC	??_C@_06IDDCOJOK@shield@			; `string'
PUBLIC	??_C@_0M@FFJEMPDD@shield_type@			; `string'
PUBLIC	??_C@_0L@FLMMOJLF@shield_max@			; `string'
PUBLIC	??_C@_0BA@HHDNAGDA@shield_over_max@		; `string'
PUBLIC	??_C@_0M@GMBAPBCD@shield_temp@			; `string'
PUBLIC	??_C@_0BA@NFLLADDI@shield_temp_max@		; `string'
PUBLIC	??_C@_07NGHELAOC@bInDuck@			; `string'
PUBLIC	??_C@_07PKKCMMCH@weapons@			; `string'
PUBLIC	??_C@_0BA@FLKOCMOG@flTimeStepSound@		; `string'
PUBLIC	??_C@_0L@ILFJIEJL@flDuckTime@			; `string'
PUBLIC	??_C@_0L@HDPEBAAN@flSwimTime@			; `string'
PUBLIC	??_C@_0O@FILHMEAP@waterjumptime@		; `string'
PUBLIC	??_C@_03PKBINKFB@fov@				; `string'
PUBLIC	??_C@_0L@DEBJKLIO@weaponanim@			; `string'
PUBLIC	??_C@_0O@LGCJFDLJ@viewmodelbody@		; `string'
PUBLIC	??_C@_0N@BEJBNPFO@armmodelbody@			; `string'
PUBLIC	??_C@_0O@CLELLGF@playmodelbody@			; `string'
PUBLIC	??_C@_0O@GJJAGNBJ@viewmodelskin@		; `string'
PUBLIC	??_C@_0N@MLCIOBPO@armmodelskin@			; `string'
PUBLIC	??_C@_0O@NNANIFMF@playmodelskin@		; `string'
PUBLIC	??_C@_08MKOCHEFC@armmodel@			; `string'
PUBLIC	??_C@_0L@JMFDLMIN@savedvanim@			; `string'
PUBLIC	??_C@_0BA@MFNCIDBJ@savedvframerate@		; `string'
PUBLIC	??_C@_0M@PGLOFBBH@savedvframe@			; `string'
PUBLIC	??_C@_0P@IFMDLDIK@m_flNextAttack@		; `string'
PUBLIC	??_C@_07BDKNDAEL@tfstate@			; `string'
PUBLIC	??_C@_08CMCGHNNA@pushmsec@			; `string'
PUBLIC	??_C@_08DKPNAJBK@deadflag@			; `string'
PUBLIC	??_C@_08PPPJCMOL@physinfo@			; `string'
PUBLIC	??_C@_09ELJOGCCL@vuser1?$FL0?$FN@		; `string'
PUBLIC	??_C@_09EKFMAIBM@vuser1?$FL1?$FN@		; `string'
PUBLIC	??_C@_09EIBKLGEF@vuser1?$FL2?$FN@		; `string'
PUBLIC	??_C@_09MDOBIPL@vuser2?$FL0?$FN@		; `string'
PUBLIC	??_C@_09NPMHCMM@vuser2?$FL1?$FN@		; `string'
PUBLIC	??_C@_09PLKMMJF@vuser2?$FL2?$FN@		; `string'
PUBLIC	??_C@_09DBFODBEL@vuser3?$FL0?$FN@		; `string'
PUBLIC	??_C@_09DAJMFLHM@vuser3?$FL1?$FN@		; `string'
PUBLIC	??_C@_09DCNKOFCF@vuser3?$FL2?$FN@		; `string'
PUBLIC	??_C@_09IDHOONFL@vuser4?$FL0?$FN@		; `string'
PUBLIC	??_C@_09ICLMIHGM@vuser4?$FL1?$FN@		; `string'
PUBLIC	??_C@_09IAPKDJDF@vuser4?$FL2?$FN@		; `string'
PUBLIC	??_C@_0L@LLOLLAHN@entityType@			; `string'
PUBLIC	??_C@_0L@OOABJPOI@modelindex@			; `string'
PUBLIC	??_C@_08IBBDGPOF@sequence@			; `string'
PUBLIC	??_C@_05MIJNFGED@frame@				; `string'
PUBLIC	??_C@_08OMBDDLKJ@colormap@			; `string'
PUBLIC	??_C@_05OPIONHBI@solid@				; `string'
PUBLIC	??_C@_07BLLGFBLI@effects@			; `string'
PUBLIC	??_C@_05MHMEBBGO@scale@				; `string'
PUBLIC	??_C@_06PDGCFCDO@eflags@			; `string'
PUBLIC	??_C@_0L@PCPPJFN@rendermode@			; `string'
PUBLIC	??_C@_09BBEIIFBJ@renderamt@			; `string'
PUBLIC	??_C@_0O@FHEOEKDG@rendercolor?4r@		; `string'
PUBLIC	??_C@_0O@GAPLKMCC@rendercolor?4g@		; `string'
PUBLIC	??_C@_0O@BNIMFIGH@rendercolor?4b@		; `string'
PUBLIC	??_C@_08CMBMAAGP@renderfx@			; `string'
PUBLIC	??_C@_08DMIOBKOG@movetype@			; `string'
PUBLIC	??_C@_08CPDCOAJK@animtime@			; `string'
PUBLIC	??_C@_09PLDKGHKD@framerate@			; `string'
PUBLIC	??_C@_04IEJGKNJ@body@				; `string'
PUBLIC	??_C@_04NHPAFEHJ@skin@				; `string'
PUBLIC	??_C@_0O@COIOFGBP@controller?$FL0?$FN@		; `string'
PUBLIC	??_C@_0O@CPEMDMCI@controller?$FL1?$FN@		; `string'
PUBLIC	??_C@_0O@CNAKICHB@controller?$FL2?$FN@		; `string'
PUBLIC	??_C@_0O@CMMIOIEG@controller?$FL3?$FN@		; `string'
PUBLIC	??_C@_0M@NNPDHGNA@blending?$FL0?$FN@		; `string'
PUBLIC	??_C@_0M@NMDBBMOH@blending?$FL1?$FN@		; `string'
PUBLIC	??_C@_0M@NOHHKCLO@blending?$FL2?$FN@		; `string'
PUBLIC	??_C@_0M@NPLFMIIJ@blending?$FL3?$FN@		; `string'
PUBLIC	??_C@_07HEODCGNF@mins?$FL0?$FN@			; `string'
PUBLIC	??_C@_07HFCBEMOC@mins?$FL1?$FN@			; `string'
PUBLIC	??_C@_07HHGHPCLL@mins?$FL2?$FN@			; `string'
PUBLIC	??_C@_07JCIDIJDE@maxs?$FL0?$FN@			; `string'
PUBLIC	??_C@_07JDEBODAD@maxs?$FL1?$FN@			; `string'
PUBLIC	??_C@_07JBAHFNFK@maxs?$FL2?$FN@			; `string'
PUBLIC	??_C@_06EOJNHFH@aiment@				; `string'
PUBLIC	??_C@_05HEIBENID@owner@				; `string'
PUBLIC	??_C@_04KADBPNCB@team@				; `string'
PUBLIC	??_C@_0M@HIOKECGE@playerclass@			; `string'
PUBLIC	??_C@_09FNMDCDOI@spectator@			; `string'
PUBLIC	??_C@_0M@HFKHPDIJ@weaponmodel@			; `string'
PUBLIC	??_C@_0N@HMCCEMPH@gaitsequence@			; `string'
PUBLIC	??_C@_0BA@GCAOOEFO@basevelocity?$FL0?$FN@	; `string'
PUBLIC	??_C@_0BA@GDMMIOGJ@basevelocity?$FL1?$FN@	; `string'
PUBLIC	??_C@_0BA@GBIKDADA@basevelocity?$FL2?$FN@	; `string'
PUBLIC	??_C@_07IGPCJBPA@usehull@			; `string'
PUBLIC	??_C@_0L@IGBGCGD@oldbuttons@			; `string'
PUBLIC	??_C@_08FDONDBLH@onground@			; `string'
PUBLIC	??_C@_09BGBMINHA@iStepLeft@			; `string'
PUBLIC	??_C@_0P@MIAEEHAH@flFallVelocity@		; `string'
PUBLIC	??_C@_0M@MNKFOJAD@startpos?$FL0?$FN@		; `string'
PUBLIC	??_C@_0M@MMGHIDDE@startpos?$FL1?$FN@		; `string'
PUBLIC	??_C@_0M@MOCBDNGN@startpos?$FL2?$FN@		; `string'
PUBLIC	??_C@_09HHHBBFFL@endpos?$FL0?$FN@		; `string'
PUBLIC	??_C@_09HGLDHPGM@endpos?$FL1?$FN@		; `string'
PUBLIC	??_C@_09HEPFMBDF@endpos?$FL2?$FN@		; `string'
PUBLIC	??_C@_0L@EPAOCKCG@impacttime@			; `string'
PUBLIC	??_C@_09EJLICMCM@starttime@			; `string'
PUBLIC	??_C@_07DLLLNOCJ@event_t@			; `string'
PUBLIC	??_C@_0L@KOFNIOBN@movevars_t@			; `string'
PUBLIC	??_C@_09FBPCDCLL@usercmd_t@			; `string'
PUBLIC	??_C@_0N@NBCMDLKO@clientdata_t@			; `string'
PUBLIC	??_C@_0O@NIIONHNK@weapon_data_t@		; `string'
PUBLIC	??_C@_0P@ONGALGCD@entity_state_t@		; `string'
PUBLIC	??_C@_0BG@OIPCIHDE@entity_state_player_t@	; `string'
PUBLIC	??_C@_0BG@ILEMGINM@custom_entity_state_t@	; `string'
;	COMDAT ??_C@_0BG@ILEMGINM@custom_entity_state_t@
CONST	SEGMENT
??_C@_0BG@ILEMGINM@custom_entity_state_t@ DB 'custom_entity_state_t', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OIPCIHDE@entity_state_player_t@
CONST	SEGMENT
??_C@_0BG@OIPCIHDE@entity_state_player_t@ DB 'entity_state_player_t', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ONGALGCD@entity_state_t@
CONST	SEGMENT
??_C@_0P@ONGALGCD@entity_state_t@ DB 'entity_state_t', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIIONHNK@weapon_data_t@
CONST	SEGMENT
??_C@_0O@NIIONHNK@weapon_data_t@ DB 'weapon_data_t', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NBCMDLKO@clientdata_t@
CONST	SEGMENT
??_C@_0N@NBCMDLKO@clientdata_t@ DB 'clientdata_t', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FBPCDCLL@usercmd_t@
CONST	SEGMENT
??_C@_09FBPCDCLL@usercmd_t@ DB 'usercmd_t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KOFNIOBN@movevars_t@
CONST	SEGMENT
??_C@_0L@KOFNIOBN@movevars_t@ DB 'movevars_t', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLLLNOCJ@event_t@
CONST	SEGMENT
??_C@_07DLLLNOCJ@event_t@ DB 'event_t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EJLICMCM@starttime@
CONST	SEGMENT
??_C@_09EJLICMCM@starttime@ DB 'starttime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EPAOCKCG@impacttime@
CONST	SEGMENT
??_C@_0L@EPAOCKCG@impacttime@ DB 'impacttime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HEPFMBDF@endpos?$FL2?$FN@
CONST	SEGMENT
??_C@_09HEPFMBDF@endpos?$FL2?$FN@ DB 'endpos[2]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HGLDHPGM@endpos?$FL1?$FN@
CONST	SEGMENT
??_C@_09HGLDHPGM@endpos?$FL1?$FN@ DB 'endpos[1]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HHHBBFFL@endpos?$FL0?$FN@
CONST	SEGMENT
??_C@_09HHHBBFFL@endpos?$FL0?$FN@ DB 'endpos[0]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MOCBDNGN@startpos?$FL2?$FN@
CONST	SEGMENT
??_C@_0M@MOCBDNGN@startpos?$FL2?$FN@ DB 'startpos[2]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MMGHIDDE@startpos?$FL1?$FN@
CONST	SEGMENT
??_C@_0M@MMGHIDDE@startpos?$FL1?$FN@ DB 'startpos[1]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MNKFOJAD@startpos?$FL0?$FN@
CONST	SEGMENT
??_C@_0M@MNKFOJAD@startpos?$FL0?$FN@ DB 'startpos[0]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MIAEEHAH@flFallVelocity@
CONST	SEGMENT
??_C@_0P@MIAEEHAH@flFallVelocity@ DB 'flFallVelocity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BGBMINHA@iStepLeft@
CONST	SEGMENT
??_C@_09BGBMINHA@iStepLeft@ DB 'iStepLeft', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FDONDBLH@onground@
CONST	SEGMENT
??_C@_08FDONDBLH@onground@ DB 'onground', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IGBGCGD@oldbuttons@
CONST	SEGMENT
??_C@_0L@IGBGCGD@oldbuttons@ DB 'oldbuttons', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IGPCJBPA@usehull@
CONST	SEGMENT
??_C@_07IGPCJBPA@usehull@ DB 'usehull', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GBIKDADA@basevelocity?$FL2?$FN@
CONST	SEGMENT
??_C@_0BA@GBIKDADA@basevelocity?$FL2?$FN@ DB 'basevelocity[2]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GDMMIOGJ@basevelocity?$FL1?$FN@
CONST	SEGMENT
??_C@_0BA@GDMMIOGJ@basevelocity?$FL1?$FN@ DB 'basevelocity[1]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GCAOOEFO@basevelocity?$FL0?$FN@
CONST	SEGMENT
??_C@_0BA@GCAOOEFO@basevelocity?$FL0?$FN@ DB 'basevelocity[0]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HMCCEMPH@gaitsequence@
CONST	SEGMENT
??_C@_0N@HMCCEMPH@gaitsequence@ DB 'gaitsequence', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HFKHPDIJ@weaponmodel@
CONST	SEGMENT
??_C@_0M@HFKHPDIJ@weaponmodel@ DB 'weaponmodel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FNMDCDOI@spectator@
CONST	SEGMENT
??_C@_09FNMDCDOI@spectator@ DB 'spectator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HIOKECGE@playerclass@
CONST	SEGMENT
??_C@_0M@HIOKECGE@playerclass@ DB 'playerclass', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KADBPNCB@team@
CONST	SEGMENT
??_C@_04KADBPNCB@team@ DB 'team', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HEIBENID@owner@
CONST	SEGMENT
??_C@_05HEIBENID@owner@ DB 'owner', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOJNHFH@aiment@
CONST	SEGMENT
??_C@_06EOJNHFH@aiment@ DB 'aiment', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JBAHFNFK@maxs?$FL2?$FN@
CONST	SEGMENT
??_C@_07JBAHFNFK@maxs?$FL2?$FN@ DB 'maxs[2]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JDEBODAD@maxs?$FL1?$FN@
CONST	SEGMENT
??_C@_07JDEBODAD@maxs?$FL1?$FN@ DB 'maxs[1]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JCIDIJDE@maxs?$FL0?$FN@
CONST	SEGMENT
??_C@_07JCIDIJDE@maxs?$FL0?$FN@ DB 'maxs[0]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HHGHPCLL@mins?$FL2?$FN@
CONST	SEGMENT
??_C@_07HHGHPCLL@mins?$FL2?$FN@ DB 'mins[2]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HFCBEMOC@mins?$FL1?$FN@
CONST	SEGMENT
??_C@_07HFCBEMOC@mins?$FL1?$FN@ DB 'mins[1]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HEODCGNF@mins?$FL0?$FN@
CONST	SEGMENT
??_C@_07HEODCGNF@mins?$FL0?$FN@ DB 'mins[0]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NPLFMIIJ@blending?$FL3?$FN@
CONST	SEGMENT
??_C@_0M@NPLFMIIJ@blending?$FL3?$FN@ DB 'blending[3]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NOHHKCLO@blending?$FL2?$FN@
CONST	SEGMENT
??_C@_0M@NOHHKCLO@blending?$FL2?$FN@ DB 'blending[2]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NMDBBMOH@blending?$FL1?$FN@
CONST	SEGMENT
??_C@_0M@NMDBBMOH@blending?$FL1?$FN@ DB 'blending[1]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NNPDHGNA@blending?$FL0?$FN@
CONST	SEGMENT
??_C@_0M@NNPDHGNA@blending?$FL0?$FN@ DB 'blending[0]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CMMIOIEG@controller?$FL3?$FN@
CONST	SEGMENT
??_C@_0O@CMMIOIEG@controller?$FL3?$FN@ DB 'controller[3]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CNAKICHB@controller?$FL2?$FN@
CONST	SEGMENT
??_C@_0O@CNAKICHB@controller?$FL2?$FN@ DB 'controller[2]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CPEMDMCI@controller?$FL1?$FN@
CONST	SEGMENT
??_C@_0O@CPEMDMCI@controller?$FL1?$FN@ DB 'controller[1]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@COIOFGBP@controller?$FL0?$FN@
CONST	SEGMENT
??_C@_0O@COIOFGBP@controller?$FL0?$FN@ DB 'controller[0]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NHPAFEHJ@skin@
CONST	SEGMENT
??_C@_04NHPAFEHJ@skin@ DB 'skin', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IEJGKNJ@body@
CONST	SEGMENT
??_C@_04IEJGKNJ@body@ DB 'body', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09PLDKGHKD@framerate@
CONST	SEGMENT
??_C@_09PLDKGHKD@framerate@ DB 'framerate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPDCOAJK@animtime@
CONST	SEGMENT
??_C@_08CPDCOAJK@animtime@ DB 'animtime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DMIOBKOG@movetype@
CONST	SEGMENT
??_C@_08DMIOBKOG@movetype@ DB 'movetype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMBMAAGP@renderfx@
CONST	SEGMENT
??_C@_08CMBMAAGP@renderfx@ DB 'renderfx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNIMFIGH@rendercolor?4b@
CONST	SEGMENT
??_C@_0O@BNIMFIGH@rendercolor?4b@ DB 'rendercolor.b', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GAPLKMCC@rendercolor?4g@
CONST	SEGMENT
??_C@_0O@GAPLKMCC@rendercolor?4g@ DB 'rendercolor.g', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHEOEKDG@rendercolor?4r@
CONST	SEGMENT
??_C@_0O@FHEOEKDG@rendercolor?4r@ DB 'rendercolor.r', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BBEIIFBJ@renderamt@
CONST	SEGMENT
??_C@_09BBEIIFBJ@renderamt@ DB 'renderamt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PCPPJFN@rendermode@
CONST	SEGMENT
??_C@_0L@PCPPJFN@rendermode@ DB 'rendermode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDGCFCDO@eflags@
CONST	SEGMENT
??_C@_06PDGCFCDO@eflags@ DB 'eflags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHMEBBGO@scale@
CONST	SEGMENT
??_C@_05MHMEBBGO@scale@ DB 'scale', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07BLLGFBLI@effects@
CONST	SEGMENT
??_C@_07BLLGFBLI@effects@ DB 'effects', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OPIONHBI@solid@
CONST	SEGMENT
??_C@_05OPIONHBI@solid@ DB 'solid', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OMBDDLKJ@colormap@
CONST	SEGMENT
??_C@_08OMBDDLKJ@colormap@ DB 'colormap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIJNFGED@frame@
CONST	SEGMENT
??_C@_05MIJNFGED@frame@ DB 'frame', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBBDGPOF@sequence@
CONST	SEGMENT
??_C@_08IBBDGPOF@sequence@ DB 'sequence', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OOABJPOI@modelindex@
CONST	SEGMENT
??_C@_0L@OOABJPOI@modelindex@ DB 'modelindex', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LLOLLAHN@entityType@
CONST	SEGMENT
??_C@_0L@LLOLLAHN@entityType@ DB 'entityType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IAPKDJDF@vuser4?$FL2?$FN@
CONST	SEGMENT
??_C@_09IAPKDJDF@vuser4?$FL2?$FN@ DB 'vuser4[2]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ICLMIHGM@vuser4?$FL1?$FN@
CONST	SEGMENT
??_C@_09ICLMIHGM@vuser4?$FL1?$FN@ DB 'vuser4[1]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IDHOONFL@vuser4?$FL0?$FN@
CONST	SEGMENT
??_C@_09IDHOONFL@vuser4?$FL0?$FN@ DB 'vuser4[0]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DCNKOFCF@vuser3?$FL2?$FN@
CONST	SEGMENT
??_C@_09DCNKOFCF@vuser3?$FL2?$FN@ DB 'vuser3[2]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DAJMFLHM@vuser3?$FL1?$FN@
CONST	SEGMENT
??_C@_09DAJMFLHM@vuser3?$FL1?$FN@ DB 'vuser3[1]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DBFODBEL@vuser3?$FL0?$FN@
CONST	SEGMENT
??_C@_09DBFODBEL@vuser3?$FL0?$FN@ DB 'vuser3[0]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PLKMMJF@vuser2?$FL2?$FN@
CONST	SEGMENT
??_C@_09PLKMMJF@vuser2?$FL2?$FN@ DB 'vuser2[2]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NPMHCMM@vuser2?$FL1?$FN@
CONST	SEGMENT
??_C@_09NPMHCMM@vuser2?$FL1?$FN@ DB 'vuser2[1]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MDOBIPL@vuser2?$FL0?$FN@
CONST	SEGMENT
??_C@_09MDOBIPL@vuser2?$FL0?$FN@ DB 'vuser2[0]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EIBKLGEF@vuser1?$FL2?$FN@
CONST	SEGMENT
??_C@_09EIBKLGEF@vuser1?$FL2?$FN@ DB 'vuser1[2]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFMAIBM@vuser1?$FL1?$FN@
CONST	SEGMENT
??_C@_09EKFMAIBM@vuser1?$FL1?$FN@ DB 'vuser1[1]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ELJOGCCL@vuser1?$FL0?$FN@
CONST	SEGMENT
??_C@_09ELJOGCCL@vuser1?$FL0?$FN@ DB 'vuser1[0]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPPJCMOL@physinfo@
CONST	SEGMENT
??_C@_08PPPJCMOL@physinfo@ DB 'physinfo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DKPNAJBK@deadflag@
CONST	SEGMENT
??_C@_08DKPNAJBK@deadflag@ DB 'deadflag', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMCGHNNA@pushmsec@
CONST	SEGMENT
??_C@_08CMCGHNNA@pushmsec@ DB 'pushmsec', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BDKNDAEL@tfstate@
CONST	SEGMENT
??_C@_07BDKNDAEL@tfstate@ DB 'tfstate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IFMDLDIK@m_flNextAttack@
CONST	SEGMENT
??_C@_0P@IFMDLDIK@m_flNextAttack@ DB 'm_flNextAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PGLOFBBH@savedvframe@
CONST	SEGMENT
??_C@_0M@PGLOFBBH@savedvframe@ DB 'savedvframe', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MFNCIDBJ@savedvframerate@
CONST	SEGMENT
??_C@_0BA@MFNCIDBJ@savedvframerate@ DB 'savedvframerate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMFDLMIN@savedvanim@
CONST	SEGMENT
??_C@_0L@JMFDLMIN@savedvanim@ DB 'savedvanim', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MKOCHEFC@armmodel@
CONST	SEGMENT
??_C@_08MKOCHEFC@armmodel@ DB 'armmodel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NNANIFMF@playmodelskin@
CONST	SEGMENT
??_C@_0O@NNANIFMF@playmodelskin@ DB 'playmodelskin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MLCIOBPO@armmodelskin@
CONST	SEGMENT
??_C@_0N@MLCIOBPO@armmodelskin@ DB 'armmodelskin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GJJAGNBJ@viewmodelskin@
CONST	SEGMENT
??_C@_0O@GJJAGNBJ@viewmodelskin@ DB 'viewmodelskin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CLELLGF@playmodelbody@
CONST	SEGMENT
??_C@_0O@CLELLGF@playmodelbody@ DB 'playmodelbody', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BEJBNPFO@armmodelbody@
CONST	SEGMENT
??_C@_0N@BEJBNPFO@armmodelbody@ DB 'armmodelbody', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LGCJFDLJ@viewmodelbody@
CONST	SEGMENT
??_C@_0O@LGCJFDLJ@viewmodelbody@ DB 'viewmodelbody', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DEBJKLIO@weaponanim@
CONST	SEGMENT
??_C@_0L@DEBJKLIO@weaponanim@ DB 'weaponanim', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03PKBINKFB@fov@
CONST	SEGMENT
??_C@_03PKBINKFB@fov@ DB 'fov', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FILHMEAP@waterjumptime@
CONST	SEGMENT
??_C@_0O@FILHMEAP@waterjumptime@ DB 'waterjumptime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HDPEBAAN@flSwimTime@
CONST	SEGMENT
??_C@_0L@HDPEBAAN@flSwimTime@ DB 'flSwimTime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ILFJIEJL@flDuckTime@
CONST	SEGMENT
??_C@_0L@ILFJIEJL@flDuckTime@ DB 'flDuckTime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FLKOCMOG@flTimeStepSound@
CONST	SEGMENT
??_C@_0BA@FLKOCMOG@flTimeStepSound@ DB 'flTimeStepSound', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PKKCMMCH@weapons@
CONST	SEGMENT
??_C@_07PKKCMMCH@weapons@ DB 'weapons', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NGHELAOC@bInDuck@
CONST	SEGMENT
??_C@_07NGHELAOC@bInDuck@ DB 'bInDuck', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFLLADDI@shield_temp_max@
CONST	SEGMENT
??_C@_0BA@NFLLADDI@shield_temp_max@ DB 'shield_temp_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GMBAPBCD@shield_temp@
CONST	SEGMENT
??_C@_0M@GMBAPBCD@shield_temp@ DB 'shield_temp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HHDNAGDA@shield_over_max@
CONST	SEGMENT
??_C@_0BA@HHDNAGDA@shield_over_max@ DB 'shield_over_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FLMMOJLF@shield_max@
CONST	SEGMENT
??_C@_0L@FLMMOJLF@shield_max@ DB 'shield_max', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FFJEMPDD@shield_type@
CONST	SEGMENT
??_C@_0M@FFJEMPDD@shield_type@ DB 'shield_type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IDDCOJOK@shield@
CONST	SEGMENT
??_C@_06IDDCOJOK@shield@ DB 'shield', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CMFLFDJK@armor_temp_max@
CONST	SEGMENT
??_C@_0P@CMFLFDJK@armor_temp_max@ DB 'armor_temp_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LKMMJNDB@armor_temp@
CONST	SEGMENT
??_C@_0L@LKMMJNDB@armor_temp@ DB 'armor_temp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IONNFGJC@armor_over_max@
CONST	SEGMENT
??_C@_0P@IONNFGJC@armor_over_max@ DB 'armor_over_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FBADBDBF@armor_max@
CONST	SEGMENT
??_C@_09FBADBDBF@armor_max@ DB 'armor_max', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IDEIKDCB@armor_type@
CONST	SEGMENT
??_C@_0L@IDEIKDCB@armor_type@ DB 'armor_type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JJEJIJLL@armor@
CONST	SEGMENT
??_C@_05JJEJIJLL@armor@ DB 'armor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CBILHJAM@health_temp_max@
CONST	SEGMENT
??_C@_0BA@CBILHJAM@health_temp_max@ DB 'health_temp_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NIEEDJD@health_temp@
CONST	SEGMENT
??_C@_0M@NIEEDJD@health_temp@ DB 'health_temp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IDANHMAE@health_over_max@
CONST	SEGMENT
??_C@_0BA@IDANHMAE@health_over_max@ DB 'health_over_max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KEIBIKGL@health_max@
CONST	SEGMENT
??_C@_0L@KEIBIKGL@health_max@ DB 'health_max', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DEAAHNID@health_type@
CONST	SEGMENT
??_C@_0M@DEAAHNID@health_type@ DB 'health_type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KJINILIP@health@
CONST	SEGMENT
??_C@_06KJINILIP@health@ DB 'health', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GCBJOFGL@view_ofs?$FL2?$FN@
CONST	SEGMENT
??_C@_0M@GCBJOFGL@view_ofs?$FL2?$FN@ DB 'view_ofs[2]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GAFPFLDC@view_ofs?$FL1?$FN@
CONST	SEGMENT
??_C@_0M@GAFPFLDC@view_ofs?$FL1?$FN@ DB 'view_ofs[1]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GBJNDBAF@view_ofs?$FL0?$FN@
CONST	SEGMENT
??_C@_0M@GBJNDBAF@view_ofs?$FL0?$FN@ DB 'view_ofs[0]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KCJIJCMG@watertype@
CONST	SEGMENT
??_C@_09KCJIJCMG@watertype@ DB 'watertype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NEBDHOBF@waterlevel@
CONST	SEGMENT
??_C@_0L@NEBDHOBF@waterlevel@ DB 'waterlevel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HDOPAJBM@punchangle?$FL2?$FN@
CONST	SEGMENT
??_C@_0O@HDOPAJBM@punchangle?$FL2?$FN@ DB 'punchangle[2]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HBKJLHEF@punchangle?$FL1?$FN@
CONST	SEGMENT
??_C@_0O@HBKJLHEF@punchangle?$FL1?$FN@ DB 'punchangle[1]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HAGLNNHC@punchangle?$FL0?$FN@
CONST	SEGMENT
??_C@_0O@HAGLNNHC@punchangle?$FL0?$FN@ DB 'punchangle[0]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DKDOKEPP@viewmodel@
CONST	SEGMENT
??_C@_09DKDOKEPP@viewmodel@ DB 'viewmodel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IPMPBHML@fuser4@
CONST	SEGMENT
??_C@_06IPMPBHML@fuser4@ DB 'fuser4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MAIOIBAM@fuser3@
CONST	SEGMENT
??_C@_06MAIOIBAM@fuser3@ DB 'fuser3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NJJFLAEN@fuser2@
CONST	SEGMENT
??_C@_06NJJFLAEN@fuser2@ DB 'fuser2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCLIODIO@fuser1@
CONST	SEGMENT
??_C@_06PCLIODIO@fuser1@ DB 'fuser1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJIHGHCC@iuser4@
CONST	SEGMENT
??_C@_06HJIHGHCC@iuser4@ DB 'iuser4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DGMGPBOF@iuser3@
CONST	SEGMENT
??_C@_06DGMGPBOF@iuser3@ DB 'iuser3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPNNMAKE@iuser2@
CONST	SEGMENT
??_C@_06CPNNMAKE@iuser2@ DB 'iuser2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPAJDGH@iuser1@
CONST	SEGMENT
??_C@_06EPAJDGH@iuser1@ DB 'iuser1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FFOBDHLJ@m_iWeaponState@
CONST	SEGMENT
??_C@_0P@FFOBDHLJ@m_iWeaponState@ DB 'm_iWeaponState', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OCFAMIJK@m_fInZoom@
CONST	SEGMENT
??_C@_09OCFAMIJK@m_fInZoom@ DB 'm_fInZoom', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PJJHECKH@m_fNextAimBonus@
CONST	SEGMENT
??_C@_0BA@PJJHECKH@m_fNextAimBonus@ DB 'm_fNextAimBonus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GLEAOLBP@m_fAimedDamage@
CONST	SEGMENT
??_C@_0P@GLEAOLBP@m_fAimedDamage@ DB 'm_fAimedDamage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CNMPLBEL@m_iClip@
CONST	SEGMENT
??_C@_07CNMPLBEL@m_iClip@ DB 'm_iClip', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HIOALKKH@m_iId@
CONST	SEGMENT
??_C@_05HIOALKKH@m_iId@ DB 'm_iId', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IHAHJFLF@m_fWeaponStatusFlags@
CONST	SEGMENT
??_C@_0BF@IHAHJFLF@m_fWeaponStatusFlags@ DB 'm_fWeaponStatusFlags', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CHIMOLJO@m_flNextSwitch@
CONST	SEGMENT
??_C@_0P@CHIMOLJO@m_flNextSwitch@ DB 'm_flNextSwitch', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EOKMGHJE@m_flNextPump@
CONST	SEGMENT
??_C@_0N@EOKMGHJE@m_flNextPump@ DB 'm_flNextPump', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BFGOAFJC@m_flNextCharge@
CONST	SEGMENT
??_C@_0P@BFGOAFJC@m_flNextCharge@ DB 'm_flNextCharge', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GLLGMLFH@m_flNextRecoil@
CONST	SEGMENT
??_C@_0P@GLLGMLFH@m_flNextRecoil@ DB 'm_flNextRecoil', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPBNDLOM@m_flNextWeaponIdle@
CONST	SEGMENT
??_C@_0BD@MPBNDLOM@m_flNextWeaponIdle@ DB 'm_flNextWeaponIdle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CPCMIHDG@m_flNextReload@
CONST	SEGMENT
??_C@_0P@CPCMIHDG@m_flNextReload@ DB 'm_flNextReload', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PIHHHDJC@m_flNextQuinaryAttack@
CONST	SEGMENT
??_C@_0BG@PIHHHDJC@m_flNextQuinaryAttack@ DB 'm_flNextQuinaryAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NDACAAHG@m_flNextQuaternaryAttack@
CONST	SEGMENT
??_C@_0BJ@NDACAAHG@m_flNextQuaternaryAttack@ DB 'm_flNextQuaternaryAttack'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CMECKPPL@m_flNextTertiaryAttack@
CONST	SEGMENT
??_C@_0BH@CMECKPPL@m_flNextTertiaryAttack@ DB 'm_flNextTertiaryAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BCKKEFEG@m_flNextSecondaryAttack@
CONST	SEGMENT
??_C@_0BI@BCKKEFEG@m_flNextSecondaryAttack@ DB 'm_flNextSecondaryAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IBOJPCLN@m_flNextPrimaryAttack@
CONST	SEGMENT
??_C@_0BG@IBOJPCLN@m_flNextPrimaryAttack@ DB 'm_flNextPrimaryAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BNLAJCON@aparam3@
CONST	SEGMENT
??_C@_07BNLAJCON@aparam3@ DB 'aparam3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EKLKDKM@aparam2@
CONST	SEGMENT
??_C@_07EKLKDKM@aparam2@ DB 'aparam2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPIGPAGP@aparam1@
CONST	SEGMENT
??_C@_07CPIGPAGP@aparam1@ DB 'aparam1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KHHHHKEG@vparam2?$FL2?$FN@
CONST	SEGMENT
??_C@_0L@KHHHHKEG@vparam2?$FL2?$FN@ DB 'vparam2[2]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KFDBMEBP@vparam2?$FL1?$FN@
CONST	SEGMENT
??_C@_0L@KFDBMEBP@vparam2?$FL1?$FN@ DB 'vparam2[1]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KEPDKOCI@vparam2?$FL0?$FN@
CONST	SEGMENT
??_C@_0L@KEPDKOCI@vparam2?$FL0?$FN@ DB 'vparam2[0]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OANHAAJG@vparam1?$FL2?$FN@
CONST	SEGMENT
??_C@_0L@OANHAAJG@vparam1?$FL2?$FN@ DB 'vparam1[2]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OCJBLOMP@vparam1?$FL1?$FN@
CONST	SEGMENT
??_C@_0L@OCJBLOMP@vparam1?$FL1?$FN@ DB 'vparam1[1]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ODFDNEPI@vparam1?$FL0?$FN@
CONST	SEGMENT
??_C@_0L@ODFDNEPI@vparam1?$FL0?$FN@ DB 'vparam1[0]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07IKCEKEEP@bparam2@
CONST	SEGMENT
??_C@_07IKCEKEEP@bparam2@ DB 'bparam2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KBAJPHIM@bparam1@
CONST	SEGMENT
??_C@_07KBAJPHIM@bparam1@ DB 'bparam1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NHEOLIBJ@iparam2@
CONST	SEGMENT
??_C@_07NHEOLIBJ@iparam2@ DB 'iparam2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PMGDOLNK@iparam1@
CONST	SEGMENT
??_C@_07PMGDOLNK@iparam1@ DB 'iparam1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OGOKKLF@fparam2@
CONST	SEGMENT
??_C@_07OGOKKLF@fparam2@ DB 'fparam2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFEDPJHG@fparam1@
CONST	SEGMENT
??_C@_07CFEDPJHG@fparam1@ DB 'fparam1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DOHFOJDA@ducking@
CONST	SEGMENT
??_C@_07DOHFOJDA@ducking@ DB 'ducking', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DGBCHEDG@velocity?$FL2?$FN@
CONST	SEGMENT
??_C@_0M@DGBCHEDG@velocity?$FL2?$FN@ DB 'velocity[2]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DEFEMKGP@velocity?$FL1?$FN@
CONST	SEGMENT
??_C@_0M@DEFEMKGP@velocity?$FL1?$FN@ DB 'velocity[1]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DFJGKAFI@velocity?$FL0?$FN@
CONST	SEGMENT
??_C@_0M@DFJGKAFI@velocity?$FL0?$FN@ DB 'velocity[0]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PCHELDHA@angles?$FL2?$FN@
CONST	SEGMENT
??_C@_09PCHELDHA@angles?$FL2?$FN@ DB 'angles[2]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PADCANCJ@angles?$FL1?$FN@
CONST	SEGMENT
??_C@_09PADCANCJ@angles?$FL1?$FN@ DB 'angles[1]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBPAGHBO@angles?$FL0?$FN@
CONST	SEGMENT
??_C@_09PBPAGHBO@angles?$FL0?$FN@ DB 'angles[0]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FOHGOHCG@origin?$FL2?$FN@
CONST	SEGMENT
??_C@_09FOHGOHCG@origin?$FL2?$FN@ DB 'origin[2]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FMDAFJHP@origin?$FL1?$FN@
CONST	SEGMENT
??_C@_09FMDAFJHP@origin?$FL1?$FN@ DB 'origin[1]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FNPCDDEI@origin?$FL0?$FN@
CONST	SEGMENT
??_C@_09FNPCDDEI@origin?$FL0?$FN@ DB 'origin[0]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MGADGENE@entindex@
CONST	SEGMENT
??_C@_08MGADGENE@entindex@ DB 'entindex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GECEPKB@flags@
CONST	SEGMENT
??_C@_05GECEPKB@flags@ DB 'flags', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DOLFEKJL@skyangle@
CONST	SEGMENT
??_C@_08DOLFEKJL@skyangle@ DB 'skyangle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FAOIPFMC@skydir_z@
CONST	SEGMENT
??_C@_08FAOIPFMC@skydir_z@ DB 'skydir_z', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HLMFKGAB@skydir_y@
CONST	SEGMENT
??_C@_08HLMFKGAB@skydir_y@ DB 'skydir_y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GCNOJHEA@skydir_x@
CONST	SEGMENT
??_C@_08GCNOJHEA@skydir_x@ DB 'skydir_x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PNIALNHI@wateralpha@
CONST	SEGMENT
??_C@_0L@PNIALNHI@wateralpha@ DB 'wateralpha', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OKELJJEF@fog_settings@
CONST	SEGMENT
??_C@_0N@OKELJJEF@fog_settings@ DB 'fog_settings', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DDKDILKJ@skyvec_z@
CONST	SEGMENT
??_C@_08DDKDILKJ@skyvec_z@ DB 'skyvec_z', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BIIONIGK@skyvec_y@
CONST	SEGMENT
??_C@_08BIIONIGK@skyvec_y@ DB 'skyvec_y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BJFOJCL@skyvec_x@
CONST	SEGMENT
??_C@_08BJFOJCL@skyvec_x@ DB 'skyvec_x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DAGMEMLO@skycolor_b@
CONST	SEGMENT
??_C@_0L@DAGMEMLO@skycolor_b@ DB 'skycolor_b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ENBLLIPL@skycolor_g@
CONST	SEGMENT
??_C@_0L@ENBLLIPL@skycolor_g@ DB 'skycolor_g', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HKKOFOOP@skycolor_r@
CONST	SEGMENT
??_C@_0L@HKKOFOOP@skycolor_r@ DB 'skycolor_r', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JBFACAMF@rollspeed@
CONST	SEGMENT
??_C@_09JBFACAMF@rollspeed@ DB 'rollspeed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LMFNGIPD@rollangle@
CONST	SEGMENT
??_C@_09LMFNGIPD@rollangle@ DB 'rollangle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CBECEDCM@skyName@
CONST	SEGMENT
??_C@_07CBECEDCM@skyName@ DB 'skyName', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IPEFJHNA@footsteps@
CONST	SEGMENT
??_C@_09IPEFJHNA@footsteps@ DB 'footsteps', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HGGPCLLG@waveHeight@
CONST	SEGMENT
??_C@_0L@HGGPCLLG@waveHeight@ DB 'waveHeight', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04ONAAINLL@zmax@
CONST	SEGMENT
??_C@_04ONAAINLL@zmax@ DB 'zmax', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NNKMOAFL@maxvelocity@
CONST	SEGMENT
??_C@_0M@NNKMOAFL@maxvelocity@ DB 'maxvelocity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JDNOLFFK@stepsize@
CONST	SEGMENT
??_C@_08JDNOLFFK@stepsize@ DB 'stepsize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPMIMFNG@bounce@
CONST	SEGMENT
??_C@_06DPMIMFNG@bounce@ DB 'bounce', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CFDLGHIB@waterfriction@
CONST	SEGMENT
??_C@_0O@CFDLGHIB@waterfriction@ DB 'waterfriction', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CFOJOFHL@edgefriction@
CONST	SEGMENT
??_C@_0N@CFOJOFHL@edgefriction@ DB 'edgefriction', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LKDNMFOC@friction@
CONST	SEGMENT
??_C@_08LKDNMFOC@friction@ DB 'friction', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OLMKAKFP@wateraccelerate@
CONST	SEGMENT
??_C@_0BA@OLMKAKFP@wateraccelerate@ DB 'wateraccelerate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HHDLAGFA@airaccelerate@
CONST	SEGMENT
??_C@_0O@HHDLAGFA@airaccelerate@ DB 'airaccelerate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JNMCGPPJ@accelerate@
CONST	SEGMENT
??_C@_0L@JNMCGPPJ@accelerate@ DB 'accelerate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KAGEBNNG@spectatormaxspeed@
CONST	SEGMENT
??_C@_0BC@KAGEBNNG@spectatormaxspeed@ DB 'spectatormaxspeed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EAANIMDC@maxspeed@
CONST	SEGMENT
??_C@_08EAANIMDC@maxspeed@ DB 'maxspeed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HOPGGGAO@stopspeed@
CONST	SEGMENT
??_C@_09HOPGGGAO@stopspeed@ DB 'stopspeed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GFBFDLBM@gravity@
CONST	SEGMENT
??_C@_07GFBFDLBM@gravity@ DB 'gravity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@COAFIHPK@impact_position?$FL2?$FN@
CONST	SEGMENT
??_C@_0BD@COAFIHPK@impact_position?$FL2?$FN@ DB 'impact_position[2]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CMEDDJKD@impact_position?$FL1?$FN@
CONST	SEGMENT
??_C@_0BD@CMEDDJKD@impact_position?$FL1?$FN@ DB 'impact_position[1]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CNIBFDJE@impact_position?$FL0?$FN@
CONST	SEGMENT
??_C@_0BD@CNIBFDJE@impact_position?$FL0?$FN@ DB 'impact_position[0]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IDDJIPBK@impact_index@
CONST	SEGMENT
??_C@_0N@IDDJIPBK@impact_index@ DB 'impact_index', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HCBEOIIM@weaponselect@
CONST	SEGMENT
??_C@_0N@HCBEOIIM@weaponselect@ DB 'weaponselect', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LKMFNFAN@impulse@
CONST	SEGMENT
??_C@_07LKMFNFAN@impulse@ DB 'impulse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PLMFKEO@buttons@
CONST	SEGMENT
??_C@_07PLMFKEO@buttons@ DB 'buttons', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CHILCDDB@lightlevel@
CONST	SEGMENT
??_C@_0L@CHILCDDB@lightlevel@ DB 'lightlevel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNPAANGF@upmove@
CONST	SEGMENT
??_C@_06JNPAANGF@upmove@ DB 'upmove', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HCKNIGGH@sidemove@
CONST	SEGMENT
??_C@_08HCKNIGGH@sidemove@ DB 'sidemove', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FINFJKPN@forwardmove@
CONST	SEGMENT
??_C@_0M@FINFJKPN@forwardmove@ DB 'forwardmove', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DMGGNGOM@viewangles?$FL2?$FN@
CONST	SEGMENT
??_C@_0O@DMGGNGOM@viewangles?$FL2?$FN@ DB 'viewangles[2]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DOCAGILF@viewangles?$FL1?$FN@
CONST	SEGMENT
??_C@_0O@DOCAGILF@viewangles?$FL1?$FN@ DB 'viewangles[1]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DPOCACIC@viewangles?$FL0?$FN@
CONST	SEGMENT
??_C@_0O@DPOCACIC@viewangles?$FL0?$FN@ DB 'viewangles[0]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CBDJIFMD@msec@
CONST	SEGMENT
??_C@_04CBDJIFMD@msec@ DB 'msec', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09CGHLMGFJ@lerp_msec@
CONST	SEGMENT
??_C@_09CGHLMGFJ@lerp_msec@ DB 'lerp_msec', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_cmd_fields DD	FLAT:??_C@_09CGHLMGFJ@lerp_msec@
	DD	00H
	DD	02H
	DD	FLAT:??_C@_04CBDJIFMD@msec@
	DD	02H
	DD	01H
	DD	FLAT:??_C@_0O@DPOCACIC@viewangles?$FL0?$FN@
	DD	04H
	DD	04H
	DD	FLAT:??_C@_0O@DOCAGILF@viewangles?$FL1?$FN@
	DD	08H
	DD	04H
	DD	FLAT:??_C@_0O@DMGGNGOM@viewangles?$FL2?$FN@
	DD	0cH
	DD	04H
	DD	FLAT:??_C@_0M@FINFJKPN@forwardmove@
	DD	010H
	DD	04H
	DD	FLAT:??_C@_08HCKNIGGH@sidemove@
	DD	014H
	DD	04H
	DD	FLAT:??_C@_06JNPAANGF@upmove@
	DD	018H
	DD	04H
	DD	FLAT:??_C@_0L@CHILCDDB@lightlevel@
	DD	01cH
	DD	01H
	DD	FLAT:??_C@_07PLMFKEO@buttons@
	DD	020H
	DD	04H
	DD	FLAT:??_C@_07LKMFNFAN@impulse@
	DD	024H
	DD	01H
	DD	FLAT:??_C@_0N@HCBEOIIM@weaponselect@
	DD	025H
	DD	01H
	DD	FLAT:??_C@_0N@IDDJIPBK@impact_index@
	DD	028H
	DD	04H
	DD	FLAT:??_C@_0BD@CNIBFDJE@impact_position?$FL0?$FN@
	DD	02cH
	DD	04H
	DD	FLAT:??_C@_0BD@CMEDDJKD@impact_position?$FL1?$FN@
	DD	030H
	DD	04H
	DD	FLAT:??_C@_0BD@COAFIHPK@impact_position?$FL2?$FN@
	DD	034H
	DD	04H
	DD	00H
	ORG $+8
	ORG $+4
_pm_fields DD	FLAT:??_C@_07GFBFDLBM@gravity@
	DD	00H
	DD	04H
	DD	FLAT:??_C@_09HOPGGGAO@stopspeed@
	DD	04H
	DD	04H
	DD	FLAT:??_C@_08EAANIMDC@maxspeed@
	DD	08H
	DD	04H
	DD	FLAT:??_C@_0BC@KAGEBNNG@spectatormaxspeed@
	DD	0cH
	DD	04H
	DD	FLAT:??_C@_0L@JNMCGPPJ@accelerate@
	DD	010H
	DD	04H
	DD	FLAT:??_C@_0O@HHDLAGFA@airaccelerate@
	DD	014H
	DD	04H
	DD	FLAT:??_C@_0BA@OLMKAKFP@wateraccelerate@
	DD	018H
	DD	04H
	DD	FLAT:??_C@_08LKDNMFOC@friction@
	DD	01cH
	DD	04H
	DD	FLAT:??_C@_0N@CFOJOFHL@edgefriction@
	DD	020H
	DD	04H
	DD	FLAT:??_C@_0O@CFDLGHIB@waterfriction@
	DD	024H
	DD	04H
	DD	FLAT:??_C@_06DPMIMFNG@bounce@
	DD	02cH
	DD	04H
	DD	FLAT:??_C@_08JDNOLFFK@stepsize@
	DD	030H
	DD	04H
	DD	FLAT:??_C@_0M@NNKMOAFL@maxvelocity@
	DD	034H
	DD	04H
	DD	FLAT:??_C@_04ONAAINLL@zmax@
	DD	038H
	DD	04H
	DD	FLAT:??_C@_0L@HGGPCLLG@waveHeight@
	DD	03cH
	DD	04H
	DD	FLAT:??_C@_09IPEFJHNA@footsteps@
	DD	040H
	DD	04H
	DD	FLAT:??_C@_07CBECEDCM@skyName@
	DD	044H
	DD	020H
	DD	FLAT:??_C@_09LMFNGIPD@rollangle@
	DD	064H
	DD	04H
	DD	FLAT:??_C@_09JBFACAMF@rollspeed@
	DD	068H
	DD	04H
	DD	FLAT:??_C@_0L@HKKOFOOP@skycolor_r@
	DD	06cH
	DD	04H
	DD	FLAT:??_C@_0L@ENBLLIPL@skycolor_g@
	DD	070H
	DD	04H
	DD	FLAT:??_C@_0L@DAGMEMLO@skycolor_b@
	DD	074H
	DD	04H
	DD	FLAT:??_C@_08BJFOJCL@skyvec_x@
	DD	078H
	DD	04H
	DD	FLAT:??_C@_08BIIONIGK@skyvec_y@
	DD	07cH
	DD	04H
	DD	FLAT:??_C@_08DDKDILKJ@skyvec_z@
	DD	080H
	DD	04H
	DD	FLAT:??_C@_0N@OKELJJEF@fog_settings@
	DD	098H
	DD	04H
	DD	FLAT:??_C@_0L@PNIALNHI@wateralpha@
	DD	09cH
	DD	04H
	DD	FLAT:??_C@_08GCNOJHEA@skydir_x@
	DD	084H
	DD	04H
	DD	FLAT:??_C@_08HLMFKGAB@skydir_y@
	DD	088H
	DD	04H
	DD	FLAT:??_C@_08FAOIPFMC@skydir_z@
	DD	08cH
	DD	04H
	DD	FLAT:??_C@_08DOLFEKJL@skyangle@
	DD	090H
	DD	04H
	DD	00H
	ORG $+8
_ev_fields DD	FLAT:??_C@_05GECEPKB@flags@
	DD	00H
	DD	04H
	DD	FLAT:??_C@_08MGADGENE@entindex@
	DD	04H
	DD	04H
	DD	FLAT:??_C@_09FNPCDDEI@origin?$FL0?$FN@
	DD	08H
	DD	04H
	DD	FLAT:??_C@_09FMDAFJHP@origin?$FL1?$FN@
	DD	0cH
	DD	04H
	DD	FLAT:??_C@_09FOHGOHCG@origin?$FL2?$FN@
	DD	010H
	DD	04H
	DD	FLAT:??_C@_09PBPAGHBO@angles?$FL0?$FN@
	DD	014H
	DD	04H
	DD	FLAT:??_C@_09PADCANCJ@angles?$FL1?$FN@
	DD	018H
	DD	04H
	DD	FLAT:??_C@_09PCHELDHA@angles?$FL2?$FN@
	DD	01cH
	DD	04H
	DD	FLAT:??_C@_0M@DFJGKAFI@velocity?$FL0?$FN@
	DD	020H
	DD	04H
	DD	FLAT:??_C@_0M@DEFEMKGP@velocity?$FL1?$FN@
	DD	024H
	DD	04H
	DD	FLAT:??_C@_0M@DGBCHEDG@velocity?$FL2?$FN@
	DD	028H
	DD	04H
	DD	FLAT:??_C@_07DOHFOJDA@ducking@
	DD	02cH
	DD	04H
	DD	FLAT:??_C@_07CFEDPJHG@fparam1@
	DD	030H
	DD	04H
	DD	FLAT:??_C@_07OGOKKLF@fparam2@
	DD	034H
	DD	04H
	DD	FLAT:??_C@_07PMGDOLNK@iparam1@
	DD	038H
	DD	04H
	DD	FLAT:??_C@_07NHEOLIBJ@iparam2@
	DD	03cH
	DD	04H
	DD	FLAT:??_C@_07KBAJPHIM@bparam1@
	DD	040H
	DD	04H
	DD	FLAT:??_C@_07IKCEKEEP@bparam2@
	DD	044H
	DD	04H
	DD	FLAT:??_C@_0L@ODFDNEPI@vparam1?$FL0?$FN@
	DD	048H
	DD	04H
	DD	FLAT:??_C@_0L@OCJBLOMP@vparam1?$FL1?$FN@
	DD	04cH
	DD	04H
	DD	FLAT:??_C@_0L@OANHAAJG@vparam1?$FL2?$FN@
	DD	050H
	DD	04H
	DD	FLAT:??_C@_0L@KEPDKOCI@vparam2?$FL0?$FN@
	DD	054H
	DD	04H
	DD	FLAT:??_C@_0L@KFDBMEBP@vparam2?$FL1?$FN@
	DD	058H
	DD	04H
	DD	FLAT:??_C@_0L@KHHHHKEG@vparam2?$FL2?$FN@
	DD	05cH
	DD	04H
	DD	FLAT:??_C@_07CPIGPAGP@aparam1@
	DD	060H
	DD	04H
	DD	FLAT:??_C@_07EKLKDKM@aparam2@
	DD	064H
	DD	04H
	DD	FLAT:??_C@_07BNLAJCON@aparam3@
	DD	068H
	DD	01H
	DD	00H
	ORG $+8
_wd_fields DD	FLAT:??_C@_0BG@IBOJPCLN@m_flNextPrimaryAttack@
	DD	08H
	DD	04H
	DD	FLAT:??_C@_0BI@BCKKEFEG@m_flNextSecondaryAttack@
	DD	0cH
	DD	04H
	DD	FLAT:??_C@_0BH@CMECKPPL@m_flNextTertiaryAttack@
	DD	010H
	DD	04H
	DD	FLAT:??_C@_0BJ@NDACAAHG@m_flNextQuaternaryAttack@
	DD	014H
	DD	04H
	DD	FLAT:??_C@_0BG@PIHHHDJC@m_flNextQuinaryAttack@
	DD	018H
	DD	04H
	DD	FLAT:??_C@_0P@CPCMIHDG@m_flNextReload@
	DD	01cH
	DD	04H
	DD	FLAT:??_C@_0BD@MPBNDLOM@m_flNextWeaponIdle@
	DD	020H
	DD	04H
	DD	FLAT:??_C@_0P@GLLGMLFH@m_flNextRecoil@
	DD	024H
	DD	04H
	DD	FLAT:??_C@_0P@BFGOAFJC@m_flNextCharge@
	DD	028H
	DD	04H
	DD	FLAT:??_C@_0N@EOKMGHJE@m_flNextPump@
	DD	02cH
	DD	04H
	DD	FLAT:??_C@_0P@CHIMOLJO@m_flNextSwitch@
	DD	030H
	DD	04H
	DD	FLAT:??_C@_0BF@IHAHJFLF@m_fWeaponStatusFlags@
	DD	034H
	DD	04H
	DD	FLAT:??_C@_05HIOALKKH@m_iId@
	DD	00H
	DD	04H
	DD	FLAT:??_C@_07CNMPLBEL@m_iClip@
	DD	04H
	DD	04H
	DD	FLAT:??_C@_0P@GLEAOLBP@m_fAimedDamage@
	DD	038H
	DD	04H
	DD	FLAT:??_C@_0BA@PJJHECKH@m_fNextAimBonus@
	DD	03cH
	DD	04H
	DD	FLAT:??_C@_09OCFAMIJK@m_fInZoom@
	DD	040H
	DD	04H
	DD	FLAT:??_C@_0P@FFOBDHLJ@m_iWeaponState@
	DD	044H
	DD	04H
	DD	FLAT:??_C@_06EPAJDGH@iuser1@
	DD	048H
	DD	04H
	DD	FLAT:??_C@_06CPNNMAKE@iuser2@
	DD	04cH
	DD	04H
	DD	FLAT:??_C@_06DGMGPBOF@iuser3@
	DD	050H
	DD	04H
	DD	FLAT:??_C@_06HJIHGHCC@iuser4@
	DD	054H
	DD	04H
	DD	FLAT:??_C@_06PCLIODIO@fuser1@
	DD	058H
	DD	04H
	DD	FLAT:??_C@_06NJJFLAEN@fuser2@
	DD	05cH
	DD	04H
	DD	FLAT:??_C@_06MAIOIBAM@fuser3@
	DD	060H
	DD	04H
	DD	FLAT:??_C@_06IPMPBHML@fuser4@
	DD	064H
	DD	04H
	DD	00H
	ORG $+8
	ORG $+4
_cd_fields DD	FLAT:??_C@_09FNPCDDEI@origin?$FL0?$FN@
	DD	00H
	DD	04H
	DD	FLAT:??_C@_09FMDAFJHP@origin?$FL1?$FN@
	DD	04H
	DD	04H
	DD	FLAT:??_C@_09FOHGOHCG@origin?$FL2?$FN@
	DD	08H
	DD	04H
	DD	FLAT:??_C@_0M@DFJGKAFI@velocity?$FL0?$FN@
	DD	0cH
	DD	04H
	DD	FLAT:??_C@_0M@DEFEMKGP@velocity?$FL1?$FN@
	DD	010H
	DD	04H
	DD	FLAT:??_C@_0M@DGBCHEDG@velocity?$FL2?$FN@
	DD	014H
	DD	04H
	DD	FLAT:??_C@_09DKDOKEPP@viewmodel@
	DD	018H
	DD	04H
	DD	FLAT:??_C@_0O@HAGLNNHC@punchangle?$FL0?$FN@
	DD	020H
	DD	04H
	DD	FLAT:??_C@_0O@HBKJLHEF@punchangle?$FL1?$FN@
	DD	024H
	DD	04H
	DD	FLAT:??_C@_0O@HDOPAJBM@punchangle?$FL2?$FN@
	DD	028H
	DD	04H
	DD	FLAT:??_C@_05GECEPKB@flags@
	DD	02cH
	DD	04H
	DD	FLAT:??_C@_0L@NEBDHOBF@waterlevel@
	DD	030H
	DD	04H
	DD	FLAT:??_C@_09KCJIJCMG@watertype@
	DD	034H
	DD	04H
	DD	FLAT:??_C@_0M@GBJNDBAF@view_ofs?$FL0?$FN@
	DD	038H
	DD	04H
	DD	FLAT:??_C@_0M@GAFPFLDC@view_ofs?$FL1?$FN@
	DD	03cH
	DD	04H
	DD	FLAT:??_C@_0M@GCBJOFGL@view_ofs?$FL2?$FN@
	DD	040H
	DD	04H
	DD	FLAT:??_C@_06KJINILIP@health@
	DD	044H
	DD	04H
	DD	FLAT:??_C@_0M@DEAAHNID@health_type@
	DD	048H
	DD	04H
	DD	FLAT:??_C@_0L@KEIBIKGL@health_max@
	DD	04cH
	DD	04H
	DD	FLAT:??_C@_0BA@IDANHMAE@health_over_max@
	DD	050H
	DD	04H
	DD	FLAT:??_C@_0M@NIEEDJD@health_temp@
	DD	054H
	DD	04H
	DD	FLAT:??_C@_0BA@CBILHJAM@health_temp_max@
	DD	058H
	DD	04H
	DD	FLAT:??_C@_05JJEJIJLL@armor@
	DD	05cH
	DD	04H
	DD	FLAT:??_C@_0L@IDEIKDCB@armor_type@
	DD	060H
	DD	04H
	DD	FLAT:??_C@_09FBADBDBF@armor_max@
	DD	064H
	DD	04H
	DD	FLAT:??_C@_0P@IONNFGJC@armor_over_max@
	DD	068H
	DD	04H
	DD	FLAT:??_C@_0L@LKMMJNDB@armor_temp@
	DD	06cH
	DD	04H
	DD	FLAT:??_C@_0P@CMFLFDJK@armor_temp_max@
	DD	070H
	DD	04H
	DD	FLAT:??_C@_06IDDCOJOK@shield@
	DD	074H
	DD	04H
	DD	FLAT:??_C@_0M@FFJEMPDD@shield_type@
	DD	078H
	DD	04H
	DD	FLAT:??_C@_0L@FLMMOJLF@shield_max@
	DD	07cH
	DD	04H
	DD	FLAT:??_C@_0BA@HHDNAGDA@shield_over_max@
	DD	080H
	DD	04H
	DD	FLAT:??_C@_0M@GMBAPBCD@shield_temp@
	DD	084H
	DD	04H
	DD	FLAT:??_C@_0BA@NFLLADDI@shield_temp_max@
	DD	088H
	DD	04H
	DD	FLAT:??_C@_07NGHELAOC@bInDuck@
	DD	08cH
	DD	04H
	DD	FLAT:??_C@_07PKKCMMCH@weapons@
	DD	090H
	DD	04H
	DD	FLAT:??_C@_0BA@FLKOCMOG@flTimeStepSound@
	DD	094H
	DD	04H
	DD	FLAT:??_C@_0L@ILFJIEJL@flDuckTime@
	DD	098H
	DD	04H
	DD	FLAT:??_C@_0L@HDPEBAAN@flSwimTime@
	DD	09cH
	DD	04H
	DD	FLAT:??_C@_0O@FILHMEAP@waterjumptime@
	DD	0a0H
	DD	04H
	DD	FLAT:??_C@_08EAANIMDC@maxspeed@
	DD	0a4H
	DD	04H
	DD	FLAT:??_C@_03PKBINKFB@fov@
	DD	0a8H
	DD	04H
	DD	FLAT:??_C@_0L@DEBJKLIO@weaponanim@
	DD	0acH
	DD	04H
	DD	FLAT:??_C@_0O@LGCJFDLJ@viewmodelbody@
	DD	0b0H
	DD	04H
	DD	FLAT:??_C@_0N@BEJBNPFO@armmodelbody@
	DD	0b8H
	DD	04H
	DD	FLAT:??_C@_0O@CLELLGF@playmodelbody@
	DD	0b4H
	DD	04H
	DD	FLAT:??_C@_0O@GJJAGNBJ@viewmodelskin@
	DD	0bcH
	DD	04H
	DD	FLAT:??_C@_0N@MLCIOBPO@armmodelskin@
	DD	0c0H
	DD	04H
	DD	FLAT:??_C@_0O@NNANIFMF@playmodelskin@
	DD	0c4H
	DD	04H
	DD	FLAT:??_C@_08MKOCHEFC@armmodel@
	DD	01cH
	DD	04H
	DD	FLAT:??_C@_0L@JMFDLMIN@savedvanim@
	DD	0c8H
	DD	04H
	DD	FLAT:??_C@_0BA@MFNCIDBJ@savedvframerate@
	DD	0ccH
	DD	04H
	DD	FLAT:??_C@_0M@PGLOFBBH@savedvframe@
	DD	0d0H
	DD	04H
	DD	FLAT:??_C@_05HIOALKKH@m_iId@
	DD	0d4H
	DD	04H
	DD	FLAT:??_C@_0P@IFMDLDIK@m_flNextAttack@
	DD	0d8H
	DD	04H
	DD	FLAT:??_C@_07BDKNDAEL@tfstate@
	DD	0dcH
	DD	04H
	DD	FLAT:??_C@_08CMCGHNNA@pushmsec@
	DD	0e0H
	DD	04H
	DD	FLAT:??_C@_08DKPNAJBK@deadflag@
	DD	0e4H
	DD	04H
	DD	FLAT:??_C@_08PPPJCMOL@physinfo@
	DD	0e8H
	DD	0100H
	DD	FLAT:??_C@_06EPAJDGH@iuser1@
	DD	01e8H
	DD	04H
	DD	FLAT:??_C@_06CPNNMAKE@iuser2@
	DD	01ecH
	DD	04H
	DD	FLAT:??_C@_06DGMGPBOF@iuser3@
	DD	01f0H
	DD	04H
	DD	FLAT:??_C@_06HJIHGHCC@iuser4@
	DD	01f4H
	DD	04H
	DD	FLAT:??_C@_06PCLIODIO@fuser1@
	DD	01f8H
	DD	04H
	DD	FLAT:??_C@_06NJJFLAEN@fuser2@
	DD	01fcH
	DD	04H
	DD	FLAT:??_C@_06MAIOIBAM@fuser3@
	DD	0200H
	DD	04H
	DD	FLAT:??_C@_06IPMPBHML@fuser4@
	DD	0204H
	DD	04H
	DD	FLAT:??_C@_09ELJOGCCL@vuser1?$FL0?$FN@
	DD	0208H
	DD	04H
	DD	FLAT:??_C@_09EKFMAIBM@vuser1?$FL1?$FN@
	DD	020cH
	DD	04H
	DD	FLAT:??_C@_09EIBKLGEF@vuser1?$FL2?$FN@
	DD	0210H
	DD	04H
	DD	FLAT:??_C@_09MDOBIPL@vuser2?$FL0?$FN@
	DD	0214H
	DD	04H
	DD	FLAT:??_C@_09NPMHCMM@vuser2?$FL1?$FN@
	DD	0218H
	DD	04H
	DD	FLAT:??_C@_09PLKMMJF@vuser2?$FL2?$FN@
	DD	021cH
	DD	04H
	DD	FLAT:??_C@_09DBFODBEL@vuser3?$FL0?$FN@
	DD	0220H
	DD	04H
	DD	FLAT:??_C@_09DAJMFLHM@vuser3?$FL1?$FN@
	DD	0224H
	DD	04H
	DD	FLAT:??_C@_09DCNKOFCF@vuser3?$FL2?$FN@
	DD	0228H
	DD	04H
	DD	FLAT:??_C@_09IDHOONFL@vuser4?$FL0?$FN@
	DD	022cH
	DD	04H
	DD	FLAT:??_C@_09ICLMIHGM@vuser4?$FL1?$FN@
	DD	0230H
	DD	04H
	DD	FLAT:??_C@_09IAPKDJDF@vuser4?$FL2?$FN@
	DD	0234H
	DD	04H
	DD	00H
	ORG $+8
_ent_fields DD	FLAT:??_C@_0L@LLOLLAHN@entityType@
	DD	00H
	DD	04H
	DD	FLAT:??_C@_09FNPCDDEI@origin?$FL0?$FN@
	DD	010H
	DD	04H
	DD	FLAT:??_C@_09FMDAFJHP@origin?$FL1?$FN@
	DD	014H
	DD	04H
	DD	FLAT:??_C@_09FOHGOHCG@origin?$FL2?$FN@
	DD	018H
	DD	04H
	DD	FLAT:??_C@_09PBPAGHBO@angles?$FL0?$FN@
	DD	01cH
	DD	04H
	DD	FLAT:??_C@_09PADCANCJ@angles?$FL1?$FN@
	DD	020H
	DD	04H
	DD	FLAT:??_C@_09PCHELDHA@angles?$FL2?$FN@
	DD	024H
	DD	04H
	DD	FLAT:??_C@_0L@OOABJPOI@modelindex@
	DD	028H
	DD	04H
	DD	FLAT:??_C@_08IBBDGPOF@sequence@
	DD	02cH
	DD	04H
	DD	FLAT:??_C@_05MIJNFGED@frame@
	DD	030H
	DD	04H
	DD	FLAT:??_C@_08OMBDDLKJ@colormap@
	DD	034H
	DD	04H
	DD	FLAT:??_C@_05OPIONHBI@solid@
	DD	038H
	DD	02H
	DD	FLAT:??_C@_07BLLGFBLI@effects@
	DD	03cH
	DD	04H
	DD	FLAT:??_C@_05MHMEBBGO@scale@
	DD	040H
	DD	04H
	DD	FLAT:??_C@_06PDGCFCDO@eflags@
	DD	044H
	DD	01H
	DD	FLAT:??_C@_0L@PCPPJFN@rendermode@
	DD	048H
	DD	04H
	DD	FLAT:??_C@_09BBEIIFBJ@renderamt@
	DD	04cH
	DD	04H
	DD	FLAT:??_C@_0O@FHEOEKDG@rendercolor?4r@
	DD	050H
	DD	01H
	DD	FLAT:??_C@_0O@GAPLKMCC@rendercolor?4g@
	DD	051H
	DD	01H
	DD	FLAT:??_C@_0O@BNIMFIGH@rendercolor?4b@
	DD	052H
	DD	01H
	DD	FLAT:??_C@_08CMBMAAGP@renderfx@
	DD	054H
	DD	04H
	DD	FLAT:??_C@_08DMIOBKOG@movetype@
	DD	058H
	DD	04H
	DD	FLAT:??_C@_08CPDCOAJK@animtime@
	DD	05cH
	DD	04H
	DD	FLAT:??_C@_09PLDKGHKD@framerate@
	DD	060H
	DD	04H
	DD	FLAT:??_C@_04IEJGKNJ@body@
	DD	078H
	DD	04H
	DD	FLAT:??_C@_0O@LGCJFDLJ@viewmodelbody@
	DD	07cH
	DD	04H
	DD	FLAT:??_C@_0N@BEJBNPFO@armmodelbody@
	DD	084H
	DD	04H
	DD	FLAT:??_C@_0O@CLELLGF@playmodelbody@
	DD	080H
	DD	04H
	DD	FLAT:??_C@_04NHPAFEHJ@skin@
	DD	088H
	DD	04H
	DD	FLAT:??_C@_0O@GJJAGNBJ@viewmodelskin@
	DD	08cH
	DD	04H
	DD	FLAT:??_C@_0N@MLCIOBPO@armmodelskin@
	DD	090H
	DD	04H
	DD	FLAT:??_C@_0O@NNANIFMF@playmodelskin@
	DD	094H
	DD	04H
	DD	FLAT:??_C@_0L@JMFDLMIN@savedvanim@
	DD	098H
	DD	04H
	DD	FLAT:??_C@_0BA@MFNCIDBJ@savedvframerate@
	DD	09cH
	DD	04H
	DD	FLAT:??_C@_0M@PGLOFBBH@savedvframe@
	DD	0a0H
	DD	01H
	DD	FLAT:??_C@_0O@COIOFGBP@controller?$FL0?$FN@
	DD	064H
	DD	01H
	DD	FLAT:??_C@_0O@CPEMDMCI@controller?$FL1?$FN@
	DD	065H
	DD	01H
	DD	FLAT:??_C@_0O@CNAKICHB@controller?$FL2?$FN@
	DD	066H
	DD	01H
	DD	FLAT:??_C@_0O@CMMIOIEG@controller?$FL3?$FN@
	DD	067H
	DD	01H
	DD	FLAT:??_C@_0M@NNPDHGNA@blending?$FL0?$FN@
	DD	068H
	DD	01H
	DD	FLAT:??_C@_0M@NMDBBMOH@blending?$FL1?$FN@
	DD	069H
	DD	01H
	DD	FLAT:??_C@_0M@NOHHKCLO@blending?$FL2?$FN@
	DD	06aH
	DD	01H
	DD	FLAT:??_C@_0M@NPLFMIIJ@blending?$FL3?$FN@
	DD	06bH
	DD	01H
	DD	FLAT:??_C@_0M@DFJGKAFI@velocity?$FL0?$FN@
	DD	06cH
	DD	04H
	DD	FLAT:??_C@_0M@DEFEMKGP@velocity?$FL1?$FN@
	DD	070H
	DD	04H
	DD	FLAT:??_C@_0M@DGBCHEDG@velocity?$FL2?$FN@
	DD	074H
	DD	04H
	DD	FLAT:??_C@_07HEODCGNF@mins?$FL0?$FN@
	DD	0a4H
	DD	04H
	DD	FLAT:??_C@_07HFCBEMOC@mins?$FL1?$FN@
	DD	0a8H
	DD	04H
	DD	FLAT:??_C@_07HHGHPCLL@mins?$FL2?$FN@
	DD	0acH
	DD	04H
	DD	FLAT:??_C@_07JCIDIJDE@maxs?$FL0?$FN@
	DD	0b0H
	DD	04H
	DD	FLAT:??_C@_07JDEBODAD@maxs?$FL1?$FN@
	DD	0b4H
	DD	04H
	DD	FLAT:??_C@_07JBAHFNFK@maxs?$FL2?$FN@
	DD	0b8H
	DD	04H
	DD	FLAT:??_C@_06EOJNHFH@aiment@
	DD	0bcH
	DD	04H
	DD	FLAT:??_C@_05HEIBENID@owner@
	DD	0c0H
	DD	04H
	DD	FLAT:??_C@_08LKDNMFOC@friction@
	DD	0c4H
	DD	04H
	DD	FLAT:??_C@_07GFBFDLBM@gravity@
	DD	0c8H
	DD	04H
	DD	FLAT:??_C@_04KADBPNCB@team@
	DD	0ccH
	DD	04H
	DD	FLAT:??_C@_0M@HIOKECGE@playerclass@
	DD	0d0H
	DD	04H
	DD	FLAT:??_C@_06KJINILIP@health@
	DD	0d4H
	DD	04H
	DD	FLAT:??_C@_0M@DEAAHNID@health_type@
	DD	0d8H
	DD	04H
	DD	FLAT:??_C@_0L@KEIBIKGL@health_max@
	DD	0dcH
	DD	04H
	DD	FLAT:??_C@_0BA@IDANHMAE@health_over_max@
	DD	0e0H
	DD	04H
	DD	FLAT:??_C@_0M@NIEEDJD@health_temp@
	DD	0e4H
	DD	04H
	DD	FLAT:??_C@_0BA@CBILHJAM@health_temp_max@
	DD	0e8H
	DD	04H
	DD	FLAT:??_C@_05JJEJIJLL@armor@
	DD	0ecH
	DD	04H
	DD	FLAT:??_C@_0L@IDEIKDCB@armor_type@
	DD	0f0H
	DD	04H
	DD	FLAT:??_C@_09FBADBDBF@armor_max@
	DD	0f4H
	DD	04H
	DD	FLAT:??_C@_0P@IONNFGJC@armor_over_max@
	DD	0f8H
	DD	04H
	DD	FLAT:??_C@_0L@LKMMJNDB@armor_temp@
	DD	0fcH
	DD	04H
	DD	FLAT:??_C@_0P@CMFLFDJK@armor_temp_max@
	DD	0100H
	DD	04H
	DD	FLAT:??_C@_06IDDCOJOK@shield@
	DD	0104H
	DD	04H
	DD	FLAT:??_C@_0M@FFJEMPDD@shield_type@
	DD	0108H
	DD	04H
	DD	FLAT:??_C@_0L@FLMMOJLF@shield_max@
	DD	010cH
	DD	04H
	DD	FLAT:??_C@_0BA@HHDNAGDA@shield_over_max@
	DD	0110H
	DD	04H
	DD	FLAT:??_C@_0M@GMBAPBCD@shield_temp@
	DD	0114H
	DD	04H
	DD	FLAT:??_C@_0BA@NFLLADDI@shield_temp_max@
	DD	0118H
	DD	04H
	DD	FLAT:??_C@_09FNMDCDOI@spectator@
	DD	011cH
	DD	04H
	DD	FLAT:??_C@_08MKOCHEFC@armmodel@
	DD	0120H
	DD	04H
	DD	FLAT:??_C@_0M@HFKHPDIJ@weaponmodel@
	DD	0124H
	DD	04H
	DD	FLAT:??_C@_0N@HMCCEMPH@gaitsequence@
	DD	0128H
	DD	04H
	DD	FLAT:??_C@_0BA@GCAOOEFO@basevelocity?$FL0?$FN@
	DD	012cH
	DD	04H
	DD	FLAT:??_C@_0BA@GDMMIOGJ@basevelocity?$FL1?$FN@
	DD	0130H
	DD	04H
	DD	FLAT:??_C@_0BA@GBIKDADA@basevelocity?$FL2?$FN@
	DD	0134H
	DD	04H
	DD	FLAT:??_C@_07IGPCJBPA@usehull@
	DD	0138H
	DD	04H
	DD	FLAT:??_C@_0L@IGBGCGD@oldbuttons@
	DD	013cH
	DD	04H
	DD	FLAT:??_C@_08FDONDBLH@onground@
	DD	0140H
	DD	04H
	DD	FLAT:??_C@_09BGBMINHA@iStepLeft@
	DD	0144H
	DD	04H
	DD	FLAT:??_C@_0P@MIAEEHAH@flFallVelocity@
	DD	0148H
	DD	04H
	DD	FLAT:??_C@_03PKBINKFB@fov@
	DD	014cH
	DD	04H
	DD	FLAT:??_C@_0L@DEBJKLIO@weaponanim@
	DD	0150H
	DD	04H
	DD	FLAT:??_C@_0L@JMFDLMIN@savedvanim@
	DD	098H
	DD	04H
	DD	FLAT:??_C@_0BA@MFNCIDBJ@savedvframerate@
	DD	09cH
	DD	04H
	DD	FLAT:??_C@_0M@PGLOFBBH@savedvframe@
	DD	0a0H
	DD	01H
	DD	FLAT:??_C@_0L@DEBJKLIO@weaponanim@
	DD	0150H
	DD	04H
	DD	FLAT:??_C@_0M@MNKFOJAD@startpos?$FL0?$FN@
	DD	0154H
	DD	04H
	DD	FLAT:??_C@_0M@MMGHIDDE@startpos?$FL1?$FN@
	DD	0158H
	DD	04H
	DD	FLAT:??_C@_0M@MOCBDNGN@startpos?$FL2?$FN@
	DD	015cH
	DD	04H
	DD	FLAT:??_C@_09HHHBBFFL@endpos?$FL0?$FN@
	DD	0160H
	DD	04H
	DD	FLAT:??_C@_09HGLDHPGM@endpos?$FL1?$FN@
	DD	0164H
	DD	04H
	DD	FLAT:??_C@_09HEPFMBDF@endpos?$FL2?$FN@
	DD	0168H
	DD	04H
	DD	FLAT:??_C@_0L@EPAOCKCG@impacttime@
	DD	016cH
	DD	04H
	DD	FLAT:??_C@_09EJLICMCM@starttime@
	DD	0170H
	DD	04H
	DD	FLAT:??_C@_06EPAJDGH@iuser1@
	DD	0174H
	DD	04H
	DD	FLAT:??_C@_06CPNNMAKE@iuser2@
	DD	0178H
	DD	04H
	DD	FLAT:??_C@_06DGMGPBOF@iuser3@
	DD	017cH
	DD	04H
	DD	FLAT:??_C@_06HJIHGHCC@iuser4@
	DD	0180H
	DD	04H
	DD	FLAT:??_C@_06PCLIODIO@fuser1@
	DD	0184H
	DD	04H
	DD	FLAT:??_C@_06NJJFLAEN@fuser2@
	DD	0188H
	DD	04H
	DD	FLAT:??_C@_06MAIOIBAM@fuser3@
	DD	018cH
	DD	04H
	DD	FLAT:??_C@_06IPMPBHML@fuser4@
	DD	0190H
	DD	04H
	DD	FLAT:??_C@_09ELJOGCCL@vuser1?$FL0?$FN@
	DD	0194H
	DD	04H
	DD	FLAT:??_C@_09EKFMAIBM@vuser1?$FL1?$FN@
	DD	0198H
	DD	04H
	DD	FLAT:??_C@_09EIBKLGEF@vuser1?$FL2?$FN@
	DD	019cH
	DD	04H
	DD	FLAT:??_C@_09MDOBIPL@vuser2?$FL0?$FN@
	DD	01a0H
	DD	04H
	DD	FLAT:??_C@_09NPMHCMM@vuser2?$FL1?$FN@
	DD	01a4H
	DD	04H
	DD	FLAT:??_C@_09PLKMMJF@vuser2?$FL2?$FN@
	DD	01a8H
	DD	04H
	DD	FLAT:??_C@_09DBFODBEL@vuser3?$FL0?$FN@
	DD	01acH
	DD	04H
	DD	FLAT:??_C@_09DAJMFLHM@vuser3?$FL1?$FN@
	DD	01b0H
	DD	04H
	DD	FLAT:??_C@_09DCNKOFCF@vuser3?$FL2?$FN@
	DD	01b4H
	DD	04H
	DD	FLAT:??_C@_09IDHOONFL@vuser4?$FL0?$FN@
	DD	01b8H
	DD	04H
	DD	FLAT:??_C@_09ICLMIHGM@vuser4?$FL1?$FN@
	DD	01bcH
	DD	04H
	DD	FLAT:??_C@_09IAPKDJDF@vuser4?$FL2?$FN@
	DD	01c0H
	DD	04H
	DD	00H
	ORG $+8
CONST	ENDS
PUBLIC	_Delta_Init
PUBLIC	_Delta_InitClient
PUBLIC	_Delta_Shutdown
PUBLIC	_Delta_InitFields
PUBLIC	_Delta_NumTables
PUBLIC	_Delta_FindStructByIndex
PUBLIC	_Delta_AddEncoder
PUBLIC	_Delta_FindField
PUBLIC	_Delta_SetField
PUBLIC	_Delta_UnsetField
PUBLIC	_Delta_SetFieldByIndex
PUBLIC	_Delta_UnsetFieldByIndex
PUBLIC	_Delta_WriteTableField
PUBLIC	_Delta_ParseTableField
PUBLIC	_MSG_WriteDeltaUsercmd
PUBLIC	_MSG_ReadDeltaUsercmd
PUBLIC	_MSG_WriteDeltaEvent
PUBLIC	_MSG_ReadDeltaEvent
PUBLIC	_MSG_WriteDeltaMovevars
PUBLIC	_MSG_ReadDeltaMovevars
PUBLIC	_MSG_WriteClientData
PUBLIC	_MSG_ReadClientData
PUBLIC	_MSG_WriteWeaponData
PUBLIC	_MSG_ReadWeaponData
PUBLIC	_MSG_WriteDeltaEntity
PUBLIC	_MSG_ReadDeltaEntity
PUBLIC	_Delta_TestBaseline
PUBLIC	_Delta_FindStruct
PUBLIC	_Delta_FindStructByEncoder
PUBLIC	_Delta_FindStructByDelta
PUBLIC	_Delta_CustomEncode
PUBLIC	_Delta_FindFieldInfo
PUBLIC	_Delta_IndexForFieldInfo
PUBLIC	_Delta_AddField
PUBLIC	_Delta_ParseField
PUBLIC	_Delta_ParseTable
PUBLIC	_Delta_ClampIntegerField
PUBLIC	_Delta_CompareField
PUBLIC	_Delta_WriteField
PUBLIC	_Delta_ReadField
PUBLIC	??_C@_0DA@FCLJGIAG@?$FO3Warning?3?$FO7?5Struct?5?$CFs?5not?5foun@ ; `string'
PUBLIC	?__LINE__Var@?0??Delta_CustomEncode@@9@9	; `Delta_CustomEncode'::`1'::__LINE__Var
PUBLIC	??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@ ; `string'
PUBLIC	??_C@_0L@MMLOMCJB@dt?5?$CB?$DN?5NULL@		; `string'
PUBLIC	?__LINE__Var@?0??Delta_AddField@@9@9		; `Delta_AddField'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@EKGAKGKC@Delta_Add?3?5?$CFs?9?$DO?$CFs?5already?5exist@ ; `string'
PUBLIC	??_C@_0DM@HAJIKCAE@?$FO1Error?3?$FO7?5Delta_Add?3?5couldn?8t?5@ ; `string'
PUBLIC	??_C@_0DP@NKMAGDK@?$FO3Warning?3?$FO7?5Delta_Add?3?5can?8t?5a@ ; `string'
PUBLIC	?__LINE__Var@?0??Delta_WriteTableField@@9@9	; `Delta_WriteTableField'::`1'::__LINE__Var
PUBLIC	??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@	; `string'
PUBLIC	??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@ ; `string'
PUBLIC	??_C@_0CM@LGHINALC@nameIndex?5?$DO?$DN?50?5?$CG?$CG?5nameIndex?5?$DM?5d@ ; `string'
PUBLIC	?__LINE__Var@?0??Delta_ParseTableField@@9@9	; `Delta_ParseTableField'::`1'::__LINE__Var
PUBLIC	??_C@_01ODHLEDKK@?$CI@				; `string'
PUBLIC	??_C@_0DP@OPHCKEFP@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@ ; `string'
PUBLIC	??_C@_0DB@JEPBHFEH@?$FO1Error?3?$FO7?5Delta_ParseField?3?5mi@ ; `string'
PUBLIC	??_C@_0DG@JDOIGKAE@?$FO1Error?3?$FO7?5Delta_ParseField?3?5un@ ; `string'
PUBLIC	??_C@_01IHBHIGKO@?0@				; `string'
PUBLIC	??_C@_0DP@IGHEDKAA@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@ ; `string'
PUBLIC	??_C@_01DNKMNLPK@?$HM@				; `string'
PUBLIC	??_C@_07GPMFONCK@DT_BYTE@			; `string'
PUBLIC	??_C@_08OHIJOAM@DT_SHORT@			; `string'
PUBLIC	??_C@_08LGIDLGMN@DT_FLOAT@			; `string'
PUBLIC	??_C@_0L@DCAINGKI@DT_INTEGER@			; `string'
PUBLIC	??_C@_08EPPDENLJ@DT_ANGLE@			; `string'
PUBLIC	??_C@_0BA@MBNNCGLF@DT_TIMEWINDOW_8@		; `string'
PUBLIC	??_C@_0BC@IPEODBKI@DT_TIMEWINDOW_BIG@		; `string'
PUBLIC	??_C@_09MMENIKJM@DT_STRING@			; `string'
PUBLIC	??_C@_09GBKKAHLA@DT_SIGNED@			; `string'
PUBLIC	??_C@_07NFFJOPFO@DT_FLAG@			; `string'
PUBLIC	??_C@_0DP@MFABHEKN@?$FO1Error?3?$FO7?5Delta_ReadField?3?5?$CFs?5@ ; `string'
PUBLIC	??_C@_0DO@NFBEMIEE@?$FO1Error?3?$FO7?5Delta_ReadField?3?5exp@ ; `string'
PUBLIC	??_C@_0DO@IPJICLBL@?$FO1Error?3?$FO7?5Delta_ReadField?3?5?$CFs?5@ ; `string'
PUBLIC	??_C@_0EB@DEEKKIID@?$FO1Error?3?$FO7?5Delta_ReadField?3?5?$CFs?5@ ; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ@				; `string'
PUBLIC	??_C@_0DP@GOFHMBHI@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@ ; `string'
PUBLIC	?__LINE__Var@?0??Delta_ParseTable@@9@9		; `Delta_ParseTable'::`1'::__LINE__Var
PUBLIC	??_C@_0BP@INKGNIAN@dt?9?$DOnumFields?5?$DM?$DN?5dt?9?$DOmaxFields@ ; `string'
PUBLIC	??_C@_0N@IMFCHAMK@DEFINE_DELTA@			; `string'
PUBLIC	??_C@_0BC@IGAFEIEE@DEFINE_DELTA_POST@		; `string'
PUBLIC	??_C@_04CGFJFPFD@none@				; `string'
PUBLIC	??_C@_07LEELFMGH@gamedll@			; `string'
PUBLIC	??_C@_09IILFNMAG@clientdll@			; `string'
PUBLIC	?__LINE__Var@?0??Delta_InitFields@@9@9		; `Delta_InitFields'::`1'::__LINE__Var
PUBLIC	??_C@_09JMKDNJHO@delta?4lst@			; `string'
PUBLIC	??_C@_0CD@JNEKMLAN@DELTA_Load?3?5couldn?8t?5load?5file?5@ ; `string'
PUBLIC	??_C@_0BH@KBAMMLEG@?$CFs?3?5unknown?5struct?5?$CFs?6@ ; `string'
PUBLIC	??_C@_04MLLLIHIP@null@				; `string'
PUBLIC	??_C@_0BP@MPHIIHIK@?$CFs?3?5missing?5?8?$HL?8?5in?5section?5?$CFs?6@ ; `string'
PUBLIC	?__LINE__Var@?0??Delta_Init@@9@9		; `Delta_Init'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??Delta_Shutdown@@9@9		; `Delta_Shutdown'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??Delta_CompareField@@9@9	; `Delta_CompareField'::`1'::__LINE__Var
PUBLIC	??_C@_0N@DGLAACHB@from?5?$CB?$DN?5NULL@		; `string'
PUBLIC	??_C@_0L@LNAGHMEF@to?5?$CB?$DN?5NULL@		; `string'
PUBLIC	?__LINE__Var@?0??Delta_TestBaseline@@9@9	; `Delta_TestBaseline'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??Delta_ReadField@@9@9		; `Delta_ReadField'::`1'::__LINE__Var
PUBLIC	??_C@_0BL@BGHAEKHG@pField?9?$DOmultiplier?5?$CB?$DN?50?40f@ ; `string'
PUBLIC	?__LINE__Var@?0??MSG_WriteDeltaUsercmd@@9@9	; `MSG_WriteDeltaUsercmd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??MSG_ReadDeltaUsercmd@@9@9	; `MSG_ReadDeltaUsercmd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??MSG_WriteDeltaEvent@@9@9	; `MSG_WriteDeltaEvent'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??MSG_ReadDeltaEvent@@9@9	; `MSG_ReadDeltaEvent'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??MSG_WriteDeltaMovevars@@9@9	; `MSG_WriteDeltaMovevars'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??MSG_ReadDeltaMovevars@@9@9	; `MSG_ReadDeltaMovevars'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??MSG_WriteClientData@@9@9	; `MSG_WriteClientData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??MSG_ReadClientData@@9@9	; `MSG_ReadClientData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??MSG_WriteWeaponData@@9@9	; `MSG_WriteWeaponData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??MSG_ReadWeaponData@@9@9	; `MSG_ReadWeaponData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??MSG_WriteDeltaEntity@@9@9	; `MSG_WriteDeltaEntity'::`1'::__LINE__Var
PUBLIC	??_C@_0CN@OAHMNAOF@MSG_WriteDeltaEntity?3?5Bad?5entit@ ; `string'
PUBLIC	?__LINE__Var@?0??MSG_ReadDeltaEntity@@9@9	; `MSG_ReadDeltaEntity'::`1'::__LINE__Var
PUBLIC	??_C@_0DC@KCPLFFAG@MSG_ReadDeltaEntity?3?5bad?5delta?5@ ; `string'
PUBLIC	??_C@_0CN@KADMBLJH@MSG_ReadDeltaEntity?3?5unknown?5up@ ; `string'
PUBLIC	??_C@_0FC@CCNNIHHH@?$FO1Error?3?$FO7?5Delta_AddEncoder?3?5co@ ; `string'
PUBLIC	??_C@_0EC@MOAIINJL@?$FO1Error?3?$FO7?5Delta_AddEncoder?3?5?$CFs@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@41000000
PUBLIC	__real@41800000
PUBLIC	__real@42000000
PUBLIC	__real@42c80000
PUBLIC	__real@5f000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	_memset:PROC
EXTRN	_abs:PROC
EXTRN	_Sys_Error:PROC
EXTRN	_Q_strlen:PROC
EXTRN	_Q_strncpy:PROC
EXTRN	_Q_atoi:PROC
EXTRN	_Q_atof:PROC
EXTRN	_Q_strnicmp:PROC
EXTRN	_Q_strncmp:PROC
EXTRN	__Mem_Realloc:PROC
EXTRN	__Mem_Alloc:PROC
EXTRN	__Mem_Free:PROC
EXTRN	_DBG_AssertFunction:PROC
EXTRN	_FS_LoadFile:PROC
EXTRN	_COM_NormalizeAngles:PROC
EXTRN	_Host_Error:PROC
EXTRN	_Con_Reportf:PROC
EXTRN	_Con_DPrintf:PROC
EXTRN	_COM_ParseFile:PROC
EXTRN	_MSG_SeekToBit:PROC
EXTRN	_MSG_WriteOneBit:PROC
EXTRN	_MSG_WriteUBitLong:PROC
EXTRN	_MSG_WriteSBitLong:PROC
EXTRN	_MSG_WriteBitLong:PROC
EXTRN	_MSG_WriteBitAngle:PROC
EXTRN	_MSG_WriteBitFlag:PROC
EXTRN	_MSG_WriteCmdExt:PROC
EXTRN	_MSG_WriteFloat:PROC
EXTRN	_MSG_WriteString:PROC
EXTRN	_MSG_ReadOneBit:PROC
EXTRN	_MSG_ReadBitAngle:PROC
EXTRN	_MSG_ReadSBitLong:PROC
EXTRN	_MSG_ReadUBitLong:PROC
EXTRN	_MSG_ReadBitLong:PROC
EXTRN	_MSG_ReadBitFlag:PROC
EXTRN	_MSG_ReadFloat:PROC
EXTRN	_MSG_ReadStringExt:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol3:PROC
EXTRN	__ultod3:PROC
EXTRN	_host:BYTE
EXTRN	_SI:BYTE
EXTRN	_cl:BYTE
EXTRN	_cls:BYTE
EXTRN	_clgame:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_delta_init DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@5f000000
CONST	SEGMENT
__real@5f000000 DD 05f000000r			; 9.22337e+18
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0EC@MOAIINJL@?$FO1Error?3?$FO7?5Delta_AddEncoder?3?5?$CFs@
CONST	SEGMENT
??_C@_0EC@MOAIINJL@?$FO1Error?3?$FO7?5Delta_AddEncoder?3?5?$CFs@ DB '^1Er'
	DB	'ror:^7 Delta_AddEncoder: %s not supposed for custom encoding', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@CCNNIHHH@?$FO1Error?3?$FO7?5Delta_AddEncoder?3?5co@
CONST	SEGMENT
??_C@_0FC@CCNNIHHH@?$FO1Error?3?$FO7?5Delta_AddEncoder?3?5co@ DB '^1Error'
	DB	':^7 Delta_AddEncoder: couldn''t find delta with specified cus'
	DB	'tom encode %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KADMBLJH@MSG_ReadDeltaEntity?3?5unknown?5up@
CONST	SEGMENT
??_C@_0CN@KADMBLJH@MSG_ReadDeltaEntity?3?5unknown?5up@ DB 'MSG_ReadDeltaE'
	DB	'ntity: unknown update type %i', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KCPLFFAG@MSG_ReadDeltaEntity?3?5bad?5delta?5@
CONST	SEGMENT
??_C@_0DC@KCPLFFAG@MSG_ReadDeltaEntity?3?5bad?5delta?5@ DB 'MSG_ReadDelta'
	DB	'Entity: bad delta entity number: %i', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??MSG_ReadDeltaEntity@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??MSG_ReadDeltaEntity@@9@9 DD 077bH	; `MSG_ReadDeltaEntity'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CN@OAHMNAOF@MSG_WriteDeltaEntity?3?5Bad?5entit@
CONST	SEGMENT
??_C@_0CN@OAHMNAOF@MSG_WriteDeltaEntity?3?5Bad?5entit@ DB 'MSG_WriteDelta'
	DB	'Entity: Bad entity number: %i', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??MSG_WriteDeltaEntity@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??MSG_WriteDeltaEntity@@9@9 DD 0715H	; `MSG_WriteDeltaEntity'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??MSG_ReadWeaponData@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??MSG_ReadWeaponData@@9@9 DD 06eeH	; `MSG_ReadWeaponData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??MSG_WriteWeaponData@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??MSG_WriteWeaponData@@9@9 DD 06c7H	; `MSG_WriteWeaponData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??MSG_ReadClientData@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??MSG_ReadClientData@@9@9 DD 06a0H	; `MSG_ReadClientData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??MSG_WriteClientData@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??MSG_WriteClientData@@9@9 DD 0678H	; `MSG_WriteClientData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??MSG_ReadDeltaMovevars@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??MSG_ReadDeltaMovevars@@9@9 DD 0654H	; `MSG_ReadDeltaMovevars'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??MSG_WriteDeltaMovevars@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??MSG_WriteDeltaMovevars@@9@9 DD 0630H	; `MSG_WriteDeltaMovevars'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??MSG_ReadDeltaEvent@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??MSG_ReadDeltaEvent@@9@9 DD 0614H	; `MSG_ReadDeltaEvent'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??MSG_WriteDeltaEvent@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??MSG_WriteDeltaEvent@@9@9 DD 05f9H	; `MSG_WriteDeltaEvent'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??MSG_ReadDeltaUsercmd@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??MSG_ReadDeltaUsercmd@@9@9 DD 05d6H	; `MSG_ReadDeltaUsercmd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??MSG_WriteDeltaUsercmd@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??MSG_WriteDeltaUsercmd@@9@9 DD 05bbH	; `MSG_WriteDeltaUsercmd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@BGHAEKHG@pField?9?$DOmultiplier?5?$CB?$DN?50?40f@
CONST	SEGMENT
??_C@_0BL@BGHAEKHG@pField?9?$DOmultiplier?5?$CB?$DN?50?40f@ DB 'pField->m'
	DB	'ultiplier != 0.0f', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Delta_ReadField@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Delta_ReadField@@9@9 DD 0526H		; `Delta_ReadField'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??Delta_TestBaseline@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Delta_TestBaseline@@9@9 DD 0493H	; `Delta_TestBaseline'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@LNAGHMEF@to?5?$CB?$DN?5NULL@
CONST	SEGMENT
??_C@_0L@LNAGHMEF@to?5?$CB?$DN?5NULL@ DB 'to != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DGLAACHB@from?5?$CB?$DN?5NULL@
CONST	SEGMENT
??_C@_0N@DGLAACHB@from?5?$CB?$DN?5NULL@ DB 'from != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Delta_CompareField@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Delta_CompareField@@9@9 DD 040eH	; `Delta_CompareField'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??Delta_Shutdown@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Delta_Shutdown@@9@9 DD 039eH		; `Delta_Shutdown'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??Delta_Init@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Delta_Init@@9@9 DD 0353H		; `Delta_Init'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BP@MPHIIHIK@?$CFs?3?5missing?5?8?$HL?8?5in?5section?5?$CFs?6@
CONST	SEGMENT
??_C@_0BP@MPHIIHIK@?$CFs?3?5missing?5?8?$HL?8?5in?5section?5?$CFs?6@ DB '%'
	DB	's: missing ''{'' in section %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLLIHIP@null@
CONST	SEGMENT
??_C@_04MLLLIHIP@null@ DB 'null', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KBAMMLEG@?$CFs?3?5unknown?5struct?5?$CFs?6@
CONST	SEGMENT
??_C@_0BH@KBAMMLEG@?$CFs?3?5unknown?5struct?5?$CFs?6@ DB '%s: unknown str'
	DB	'uct %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JNEKMLAN@DELTA_Load?3?5couldn?8t?5load?5file?5@
CONST	SEGMENT
??_C@_0CD@JNEKMLAN@DELTA_Load?3?5couldn?8t?5load?5file?5@ DB 'DELTA_Load:'
	DB	' couldn''t load file %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JMKDNJHO@delta?4lst@
CONST	SEGMENT
??_C@_09JMKDNJHO@delta?4lst@ DB 'delta.lst', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Delta_InitFields@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Delta_InitFields@@9@9 DD 0326H		; `Delta_InitFields'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09IILFNMAG@clientdll@
CONST	SEGMENT
??_C@_09IILFNMAG@clientdll@ DB 'clientdll', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LEELFMGH@gamedll@
CONST	SEGMENT
??_C@_07LEELFMGH@gamedll@ DB 'gamedll', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGFJFPFD@none@
CONST	SEGMENT
??_C@_04CGFJFPFD@none@ DB 'none', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IGAFEIEE@DEFINE_DELTA_POST@
CONST	SEGMENT
??_C@_0BC@IGAFEIEE@DEFINE_DELTA_POST@ DB 'DEFINE_DELTA_POST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IMFCHAMK@DEFINE_DELTA@
CONST	SEGMENT
??_C@_0N@IMFCHAMK@DEFINE_DELTA@ DB 'DEFINE_DELTA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@INKGNIAN@dt?9?$DOnumFields?5?$DM?$DN?5dt?9?$DOmaxFields@
CONST	SEGMENT
??_C@_0BP@INKGNIAN@dt?9?$DOnumFields?5?$DM?$DN?5dt?9?$DOmaxFields@ DB 'dt'
	DB	'->numFields <= dt->maxFields', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Delta_ParseTable@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Delta_ParseTable@@9@9 DD 02f0H		; `Delta_ParseTable'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DP@GOFHMBHI@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@
CONST	SEGMENT
??_C@_0DP@GOFHMBHI@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@ DB '^1Error'
	DB	':^7 Delta_ParseField: expected '')'', found ''%s'' instead', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DEEKKIID@?$FO1Error?3?$FO7?5Delta_ReadField?3?5?$CFs?5@
CONST	SEGMENT
??_C@_0EB@DEEKKIID@?$FO1Error?3?$FO7?5Delta_ReadField?3?5?$CFs?5@ DB '^1E'
	DB	'rror:^7 Delta_ReadField: %s missing ''post_multiply'' argumen'
	DB	't', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@IPJICLBL@?$FO1Error?3?$FO7?5Delta_ReadField?3?5?$CFs?5@
CONST	SEGMENT
??_C@_0DO@IPJICLBL@?$FO1Error?3?$FO7?5Delta_ReadField?3?5?$CFs?5@ DB '^1E'
	DB	'rror:^7 Delta_ReadField: %s missing ''multiplier'' argument', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@NFBEMIEE@?$FO1Error?3?$FO7?5Delta_ReadField?3?5exp@
CONST	SEGMENT
??_C@_0DO@NFBEMIEE@?$FO1Error?3?$FO7?5Delta_ReadField?3?5exp@ DB '^1Error'
	DB	':^7 Delta_ReadField: expected '','', found ''%s'' instead', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@MFABHEKN@?$FO1Error?3?$FO7?5Delta_ReadField?3?5?$CFs?5@
CONST	SEGMENT
??_C@_0DP@MFABHEKN@?$FO1Error?3?$FO7?5Delta_ReadField?3?5?$CFs?5@ DB '^1E'
	DB	'rror:^7 Delta_ReadField: %s field bits argument is missing', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_07NFFJOPFO@DT_FLAG@
CONST	SEGMENT
??_C@_07NFFJOPFO@DT_FLAG@ DB 'DT_FLAG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GBKKAHLA@DT_SIGNED@
CONST	SEGMENT
??_C@_09GBKKAHLA@DT_SIGNED@ DB 'DT_SIGNED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09MMENIKJM@DT_STRING@
CONST	SEGMENT
??_C@_09MMENIKJM@DT_STRING@ DB 'DT_STRING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IPEODBKI@DT_TIMEWINDOW_BIG@
CONST	SEGMENT
??_C@_0BC@IPEODBKI@DT_TIMEWINDOW_BIG@ DB 'DT_TIMEWINDOW_BIG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MBNNCGLF@DT_TIMEWINDOW_8@
CONST	SEGMENT
??_C@_0BA@MBNNCGLF@DT_TIMEWINDOW_8@ DB 'DT_TIMEWINDOW_8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EPPDENLJ@DT_ANGLE@
CONST	SEGMENT
??_C@_08EPPDENLJ@DT_ANGLE@ DB 'DT_ANGLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DCAINGKI@DT_INTEGER@
CONST	SEGMENT
??_C@_0L@DCAINGKI@DT_INTEGER@ DB 'DT_INTEGER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LGIDLGMN@DT_FLOAT@
CONST	SEGMENT
??_C@_08LGIDLGMN@DT_FLOAT@ DB 'DT_FLOAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OHIJOAM@DT_SHORT@
CONST	SEGMENT
??_C@_08OHIJOAM@DT_SHORT@ DB 'DT_SHORT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GPMFONCK@DT_BYTE@
CONST	SEGMENT
??_C@_07GPMFONCK@DT_BYTE@ DB 'DT_BYTE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01DNKMNLPK@?$HM@
CONST	SEGMENT
??_C@_01DNKMNLPK@?$HM@ DB '|', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@IGHEDKAA@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@
CONST	SEGMENT
??_C@_0DP@IGHEDKAA@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@ DB '^1Error'
	DB	':^7 Delta_ParseField: expected '','', found ''%s'' instead', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@JDOIGKAE@?$FO1Error?3?$FO7?5Delta_ParseField?3?5un@
CONST	SEGMENT
??_C@_0DG@JDOIGKAE@?$FO1Error?3?$FO7?5Delta_ParseField?3?5un@ DB '^1Error'
	DB	':^7 Delta_ParseField: unable to find field %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@JEPBHFEH@?$FO1Error?3?$FO7?5Delta_ParseField?3?5mi@
CONST	SEGMENT
??_C@_0DB@JEPBHFEH@?$FO1Error?3?$FO7?5Delta_ParseField?3?5mi@ DB '^1Error'
	DB	':^7 Delta_ParseField: missing field name', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@OPHCKEFP@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@
CONST	SEGMENT
??_C@_0DP@OPHCKEFP@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@ DB '^1Error'
	DB	':^7 Delta_ParseField: expected ''('', found ''%s'' instead', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Delta_ParseTableField@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Delta_ParseTableField@@9@9 DD 0240H	; `Delta_ParseTableField'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CM@LGHINALC@nameIndex?5?$DO?$DN?50?5?$CG?$CG?5nameIndex?5?$DM?5d@
CONST	SEGMENT
??_C@_0CM@LGHINALC@nameIndex?5?$DO?$DN?50?5?$CG?$CG?5nameIndex?5?$DM?5d@ DB 'n'
	DB	'ameIndex >= 0 && nameIndex < dt->maxFields', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
CONST	SEGMENT
??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@ DB 'dt && dt->bIni'
	DB	'tialized', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
CONST	SEGMENT
??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@ DB 'pField != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Delta_WriteTableField@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Delta_WriteTableField@@9@9 DD 021aH	; `Delta_WriteTableField'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DP@NKMAGDK@?$FO3Warning?3?$FO7?5Delta_Add?3?5can?8t?5a@
CONST	SEGMENT
??_C@_0DP@NKMAGDK@?$FO3Warning?3?$FO7?5Delta_Add?3?5can?8t?5a@ DB '^3Warn'
	DB	'ing:^7 Delta_Add: can''t add %s->%s encoder list is full', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@HAJIKCAE@?$FO1Error?3?$FO7?5Delta_Add?3?5couldn?8t?5@
CONST	SEGMENT
??_C@_0DM@HAJIKCAE@?$FO1Error?3?$FO7?5Delta_Add?3?5couldn?8t?5@ DB '^1Err'
	DB	'or:^7 Delta_Add: couldn''t find description for %s->%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EKGAKGKC@Delta_Add?3?5?$CFs?9?$DO?$CFs?5already?5exist@
CONST	SEGMENT
??_C@_0CE@EKGAKGKC@Delta_Add?3?5?$CFs?9?$DO?$CFs?5already?5exist@ DB 'Del'
	DB	'ta_Add: %s->%s already existing', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Delta_AddField@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Delta_AddField@@9@9 DD 01e6H		; `Delta_AddField'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@MMLOMCJB@dt?5?$CB?$DN?5NULL@
CONST	SEGMENT
??_C@_0L@MMLOMCJB@dt?5?$CB?$DN?5NULL@ DB 'dt != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
CONST	SEGMENT
??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@ DB 'D:\DevDrago'
	DB	'n\XashFE\dev\src\engine\common\net_encode.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Delta_CustomEncode@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Delta_CustomEncode@@9@9 DD 01baH	; `Delta_CustomEncode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DA@FCLJGIAG@?$FO3Warning?3?$FO7?5Struct?5?$CFs?5not?5foun@
CONST	SEGMENT
??_C@_0DA@FCLJGIAG@?$FO3Warning?3?$FO7?5Struct?5?$CFs?5not?5foun@ DB '^3W'
	DB	'arning:^7 Struct %s not found in delta_info', 0aH, 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_dt_info DD	FLAT:??_C@_07DLLLNOCJ@event_t@
	DD	FLAT:_ev_fields
	DD	01bH
	ORG $+52
	DD	FLAT:??_C@_0L@KOFNIOBN@movevars_t@
	DD	FLAT:_pm_fields
	DD	01fH
	ORG $+52
	DD	FLAT:??_C@_09FBPCDCLL@usercmd_t@
	DD	FLAT:_cmd_fields
	DD	010H
	ORG $+52
	DD	FLAT:??_C@_0N@NBCMDLKO@clientdata_t@
	DD	FLAT:_cd_fields
	DD	04fH
	ORG $+52
	DD	FLAT:??_C@_0O@NIIONHNK@weapon_data_t@
	DD	FLAT:_wd_fields
	DD	01aH
	ORG $+52
	DD	FLAT:??_C@_0P@ONGALGCD@entity_state_t@
	DD	FLAT:_ent_fields
	DD	07aH
	ORG $+52
	DD	FLAT:??_C@_0BG@OIPCIHDE@entity_state_player_t@
	DD	FLAT:_ent_fields
	DD	07aH
	ORG $+52
	DD	FLAT:??_C@_0BG@ILEMGINM@custom_entity_state_t@
	DD	FLAT:_ent_fields
	DD	07aH
	ORG $+52
	DD	00H
	ORG $+60
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	027dH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	063dH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	018cH
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_ReadField
_TEXT	SEGMENT
tv183 = -124						; size = 8
tv495 = -116						; size = 8
tv381 = -116						; size = 8
tv352 = -116						; size = 8
tv323 = -116						; size = 8
tv292 = -116						; size = 4
tv291 = -112						; size = 8
tv491 = -108						; size = 4
tv377 = -108						; size = 4
tv348 = -108						; size = 4
tv319 = -108						; size = 4
tv77 = -108						; size = 4
tv67 = -108						; size = 4
_fValue$ = -40						; size = 8
_pOut$ = -32						; size = 4
_pStr$ = -28						; size = 4
_iValue$ = -24						; size = 4
_bChanged$ = -20					; size = 4
_flTime$ = -16						; size = 4
_flAngle$ = -12						; size = 4
_flValue$ = -8						; size = 4
_bSigned$ = -4						; size = 4
_msg$ = 8						; size = 4
_pField$ = 12						; size = 4
_from$ = 16						; size = 4
_to$ = 20						; size = 4
_timebase$ = 24						; size = 4
_Delta_ReadField PROC					; COMDAT

; 1318 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	ebx
	push	esi
	push	edi

; 1319 : 	qboolean		bSigned = ( pField->flags & DT_SIGNED ) ? true : false;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 256				; 00000100H
	je	SHORT $LN42@Delta_Read
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN43@Delta_Read
$LN42@Delta_Read:
	mov	DWORD PTR tv67[ebp], 0
$LN43@Delta_Read:
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _bSigned$[ebp], edx

; 1320 : 	float		flValue, flAngle, flTime;
; 1321 : 	qboolean		bChanged;
; 1322 : 	uint		iValue;	
; 1323 : 	const char	*pStr;
; 1324 : 	char		*pOut;
; 1325 : 	flag		fValue;
; 1326 : 	
; 1327 : 	bChanged = MSG_ReadOneBit( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadOneBit
	add	esp, 4
	mov	DWORD PTR _bChanged$[ebp], eax

; 1328 : 
; 1329 : 	Assert( pField->multiplier != 0.0f );

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN44@Delta_Read
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN45@Delta_Read
$LN44@Delta_Read:
	mov	DWORD PTR tv77[ebp], 0
$LN45@Delta_Read:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??Delta_ReadField@@9@9
	add	ecx, 11					; 0000000bH
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BL@BGHAEKHG@pField?9?$DOmultiplier?5?$CB?$DN?50?40f@
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1330 : 
; 1331 : 	if( pField->flags & DT_BYTE )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 1
	je	$LN2@Delta_Read

; 1332 : 	{
; 1333 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN4@Delta_Read

; 1334 : 		{
; 1335 : 			iValue = MSG_ReadBitLong( msg, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadBitLong
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1336 : 			if( pField->multiplier != 1.0f ) iValue /= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN6@Delta_Read
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv319[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv319[ebp]
	mov	ecx, DWORD PTR tv319[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv323[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv323[ebp]
	mov	edx, DWORD PTR _pField$[ebp]
	divss	xmm0, DWORD PTR [edx+16]
	call	__ftol3
	mov	DWORD PTR _iValue$[ebp], eax
$LN6@Delta_Read:

; 1337 : 		}

	jmp	SHORT $LN5@Delta_Read
$LN4@Delta_Read:

; 1338 : 		else
; 1339 : 		{
; 1340 : 			iValue = *(byte *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _iValue$[ebp], eax
$LN5@Delta_Read:

; 1341 : 		}
; 1342 : 		*(byte *)((byte *)to + pField->offset ) = iValue;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	mov	al, BYTE PTR _iValue$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 1343 : 	}

	jmp	$LN38@Delta_Read
$LN2@Delta_Read:

; 1344 : 	else if( pField->flags & DT_SHORT )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 2
	je	$LN7@Delta_Read

; 1345 : 	{
; 1346 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN9@Delta_Read

; 1347 : 		{
; 1348 : 			iValue = MSG_ReadBitLong( msg, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadBitLong
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1349 : 			if( pField->multiplier != 1.0f ) iValue /= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN11@Delta_Read
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv348[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv348[ebp]
	mov	ecx, DWORD PTR tv348[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv352[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv352[ebp]
	mov	edx, DWORD PTR _pField$[ebp]
	divss	xmm0, DWORD PTR [edx+16]
	call	__ftol3
	mov	DWORD PTR _iValue$[ebp], eax
$LN11@Delta_Read:

; 1350 : 		}

	jmp	SHORT $LN10@Delta_Read
$LN9@Delta_Read:

; 1351 : 		else
; 1352 : 		{
; 1353 : 			iValue = *(word *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	mov	DWORD PTR _iValue$[ebp], eax
$LN10@Delta_Read:

; 1354 : 		}
; 1355 : 		*(word *)((byte *)to + pField->offset ) = iValue;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	mov	ax, WORD PTR _iValue$[ebp]
	mov	WORD PTR [edx+ecx], ax

; 1356 : 	}

	jmp	$LN38@Delta_Read
$LN7@Delta_Read:

; 1357 : 	else if( pField->flags & DT_INTEGER )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 8
	je	$LN12@Delta_Read

; 1358 : 	{
; 1359 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN14@Delta_Read

; 1360 : 		{
; 1361 : 			iValue = MSG_ReadBitLong( msg, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadBitLong
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1362 : 			if( pField->multiplier != 1.0f ) iValue /= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN16@Delta_Read
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv377[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv377[ebp]
	mov	ecx, DWORD PTR tv377[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv381[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv381[ebp]
	mov	edx, DWORD PTR _pField$[ebp]
	divss	xmm0, DWORD PTR [edx+16]
	call	__ftol3
	mov	DWORD PTR _iValue$[ebp], eax
$LN16@Delta_Read:

; 1363 : 		}

	jmp	SHORT $LN15@Delta_Read
$LN14@Delta_Read:

; 1364 : 		else
; 1365 : 		{
; 1366 : 			iValue = *(uint *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _iValue$[ebp], eax
$LN15@Delta_Read:

; 1367 : 		}
; 1368 : 		*(uint *)((byte *)to + pField->offset ) = iValue;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 1369 : 	}

	jmp	$LN38@Delta_Read
$LN12@Delta_Read:

; 1370 : 	else if (pField->flags & DT_FLAG)

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 512				; 00000200H
	je	$LN17@Delta_Read

; 1371 : 	{
; 1372 : 		if (bChanged)

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	$LN19@Delta_Read

; 1373 : 		{
; 1374 : 			fValue = MSG_ReadBitFlag(msg, pField->bits);

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadBitFlag
	add	esp, 8
	mov	DWORD PTR _fValue$[ebp], eax
	mov	DWORD PTR _fValue$[ebp+4], edx

; 1375 : 			if (pField->multiplier != 1.0f) fValue /= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN21@Delta_Read
	mov	edx, DWORD PTR _fValue$[ebp+4]
	mov	ecx, DWORD PTR _fValue$[ebp]
	call	__ultod3
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _pField$[ebp]
	divss	xmm0, DWORD PTR [eax+16]
	xorps	xmm1, xmm1
	movlpd	QWORD PTR tv291[ebp], xmm1
	movss	DWORD PTR tv292[ebp], xmm0
	movss	xmm0, DWORD PTR tv292[ebp]
	comiss	xmm0, DWORD PTR __real@5f000000
	jb	SHORT $LN46@Delta_Read
	movss	xmm0, DWORD PTR tv292[ebp]
	subss	xmm0, DWORD PTR __real@5f000000
	movss	DWORD PTR tv292[ebp], xmm0
	movss	xmm0, DWORD PTR __real@5f000000
	comiss	xmm0, DWORD PTR tv292[ebp]
	jbe	SHORT $LN46@Delta_Read
	add	DWORD PTR tv291[ebp], 0
	adc	DWORD PTR tv291[ebp+4], -2147483648	; 80000000H
$LN46@Delta_Read:
	movss	xmm0, DWORD PTR tv292[ebp]
	call	__ftol3
	add	eax, DWORD PTR tv291[ebp]
	adc	edx, DWORD PTR tv291[ebp+4]
	mov	DWORD PTR tv183[ebp], eax
	mov	DWORD PTR tv183[ebp+4], edx
	mov	ecx, DWORD PTR tv183[ebp]
	mov	edx, DWORD PTR tv183[ebp+4]
	mov	DWORD PTR _fValue$[ebp], ecx
	mov	DWORD PTR _fValue$[ebp+4], edx
$LN21@Delta_Read:

; 1376 : 		}

	jmp	SHORT $LN20@Delta_Read
$LN19@Delta_Read:

; 1377 : 		else
; 1378 : 		{
; 1379 : 			fValue = *(flag*)((byte*)from + pField->offset);

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _fValue$[ebp], eax
	mov	DWORD PTR _fValue$[ebp+4], ecx
$LN20@Delta_Read:

; 1380 : 		}
; 1381 : 		*(flag*)((byte*)to + pField->offset) = fValue;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR _fValue$[ebp]
	mov	esi, DWORD PTR _fValue$[ebp+4]
	mov	DWORD PTR [edx+ecx], eax
	mov	DWORD PTR [edx+ecx+4], esi

; 1382 : 	}

	jmp	$LN38@Delta_Read
$LN17@Delta_Read:

; 1383 : 	else if( pField->flags & DT_FLOAT )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 4
	je	SHORT $LN22@Delta_Read

; 1384 : 	{
; 1385 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN24@Delta_Read

; 1386 : 		{
; 1387 : 			iValue = MSG_ReadBitLong( msg, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadBitLong
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1388 : 			flValue = (int)iValue * ( 1.0f / pField->multiplier );

	cvtsi2ss xmm0, DWORD PTR _iValue$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, DWORD PTR [eax+16]
	mulss	xmm0, xmm1
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1389 : 			flValue = flValue * pField->post_multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1390 : 		}

	jmp	SHORT $LN25@Delta_Read
$LN24@Delta_Read:

; 1391 : 		else
; 1392 : 		{
; 1393 : 			flValue = *(float *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _flValue$[ebp], xmm0
$LN25@Delta_Read:

; 1394 : 		}
; 1395 : 		*(float *)((byte *)to + pField->offset ) = flValue;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR _flValue$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 1396 : 	}

	jmp	$LN38@Delta_Read
$LN22@Delta_Read:

; 1397 : 	else if( pField->flags & DT_ANGLE )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	je	SHORT $LN26@Delta_Read

; 1398 : 	{
; 1399 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN28@Delta_Read

; 1400 : 		{
; 1401 : 			flAngle = MSG_ReadBitAngle( msg, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ReadBitAngle
	add	esp, 8
	fstp	DWORD PTR _flAngle$[ebp]

; 1402 : 		}

	jmp	SHORT $LN29@Delta_Read
$LN28@Delta_Read:

; 1403 : 		else
; 1404 : 		{
; 1405 : 			flAngle = *(float *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _flAngle$[ebp], xmm0
$LN29@Delta_Read:

; 1406 : 		}
; 1407 : 		*(float *)((byte *)to + pField->offset ) = flAngle;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR _flAngle$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 1408 : 	}

	jmp	$LN38@Delta_Read
$LN26@Delta_Read:

; 1409 : 	else if( pField->flags & DT_TIMEWINDOW_8 )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 32					; 00000020H
	je	$LN30@Delta_Read

; 1410 : 	{
; 1411 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN32@Delta_Read

; 1412 : 		{
; 1413 : 			iValue = MSG_ReadBitLong( msg, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadBitLong
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1414 : 			flValue = (float)((int)(iValue * 0.01f ));

	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv491[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv491[ebp]
	mov	ecx, DWORD PTR tv491[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv495[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv495[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	cvttss2si edx, xmm0
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1415 : 			flTime = timebase + flValue;

	movss	xmm0, DWORD PTR _timebase$[ebp]
	addss	xmm0, DWORD PTR _flValue$[ebp]
	movss	DWORD PTR _flTime$[ebp], xmm0

; 1416 : 		}

	jmp	SHORT $LN33@Delta_Read
$LN32@Delta_Read:

; 1417 : 		else
; 1418 : 		{
; 1419 : 			flTime = *(float *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _flTime$[ebp], xmm0
$LN33@Delta_Read:

; 1420 : 		}
; 1421 : 		*(float *)((byte *)to + pField->offset ) = flTime;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR _flTime$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 1422 : 	}

	jmp	$LN38@Delta_Read
$LN30@Delta_Read:

; 1423 : 	else if( pField->flags & DT_TIMEWINDOW_BIG )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 64					; 00000040H
	je	SHORT $LN34@Delta_Read

; 1424 : 	{
; 1425 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN36@Delta_Read

; 1426 : 		{
; 1427 : 			iValue = MSG_ReadBitLong( msg, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadBitLong
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1428 : 			flValue = (float)((int)iValue) * ( 1.0f / pField->multiplier );

	cvtsi2ss xmm0, DWORD PTR _iValue$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, DWORD PTR [eax+16]
	mulss	xmm0, xmm1
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1429 : 			flTime = timebase + flValue;

	movss	xmm0, DWORD PTR _timebase$[ebp]
	addss	xmm0, DWORD PTR _flValue$[ebp]
	movss	DWORD PTR _flTime$[ebp], xmm0

; 1430 : 		}

	jmp	SHORT $LN37@Delta_Read
$LN36@Delta_Read:

; 1431 : 		else
; 1432 : 		{
; 1433 : 			flTime = *(float *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _flTime$[ebp], xmm0
$LN37@Delta_Read:

; 1434 : 		}
; 1435 : 		*(float *)((byte *)to + pField->offset ) = flTime;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR _flTime$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 1436 : 	}

	jmp	SHORT $LN38@Delta_Read
$LN34@Delta_Read:

; 1437 : 	else if( pField->flags & DT_STRING )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 128				; 00000080H
	je	SHORT $LN38@Delta_Read

; 1438 : 	{
; 1439 : 		if( bChanged )

	cmp	DWORD PTR _bChanged$[ebp], 0
	je	SHORT $LN39@Delta_Read

; 1440 : 		{
; 1441 : 			pStr = MSG_ReadString( msg );

	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadStringExt
	add	esp, 8
	mov	DWORD PTR _pStr$[ebp], eax

; 1442 : 		}

	jmp	SHORT $LN40@Delta_Read
$LN39@Delta_Read:

; 1443 : 		else
; 1444 : 		{
; 1445 : 			pStr = (char *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pStr$[ebp], ecx
$LN40@Delta_Read:

; 1446 : 		}
; 1447 : 
; 1448 : 		pOut = (char *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pOut$[ebp], ecx

; 1449 : 		Q_strncpy( pOut, pStr, pField->size );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pStr$[ebp]
	push	edx
	mov	eax, DWORD PTR _pOut$[ebp]
	push	eax
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
$LN38@Delta_Read:

; 1450 : 	}
; 1451 : 	return bChanged;

	mov	eax, DWORD PTR _bChanged$[ebp]

; 1452 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_ReadField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_WriteField
_TEXT	SEGMENT
tv185 = -116						; size = 8
tv419 = -108						; size = 8
tv387 = -108						; size = 8
tv356 = -108						; size = 8
tv322 = -108						; size = 4
tv321 = -104						; size = 8
tv294 = -104						; size = 4
tv245 = -104						; size = 4
tv415 = -100						; size = 4
tv383 = -100						; size = 4
tv352 = -100						; size = 4
tv277 = -100						; size = 4
tv231 = -100						; size = 4
tv67 = -100						; size = 4
_pStr$ = -32						; size = 4
_fValue$ = -28						; size = 8
_iValue$ = -20						; size = 4
_flTime$ = -16						; size = 4
_flAngle$ = -12						; size = 4
_flValue$ = -8						; size = 4
_bSigned$ = -4						; size = 4
_msg$ = 8						; size = 4
_pField$ = 12						; size = 4
_from$ = 16						; size = 4
_to$ = 20						; size = 4
_timebase$ = 24						; size = 4
_Delta_WriteField PROC					; COMDAT

; 1229 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi

; 1230 : 	qboolean		bSigned = ( pField->flags & DT_SIGNED ) ? true : false;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 256				; 00000100H
	je	SHORT $LN25@Delta_Writ
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN26@Delta_Writ
$LN25@Delta_Writ:
	mov	DWORD PTR tv67[ebp], 0
$LN26@Delta_Writ:
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _bSigned$[ebp], edx

; 1231 : 	float		flValue, flAngle, flTime;
; 1232 : 	uint		iValue;
; 1233 : 	flag		fValue;
; 1234 : 	const char	*pStr;
; 1235 : 
; 1236 : 	if( Delta_CompareField( pField, from, to, timebase ))

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	call	_Delta_CompareField
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@Delta_Writ

; 1237 : 	{
; 1238 : 		MSG_WriteOneBit( msg, 0 );	// unchanged

	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8

; 1239 : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Writ
$LN2@Delta_Writ:

; 1240 : 	}
; 1241 : 
; 1242 : 	MSG_WriteOneBit( msg, 1 );	// changed

	push	1
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8

; 1243 : 
; 1244 : 	if( pField->flags & DT_BYTE )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 1
	je	$LN3@Delta_Writ

; 1245 : 	{
; 1246 : 		iValue = *(byte *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _iValue$[ebp], eax

; 1247 : 		iValue = Delta_ClampIntegerField( iValue, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	call	_Delta_ClampIntegerField
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1248 : 		if( pField->multiplier != 1.0f ) iValue *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@Delta_Writ
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv352[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv352[ebp]
	mov	ecx, DWORD PTR tv352[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv356[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv356[ebp]
	mov	edx, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [edx+16]
	call	__ftol3
	mov	DWORD PTR _iValue$[ebp], eax
$LN5@Delta_Writ:

; 1249 : 		MSG_WriteBitLong( msg, iValue, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteBitLong
	add	esp, 16					; 00000010H

; 1250 : 	}

	jmp	$LN23@Delta_Writ
$LN3@Delta_Writ:

; 1251 : 	else if( pField->flags & DT_SHORT )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 2
	je	$LN6@Delta_Writ

; 1252 : 	{
; 1253 : 		iValue = *(word *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	mov	DWORD PTR _iValue$[ebp], eax

; 1254 : 		iValue = Delta_ClampIntegerField( iValue, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	call	_Delta_ClampIntegerField
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1255 : 		if( pField->multiplier != 1.0f ) iValue *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN8@Delta_Writ
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv383[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv383[ebp]
	mov	ecx, DWORD PTR tv383[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv387[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv387[ebp]
	mov	edx, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [edx+16]
	call	__ftol3
	mov	DWORD PTR _iValue$[ebp], eax
$LN8@Delta_Writ:

; 1256 : 		MSG_WriteBitLong( msg, iValue, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteBitLong
	add	esp, 16					; 00000010H

; 1257 : 	}

	jmp	$LN23@Delta_Writ
$LN6@Delta_Writ:

; 1258 : 	else if( pField->flags & DT_INTEGER )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 8
	je	$LN9@Delta_Writ

; 1259 : 	{
; 1260 : 		iValue = *(uint *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _iValue$[ebp], eax

; 1261 : 		iValue = Delta_ClampIntegerField( iValue, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	call	_Delta_ClampIntegerField
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iValue$[ebp], eax

; 1262 : 		if( pField->multiplier != 1.0f ) iValue *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN11@Delta_Writ
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR tv415[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv415[ebp]
	mov	ecx, DWORD PTR tv415[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv419[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv419[ebp]
	mov	edx, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [edx+16]
	call	__ftol3
	mov	DWORD PTR _iValue$[ebp], eax
$LN11@Delta_Writ:

; 1263 : 		MSG_WriteBitLong( msg, iValue, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteBitLong
	add	esp, 16					; 00000010H

; 1264 : 	}

	jmp	$LN23@Delta_Writ
$LN9@Delta_Writ:

; 1265 : 	else if (pField->flags & DT_FLAG)

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 512				; 00000200H
	je	$LN12@Delta_Writ

; 1266 : 	{
; 1267 : 		fValue = *(flag*)((byte*)to + pField->offset);

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _fValue$[ebp], eax
	mov	DWORD PTR _fValue$[ebp+4], ecx

; 1268 : 		if (pField->multiplier != 1.0f) fValue *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN14@Delta_Writ
	mov	edx, DWORD PTR _fValue$[ebp+4]
	mov	ecx, DWORD PTR _fValue$[ebp]
	call	__ultod3
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	xorps	xmm1, xmm1
	movlpd	QWORD PTR tv321[ebp], xmm1
	movss	DWORD PTR tv322[ebp], xmm0
	movss	xmm0, DWORD PTR tv322[ebp]
	comiss	xmm0, DWORD PTR __real@5f000000
	jb	SHORT $LN35@Delta_Writ
	movss	xmm0, DWORD PTR tv322[ebp]
	subss	xmm0, DWORD PTR __real@5f000000
	movss	DWORD PTR tv322[ebp], xmm0
	movss	xmm0, DWORD PTR __real@5f000000
	comiss	xmm0, DWORD PTR tv322[ebp]
	jbe	SHORT $LN35@Delta_Writ
	add	DWORD PTR tv321[ebp], 0
	adc	DWORD PTR tv321[ebp+4], -2147483648	; 80000000H
$LN35@Delta_Writ:
	movss	xmm0, DWORD PTR tv322[ebp]
	call	__ftol3
	add	eax, DWORD PTR tv321[ebp]
	adc	edx, DWORD PTR tv321[ebp+4]
	mov	DWORD PTR tv185[ebp], eax
	mov	DWORD PTR tv185[ebp+4], edx
	mov	ecx, DWORD PTR tv185[ebp]
	mov	edx, DWORD PTR tv185[ebp+4]
	mov	DWORD PTR _fValue$[ebp], ecx
	mov	DWORD PTR _fValue$[ebp+4], edx
$LN14@Delta_Writ:

; 1269 : 		MSG_WriteBitFlag(msg, fValue, pField->bits);

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _fValue$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _fValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteBitFlag
	add	esp, 16					; 00000010H

; 1270 : 	}

	jmp	$LN23@Delta_Writ
$LN12@Delta_Writ:

; 1271 : 	else if( pField->flags & DT_FLOAT )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 4
	je	SHORT $LN15@Delta_Writ

; 1272 : 	{
; 1273 : 		flValue = *(float *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1274 : 		iValue = (int)(flValue * pField->multiplier);

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _iValue$[ebp], ecx

; 1275 : 		MSG_WriteBitLong( msg, iValue, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteBitLong
	add	esp, 16					; 00000010H

; 1276 : 	}

	jmp	$LN23@Delta_Writ
$LN15@Delta_Writ:

; 1277 : 	else if( pField->flags & DT_ANGLE )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 16					; 00000010H
	je	SHORT $LN17@Delta_Writ

; 1278 : 	{
; 1279 : 		flAngle = *(float *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _flAngle$[ebp], xmm0

; 1280 : 
; 1281 : 		// NOTE: never applies multipliers to angle because
; 1282 : 		// result may be wrong on client-side
; 1283 : 		MSG_WriteBitAngle( msg, flAngle, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _flAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteBitAngle
	add	esp, 12					; 0000000cH

; 1284 : 	}

	jmp	$LN23@Delta_Writ
$LN17@Delta_Writ:

; 1285 : 	else if( pField->flags & DT_TIMEWINDOW_8 )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 32					; 00000020H
	je	$LN19@Delta_Writ

; 1286 : 	{
; 1287 : 		flValue = *(float *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1288 : 		flTime = Q_rint( timebase * 100.0f ) - Q_rint(flValue * 100.0f);

	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN27@Delta_Writ
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv231[ebp], eax
	jmp	SHORT $LN28@Delta_Writ
$LN27@Delta_Writ:
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv231[ebp], ecx
$LN28@Delta_Writ:
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN29@Delta_Writ
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	mov	DWORD PTR tv245[ebp], edx
	jmp	SHORT $LN30@Delta_Writ
$LN29@Delta_Writ:
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv245[ebp], eax
$LN30@Delta_Writ:
	mov	ecx, DWORD PTR tv231[ebp]
	sub	ecx, DWORD PTR tv245[ebp]
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR _flTime$[ebp], xmm0

; 1289 : 		iValue = (uint)abs( flTime );

	cvttss2si eax, DWORD PTR _flTime$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	DWORD PTR _iValue$[ebp], eax

; 1290 : 
; 1291 : 		MSG_WriteBitLong( msg, iValue, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteBitLong
	add	esp, 16					; 00000010H

; 1292 : 	}

	jmp	$LN23@Delta_Writ
$LN19@Delta_Writ:

; 1293 : 	else if( pField->flags & DT_TIMEWINDOW_BIG )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 64					; 00000040H
	je	$LN21@Delta_Writ

; 1294 : 	{
; 1295 : 		flValue = *(float *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _flValue$[ebp], xmm0

; 1296 : 		flTime = Q_rint( timebase * pField->multiplier ) - Q_rint( flValue * pField->multiplier );

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN31@Delta_Writ
	mov	ecx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	mov	DWORD PTR tv277[ebp], edx
	jmp	SHORT $LN32@Delta_Writ
$LN31@Delta_Writ:
	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv277[ebp], ecx
$LN32@Delta_Writ:
	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR [edx+16]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN33@Delta_Writ
	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv294[ebp], ecx
	jmp	SHORT $LN34@Delta_Writ
$LN33@Delta_Writ:
	mov	edx, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _flValue$[ebp]
	mulss	xmm0, DWORD PTR [edx+16]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv294[ebp], eax
$LN34@Delta_Writ:
	mov	ecx, DWORD PTR tv277[ebp]
	sub	ecx, DWORD PTR tv294[ebp]
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR _flTime$[ebp], xmm0

; 1297 : 		iValue = (uint)abs( flTime );

	cvttss2si eax, DWORD PTR _flTime$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	DWORD PTR _iValue$[ebp], eax

; 1298 : 
; 1299 : 		MSG_WriteBitLong( msg, iValue, pField->bits, bSigned );

	mov	eax, DWORD PTR _bSigned$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteBitLong
	add	esp, 16					; 00000010H

; 1300 : 	}

	jmp	SHORT $LN23@Delta_Writ
$LN21@Delta_Writ:

; 1301 : 	else if( pField->flags & DT_STRING )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 128				; 00000080H
	je	SHORT $LN23@Delta_Writ

; 1302 : 	{
; 1303 : 		pStr = (char *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pStr$[ebp], ecx

; 1304 : 		MSG_WriteString( msg, pStr );

	mov	eax, DWORD PTR _pStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteString
	add	esp, 8
$LN23@Delta_Writ:

; 1305 : 	}
; 1306 : 	return true;

	mov	eax, 1
$LN1@Delta_Writ:

; 1307 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_WriteField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_CompareField
_TEXT	SEGMENT
tv390 = -96						; size = 4
tv350 = -96						; size = 4
tv334 = -96						; size = 4
tv319 = -96						; size = 4
tv295 = -96						; size = 4
tv90 = -96						; size = 4
tv82 = -96						; size = 4
tv74 = -96						; size = 4
tv67 = -96						; size = 4
_s2$1 = -28						; size = 4
_s1$2 = -24						; size = 4
_toF$ = -20						; size = 4
_fromF$ = -16						; size = 4
_val_b$ = -12						; size = 4
_val_a$ = -8						; size = 4
_bSigned$ = -4						; size = 4
_pField$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_timebase$ = 20						; size = 4
_Delta_CompareField PROC				; COMDAT

; 1038 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 1039 : 	qboolean	bSigned = ( pField->flags & DT_SIGNED ) ? true : false;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 256				; 00000100H
	je	SHORT $LN35@Delta_Comp
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN36@Delta_Comp
$LN35@Delta_Comp:
	mov	DWORD PTR tv67[ebp], 0
$LN36@Delta_Comp:
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _bSigned$[ebp], edx

; 1040 : 	float	val_a, val_b;
; 1041 : 	int	fromF, toF;
; 1042 : 
; 1043 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN37@Delta_Comp
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN38@Delta_Comp
$LN37@Delta_Comp:
	mov	DWORD PTR tv74[ebp], 0
$LN38@Delta_Comp:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_CompareField@@9@9
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv74[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1044 : 	Assert( from != NULL );

	cmp	DWORD PTR _from$[ebp], 0
	je	SHORT $LN39@Delta_Comp
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN40@Delta_Comp
$LN39@Delta_Comp:
	mov	DWORD PTR tv82[ebp], 0
$LN40@Delta_Comp:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_CompareField@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0N@DGLAACHB@from?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv82[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1045 : 	Assert( to != NULL );

	cmp	DWORD PTR _to$[ebp], 0
	je	SHORT $LN41@Delta_Comp
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN42@Delta_Comp
$LN41@Delta_Comp:
	mov	DWORD PTR tv90[ebp], 0
$LN42@Delta_Comp:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_CompareField@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0L@LNAGHMEF@to?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv90[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1046 : 
; 1047 : 	if( pField->bInactive )

	mov	eax, DWORD PTR _pField$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@Delta_Comp

; 1048 : 		return true;

	mov	eax, 1
	jmp	$LN1@Delta_Comp
$LN2@Delta_Comp:

; 1049 : 
; 1050 : 	fromF = toF = 0;

	mov	DWORD PTR _toF$[ebp], 0
	mov	eax, DWORD PTR _toF$[ebp]
	mov	DWORD PTR _fromF$[ebp], eax

; 1051 : 
; 1052 : 	if( pField->flags & DT_BYTE )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 1
	je	$LN3@Delta_Comp

; 1053 : 	{
; 1054 : 		if( pField->flags & DT_SIGNED )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 256				; 00000100H
	je	SHORT $LN5@Delta_Comp

; 1055 : 		{
; 1056 : 			fromF = *(signed char *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _fromF$[ebp], eax

; 1057 : 			toF = *(signed char *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _toF$[ebp], eax

; 1058 : 		}

	jmp	SHORT $LN6@Delta_Comp
$LN5@Delta_Comp:

; 1059 : 		else
; 1060 : 		{
; 1061 : 			fromF = *(byte *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _fromF$[ebp], eax

; 1062 : 			toF = *(byte *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _toF$[ebp], eax
$LN6@Delta_Comp:

; 1063 : 		}
; 1064 : 
; 1065 : 		fromF = Delta_ClampIntegerField( fromF, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _fromF$[ebp]
	push	eax
	call	_Delta_ClampIntegerField
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fromF$[ebp], eax

; 1066 : 		toF = Delta_ClampIntegerField( toF, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _toF$[ebp]
	push	eax
	call	_Delta_ClampIntegerField
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _toF$[ebp], eax

; 1067 : 		if( pField->multiplier != 1.0f ) fromF *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _fromF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _fromF$[ebp], ecx
$LN7@Delta_Comp:

; 1068 : 		if( pField->multiplier != 1.0f ) toF *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN8@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _toF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _toF$[ebp], ecx
$LN8@Delta_Comp:

; 1069 : 	}

	jmp	$LN33@Delta_Comp
$LN3@Delta_Comp:

; 1070 : 	else if( pField->flags & DT_SHORT )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 2
	je	$LN9@Delta_Comp

; 1071 : 	{
; 1072 : 		if( pField->flags & DT_SIGNED )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 256				; 00000100H
	je	SHORT $LN11@Delta_Comp

; 1073 : 		{
; 1074 : 			fromF = *(short *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	DWORD PTR _fromF$[ebp], eax

; 1075 : 			toF = *(short *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	DWORD PTR _toF$[ebp], eax

; 1076 : 		}

	jmp	SHORT $LN12@Delta_Comp
$LN11@Delta_Comp:

; 1077 : 		else
; 1078 : 		{
; 1079 : 			fromF = *(word *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	mov	DWORD PTR _fromF$[ebp], eax

; 1080 : 			toF = *(word *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	mov	DWORD PTR _toF$[ebp], eax
$LN12@Delta_Comp:

; 1081 : 		}
; 1082 : 
; 1083 : 		fromF = Delta_ClampIntegerField( fromF, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _fromF$[ebp]
	push	eax
	call	_Delta_ClampIntegerField
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fromF$[ebp], eax

; 1084 : 		toF = Delta_ClampIntegerField( toF, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _toF$[ebp]
	push	eax
	call	_Delta_ClampIntegerField
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _toF$[ebp], eax

; 1085 : 		if( pField->multiplier != 1.0f ) fromF *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN13@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _fromF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _fromF$[ebp], ecx
$LN13@Delta_Comp:

; 1086 : 		if( pField->multiplier != 1.0f ) toF *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN14@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _toF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _toF$[ebp], ecx
$LN14@Delta_Comp:

; 1087 : 	}

	jmp	$LN33@Delta_Comp
$LN9@Delta_Comp:

; 1088 : 	else if( pField->flags & DT_INTEGER )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 8
	je	$LN15@Delta_Comp

; 1089 : 	{
; 1090 : 		if( pField->flags & DT_SIGNED )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 256				; 00000100H
	je	SHORT $LN17@Delta_Comp

; 1091 : 		{
; 1092 : 			fromF = *(int *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _fromF$[ebp], eax

; 1093 : 			toF = *(int *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _toF$[ebp], eax

; 1094 : 		}

	jmp	SHORT $LN18@Delta_Comp
$LN17@Delta_Comp:

; 1095 : 		else
; 1096 : 		{
; 1097 : 			fromF = *(uint *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _fromF$[ebp], eax

; 1098 : 			toF = *(uint *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _toF$[ebp], eax
$LN18@Delta_Comp:

; 1099 : 		}
; 1100 : 
; 1101 : 		fromF = Delta_ClampIntegerField( fromF, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _fromF$[ebp]
	push	eax
	call	_Delta_ClampIntegerField
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fromF$[ebp], eax

; 1102 : 		toF = Delta_ClampIntegerField( toF, bSigned, pField->bits );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _bSigned$[ebp]
	push	edx
	mov	eax, DWORD PTR _toF$[ebp]
	push	eax
	call	_Delta_ClampIntegerField
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _toF$[ebp], eax

; 1103 : 		if( pField->multiplier != 1.0f ) fromF *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN19@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _fromF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _fromF$[ebp], ecx
$LN19@Delta_Comp:

; 1104 : 		if( pField->multiplier != 1.0f ) toF *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN20@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _toF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _toF$[ebp], ecx
$LN20@Delta_Comp:

; 1105 : 	}

	jmp	$LN33@Delta_Comp
$LN15@Delta_Comp:

; 1106 : 	else if (pField->flags & DT_FLAG)

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 512				; 00000200H
	je	SHORT $LN21@Delta_Comp

; 1107 : 	{
; 1108 : 		fromF = *(flag*)((byte*)from + pField->offset);

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _fromF$[ebp], eax

; 1109 : 		toF = *(flag*)((byte*)to + pField->offset);

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _toF$[ebp], eax

; 1110 : 
; 1111 : 		if (pField->multiplier != 1.0f) fromF *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN23@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _fromF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _fromF$[ebp], ecx
$LN23@Delta_Comp:

; 1112 : 		if (pField->multiplier != 1.0f) toF *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN24@Delta_Comp
	cvtsi2ss xmm0, DWORD PTR _toF$[ebp]
	mov	eax, DWORD PTR _pField$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _toF$[ebp], ecx
$LN24@Delta_Comp:

; 1113 : 	}

	jmp	$LN33@Delta_Comp
$LN21@Delta_Comp:

; 1114 : 	else if( pField->flags & ( DT_ANGLE|DT_FLOAT ))

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 20					; 00000014H
	je	SHORT $LN25@Delta_Comp

; 1115 : 	{
; 1116 : 		// don't convert floats to integers
; 1117 : 		fromF = *((int *)((byte *)from + pField->offset ));

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _fromF$[ebp], eax

; 1118 : 		toF = *((int *)((byte *)to + pField->offset ));

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _toF$[ebp], eax

; 1119 : 	}

	jmp	$LN33@Delta_Comp
$LN25@Delta_Comp:

; 1120 : 	else if( pField->flags & DT_TIMEWINDOW_8 )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 32					; 00000020H
	je	$LN27@Delta_Comp

; 1121 : 	{
; 1122 : 		val_a = Q_rint((*(float *)((byte *)from + pField->offset )) * 100.0f );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@42c80000
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN43@Delta_Comp
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@42c80000
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv295[ebp], eax
	jmp	SHORT $LN44@Delta_Comp
$LN43@Delta_Comp:
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv295[ebp], ecx
$LN44@Delta_Comp:
	cvtsi2ss xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR _val_a$[ebp], xmm0

; 1123 : 		val_b = Q_rint((*(float *)((byte *)to + pField->offset )) * 100.0f );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@42c80000
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@Delta_Comp
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@42c80000
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv319[ebp], eax
	jmp	SHORT $LN46@Delta_Comp
$LN45@Delta_Comp:
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv319[ebp], ecx
$LN46@Delta_Comp:
	cvtsi2ss xmm0, DWORD PTR tv319[ebp]
	movss	DWORD PTR _val_b$[ebp], xmm0

; 1124 : 		val_a -= Q_rint(timebase * 100.0f);

	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN47@Delta_Comp
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv334[ebp], eax
	jmp	SHORT $LN48@Delta_Comp
$LN47@Delta_Comp:
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv334[ebp], ecx
$LN48@Delta_Comp:
	cvtsi2ss xmm0, DWORD PTR tv334[ebp]
	movss	xmm1, DWORD PTR _val_a$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _val_a$[ebp], xmm1

; 1125 : 		val_b -= Q_rint(timebase * 100.0f);

	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN49@Delta_Comp
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv350[ebp], eax
	jmp	SHORT $LN50@Delta_Comp
$LN49@Delta_Comp:
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv350[ebp], ecx
$LN50@Delta_Comp:
	cvtsi2ss xmm0, DWORD PTR tv350[ebp]
	movss	xmm1, DWORD PTR _val_b$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _val_b$[ebp], xmm1

; 1126 : 		fromF = *((int *)&val_a);

	mov	eax, DWORD PTR _val_a$[ebp]
	mov	DWORD PTR _fromF$[ebp], eax

; 1127 : 		toF = *((int *)&val_b);

	mov	eax, DWORD PTR _val_b$[ebp]
	mov	DWORD PTR _toF$[ebp], eax

; 1128 : 	}

	jmp	$LN33@Delta_Comp
$LN27@Delta_Comp:

; 1129 : 	else if( pField->flags & DT_TIMEWINDOW_BIG )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 64					; 00000040H
	je	$LN29@Delta_Comp

; 1130 : 	{
; 1131 : 		val_a = (*(float *)((byte *)from + pField->offset ));

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _from$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _val_a$[ebp], xmm0

; 1132 : 		val_b = (*(float *)((byte *)to + pField->offset ));

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _to$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _val_b$[ebp], xmm0

; 1133 : 
; 1134 : 		if( pField->multiplier != 1.0f )

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN31@Delta_Comp

; 1135 : 		{
; 1136 : 			val_a *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _val_a$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _val_a$[ebp], xmm0

; 1137 : 			val_b *= pField->multiplier;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _val_b$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _val_b$[ebp], xmm0

; 1138 : 			val_a = (timebase * pField->multiplier) - val_a;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	subss	xmm0, DWORD PTR _val_a$[ebp]
	movss	DWORD PTR _val_a$[ebp], xmm0

; 1139 : 			val_b = (timebase * pField->multiplier) - val_b;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _timebase$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	subss	xmm0, DWORD PTR _val_b$[ebp]
	movss	DWORD PTR _val_b$[ebp], xmm0

; 1140 : 		}

	jmp	SHORT $LN32@Delta_Comp
$LN31@Delta_Comp:

; 1141 : 		else
; 1142 : 		{
; 1143 : 			val_a = timebase - val_a;

	movss	xmm0, DWORD PTR _timebase$[ebp]
	subss	xmm0, DWORD PTR _val_a$[ebp]
	movss	DWORD PTR _val_a$[ebp], xmm0

; 1144 : 			val_b = timebase - val_b;

	movss	xmm0, DWORD PTR _timebase$[ebp]
	subss	xmm0, DWORD PTR _val_b$[ebp]
	movss	DWORD PTR _val_b$[ebp], xmm0
$LN32@Delta_Comp:

; 1145 : 		}
; 1146 : 
; 1147 : 		fromF = *((int *)&val_a);

	mov	eax, DWORD PTR _val_a$[ebp]
	mov	DWORD PTR _fromF$[ebp], eax

; 1148 : 		toF = *((int *)&val_b);

	mov	eax, DWORD PTR _val_b$[ebp]
	mov	DWORD PTR _toF$[ebp], eax

; 1149 : 	}

	jmp	SHORT $LN33@Delta_Comp
$LN29@Delta_Comp:

; 1150 : 	else if( pField->flags & DT_STRING )

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 128				; 00000080H
	je	SHORT $LN33@Delta_Comp

; 1151 : 	{
; 1152 : 		// compare strings
; 1153 : 		char	*s1 = (char *)((byte *)from + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _s1$2[ebp], ecx

; 1154 : 		char	*s2 = (char *)((byte *)to + pField->offset );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _s2$1[ebp], ecx

; 1155 : 
; 1156 : 		// 0 is equal, otherwise not equal
; 1157 : 		toF = Q_strcmp( s1, s2 );

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _s2$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$2[ebp]
	push	ecx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _toF$[ebp], eax
$LN33@Delta_Comp:

; 1158 : 	}
; 1159 : 
; 1160 : 	return ( fromF == toF ) ? true : false;

	mov	eax, DWORD PTR _fromF$[ebp]
	cmp	eax, DWORD PTR _toF$[ebp]
	jne	SHORT $LN51@Delta_Comp
	mov	DWORD PTR tv390[ebp], 1
	jmp	SHORT $LN52@Delta_Comp
$LN51@Delta_Comp:
	mov	DWORD PTR tv390[ebp], 0
$LN52@Delta_Comp:
	mov	eax, DWORD PTR tv390[ebp]
$LN1@Delta_Comp:

; 1161 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_CompareField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_ClampIntegerField
_TEXT	SEGMENT
tv328 = -72						; size = 4
tv321 = -72						; size = 4
tv313 = -72						; size = 4
tv306 = -72						; size = 4
tv298 = -72						; size = 4
tv291 = -72						; size = 4
tv283 = -72						; size = 4
tv276 = -72						; size = 4
tv268 = -72						; size = 4
tv261 = -72						; size = 4
tv253 = -72						; size = 4
tv246 = -72						; size = 4
tv238 = -72						; size = 4
tv231 = -72						; size = 4
tv223 = -72						; size = 4
tv216 = -72						; size = 4
tv208 = -72						; size = 4
tv201 = -72						; size = 4
tv193 = -72						; size = 4
tv186 = -72						; size = 4
tv178 = -72						; size = 4
tv171 = -72						; size = 4
tv163 = -72						; size = 4
tv156 = -72						; size = 4
tv148 = -72						; size = 4
tv141 = -72						; size = 4
tv133 = -72						; size = 4
tv94 = -72						; size = 4
tv86 = -72						; size = 4
tv79 = -72						; size = 4
tv71 = -72						; size = 4
tv327 = -68						; size = 4
tv320 = -68						; size = 4
tv312 = -68						; size = 4
tv305 = -68						; size = 4
tv297 = -68						; size = 4
tv290 = -68						; size = 4
tv282 = -68						; size = 4
tv275 = -68						; size = 4
tv267 = -68						; size = 4
tv260 = -68						; size = 4
tv252 = -68						; size = 4
tv245 = -68						; size = 4
tv237 = -68						; size = 4
tv230 = -68						; size = 4
tv222 = -68						; size = 4
tv215 = -68						; size = 4
tv207 = -68						; size = 4
tv200 = -68						; size = 4
tv192 = -68						; size = 4
tv185 = -68						; size = 4
tv177 = -68						; size = 4
tv170 = -68						; size = 4
tv162 = -68						; size = 4
tv155 = -68						; size = 4
tv147 = -68						; size = 4
tv140 = -68						; size = 4
tv132 = -68						; size = 4
tv93 = -68						; size = 4
tv85 = -68						; size = 4
tv78 = -68						; size = 4
tv70 = -68						; size = 4
tv64 = -68						; size = 4
_iValue$ = 8						; size = 4
_bSigned$ = 12						; size = 4
_bits$ = 16						; size = 4
_Delta_ClampIntegerField PROC				; COMDAT

; 958  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 959  : 	switch( bits )

	mov	eax, DWORD PTR _bits$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 15			; 0000000fH
	ja	$LN2@Delta_Clam
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN175@Delta_Clam[edx*4]
$LN4@Delta_Clam:

; 960  : 	{
; 961  : 	case 1:
; 962  : 		iValue = bound( 0, (byte)iValue, 1 );

	movzx	eax, BYTE PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN53@Delta_Clam
	movzx	ecx, BYTE PTR _iValue$[ebp]
	cmp	ecx, 1
	jge	SHORT $LN51@Delta_Clam
	movzx	edx, BYTE PTR _iValue$[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN52@Delta_Clam
$LN51@Delta_Clam:
	mov	DWORD PTR tv70[ebp], 1
$LN52@Delta_Clam:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN54@Delta_Clam
$LN53@Delta_Clam:
	mov	DWORD PTR tv71[ebp], 0
$LN54@Delta_Clam:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx

; 963  : 		break;

	jmp	$LN2@Delta_Clam
$LN5@Delta_Clam:

; 964  : 	case 2:
; 965  : 		if( bSigned ) iValue = bound( -2, (short)iValue, 1 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN6@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -2					; fffffffeH
	jl	SHORT $LN57@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 1
	jge	SHORT $LN55@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv78[ebp], edx
	jmp	SHORT $LN56@Delta_Clam
$LN55@Delta_Clam:
	mov	DWORD PTR tv78[ebp], 1
$LN56@Delta_Clam:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN58@Delta_Clam
$LN57@Delta_Clam:
	mov	DWORD PTR tv79[ebp], -2			; fffffffeH
$LN58@Delta_Clam:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN7@Delta_Clam
$LN6@Delta_Clam:

; 966  : 		else iValue = bound( 0, (word)iValue, 3 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN61@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 3
	jge	SHORT $LN59@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv85[ebp], edx
	jmp	SHORT $LN60@Delta_Clam
$LN59@Delta_Clam:
	mov	DWORD PTR tv85[ebp], 3
$LN60@Delta_Clam:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN62@Delta_Clam
$LN61@Delta_Clam:
	mov	DWORD PTR tv86[ebp], 0
$LN62@Delta_Clam:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN7@Delta_Clam:

; 967  : 		break;

	jmp	$LN2@Delta_Clam
$LN8@Delta_Clam:

; 968  : 	case 3:
; 969  : 		if( bSigned ) iValue = bound( -4, (short)iValue, 3 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN9@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -4					; fffffffcH
	jl	SHORT $LN65@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 3
	jge	SHORT $LN63@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv93[ebp], edx
	jmp	SHORT $LN64@Delta_Clam
$LN63@Delta_Clam:
	mov	DWORD PTR tv93[ebp], 3
$LN64@Delta_Clam:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN66@Delta_Clam
$LN65@Delta_Clam:
	mov	DWORD PTR tv94[ebp], -4			; fffffffcH
$LN66@Delta_Clam:
	mov	ecx, DWORD PTR tv94[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN10@Delta_Clam
$LN9@Delta_Clam:

; 970  : 		else iValue = bound( 0, (word)iValue, 7 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN69@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 7
	jge	SHORT $LN67@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv132[ebp], edx
	jmp	SHORT $LN68@Delta_Clam
$LN67@Delta_Clam:
	mov	DWORD PTR tv132[ebp], 7
$LN68@Delta_Clam:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN70@Delta_Clam
$LN69@Delta_Clam:
	mov	DWORD PTR tv133[ebp], 0
$LN70@Delta_Clam:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN10@Delta_Clam:

; 971  : 		break;

	jmp	$LN2@Delta_Clam
$LN11@Delta_Clam:

; 972  : 	case 4:
; 973  : 		if( bSigned ) iValue = bound( -8, (short)iValue, 7 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN12@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -8					; fffffff8H
	jl	SHORT $LN73@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 7
	jge	SHORT $LN71@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv140[ebp], edx
	jmp	SHORT $LN72@Delta_Clam
$LN71@Delta_Clam:
	mov	DWORD PTR tv140[ebp], 7
$LN72@Delta_Clam:
	mov	eax, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN74@Delta_Clam
$LN73@Delta_Clam:
	mov	DWORD PTR tv141[ebp], -8		; fffffff8H
$LN74@Delta_Clam:
	mov	ecx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN13@Delta_Clam
$LN12@Delta_Clam:

; 974  : 		else iValue = bound( 0, (word)iValue, 15 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN77@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 15					; 0000000fH
	jge	SHORT $LN75@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv147[ebp], edx
	jmp	SHORT $LN76@Delta_Clam
$LN75@Delta_Clam:
	mov	DWORD PTR tv147[ebp], 15		; 0000000fH
$LN76@Delta_Clam:
	mov	eax, DWORD PTR tv147[ebp]
	mov	DWORD PTR tv148[ebp], eax
	jmp	SHORT $LN78@Delta_Clam
$LN77@Delta_Clam:
	mov	DWORD PTR tv148[ebp], 0
$LN78@Delta_Clam:
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN13@Delta_Clam:

; 975  : 		break;

	jmp	$LN2@Delta_Clam
$LN14@Delta_Clam:

; 976  : 	case 5:
; 977  : 		if( bSigned ) iValue = bound( -16, (short)iValue, 15 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN15@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -16				; fffffff0H
	jl	SHORT $LN81@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 15					; 0000000fH
	jge	SHORT $LN79@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv155[ebp], edx
	jmp	SHORT $LN80@Delta_Clam
$LN79@Delta_Clam:
	mov	DWORD PTR tv155[ebp], 15		; 0000000fH
$LN80@Delta_Clam:
	mov	eax, DWORD PTR tv155[ebp]
	mov	DWORD PTR tv156[ebp], eax
	jmp	SHORT $LN82@Delta_Clam
$LN81@Delta_Clam:
	mov	DWORD PTR tv156[ebp], -16		; fffffff0H
$LN82@Delta_Clam:
	mov	ecx, DWORD PTR tv156[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN16@Delta_Clam
$LN15@Delta_Clam:

; 978  : 		else iValue = bound( 0, (word)iValue, 31 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN85@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 31					; 0000001fH
	jge	SHORT $LN83@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv162[ebp], edx
	jmp	SHORT $LN84@Delta_Clam
$LN83@Delta_Clam:
	mov	DWORD PTR tv162[ebp], 31		; 0000001fH
$LN84@Delta_Clam:
	mov	eax, DWORD PTR tv162[ebp]
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN86@Delta_Clam
$LN85@Delta_Clam:
	mov	DWORD PTR tv163[ebp], 0
$LN86@Delta_Clam:
	mov	ecx, DWORD PTR tv163[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN16@Delta_Clam:

; 979  : 		break;

	jmp	$LN2@Delta_Clam
$LN17@Delta_Clam:

; 980  : 	case 6:
; 981  : 		if( bSigned ) iValue = bound( -32, (short)iValue, 31 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN18@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -32				; ffffffe0H
	jl	SHORT $LN89@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 31					; 0000001fH
	jge	SHORT $LN87@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv170[ebp], edx
	jmp	SHORT $LN88@Delta_Clam
$LN87@Delta_Clam:
	mov	DWORD PTR tv170[ebp], 31		; 0000001fH
$LN88@Delta_Clam:
	mov	eax, DWORD PTR tv170[ebp]
	mov	DWORD PTR tv171[ebp], eax
	jmp	SHORT $LN90@Delta_Clam
$LN89@Delta_Clam:
	mov	DWORD PTR tv171[ebp], -32		; ffffffe0H
$LN90@Delta_Clam:
	mov	ecx, DWORD PTR tv171[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN19@Delta_Clam
$LN18@Delta_Clam:

; 982  : 		else iValue = bound( 0, (word)iValue, 63 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN93@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 63					; 0000003fH
	jge	SHORT $LN91@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv177[ebp], edx
	jmp	SHORT $LN92@Delta_Clam
$LN91@Delta_Clam:
	mov	DWORD PTR tv177[ebp], 63		; 0000003fH
$LN92@Delta_Clam:
	mov	eax, DWORD PTR tv177[ebp]
	mov	DWORD PTR tv178[ebp], eax
	jmp	SHORT $LN94@Delta_Clam
$LN93@Delta_Clam:
	mov	DWORD PTR tv178[ebp], 0
$LN94@Delta_Clam:
	mov	ecx, DWORD PTR tv178[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN19@Delta_Clam:

; 983  : 		break;

	jmp	$LN2@Delta_Clam
$LN20@Delta_Clam:

; 984  : 	case 7:
; 985  : 		if( bSigned ) iValue = bound( -64, (short)iValue, 63 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN21@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -64				; ffffffc0H
	jl	SHORT $LN97@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 63					; 0000003fH
	jge	SHORT $LN95@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv185[ebp], edx
	jmp	SHORT $LN96@Delta_Clam
$LN95@Delta_Clam:
	mov	DWORD PTR tv185[ebp], 63		; 0000003fH
$LN96@Delta_Clam:
	mov	eax, DWORD PTR tv185[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN98@Delta_Clam
$LN97@Delta_Clam:
	mov	DWORD PTR tv186[ebp], -64		; ffffffc0H
$LN98@Delta_Clam:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN22@Delta_Clam
$LN21@Delta_Clam:

; 986  : 		else iValue = bound( 0, (word)iValue, 127 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN101@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 127				; 0000007fH
	jge	SHORT $LN99@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv192[ebp], edx
	jmp	SHORT $LN100@Delta_Clam
$LN99@Delta_Clam:
	mov	DWORD PTR tv192[ebp], 127		; 0000007fH
$LN100@Delta_Clam:
	mov	eax, DWORD PTR tv192[ebp]
	mov	DWORD PTR tv193[ebp], eax
	jmp	SHORT $LN102@Delta_Clam
$LN101@Delta_Clam:
	mov	DWORD PTR tv193[ebp], 0
$LN102@Delta_Clam:
	mov	ecx, DWORD PTR tv193[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN22@Delta_Clam:

; 987  : 		break;

	jmp	$LN2@Delta_Clam
$LN23@Delta_Clam:

; 988  : 	case 8:
; 989  : 		if( bSigned ) iValue = bound( -128, (short)iValue, 127 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN24@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -128				; ffffff80H
	jl	SHORT $LN105@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 127				; 0000007fH
	jge	SHORT $LN103@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv200[ebp], edx
	jmp	SHORT $LN104@Delta_Clam
$LN103@Delta_Clam:
	mov	DWORD PTR tv200[ebp], 127		; 0000007fH
$LN104@Delta_Clam:
	mov	eax, DWORD PTR tv200[ebp]
	mov	DWORD PTR tv201[ebp], eax
	jmp	SHORT $LN106@Delta_Clam
$LN105@Delta_Clam:
	mov	DWORD PTR tv201[ebp], -128		; ffffff80H
$LN106@Delta_Clam:
	mov	ecx, DWORD PTR tv201[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN25@Delta_Clam
$LN24@Delta_Clam:

; 990  : 		else iValue = bound( 0, (word)iValue, 255 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN109@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 255				; 000000ffH
	jge	SHORT $LN107@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv207[ebp], edx
	jmp	SHORT $LN108@Delta_Clam
$LN107@Delta_Clam:
	mov	DWORD PTR tv207[ebp], 255		; 000000ffH
$LN108@Delta_Clam:
	mov	eax, DWORD PTR tv207[ebp]
	mov	DWORD PTR tv208[ebp], eax
	jmp	SHORT $LN110@Delta_Clam
$LN109@Delta_Clam:
	mov	DWORD PTR tv208[ebp], 0
$LN110@Delta_Clam:
	mov	ecx, DWORD PTR tv208[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN25@Delta_Clam:

; 991  : 		break;

	jmp	$LN2@Delta_Clam
$LN26@Delta_Clam:

; 992  : 	case 9:
; 993  : 		if( bSigned ) iValue = bound( -256, (short)iValue, 255 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN27@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -256				; ffffff00H
	jl	SHORT $LN113@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 255				; 000000ffH
	jge	SHORT $LN111@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv215[ebp], edx
	jmp	SHORT $LN112@Delta_Clam
$LN111@Delta_Clam:
	mov	DWORD PTR tv215[ebp], 255		; 000000ffH
$LN112@Delta_Clam:
	mov	eax, DWORD PTR tv215[ebp]
	mov	DWORD PTR tv216[ebp], eax
	jmp	SHORT $LN114@Delta_Clam
$LN113@Delta_Clam:
	mov	DWORD PTR tv216[ebp], -256		; ffffff00H
$LN114@Delta_Clam:
	mov	ecx, DWORD PTR tv216[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN28@Delta_Clam
$LN27@Delta_Clam:

; 994  : 		else iValue = bound( 0, (word)iValue, 511 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN117@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 511				; 000001ffH
	jge	SHORT $LN115@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv222[ebp], edx
	jmp	SHORT $LN116@Delta_Clam
$LN115@Delta_Clam:
	mov	DWORD PTR tv222[ebp], 511		; 000001ffH
$LN116@Delta_Clam:
	mov	eax, DWORD PTR tv222[ebp]
	mov	DWORD PTR tv223[ebp], eax
	jmp	SHORT $LN118@Delta_Clam
$LN117@Delta_Clam:
	mov	DWORD PTR tv223[ebp], 0
$LN118@Delta_Clam:
	mov	ecx, DWORD PTR tv223[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN28@Delta_Clam:

; 995  : 		break;

	jmp	$LN2@Delta_Clam
$LN29@Delta_Clam:

; 996  : 	case 10:
; 997  : 		if( bSigned ) iValue = bound( -512, (short)iValue, 511 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN30@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -512				; fffffe00H
	jl	SHORT $LN121@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 511				; 000001ffH
	jge	SHORT $LN119@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv230[ebp], edx
	jmp	SHORT $LN120@Delta_Clam
$LN119@Delta_Clam:
	mov	DWORD PTR tv230[ebp], 511		; 000001ffH
$LN120@Delta_Clam:
	mov	eax, DWORD PTR tv230[ebp]
	mov	DWORD PTR tv231[ebp], eax
	jmp	SHORT $LN122@Delta_Clam
$LN121@Delta_Clam:
	mov	DWORD PTR tv231[ebp], -512		; fffffe00H
$LN122@Delta_Clam:
	mov	ecx, DWORD PTR tv231[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN31@Delta_Clam
$LN30@Delta_Clam:

; 998  : 		else iValue = bound( 0, (word)iValue, 1023 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN125@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 1023				; 000003ffH
	jge	SHORT $LN123@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv237[ebp], edx
	jmp	SHORT $LN124@Delta_Clam
$LN123@Delta_Clam:
	mov	DWORD PTR tv237[ebp], 1023		; 000003ffH
$LN124@Delta_Clam:
	mov	eax, DWORD PTR tv237[ebp]
	mov	DWORD PTR tv238[ebp], eax
	jmp	SHORT $LN126@Delta_Clam
$LN125@Delta_Clam:
	mov	DWORD PTR tv238[ebp], 0
$LN126@Delta_Clam:
	mov	ecx, DWORD PTR tv238[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN31@Delta_Clam:

; 999  : 		break;

	jmp	$LN2@Delta_Clam
$LN32@Delta_Clam:

; 1000 : 	case 11:
; 1001 : 		if( bSigned ) iValue = bound( -1024, (short)iValue, 1023 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN33@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -1024				; fffffc00H
	jl	SHORT $LN129@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 1023				; 000003ffH
	jge	SHORT $LN127@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv245[ebp], edx
	jmp	SHORT $LN128@Delta_Clam
$LN127@Delta_Clam:
	mov	DWORD PTR tv245[ebp], 1023		; 000003ffH
$LN128@Delta_Clam:
	mov	eax, DWORD PTR tv245[ebp]
	mov	DWORD PTR tv246[ebp], eax
	jmp	SHORT $LN130@Delta_Clam
$LN129@Delta_Clam:
	mov	DWORD PTR tv246[ebp], -1024		; fffffc00H
$LN130@Delta_Clam:
	mov	ecx, DWORD PTR tv246[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN34@Delta_Clam
$LN33@Delta_Clam:

; 1002 : 		else iValue = bound( 0, (word)iValue, 2047 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN133@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 2047				; 000007ffH
	jge	SHORT $LN131@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv252[ebp], edx
	jmp	SHORT $LN132@Delta_Clam
$LN131@Delta_Clam:
	mov	DWORD PTR tv252[ebp], 2047		; 000007ffH
$LN132@Delta_Clam:
	mov	eax, DWORD PTR tv252[ebp]
	mov	DWORD PTR tv253[ebp], eax
	jmp	SHORT $LN134@Delta_Clam
$LN133@Delta_Clam:
	mov	DWORD PTR tv253[ebp], 0
$LN134@Delta_Clam:
	mov	ecx, DWORD PTR tv253[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN34@Delta_Clam:

; 1003 : 		break;

	jmp	$LN2@Delta_Clam
$LN35@Delta_Clam:

; 1004 : 	case 12:
; 1005 : 		if( bSigned ) iValue = bound( -2048, (short)iValue, 2047 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN36@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -2048				; fffff800H
	jl	SHORT $LN137@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 2047				; 000007ffH
	jge	SHORT $LN135@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv260[ebp], edx
	jmp	SHORT $LN136@Delta_Clam
$LN135@Delta_Clam:
	mov	DWORD PTR tv260[ebp], 2047		; 000007ffH
$LN136@Delta_Clam:
	mov	eax, DWORD PTR tv260[ebp]
	mov	DWORD PTR tv261[ebp], eax
	jmp	SHORT $LN138@Delta_Clam
$LN137@Delta_Clam:
	mov	DWORD PTR tv261[ebp], -2048		; fffff800H
$LN138@Delta_Clam:
	mov	ecx, DWORD PTR tv261[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN37@Delta_Clam
$LN36@Delta_Clam:

; 1006 : 		else iValue = bound( 0, (word)iValue, 4095 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN141@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 4095				; 00000fffH
	jge	SHORT $LN139@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv267[ebp], edx
	jmp	SHORT $LN140@Delta_Clam
$LN139@Delta_Clam:
	mov	DWORD PTR tv267[ebp], 4095		; 00000fffH
$LN140@Delta_Clam:
	mov	eax, DWORD PTR tv267[ebp]
	mov	DWORD PTR tv268[ebp], eax
	jmp	SHORT $LN142@Delta_Clam
$LN141@Delta_Clam:
	mov	DWORD PTR tv268[ebp], 0
$LN142@Delta_Clam:
	mov	ecx, DWORD PTR tv268[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN37@Delta_Clam:

; 1007 : 		break;

	jmp	$LN2@Delta_Clam
$LN38@Delta_Clam:

; 1008 : 	case 13:
; 1009 : 		if( bSigned ) iValue = bound( -4096, (short)iValue, 4095 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN39@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -4096				; fffff000H
	jl	SHORT $LN145@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 4095				; 00000fffH
	jge	SHORT $LN143@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv275[ebp], edx
	jmp	SHORT $LN144@Delta_Clam
$LN143@Delta_Clam:
	mov	DWORD PTR tv275[ebp], 4095		; 00000fffH
$LN144@Delta_Clam:
	mov	eax, DWORD PTR tv275[ebp]
	mov	DWORD PTR tv276[ebp], eax
	jmp	SHORT $LN146@Delta_Clam
$LN145@Delta_Clam:
	mov	DWORD PTR tv276[ebp], -4096		; fffff000H
$LN146@Delta_Clam:
	mov	ecx, DWORD PTR tv276[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN40@Delta_Clam
$LN39@Delta_Clam:

; 1010 : 		else iValue = bound( 0, (word)iValue, 8191 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN149@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 8191				; 00001fffH
	jge	SHORT $LN147@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv282[ebp], edx
	jmp	SHORT $LN148@Delta_Clam
$LN147@Delta_Clam:
	mov	DWORD PTR tv282[ebp], 8191		; 00001fffH
$LN148@Delta_Clam:
	mov	eax, DWORD PTR tv282[ebp]
	mov	DWORD PTR tv283[ebp], eax
	jmp	SHORT $LN150@Delta_Clam
$LN149@Delta_Clam:
	mov	DWORD PTR tv283[ebp], 0
$LN150@Delta_Clam:
	mov	ecx, DWORD PTR tv283[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN40@Delta_Clam:

; 1011 : 		break;

	jmp	$LN2@Delta_Clam
$LN41@Delta_Clam:

; 1012 : 	case 14:
; 1013 : 		if( bSigned ) iValue = bound( -8192, (short)iValue, 8191 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN42@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -8192				; ffffe000H
	jl	SHORT $LN153@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 8191				; 00001fffH
	jge	SHORT $LN151@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv290[ebp], edx
	jmp	SHORT $LN152@Delta_Clam
$LN151@Delta_Clam:
	mov	DWORD PTR tv290[ebp], 8191		; 00001fffH
$LN152@Delta_Clam:
	mov	eax, DWORD PTR tv290[ebp]
	mov	DWORD PTR tv291[ebp], eax
	jmp	SHORT $LN154@Delta_Clam
$LN153@Delta_Clam:
	mov	DWORD PTR tv291[ebp], -8192		; ffffe000H
$LN154@Delta_Clam:
	mov	ecx, DWORD PTR tv291[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN43@Delta_Clam
$LN42@Delta_Clam:

; 1014 : 		else iValue = bound( 0, (word)iValue, 16383 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN157@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 16383				; 00003fffH
	jge	SHORT $LN155@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv297[ebp], edx
	jmp	SHORT $LN156@Delta_Clam
$LN155@Delta_Clam:
	mov	DWORD PTR tv297[ebp], 16383		; 00003fffH
$LN156@Delta_Clam:
	mov	eax, DWORD PTR tv297[ebp]
	mov	DWORD PTR tv298[ebp], eax
	jmp	SHORT $LN158@Delta_Clam
$LN157@Delta_Clam:
	mov	DWORD PTR tv298[ebp], 0
$LN158@Delta_Clam:
	mov	ecx, DWORD PTR tv298[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN43@Delta_Clam:

; 1015 : 		break;

	jmp	$LN2@Delta_Clam
$LN44@Delta_Clam:

; 1016 : 	case 15:
; 1017 : 		if( bSigned ) iValue = bound( -16384, (short)iValue, 16383 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN45@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -16384				; ffffc000H
	jl	SHORT $LN161@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 16383				; 00003fffH
	jge	SHORT $LN159@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv305[ebp], edx
	jmp	SHORT $LN160@Delta_Clam
$LN159@Delta_Clam:
	mov	DWORD PTR tv305[ebp], 16383		; 00003fffH
$LN160@Delta_Clam:
	mov	eax, DWORD PTR tv305[ebp]
	mov	DWORD PTR tv306[ebp], eax
	jmp	SHORT $LN162@Delta_Clam
$LN161@Delta_Clam:
	mov	DWORD PTR tv306[ebp], -16384		; ffffc000H
$LN162@Delta_Clam:
	mov	ecx, DWORD PTR tv306[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN46@Delta_Clam
$LN45@Delta_Clam:

; 1018 : 		else iValue = bound( 0, (word)iValue, 32767 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN165@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 32767				; 00007fffH
	jge	SHORT $LN163@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv312[ebp], edx
	jmp	SHORT $LN164@Delta_Clam
$LN163@Delta_Clam:
	mov	DWORD PTR tv312[ebp], 32767		; 00007fffH
$LN164@Delta_Clam:
	mov	eax, DWORD PTR tv312[ebp]
	mov	DWORD PTR tv313[ebp], eax
	jmp	SHORT $LN166@Delta_Clam
$LN165@Delta_Clam:
	mov	DWORD PTR tv313[ebp], 0
$LN166@Delta_Clam:
	mov	ecx, DWORD PTR tv313[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN46@Delta_Clam:

; 1019 : 		break;

	jmp	SHORT $LN2@Delta_Clam
$LN47@Delta_Clam:

; 1020 : 	case 16:
; 1021 : 		if( bSigned ) iValue = bound( -32768, (short)iValue, 32767 );

	cmp	DWORD PTR _bSigned$[ebp], 0
	je	SHORT $LN48@Delta_Clam
	movsx	eax, WORD PTR _iValue$[ebp]
	cmp	eax, -32768				; ffff8000H
	jl	SHORT $LN169@Delta_Clam
	movsx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 32767				; 00007fffH
	jge	SHORT $LN167@Delta_Clam
	movsx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv320[ebp], edx
	jmp	SHORT $LN168@Delta_Clam
$LN167@Delta_Clam:
	mov	DWORD PTR tv320[ebp], 32767		; 00007fffH
$LN168@Delta_Clam:
	mov	eax, DWORD PTR tv320[ebp]
	mov	DWORD PTR tv321[ebp], eax
	jmp	SHORT $LN170@Delta_Clam
$LN169@Delta_Clam:
	mov	DWORD PTR tv321[ebp], -32768		; ffff8000H
$LN170@Delta_Clam:
	mov	ecx, DWORD PTR tv321[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
	jmp	SHORT $LN2@Delta_Clam
$LN48@Delta_Clam:

; 1022 : 		else iValue = bound( 0, (word)iValue, 65535 );

	movzx	eax, WORD PTR _iValue$[ebp]
	test	eax, eax
	jl	SHORT $LN173@Delta_Clam
	movzx	ecx, WORD PTR _iValue$[ebp]
	cmp	ecx, 65535				; 0000ffffH
	jge	SHORT $LN171@Delta_Clam
	movzx	edx, WORD PTR _iValue$[ebp]
	mov	DWORD PTR tv327[ebp], edx
	jmp	SHORT $LN172@Delta_Clam
$LN171@Delta_Clam:
	mov	DWORD PTR tv327[ebp], 65535		; 0000ffffH
$LN172@Delta_Clam:
	mov	eax, DWORD PTR tv327[ebp]
	mov	DWORD PTR tv328[ebp], eax
	jmp	SHORT $LN174@Delta_Clam
$LN173@Delta_Clam:
	mov	DWORD PTR tv328[ebp], 0
$LN174@Delta_Clam:
	mov	ecx, DWORD PTR tv328[ebp]
	mov	DWORD PTR _iValue$[ebp], ecx
$LN2@Delta_Clam:

; 1023 : 		break;
; 1024 : 	}
; 1025 : 
; 1026 : 	return iValue; // clamped;

	mov	eax, DWORD PTR _iValue$[ebp]

; 1027 : } 

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN175@Delta_Clam:
	DD	$LN4@Delta_Clam
	DD	$LN5@Delta_Clam
	DD	$LN8@Delta_Clam
	DD	$LN11@Delta_Clam
	DD	$LN14@Delta_Clam
	DD	$LN17@Delta_Clam
	DD	$LN20@Delta_Clam
	DD	$LN23@Delta_Clam
	DD	$LN26@Delta_Clam
	DD	$LN29@Delta_Clam
	DD	$LN32@Delta_Clam
	DD	$LN35@Delta_Clam
	DD	$LN38@Delta_Clam
	DD	$LN41@Delta_Clam
	DD	$LN44@Delta_Clam
	DD	$LN47@Delta_Clam
_Delta_ClampIntegerField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_ParseTable
_TEXT	SEGMENT
tv91 = -336						; size = 4
_pInfo$ = -268						; size = 4
_pField$ = -264						; size = 4
_token$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_delta_script$ = 8					; size = 4
_dt$ = 12						; size = 4
_encodeDll$ = 16					; size = 4
_encodeFunc$ = 20					; size = 4
_Delta_ParseTable PROC					; COMDAT

; 752  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 753  : 	string		token;
; 754  : 	delta_t		*pField;
; 755  : 	const delta_field_t	*pInfo;
; 756  : 
; 757  : 	// allocate the delta-structures
; 758  : 	if( !dt->pFields ) dt->pFields = (delta_t *)Z_Calloc( dt->maxFields * sizeof( delta_t ));

	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@Delta_Pars
	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_ParseTable@@9@9
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	1
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 5
	push	edx
	mov	eax, DWORD PTR _host+236
	push	eax
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN4@Delta_Pars:

; 759  : 
; 760  : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 761  : 	pInfo = dt->pInfo;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pInfo$[ebp], ecx

; 762  : 	dt->numFields = 0;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN2@Delta_Pars:

; 763  : 
; 764  : 	// assume we have handled '{'
; 765  : 	while(( *delta_script = COM_ParseFile( *delta_script, token )) != NULL )

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _delta_script$[ebp]
	cmp	DWORD PTR [edx], 0
	je	$LN3@Delta_Pars

; 766  : 	{
; 767  : 		Assert( dt->numFields <= dt->maxFields );

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+8]
	jg	SHORT $LN19@Delta_Pars
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN20@Delta_Pars
$LN19@Delta_Pars:
	mov	DWORD PTR tv91[ebp], 0
$LN20@Delta_Pars:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_ParseTable@@9@9
	add	eax, 15					; 0000000fH
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BP@INKGNIAN@dt?9?$DOnumFields?5?$DM?$DN?5dt?9?$DOmaxFields@
	mov	ecx, DWORD PTR tv91[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 768  : 
; 769  : 		if( !Q_strcmp( token, "DEFINE_DELTA" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_0N@IMFCHAMK@DEFINE_DELTA@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN5@Delta_Pars

; 770  : 		{
; 771  : 			if( Delta_ParseField( delta_script, pInfo, &pField[dt->numFields], false ))

	push	0
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 5
	add	ecx, DWORD PTR _pField$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	push	edx
	mov	eax, DWORD PTR _delta_script$[ebp]
	push	eax
	call	_Delta_ParseField
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN7@Delta_Pars

; 772  : 				dt->numFields++;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN7@Delta_Pars:

; 773  : 		}

	jmp	SHORT $LN6@Delta_Pars
$LN5@Delta_Pars:

; 774  : 		else if( !Q_strcmp( token, "DEFINE_DELTA_POST" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_0BC@IGAFEIEE@DEFINE_DELTA_POST@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@Delta_Pars

; 775  : 		{
; 776  : 			if( Delta_ParseField( delta_script, pInfo, &pField[dt->numFields], true ))

	push	1
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 5
	add	ecx, DWORD PTR _pField$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	push	edx
	mov	eax, DWORD PTR _delta_script$[ebp]
	push	eax
	call	_Delta_ParseField
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN10@Delta_Pars

; 777  : 				dt->numFields++;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN10@Delta_Pars:

; 778  : 		}

	jmp	SHORT $LN6@Delta_Pars
$LN8@Delta_Pars:

; 779  : 		else if( token[0] == '}' )

	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _token$[ebp+ecx]
	cmp	edx, 125				; 0000007dH
	jne	SHORT $LN6@Delta_Pars

; 780  : 		{
; 781  : 			// end of the section
; 782  : 			break;

	jmp	SHORT $LN3@Delta_Pars
$LN6@Delta_Pars:

; 783  : 		}
; 784  : 	}

	jmp	$LN2@Delta_Pars
$LN3@Delta_Pars:

; 785  : 
; 786  : 	// copy function name
; 787  : 	Q_strncpy( dt->funcName, encodeFunc, sizeof( dt->funcName ));

	push	32					; 00000020H
	mov	eax, DWORD PTR _encodeFunc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 788  : 
; 789  : 	if( !Q_stricmp( encodeDll, "none" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_04CGFJFPFD@none@
	mov	eax, DWORD PTR _encodeDll$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@Delta_Pars

; 790  : 		dt->customEncode = CUSTOM_NONE;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [eax+20], 0
	jmp	SHORT $LN13@Delta_Pars
$LN12@Delta_Pars:

; 791  : 	else if( !Q_stricmp( encodeDll, "gamedll" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_07LEELFMGH@gamedll@
	mov	eax, DWORD PTR _encodeDll$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN14@Delta_Pars

; 792  : 		dt->customEncode = CUSTOM_SERVER_ENCODE;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [eax+20], 1
	jmp	SHORT $LN13@Delta_Pars
$LN14@Delta_Pars:

; 793  : 	else if( !Q_stricmp( encodeDll, "clientdll" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_09IILFNMAG@clientdll@
	mov	eax, DWORD PTR _encodeDll$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN13@Delta_Pars

; 794  : 		dt->customEncode = CUSTOM_CLIENT_ENCODE;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [eax+20], 2
$LN13@Delta_Pars:

; 795  : 
; 796  : 	// adjust to fit memory size
; 797  : 	if( dt->numFields < dt->maxFields )

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN17@Delta_Pars

; 798  : 	{
; 799  : 		dt->pFields = Z_Realloc( dt->pFields, dt->numFields * sizeof( delta_t ));

	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_ParseTable@@9@9
	add	eax, 47					; 0000002fH
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	1
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	shl	edx, 5
	push	edx
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__Mem_Realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN17@Delta_Pars:

; 800  : 	}
; 801  : 
; 802  : 	dt->bInitialized = true; // table is ok

	mov	eax, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [eax+60], 1

; 803  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_ParseTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_ParseField
_TEXT	SEGMENT
_oldpos$ = -268						; size = 4
_pFieldInfo$ = -264					; size = 4
_token$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_delta_script$ = 8					; size = 4
_pInfo$ = 12						; size = 4
_pField$ = 16						; size = 4
_bPost$ = 20						; size = 4
_Delta_ParseField PROC					; COMDAT

; 609  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 610  : 	string		token;
; 611  : 	delta_field_t	*pFieldInfo;
; 612  : 	char		*oldpos;
; 613  : 
; 614  : 	*delta_script = COM_ParseFile( *delta_script, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax

; 615  : 	if( Q_strcmp( token, "(" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_01ODHLEDKK@?$CI@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@Delta_Pars

; 616  : 	{
; 617  : 		Con_DPrintf( S_ERROR "Delta_ParseField: expected '(', found '%s' instead\n", token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET ??_C@_0DP@OPHCKEFP@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@
	call	_Con_DPrintf
	add	esp, 8

; 618  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN4@Delta_Pars:

; 619  : 	}
; 620  : 
; 621  : 	// read the variable name
; 622  : 	if(( *delta_script = COM_ParseFile( *delta_script, token )) == NULL )

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _delta_script$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN5@Delta_Pars

; 623  : 	{
; 624  : 		Con_DPrintf( S_ERROR "Delta_ParseField: missing field name\n" );

	push	OFFSET ??_C@_0DB@JEPBHFEH@?$FO1Error?3?$FO7?5Delta_ParseField?3?5mi@
	call	_Con_DPrintf
	add	esp, 4

; 625  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN5@Delta_Pars:

; 626  : 	}
; 627  : 
; 628  : 	pFieldInfo = Delta_FindFieldInfo( pInfo, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	push	ecx
	call	_Delta_FindFieldInfo
	add	esp, 8
	mov	DWORD PTR _pFieldInfo$[ebp], eax

; 629  : 	if( !pFieldInfo )

	cmp	DWORD PTR _pFieldInfo$[ebp], 0
	jne	SHORT $LN6@Delta_Pars

; 630  : 	{
; 631  : 		Con_DPrintf( S_ERROR "Delta_ParseField: unable to find field %s\n", token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET ??_C@_0DG@JDOIGKAE@?$FO1Error?3?$FO7?5Delta_ParseField?3?5un@
	call	_Con_DPrintf
	add	esp, 8

; 632  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN6@Delta_Pars:

; 633  : 	}
; 634  : 
; 635  : 	*delta_script = COM_ParseFile( *delta_script, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax

; 636  : 	if( Q_strcmp( token, "," ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_01IHBHIGKO@?0@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@Delta_Pars

; 637  : 	{
; 638  : 		Con_DPrintf( S_ERROR "Delta_ParseField: expected ',', found '%s' instead\n", token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET ??_C@_0DP@IGHEDKAA@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@
	call	_Con_DPrintf
	add	esp, 8

; 639  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN7@Delta_Pars:

; 640  : 	}
; 641  : 
; 642  : 	// copy base info to new field
; 643  : 	pField->name = pFieldInfo->name;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _pFieldInfo$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 644  : 	pField->offset = pFieldInfo->offset;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _pFieldInfo$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 645  : 	pField->size = pFieldInfo->size;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _pFieldInfo$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 646  : 	pField->flags = 0;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN40@Delta_Pars:

; 647  : 
; 648  : 	// read delta-flags
; 649  : 	while(( *delta_script = COM_ParseFile( *delta_script, token )) != NULL )

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _delta_script$[ebp]
	cmp	DWORD PTR [edx], 0
	je	$LN3@Delta_Pars

; 650  : 	{
; 651  : 		if( !Q_strcmp( token, "," ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_01IHBHIGKO@?0@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@Delta_Pars

; 652  : 			break;	// end of flags argument

	jmp	$LN3@Delta_Pars
$LN8@Delta_Pars:

; 653  : 
; 654  : 		if( !Q_strcmp( token, "|" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_01DNKMNLPK@?$HM@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN9@Delta_Pars

; 655  : 			continue;

	jmp	SHORT $LN40@Delta_Pars
$LN9@Delta_Pars:

; 656  : 
; 657  : 		if (!Q_strcmp(token, "DT_BYTE"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_07GPMFONCK@DT_BYTE@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@Delta_Pars

; 658  : 			pField->flags |= DT_BYTE;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 1
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
	jmp	$LN28@Delta_Pars
$LN10@Delta_Pars:

; 659  : 		else if (!Q_strcmp(token, "DT_SHORT"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_08OHIJOAM@DT_SHORT@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@Delta_Pars

; 660  : 			pField->flags |= DT_SHORT;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 2
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
	jmp	$LN28@Delta_Pars
$LN12@Delta_Pars:

; 661  : 		else if (!Q_strcmp(token, "DT_FLOAT"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_08LGIDLGMN@DT_FLOAT@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN14@Delta_Pars

; 662  : 			pField->flags |= DT_FLOAT;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 4
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
	jmp	$LN28@Delta_Pars
$LN14@Delta_Pars:

; 663  : 		else if (!Q_strcmp(token, "DT_INTEGER"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_0L@DCAINGKI@DT_INTEGER@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN16@Delta_Pars

; 664  : 			pField->flags |= DT_INTEGER;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 8
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
	jmp	$LN28@Delta_Pars
$LN16@Delta_Pars:

; 665  : 		else if (!Q_strcmp(token, "DT_ANGLE"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_08EPPDENLJ@DT_ANGLE@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN18@Delta_Pars

; 666  : 			pField->flags |= DT_ANGLE;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
	jmp	$LN28@Delta_Pars
$LN18@Delta_Pars:

; 667  : 		else if (!Q_strcmp(token, "DT_TIMEWINDOW_8"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_0BA@MBNNCGLF@DT_TIMEWINDOW_8@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN20@Delta_Pars

; 668  : 			pField->flags |= DT_TIMEWINDOW_8;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
	jmp	$LN28@Delta_Pars
$LN20@Delta_Pars:

; 669  : 		else if (!Q_strcmp(token, "DT_TIMEWINDOW_BIG"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_0BC@IPEODBKI@DT_TIMEWINDOW_BIG@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN22@Delta_Pars

; 670  : 			pField->flags |= DT_TIMEWINDOW_BIG;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
	jmp	$LN28@Delta_Pars
$LN22@Delta_Pars:

; 671  : 		else if (!Q_strcmp(token, "DT_STRING"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_09MMENIKJM@DT_STRING@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN24@Delta_Pars

; 672  : 			pField->flags |= DT_STRING;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN28@Delta_Pars
$LN24@Delta_Pars:

; 673  : 		else if (!Q_strcmp(token, "DT_SIGNED"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_09GBKKAHLA@DT_SIGNED@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN26@Delta_Pars

; 674  : 			pField->flags |= DT_SIGNED;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN28@Delta_Pars
$LN26@Delta_Pars:

; 675  : 		else if (!Q_strcmp(token, "DT_FLAG"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_07NFFJOPFO@DT_FLAG@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN28@Delta_Pars

; 676  : 			pField->flags |= DT_FLAG;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 512				; 00000200H
	mov	edx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN28@Delta_Pars:

; 677  : 	}

	jmp	$LN40@Delta_Pars
$LN3@Delta_Pars:

; 678  : 
; 679  : 	if( Q_strcmp( token, "," ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_01IHBHIGKO@?0@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN29@Delta_Pars

; 680  : 	{
; 681  : 		Con_DPrintf( S_ERROR "Delta_ParseField: expected ',', found '%s' instead\n", token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET ??_C@_0DP@IGHEDKAA@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@
	call	_Con_DPrintf
	add	esp, 8

; 682  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN29@Delta_Pars:

; 683  : 	}
; 684  : 
; 685  : 	// read delta-bits
; 686  : 
; 687  : 	if(( *delta_script = COM_ParseFile( *delta_script, token )) == NULL )

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _delta_script$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN30@Delta_Pars

; 688  : 	{
; 689  : 		Con_DPrintf( S_ERROR "Delta_ReadField: %s field bits argument is missing\n", pField->name );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0DP@MFABHEKN@?$FO1Error?3?$FO7?5Delta_ReadField?3?5?$CFs?5@
	call	_Con_DPrintf
	add	esp, 8

; 690  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN30@Delta_Pars:

; 691  : 	}
; 692  : 
; 693  : 	pField->bits = Q_atoi( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 694  : 
; 695  : 	*delta_script = COM_ParseFile( *delta_script, token ); 

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax

; 696  : 	if( Q_strcmp( token, "," ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_01IHBHIGKO@?0@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN31@Delta_Pars

; 697  : 	{
; 698  : 		Con_DPrintf( S_ERROR "Delta_ReadField: expected ',', found '%s' instead\n", token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET ??_C@_0DO@NFBEMIEE@?$FO1Error?3?$FO7?5Delta_ReadField?3?5exp@
	call	_Con_DPrintf
	add	esp, 8

; 699  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN31@Delta_Pars:

; 700  : 	}
; 701  : 
; 702  : 	// read delta-multiplier
; 703  : 	if(( *delta_script = COM_ParseFile( *delta_script, token )) == NULL )

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _delta_script$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN32@Delta_Pars

; 704  : 	{
; 705  : 		Con_DPrintf( S_ERROR "Delta_ReadField: %s missing 'multiplier' argument\n", pField->name );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0DO@IPJICLBL@?$FO1Error?3?$FO7?5Delta_ReadField?3?5?$CFs?5@
	call	_Con_DPrintf
	add	esp, 8

; 706  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN32@Delta_Pars:

; 707  : 	}
; 708  : 
; 709  : 	pField->multiplier = Q_atof( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, DWORD PTR _pField$[ebp]
	fstp	DWORD PTR [ecx+16]

; 710  : 
; 711  : 	if( bPost )

	cmp	DWORD PTR _bPost$[ebp], 0
	je	$LN33@Delta_Pars

; 712  : 	{
; 713  : 		*delta_script = COM_ParseFile( *delta_script, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax

; 714  : 		if( Q_strcmp( token, "," ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_01IHBHIGKO@?0@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN35@Delta_Pars

; 715  : 		{
; 716  : 			Con_DPrintf( S_ERROR "Delta_ReadField: expected ',', found '%s' instead\n", token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET ??_C@_0DO@NFBEMIEE@?$FO1Error?3?$FO7?5Delta_ReadField?3?5exp@
	call	_Con_DPrintf
	add	esp, 8

; 717  : 			return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN35@Delta_Pars:

; 718  : 		}
; 719  : 
; 720  : 		// read delta-postmultiplier
; 721  : 		if(( *delta_script = COM_ParseFile( *delta_script, token )) == NULL )

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _delta_script$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN36@Delta_Pars

; 722  : 		{
; 723  : 			Con_DPrintf( S_ERROR "Delta_ReadField: %s missing 'post_multiply' argument\n", pField->name );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0EB@DEEKKIID@?$FO1Error?3?$FO7?5Delta_ReadField?3?5?$CFs?5@
	call	_Con_DPrintf
	add	esp, 8

; 724  : 			return false;

	xor	eax, eax
	jmp	$LN1@Delta_Pars
$LN36@Delta_Pars:

; 725  : 		}
; 726  : 
; 727  : 		pField->post_multiplier = Q_atof( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, DWORD PTR _pField$[ebp]
	fstp	DWORD PTR [ecx+20]

; 728  : 	}

	jmp	SHORT $LN34@Delta_Pars
$LN33@Delta_Pars:

; 729  : 	else
; 730  : 	{
; 731  : 		// to avoid division by zero
; 732  : 		pField->post_multiplier = 1.0f;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+20], xmm0
$LN34@Delta_Pars:

; 733  : 	}
; 734  : 
; 735  : 	// closing brace...
; 736  : 	*delta_script = COM_ParseFile( *delta_script, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax

; 737  : 	if( Q_strcmp( token, ")" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_01PKGAHCOL@?$CJ@
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN37@Delta_Pars

; 738  : 	{
; 739  : 		Con_DPrintf( S_ERROR "Delta_ParseField: expected ')', found '%s' instead\n", token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET ??_C@_0DP@GOFHMBHI@?$FO1Error?3?$FO7?5Delta_ParseField?3?5ex@
	call	_Con_DPrintf
	add	esp, 8

; 740  : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@Delta_Pars
$LN37@Delta_Pars:

; 741  : 	}
; 742  : 
; 743  : 	// ... and trying to parse optional ',' post-symbol
; 744  : 	oldpos = *delta_script;

	mov	eax, DWORD PTR _delta_script$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _oldpos$[ebp], ecx

; 745  : 	*delta_script = COM_ParseFile( *delta_script, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_COM_ParseFile
	add	esp, 8
	mov	ecx, DWORD PTR _delta_script$[ebp]
	mov	DWORD PTR [ecx], eax

; 746  : 	if( token[0] != ',' ) *delta_script = oldpos; // not a ','

	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _token$[ebp+ecx]
	cmp	edx, 44					; 0000002cH
	je	SHORT $LN38@Delta_Pars
	mov	eax, DWORD PTR _delta_script$[ebp]
	mov	ecx, DWORD PTR _oldpos$[ebp]
	mov	DWORD PTR [eax], ecx
$LN38@Delta_Pars:

; 747  : 
; 748  : 	return true;

	mov	eax, 1
$LN1@Delta_Pars:

; 749  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_ParseField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_AddField
_TEXT	SEGMENT
tv72 = -84						; size = 4
_i$ = -16						; size = 4
_pField$ = -12						; size = 4
_pFieldInfo$ = -8					; size = 4
_dt$ = -4						; size = 4
_pStructName$ = 8					; size = 4
_pName$ = 12						; size = 4
_flags$ = 16						; size = 4
_bits$ = 20						; size = 4
_mul$ = 24						; size = 4
_post_mul$ = 28						; size = 4
_Delta_AddField PROC					; COMDAT

; 486  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 487  : 	delta_info_t	*dt;
; 488  : 	delta_field_t	*pFieldInfo;
; 489  : 	delta_t		*pField;
; 490  : 	int		i;
; 491  : 
; 492  : 	// get the delta struct
; 493  : 	dt = Delta_FindStruct( pStructName );

	mov	eax, DWORD PTR _pStructName$[ebp]
	push	eax
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 494  : 	Assert( dt != NULL );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN12@Delta_AddF
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN13@Delta_AddF
$LN12@Delta_AddF:
	mov	DWORD PTR tv72[ebp], 0
$LN13@Delta_AddF:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_AddField@@9@9
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0L@MMLOMCJB@dt?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 495  : 
; 496  : 	// check for coexisting field
; 497  : 	for( i = 0, pField = dt->pFields; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx
	jmp	SHORT $LN4@Delta_AddF
$LN2@Delta_AddF:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@Delta_AddF:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@Delta_AddF

; 498  : 	{
; 499  : 		if( !Q_strcmp( pField->name, pName ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@Delta_AddF

; 500  : 		{
; 501  : 			Con_Reportf( "Delta_Add: %s->%s already existing\n", pStructName, pName );

	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pStructName$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CE@EKGAKGKC@Delta_Add?3?5?$CFs?9?$DO?$CFs?5already?5exist@
	call	_Con_Reportf
	add	esp, 12					; 0000000cH

; 502  : 			return false; // field already exist		

	xor	eax, eax
	jmp	$LN1@Delta_AddF
$LN8@Delta_AddF:

; 503  : 		}
; 504  : 	}

	jmp	SHORT $LN2@Delta_AddF
$LN3@Delta_AddF:

; 505  : 
; 506  : 	// find field description
; 507  : 	pFieldInfo = Delta_FindFieldInfo( dt->pInfo, pName );

	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_Delta_FindFieldInfo
	add	esp, 8
	mov	DWORD PTR _pFieldInfo$[ebp], eax

; 508  : 	if( !pFieldInfo )

	cmp	DWORD PTR _pFieldInfo$[ebp], 0
	jne	SHORT $LN9@Delta_AddF

; 509  : 	{
; 510  : 		Con_DPrintf( S_ERROR "Delta_Add: couldn't find description for %s->%s\n", pStructName, pName );

	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pStructName$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DM@HAJIKCAE@?$FO1Error?3?$FO7?5Delta_Add?3?5couldn?8t?5@
	call	_Con_DPrintf
	add	esp, 12					; 0000000cH

; 511  : 		return false;

	xor	eax, eax
	jmp	$LN1@Delta_AddF
$LN9@Delta_AddF:

; 512  : 	}
; 513  : 
; 514  : 	if( dt->numFields + 1 > dt->maxFields )

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _dt$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	jle	SHORT $LN10@Delta_AddF

; 515  : 	{
; 516  : 		Con_DPrintf( S_WARN "Delta_Add: can't add %s->%s encoder list is full\n", pStructName, pName );

	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pStructName$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DP@NKMAGDK@?$FO3Warning?3?$FO7?5Delta_Add?3?5can?8t?5a@
	call	_Con_DPrintf
	add	esp, 12					; 0000000cH

; 517  : 		return false; // too many fields specified (duplicated ?)

	xor	eax, eax
	jmp	$LN1@Delta_AddF
$LN10@Delta_AddF:

; 518  : 	}
; 519  : 
; 520  : 	// allocate a new one
; 521  : 	dt->pFields = Z_Realloc( dt->pFields, (dt->numFields + 1) * sizeof( delta_t ));	

	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_AddField@@9@9
	add	eax, 35					; 00000023H
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	1
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	shl	edx, 5
	push	edx
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _host+236
	push	edx
	call	__Mem_Realloc
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 522  : 	for( i = 0, pField = dt->pFields; i < dt->numFields; i++, pField++ );

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx
	jmp	SHORT $LN7@Delta_AddF
$LN5@Delta_AddF:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN7@Delta_AddF:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN6@Delta_AddF
	jmp	SHORT $LN5@Delta_AddF
$LN6@Delta_AddF:

; 523  : 
; 524  : 	// copy info to new field
; 525  : 	pField->name = pFieldInfo->name;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _pFieldInfo$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 526  : 	pField->offset = pFieldInfo->offset;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _pFieldInfo$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 527  : 	pField->size = pFieldInfo->size;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _pFieldInfo$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 528  : 	pField->flags = flags;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 529  : 	pField->bits = bits;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 530  : 	pField->multiplier = mul;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _mul$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 531  : 	pField->post_multiplier = post_mul;

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR _post_mul$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 532  : 	dt->numFields++;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 533  : 
; 534  : 	return true;

	mov	eax, 1
$LN1@Delta_AddF:

; 535  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_AddField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_IndexForFieldInfo
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pInfo$ = 8						; size = 4
_fieldName$ = 12					; size = 4
_Delta_IndexForFieldInfo PROC				; COMDAT

; 471  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 472  : 	int	i;
; 473  : 
; 474  : 	if( !fieldName || !*fieldName )

	cmp	DWORD PTR _fieldName$[ebp], 0
	je	SHORT $LN6@Delta_Inde
	mov	eax, DWORD PTR _fieldName$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@Delta_Inde
$LN6@Delta_Inde:

; 475  : 		return -1;	

	or	eax, -1
	jmp	SHORT $LN1@Delta_Inde
$LN5@Delta_Inde:

; 476  : 
; 477  : 	for( i = 0; pInfo->name; i++, pInfo++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Inde
$LN2@Delta_Inde:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _pInfo$[ebp], ecx
$LN4@Delta_Inde:
	mov	eax, DWORD PTR _pInfo$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Delta_Inde

; 478  : 	{
; 479  : 		if( !Q_strcmp( pInfo->name, fieldName ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _fieldName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_Inde

; 480  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN1@Delta_Inde
$LN7@Delta_Inde:

; 481  : 	}

	jmp	SHORT $LN2@Delta_Inde
$LN3@Delta_Inde:

; 482  : 	return -1;

	or	eax, -1
$LN1@Delta_Inde:

; 483  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_IndexForFieldInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_FindFieldInfo
_TEXT	SEGMENT
_pInfo$ = 8						; size = 4
_fieldName$ = 12					; size = 4
_Delta_FindFieldInfo PROC				; COMDAT

; 458  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 459  : 	if( !fieldName || !*fieldName )

	cmp	DWORD PTR _fieldName$[ebp], 0
	je	SHORT $LN6@Delta_Find
	mov	eax, DWORD PTR _fieldName$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@Delta_Find
$LN6@Delta_Find:

; 460  : 		return NULL;	

	xor	eax, eax
	jmp	SHORT $LN1@Delta_Find
$LN5@Delta_Find:

; 461  : 
; 462  : 	for( ; pInfo->name; pInfo++ )

	jmp	SHORT $LN4@Delta_Find
$LN2@Delta_Find:
	mov	eax, DWORD PTR _pInfo$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pInfo$[ebp], eax
$LN4@Delta_Find:
	mov	eax, DWORD PTR _pInfo$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Delta_Find

; 463  : 	{
; 464  : 		if( !Q_strcmp( pInfo->name, fieldName ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _fieldName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_Find

; 465  : 			return (delta_field_t *)pInfo;

	mov	eax, DWORD PTR _pInfo$[ebp]
	jmp	SHORT $LN1@Delta_Find
$LN7@Delta_Find:

; 466  : 	}

	jmp	SHORT $LN2@Delta_Find
$LN3@Delta_Find:

; 467  : 	return NULL;

	xor	eax, eax
$LN1@Delta_Find:

; 468  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_FindFieldInfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_CustomEncode
_TEXT	SEGMENT
tv70 = -72						; size = 4
_i$ = -4						; size = 4
_dt$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_Delta_CustomEncode PROC				; COMDAT

; 442  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 443  : 	int	i;
; 444  : 
; 445  : 	Assert( dt != NULL );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN7@Delta_Cust
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN8@Delta_Cust
$LN7@Delta_Cust:
	mov	DWORD PTR tv70[ebp], 0
$LN8@Delta_Cust:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_CustomEncode@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0L@MMLOMCJB@dt?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 446  : 
; 447  : 	// set all fields is active by default
; 448  : 	for( i = 0; i < dt->numFields; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Cust
$LN2@Delta_Cust:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Delta_Cust:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@Delta_Cust

; 449  : 		dt->pFields[i].bInactive = false;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+eax+28], 0
	jmp	SHORT $LN2@Delta_Cust
$LN3@Delta_Cust:

; 450  : 
; 451  : 	if( dt->userCallback )

	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN1@Delta_Cust

; 452  : 	{
; 453  : 		dt->userCallback( dt->pFields, from, to );

	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 12					; 0000000cH
$LN1@Delta_Cust:

; 454  : 	}
; 455  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_CustomEncode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_FindStructByDelta
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pFields$ = 8						; size = 4
_Delta_FindStructByDelta PROC				; COMDAT

; 427  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 428  : 	int	i;
; 429  : 
; 430  : 	if( !pFields ) return NULL;

	cmp	DWORD PTR _pFields$[ebp], 0
	jne	SHORT $LN5@Delta_Find
	xor	eax, eax
	jmp	SHORT $LN1@Delta_Find
$LN5@Delta_Find:

; 431  : 
; 432  : 	for( i = 0; i < NUM_FIELDS( dt_info ); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Find
$LN2@Delta_Find:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Delta_Find:
	cmp	DWORD PTR _i$[ebp], 8
	jae	SHORT $LN3@Delta_Find

; 433  : 	{
; 434  : 		if( dt_info[i].pFields == pFields )

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _dt_info[eax+16]
	cmp	ecx, DWORD PTR _pFields$[ebp]
	jne	SHORT $LN6@Delta_Find

; 435  : 			return &dt_info[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, OFFSET _dt_info
	jmp	SHORT $LN1@Delta_Find
$LN6@Delta_Find:

; 436  : 	}

	jmp	SHORT $LN2@Delta_Find
$LN3@Delta_Find:

; 437  : 	// found nothing
; 438  : 	return NULL;

	xor	eax, eax
$LN1@Delta_Find:

; 439  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_FindStructByDelta ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_FindStructByEncoder
_TEXT	SEGMENT
_i$ = -4						; size = 4
_encoderName$ = 8					; size = 4
_Delta_FindStructByEncoder PROC				; COMDAT

; 411  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 412  : 	int	i;
; 413  : 
; 414  : 	if( !encoderName || !encoderName[0] )

	cmp	DWORD PTR _encoderName$[ebp], 0
	je	SHORT $LN6@Delta_Find
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _encoderName$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN5@Delta_Find
$LN6@Delta_Find:

; 415  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@Delta_Find
$LN5@Delta_Find:

; 416  : 
; 417  : 	for( i = 0; i < NUM_FIELDS( dt_info ); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Find
$LN2@Delta_Find:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Delta_Find:
	cmp	DWORD PTR _i$[ebp], 8
	jae	SHORT $LN3@Delta_Find

; 418  : 	{
; 419  : 		if( !Q_stricmp( dt_info[i].funcName, encoderName ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _encoderName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	add	ecx, OFFSET _dt_info+24
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_Find

; 420  : 			return &dt_info[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, OFFSET _dt_info
	jmp	SHORT $LN1@Delta_Find
$LN7@Delta_Find:

; 421  : 	}

	jmp	SHORT $LN2@Delta_Find
$LN3@Delta_Find:

; 422  : 	// found nothing
; 423  : 	return NULL;

	xor	eax, eax
$LN1@Delta_Find:

; 424  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_FindStructByEncoder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_FindStruct
_TEXT	SEGMENT
_i$ = -4						; size = 4
_name$ = 8						; size = 4
_Delta_FindStruct PROC					; COMDAT

; 379  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 380  : 	int	i;
; 381  : 
; 382  : 	if( !name || !name[0] )

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN6@Delta_Find
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _name$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN5@Delta_Find
$LN6@Delta_Find:

; 383  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@Delta_Find
$LN5@Delta_Find:

; 384  : 
; 385  : 	for( i = 0; i < NUM_FIELDS( dt_info ); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Find
$LN2@Delta_Find:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Delta_Find:
	cmp	DWORD PTR _i$[ebp], 8
	jae	SHORT $LN3@Delta_Find

; 386  : 	{
; 387  : 		if( !Q_stricmp( dt_info[i].pName, name ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _dt_info[ecx]
	push	edx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_Find

; 388  : 			return &dt_info[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, OFFSET _dt_info
	jmp	SHORT $LN1@Delta_Find
$LN7@Delta_Find:

; 389  : 	}

	jmp	SHORT $LN2@Delta_Find
$LN3@Delta_Find:

; 390  : 
; 391  : 	Con_DPrintf( S_WARN "Struct %s not found in delta_info\n", name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0DA@FCLJGIAG@?$FO3Warning?3?$FO7?5Struct?5?$CFs?5not?5foun@
	call	_Con_DPrintf
	add	esp, 8

; 392  : 
; 393  : 	// found nothing
; 394  : 	return NULL;

	xor	eax, eax
$LN1@Delta_Find:

; 395  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_FindStruct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_TestBaseline
_TEXT	SEGMENT
tv94 = -88						; size = 4
tv84 = -88						; size = 4
_numChanges$ = -20					; size = 4
_countBits$ = -16					; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_player$ = 16						; size = 4
_timebase$ = 20						; size = 4
_Delta_TestBaseline PROC				; COMDAT

; 1171 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 1172 : 	delta_info_t	*dt = NULL;

	mov	DWORD PTR _dt$[ebp], 0

; 1173 : 	delta_t		*pField;
; 1174 : 	int		i, countBits;
; 1175 : 	int		numChanges = 0;

	mov	DWORD PTR _numChanges$[ebp], 0

; 1176 : 
; 1177 : 	countBits = MAX_ENTITY_BITS + 2;

	mov	DWORD PTR _countBits$[ebp], 15		; 0000000fH

; 1178 : 
; 1179 : 	if( to == NULL )

	cmp	DWORD PTR _to$[ebp], 0
	jne	SHORT $LN5@Delta_Test

; 1180 : 	{
; 1181 : 		if( from == NULL ) return 0;

	cmp	DWORD PTR _from$[ebp], 0
	jne	SHORT $LN6@Delta_Test
	xor	eax, eax
	jmp	$LN1@Delta_Test
$LN6@Delta_Test:

; 1182 : 		return countBits;

	mov	eax, DWORD PTR _countBits$[ebp]
	jmp	$LN1@Delta_Test
$LN5@Delta_Test:

; 1183 : 	}
; 1184 : 
; 1185 : 	if( FBitSet( to->entityType, ENTITY_BEAM ))

	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN7@Delta_Test

; 1186 : 		dt = Delta_FindStruct( "custom_entity_state_t" );

	push	OFFSET ??_C@_0BG@ILEMGINM@custom_entity_state_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax
	jmp	SHORT $LN10@Delta_Test
$LN7@Delta_Test:

; 1187 : 	else if( player )

	cmp	DWORD PTR _player$[ebp], 0
	je	SHORT $LN9@Delta_Test

; 1188 : 		dt = Delta_FindStruct( "entity_state_player_t" );

	push	OFFSET ??_C@_0BG@OIPCIHDE@entity_state_player_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax
	jmp	SHORT $LN10@Delta_Test
$LN9@Delta_Test:

; 1189 : 	else dt = Delta_FindStruct( "entity_state_t" );

	push	OFFSET ??_C@_0P@ONGALGCD@entity_state_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax
$LN10@Delta_Test:

; 1190 : 
; 1191 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN15@Delta_Test
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN15@Delta_Test
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN16@Delta_Test
$LN15@Delta_Test:
	mov	DWORD PTR tv84[ebp], 0
$LN16@Delta_Test:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??Delta_TestBaseline@@9@9
	add	ecx, 20					; 00000014H
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv84[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1192 : 
; 1193 : 	countBits++; // entityType flag

	mov	eax, DWORD PTR _countBits$[ebp]
	add	eax, 1
	mov	DWORD PTR _countBits$[ebp], eax

; 1194 : 
; 1195 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1196 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN17@Delta_Test
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN18@Delta_Test
$LN17@Delta_Test:
	mov	DWORD PTR tv94[ebp], 0
$LN18@Delta_Test:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_TestBaseline@@9@9
	add	eax, 25					; 00000019H
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv94[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1197 : 
; 1198 : 	// activate fields and call custom encode func
; 1199 : 	Delta_CustomEncode( dt, from, to );

	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	push	edx
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH

; 1200 : 
; 1201 : 	// process fields
; 1202 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Test
$LN2@Delta_Test:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@Delta_Test:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@Delta_Test

; 1203 : 	{
; 1204 : 		// flag about field change (sets always)
; 1205 : 		countBits++;

	mov	eax, DWORD PTR _countBits$[ebp]
	add	eax, 1
	mov	DWORD PTR _countBits$[ebp], eax

; 1206 : 
; 1207 : 		if( !Delta_CompareField( pField, from, to, timebase ))

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	call	_Delta_CompareField
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN13@Delta_Test

; 1208 : 		{
; 1209 : 			// strings are handled difference
; 1210 : 			if( FBitSet( pField->flags, DT_STRING ))

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 128				; 00000080H
	je	SHORT $LN12@Delta_Test

; 1211 : 				countBits += Q_strlen(((byte *)to + pField->offset )) * 8;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _to$[ebp]
	add	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_Q_strlen
	add	esp, 4
	mov	edx, DWORD PTR _countBits$[ebp]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _countBits$[ebp], eax
	jmp	SHORT $LN13@Delta_Test
$LN12@Delta_Test:

; 1212 : 			else countBits += pField->bits;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR _countBits$[ebp]
	add	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _countBits$[ebp], ecx
$LN13@Delta_Test:

; 1213 : 		}
; 1214 : 	}

	jmp	$LN2@Delta_Test
$LN3@Delta_Test:

; 1215 : 
; 1216 : 	// g-cont. compare bitcount directly no reason to call BitByte here
; 1217 : 	return countBits;

	mov	eax, DWORD PTR _countBits$[ebp]
$LN1@Delta_Test:

; 1218 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_TestBaseline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _MSG_ReadDeltaEntity
_TEXT	SEGMENT
tv179 = -96						; size = 4
tv170 = -96						; size = 4
tv129 = -96						; size = 4
_backup$1 = -28						; size = 4
_backup$2 = -24						; size = 4
_baseline_offset$ = -20					; size = 4
_fRemoveType$ = -16					; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_number$ = 20						; size = 4
_delta_type$ = 24					; size = 4
_timebase$ = 28						; size = 4
_MSG_ReadDeltaEntity PROC				; COMDAT

; 1915 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 1916 : 	delta_info_t	*dt = NULL;

	mov	DWORD PTR _dt$[ebp], 0

; 1917 : 	delta_t		*pField;
; 1918 : 	int		i, fRemoveType;
; 1919 : 	int		baseline_offset = 0;

	mov	DWORD PTR _baseline_offset$[ebp], 0

; 1920 : 
; 1921 : 	if( number < 0 || number >= clgame.maxEntities )

	cmp	DWORD PTR _number$[ebp], 0
	jl	SHORT $LN6@MSG_ReadDe
	mov	eax, DWORD PTR _number$[ebp]
	cmp	eax, DWORD PTR _clgame+1008
	jl	SHORT $LN5@MSG_ReadDe
$LN6@MSG_ReadDe:

; 1922 : 		Host_Error( "MSG_ReadDeltaEntity: bad delta entity number: %i\n", number );

	mov	eax, DWORD PTR _number$[ebp]
	push	eax
	push	OFFSET ??_C@_0DC@KCPLFFAG@MSG_ReadDeltaEntity?3?5bad?5delta?5@
	call	_Host_Error
	add	esp, 8
$LN5@MSG_ReadDe:

; 1923 : 
; 1924 : 	fRemoveType = MSG_ReadUBitLong( msg, 2 );

	push	2
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadUBitLong
	add	esp, 8
	mov	DWORD PTR _fRemoveType$[ebp], eax

; 1925 : 
; 1926 : 	if( fRemoveType )

	cmp	DWORD PTR _fRemoveType$[ebp], 0
	je	SHORT $LN7@MSG_ReadDe

; 1927 : 	{
; 1928 : 		// check for a remove
; 1929 : 		memset( to, 0, sizeof( *to ));

	push	452					; 000001c4H
	push	0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1930 : 
; 1931 : 		if( fRemoveType & 1 )

	mov	eax, DWORD PTR _fRemoveType$[ebp]
	and	eax, 1
	je	SHORT $LN8@MSG_ReadDe

; 1932 : 		{
; 1933 : 			// removed from delta-message
; 1934 : 			return false;

	xor	eax, eax
	jmp	$LN1@MSG_ReadDe
$LN8@MSG_ReadDe:

; 1935 :                     }
; 1936 : 
; 1937 : 		if( fRemoveType & 2 )

	mov	eax, DWORD PTR _fRemoveType$[ebp]
	and	eax, 2
	je	SHORT $LN9@MSG_ReadDe

; 1938 : 		{	
; 1939 : 			// entity was removed from server
; 1940 : 			to->number = -1;

	mov	eax, DWORD PTR _to$[ebp]
	mov	DWORD PTR [eax+4], -1

; 1941 : 			return false;

	xor	eax, eax
	jmp	$LN1@MSG_ReadDe
$LN9@MSG_ReadDe:

; 1942 : 		}
; 1943 : 
; 1944 : 		Host_Error( "MSG_ReadDeltaEntity: unknown update type %i\n", fRemoveType );

	mov	eax, DWORD PTR _fRemoveType$[ebp]
	push	eax
	push	OFFSET ??_C@_0CN@KADMBLJH@MSG_ReadDeltaEntity?3?5unknown?5up@
	call	_Host_Error
	add	esp, 8
$LN7@MSG_ReadDe:

; 1945 : 	}
; 1946 : 
; 1947 : 	if( MSG_ReadOneBit( msg ))

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadOneBit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@MSG_ReadDe

; 1948 : 		baseline_offset = MSG_ReadSBitLong( msg, 7 );

	push	7
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadSBitLong
	add	esp, 8
	mov	DWORD PTR _baseline_offset$[ebp], eax
$LN10@MSG_ReadDe:

; 1949 : 
; 1950 : 	if( baseline_offset != 0 )

	cmp	DWORD PTR _baseline_offset$[ebp], 0
	je	$LN16@MSG_ReadDe

; 1951 : 	{
; 1952 : 		if( delta_type == DELTA_STATIC )

	cmp	DWORD PTR _delta_type$[ebp], 2
	jne	SHORT $LN12@MSG_ReadDe

; 1953 : 		{
; 1954 : 			int backup = Q_max( 0, clgame.numStatics - abs( baseline_offset ));

	mov	eax, DWORD PTR _baseline_offset$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _clgame+1016
	sub	ecx, eax
	jns	SHORT $LN23@MSG_ReadDe
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN24@MSG_ReadDe
$LN23@MSG_ReadDe:
	mov	edx, DWORD PTR _baseline_offset$[ebp]
	push	edx
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _clgame+1016
	sub	ecx, eax
	mov	DWORD PTR tv129[ebp], ecx
$LN24@MSG_ReadDe:
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _backup$2[ebp], edx

; 1955 : 			from = &clgame.static_entities[backup].baseline;

	imul	eax, DWORD PTR _backup$2[ebp], 3336
	mov	ecx, DWORD PTR _clgame+1000
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _from$[ebp], edx

; 1956 : 		}

	jmp	SHORT $LN16@MSG_ReadDe
$LN12@MSG_ReadDe:

; 1957 : 		else if( baseline_offset > 0 )

	cmp	DWORD PTR _baseline_offset$[ebp], 0
	jle	SHORT $LN14@MSG_ReadDe

; 1958 : 		{
; 1959 : 			int backup = cls.next_client_entities - baseline_offset;

	mov	eax, DWORD PTR _cls+295008
	sub	eax, DWORD PTR _baseline_offset$[ebp]
	mov	DWORD PTR _backup$1[ebp], eax

; 1960 : 			from = &cls.packet_entities[backup % cls.num_client_entities];

	mov	eax, DWORD PTR _backup$1[ebp]
	cdq
	idiv	DWORD PTR _cls+295004
	imul	eax, edx, 452
	add	eax, DWORD PTR _cls+295012
	mov	DWORD PTR _from$[ebp], eax

; 1961 : 		}

	jmp	SHORT $LN16@MSG_ReadDe
$LN14@MSG_ReadDe:

; 1962 : 		else
; 1963 : 		{
; 1964 : 			baseline_offset = abs( baseline_offset );

	mov	eax, DWORD PTR _baseline_offset$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	DWORD PTR _baseline_offset$[ebp], eax

; 1965 : 			if( baseline_offset < cl.instanced_baseline_count )

	mov	eax, DWORD PTR _baseline_offset$[ebp]
	cmp	eax, DWORD PTR _cl+2241936
	jge	SHORT $LN16@MSG_ReadDe

; 1966 : 				from = &cl.instanced_baseline[baseline_offset];

	imul	eax, DWORD PTR _baseline_offset$[ebp], 452
	add	eax, OFFSET _cl+2213008
	mov	DWORD PTR _from$[ebp], eax
$LN16@MSG_ReadDe:

; 1967 : 		}
; 1968 : 	}
; 1969 : 
; 1970 : 	// g-cont. probably is redundant
; 1971 : 	*to = *from;

	mov	ecx, 113				; 00000071H
	mov	esi, DWORD PTR _from$[ebp]
	mov	edi, DWORD PTR _to$[ebp]
	rep movsd

; 1972 : 
; 1973 : 	if( MSG_ReadOneBit( msg ))

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadOneBit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN17@MSG_ReadDe

; 1974 : 		to->entityType = MSG_ReadUBitLong( msg, 2 );

	push	2
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadUBitLong
	add	esp, 8
	mov	ecx, DWORD PTR _to$[ebp]
	mov	DWORD PTR [ecx], eax
$LN17@MSG_ReadDe:

; 1975 : 	to->number = number;

	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR _number$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1976 : 
; 1977 : 	if( FBitSet( to->entityType, ENTITY_BEAM ))

	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN18@MSG_ReadDe

; 1978 : 	{
; 1979 : 		dt = Delta_FindStruct( "custom_entity_state_t" );

	push	OFFSET ??_C@_0BG@ILEMGINM@custom_entity_state_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1980 : 	}

	jmp	SHORT $LN21@MSG_ReadDe
$LN18@MSG_ReadDe:

; 1981 : 	else if( delta_type == DELTA_PLAYER )

	cmp	DWORD PTR _delta_type$[ebp], 1
	jne	SHORT $LN20@MSG_ReadDe

; 1982 : 	{
; 1983 : 		dt = Delta_FindStruct( "entity_state_player_t" );

	push	OFFSET ??_C@_0BG@OIPCIHDE@entity_state_player_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1984 : 	}

	jmp	SHORT $LN21@MSG_ReadDe
$LN20@MSG_ReadDe:

; 1985 : 	else
; 1986 : 	{
; 1987 : 		dt = Delta_FindStruct( "entity_state_t" );

	push	OFFSET ??_C@_0P@ONGALGCD@entity_state_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax
$LN21@MSG_ReadDe:

; 1988 : 	}
; 1989 : 
; 1990 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN25@MSG_ReadDe
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN25@MSG_ReadDe
	mov	DWORD PTR tv170[ebp], 1
	jmp	SHORT $LN26@MSG_ReadDe
$LN25@MSG_ReadDe:
	mov	DWORD PTR tv170[ebp], 0
$LN26@MSG_ReadDe:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??MSG_ReadDeltaEntity@@9@9
	add	ecx, 75					; 0000004bH
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv170[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1991 : 
; 1992 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1993 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN27@MSG_ReadDe
	mov	DWORD PTR tv179[ebp], 1
	jmp	SHORT $LN28@MSG_ReadDe
$LN27@MSG_ReadDe:
	mov	DWORD PTR tv179[ebp], 0
$LN28@MSG_ReadDe:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??MSG_ReadDeltaEntity@@9@9
	add	eax, 78					; 0000004eH
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv179[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1994 : 
; 1995 : 	// process fields
; 1996 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_ReadDe
$LN2@MSG_ReadDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@MSG_ReadDe:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_ReadDe

; 1997 : 	{
; 1998 : 		Delta_ReadField( msg, pField, from, to, timebase );

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_ReadField
	add	esp, 20					; 00000014H

; 1999 : 	}

	jmp	SHORT $LN2@MSG_ReadDe
$LN3@MSG_ReadDe:

; 2000 : 
; 2001 : 	// message parsed
; 2002 : 	return true;

	mov	eax, 1
$LN1@MSG_ReadDe:

; 2003 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_ReadDeltaEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _MSG_WriteDeltaEntity
_TEXT	SEGMENT
tv170 = -92						; size = 4
tv161 = -92						; size = 4
_fRemoveType$1 = -24					; size = 4
_numChanges$ = -20					; size = 4
_startBit$ = -16					; size = 4
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_msg$ = 16						; size = 4
_force$ = 20						; size = 4
_delta_type$ = 24					; size = 4
_timebase$ = 28						; size = 4
_baseline$ = 32						; size = 4
_MSG_WriteDeltaEntity PROC				; COMDAT

; 1813 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 1814 : 	delta_info_t	*dt = NULL;

	mov	DWORD PTR _dt$[ebp], 0

; 1815 : 	delta_t		*pField;
; 1816 : 	int		i, startBit;
; 1817 : 	int		numChanges = 0;

	mov	DWORD PTR _numChanges$[ebp], 0

; 1818 : 
; 1819 : 	if( to == NULL )

	cmp	DWORD PTR _to$[ebp], 0
	jne	SHORT $LN8@MSG_WriteD

; 1820 : 	{
; 1821 : 		int	fRemoveType;
; 1822 : 
; 1823 : 		if( from == NULL ) return;

	cmp	DWORD PTR _from$[ebp], 0
	jne	SHORT $LN9@MSG_WriteD
	jmp	$LN26@MSG_WriteD
$LN9@MSG_WriteD:

; 1824 : 
; 1825 : 		// a NULL to is a delta remove message
; 1826 : 		MSG_WriteUBitLong( msg, from->number, MAX_ENTITY_BITS );

	push	13					; 0000000dH
	mov	eax, DWORD PTR _from$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 1827 : 
; 1828 : 		// fRemoveType:
; 1829 : 		// 0 - keep alive, has delta-update
; 1830 : 		// 1 - remove from delta message (but keep states)
; 1831 : 		// 2 - completely remove from server
; 1832 : 		if( force ) fRemoveType = 2;

	cmp	DWORD PTR _force$[ebp], 0
	je	SHORT $LN10@MSG_WriteD
	mov	DWORD PTR _fRemoveType$1[ebp], 2
	jmp	SHORT $LN11@MSG_WriteD
$LN10@MSG_WriteD:

; 1833 : 		else fRemoveType = 1;

	mov	DWORD PTR _fRemoveType$1[ebp], 1
$LN11@MSG_WriteD:

; 1834 : 
; 1835 : 		MSG_WriteUBitLong( msg, fRemoveType, 2 );

	push	2
	mov	eax, DWORD PTR _fRemoveType$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 1836 : 		return;

	jmp	$LN26@MSG_WriteD
$LN8@MSG_WriteD:

; 1837 : 	}
; 1838 : 
; 1839 : 	startBit = msg->iCurBit;

	mov	eax, DWORD PTR _msg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _startBit$[ebp], ecx

; 1840 : 
; 1841 : 	if( to->number < 0 || to->number >= GI->max_edicts )

	mov	eax, DWORD PTR _to$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jl	SHORT $LN13@MSG_WriteD
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR _SI+768
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+1656]
	jl	SHORT $LN12@MSG_WriteD
$LN13@MSG_WriteD:

; 1842 : 		Host_Error( "MSG_WriteDeltaEntity: Bad entity number: %i\n", to->number );

	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0CN@OAHMNAOF@MSG_WriteDeltaEntity?3?5Bad?5entit@
	call	_Host_Error
	add	esp, 8
$LN12@MSG_WriteD:

; 1843 : 
; 1844 : 	MSG_WriteUBitLong( msg, to->number, MAX_ENTITY_BITS );

	push	13					; 0000000dH
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 1845 : 	MSG_WriteUBitLong( msg, 0, 2 ); // alive

	push	2
	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 1846 : 
; 1847 : 	if( baseline != 0 )

	cmp	DWORD PTR _baseline$[ebp], 0
	je	SHORT $LN14@MSG_WriteD

; 1848 : 	{
; 1849 : 		MSG_WriteOneBit( msg, 1 );

	push	1
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8

; 1850 : 		MSG_WriteSBitLong( msg, baseline, 7 );

	push	7
	mov	eax, DWORD PTR _baseline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteSBitLong
	add	esp, 12					; 0000000cH

; 1851 : 	}

	jmp	SHORT $LN15@MSG_WriteD
$LN14@MSG_WriteD:

; 1852 : 	else MSG_WriteOneBit( msg, 0 ); 

	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8
$LN15@MSG_WriteD:

; 1853 : 
; 1854 : 	if( force || ( to->entityType != from->entityType ))

	cmp	DWORD PTR _force$[ebp], 0
	jne	SHORT $LN18@MSG_WriteD
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN16@MSG_WriteD
$LN18@MSG_WriteD:

; 1855 : 	{
; 1856 : 		MSG_WriteOneBit( msg, 1 );

	push	1
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8

; 1857 : 		MSG_WriteUBitLong( msg, to->entityType, 2 );

	push	2
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 1858 : 		numChanges++;

	mov	eax, DWORD PTR _numChanges$[ebp]
	add	eax, 1
	mov	DWORD PTR _numChanges$[ebp], eax

; 1859 : 	}

	jmp	SHORT $LN17@MSG_WriteD
$LN16@MSG_WriteD:

; 1860 : 	else MSG_WriteOneBit( msg, 0 );

	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8
$LN17@MSG_WriteD:

; 1861 : 
; 1862 : 	if( FBitSet( to->entityType, ENTITY_BEAM ))

	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN19@MSG_WriteD

; 1863 : 	{
; 1864 : 		dt = Delta_FindStruct( "custom_entity_state_t" );

	push	OFFSET ??_C@_0BG@ILEMGINM@custom_entity_state_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1865 : 	}

	jmp	SHORT $LN22@MSG_WriteD
$LN19@MSG_WriteD:

; 1866 : 	else if( delta_type == DELTA_PLAYER )

	cmp	DWORD PTR _delta_type$[ebp], 1
	jne	SHORT $LN21@MSG_WriteD

; 1867 : 	{
; 1868 : 		dt = Delta_FindStruct( "entity_state_player_t" );

	push	OFFSET ??_C@_0BG@OIPCIHDE@entity_state_player_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1869 : 	}

	jmp	SHORT $LN22@MSG_WriteD
$LN21@MSG_WriteD:

; 1870 : 	else
; 1871 : 	{
; 1872 : 		dt = Delta_FindStruct( "entity_state_t" );

	push	OFFSET ??_C@_0P@ONGALGCD@entity_state_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax
$LN22@MSG_WriteD:

; 1873 : 	}
; 1874 : 
; 1875 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN28@MSG_WriteD
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN28@MSG_WriteD
	mov	DWORD PTR tv161[ebp], 1
	jmp	SHORT $LN29@MSG_WriteD
$LN28@MSG_WriteD:
	mov	DWORD PTR tv161[ebp], 0
$LN29@MSG_WriteD:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??MSG_WriteDeltaEntity@@9@9
	add	ecx, 62					; 0000003eH
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv161[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1876 : 		
; 1877 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1878 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN30@MSG_WriteD
	mov	DWORD PTR tv170[ebp], 1
	jmp	SHORT $LN31@MSG_WriteD
$LN30@MSG_WriteD:
	mov	DWORD PTR tv170[ebp], 0
$LN31@MSG_WriteD:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??MSG_WriteDeltaEntity@@9@9
	add	eax, 65					; 00000041H
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv170[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1879 : 
; 1880 : 	if( delta_type == DELTA_STATIC )

	cmp	DWORD PTR _delta_type$[ebp], 2
	jne	SHORT $LN23@MSG_WriteD

; 1881 : 	{
; 1882 : 		// static entities won't to be custom encoded
; 1883 : 		for( i = 0; i < dt->numFields; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_WriteD
$LN2@MSG_WriteD:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@MSG_WriteD:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_WriteD

; 1884 : 			dt->pFields[i].bInactive = false;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+eax+28], 0
	jmp	SHORT $LN2@MSG_WriteD
$LN3@MSG_WriteD:

; 1885 : 	}

	jmp	SHORT $LN24@MSG_WriteD
$LN23@MSG_WriteD:

; 1886 : 	else
; 1887 : 	{
; 1888 : 		// activate fields and call custom encode func
; 1889 : 		Delta_CustomEncode( dt, from, to );

	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	push	edx
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH
$LN24@MSG_WriteD:

; 1890 : 	}
; 1891 : 
; 1892 : 	// process fields
; 1893 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@MSG_WriteD
$LN5@MSG_WriteD:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN7@MSG_WriteD:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN6@MSG_WriteD

; 1894 : 	{
; 1895 : 		if( Delta_WriteField( msg, pField, from, to, timebase ))

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_WriteField
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN25@MSG_WriteD

; 1896 : 			numChanges++;

	mov	eax, DWORD PTR _numChanges$[ebp]
	add	eax, 1
	mov	DWORD PTR _numChanges$[ebp], eax
$LN25@MSG_WriteD:

; 1897 : 	}

	jmp	SHORT $LN5@MSG_WriteD
$LN6@MSG_WriteD:

; 1898 : 
; 1899 : 	// if we have no changes - kill the message
; 1900 : 	if( !numChanges && !force ) MSG_SeekToBit( msg, startBit, SEEK_SET );

	cmp	DWORD PTR _numChanges$[ebp], 0
	jne	SHORT $LN26@MSG_WriteD
	cmp	DWORD PTR _force$[ebp], 0
	jne	SHORT $LN26@MSG_WriteD
	push	0
	mov	eax, DWORD PTR _startBit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_SeekToBit
	add	esp, 12					; 0000000cH
$LN26@MSG_WriteD:

; 1901 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_WriteDeltaEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _MSG_ReadWeaponData
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv74 = -80						; size = 4
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_timebase$ = 20						; size = 4
_MSG_ReadWeaponData PROC				; COMDAT

; 1774 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1775 : 	delta_t		*pField;
; 1776 : 	delta_info_t	*dt;
; 1777 : 	int		i;
; 1778 : 
; 1779 : 	dt = Delta_FindStruct( "weapon_data_t" );

	push	OFFSET ??_C@_0O@NIIONHNK@weapon_data_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1780 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@MSG_ReadWe
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN6@MSG_ReadWe
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@MSG_ReadWe
$LN6@MSG_ReadWe:
	mov	DWORD PTR tv74[ebp], 0
$LN7@MSG_ReadWe:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??MSG_ReadWeaponData@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1781 : 
; 1782 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1783 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@MSG_ReadWe
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN9@MSG_ReadWe
$LN8@MSG_ReadWe:
	mov	DWORD PTR tv83[ebp], 0
$LN9@MSG_ReadWe:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??MSG_ReadWeaponData@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1784 : 
; 1785 : 	*to = *from;

	mov	ecx, 26					; 0000001aH
	mov	esi, DWORD PTR _from$[ebp]
	mov	edi, DWORD PTR _to$[ebp]
	rep movsd

; 1786 : 
; 1787 : 	// process fields
; 1788 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_ReadWe
$LN2@MSG_ReadWe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@MSG_ReadWe:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_ReadWe

; 1789 : 	{
; 1790 : 		Delta_ReadField( msg, pField, from, to, timebase );

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_ReadField
	add	esp, 20					; 00000014H

; 1791 : 	}

	jmp	SHORT $LN2@MSG_ReadWe
$LN3@MSG_ReadWe:

; 1792 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_ReadWeaponData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _MSG_WriteWeaponData
_TEXT	SEGMENT
tv83 = -88						; size = 4
tv74 = -88						; size = 4
_numChanges$ = -20					; size = 4
_startBit$ = -16					; size = 4
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_timebase$ = 20						; size = 4
_index$ = 24						; size = 4
_MSG_WriteWeaponData PROC				; COMDAT

; 1735 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 1736 : 	delta_t		*pField;
; 1737 : 	delta_info_t	*dt;
; 1738 : 	int		i, startBit;
; 1739 : 	int		numChanges = 0;

	mov	DWORD PTR _numChanges$[ebp], 0

; 1740 : 
; 1741 : 	dt = Delta_FindStruct( "weapon_data_t" );

	push	OFFSET ??_C@_0O@NIIONHNK@weapon_data_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1742 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN8@MSG_WriteW
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN8@MSG_WriteW
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN9@MSG_WriteW
$LN8@MSG_WriteW:
	mov	DWORD PTR tv74[ebp], 0
$LN9@MSG_WriteW:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??MSG_WriteWeaponData@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1743 : 
; 1744 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1745 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN10@MSG_WriteW
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN11@MSG_WriteW
$LN10@MSG_WriteW:
	mov	DWORD PTR tv83[ebp], 0
$LN11@MSG_WriteW:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??MSG_WriteWeaponData@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1746 : 
; 1747 : 	// activate fields and call custom encode func
; 1748 : 	Delta_CustomEncode( dt, from, to );

	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	push	edx
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH

; 1749 : 
; 1750 : 	startBit = msg->iCurBit;

	mov	eax, DWORD PTR _msg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _startBit$[ebp], ecx

; 1751 : 
; 1752 : 	MSG_WriteOneBit( msg, 1 );

	push	1
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8

; 1753 : 	MSG_WriteUBitLong( msg, index, MAX_WEAPON_BITS );

	push	6
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 1754 :                
; 1755 : 	// process fields
; 1756 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_WriteW
$LN2@MSG_WriteW:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@MSG_WriteW:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_WriteW

; 1757 : 	{
; 1758 : 		if( Delta_WriteField( msg, pField, from, to, timebase ))

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_WriteField
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN5@MSG_WriteW

; 1759 : 			numChanges++;

	mov	eax, DWORD PTR _numChanges$[ebp]
	add	eax, 1
	mov	DWORD PTR _numChanges$[ebp], eax
$LN5@MSG_WriteW:

; 1760 : 	}

	jmp	SHORT $LN2@MSG_WriteW
$LN3@MSG_WriteW:

; 1761 : 
; 1762 : 	// if we have no changes - kill the message
; 1763 : 	if( !numChanges ) MSG_SeekToBit( msg, startBit, SEEK_SET );

	cmp	DWORD PTR _numChanges$[ebp], 0
	jne	SHORT $LN6@MSG_WriteW
	push	0
	mov	eax, DWORD PTR _startBit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_SeekToBit
	add	esp, 12					; 0000000cH
$LN6@MSG_WriteW:

; 1764 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_WriteWeaponData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _MSG_ReadClientData
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv74 = -80						; size = 4
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_timebase$ = 20						; size = 4
_MSG_ReadClientData PROC				; COMDAT

; 1696 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1697 : 	delta_t		*pField;
; 1698 : 	delta_info_t	*dt;
; 1699 : 	int		i;
; 1700 : 
; 1701 : 	dt = Delta_FindStruct( "clientdata_t" );

	push	OFFSET ??_C@_0N@NBCMDLKO@clientdata_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1702 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN7@MSG_ReadCl
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN7@MSG_ReadCl
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN8@MSG_ReadCl
$LN7@MSG_ReadCl:
	mov	DWORD PTR tv74[ebp], 0
$LN8@MSG_ReadCl:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??MSG_ReadClientData@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1703 : 
; 1704 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1705 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN9@MSG_ReadCl
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN10@MSG_ReadCl
$LN9@MSG_ReadCl:
	mov	DWORD PTR tv83[ebp], 0
$LN10@MSG_ReadCl:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??MSG_ReadClientData@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1706 : 
; 1707 : 	*to = *from;

	mov	ecx, 654				; 0000028eH
	mov	esi, DWORD PTR _from$[ebp]
	mov	edi, DWORD PTR _to$[ebp]
	rep movsd

; 1708 : 
; 1709 : 	if( !MSG_ReadOneBit( msg ))

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadOneBit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@MSG_ReadCl

; 1710 : 		return; // we have no changes

	jmp	SHORT $LN3@MSG_ReadCl
$LN5@MSG_ReadCl:

; 1711 : 
; 1712 : 	// process fields
; 1713 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_ReadCl
$LN2@MSG_ReadCl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@MSG_ReadCl:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_ReadCl

; 1714 : 	{
; 1715 : 		Delta_ReadField( msg, pField, from, to, timebase );

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_ReadField
	add	esp, 20					; 00000014H

; 1716 : 	}

	jmp	SHORT $LN2@MSG_ReadCl
$LN3@MSG_ReadCl:

; 1717 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_ReadClientData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _MSG_WriteClientData
_TEXT	SEGMENT
tv83 = -88						; size = 4
tv74 = -88						; size = 4
_numChanges$ = -20					; size = 4
_startBit$ = -16					; size = 4
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_timebase$ = 20						; size = 4
_MSG_WriteClientData PROC				; COMDAT

; 1656 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 1657 : 	delta_t		*pField;
; 1658 : 	delta_info_t	*dt;
; 1659 : 	int		i, startBit;
; 1660 : 	int		numChanges = 0;

	mov	DWORD PTR _numChanges$[ebp], 0

; 1661 : 
; 1662 : 	dt = Delta_FindStruct( "clientdata_t" );

	push	OFFSET ??_C@_0N@NBCMDLKO@clientdata_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1663 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN8@MSG_WriteC
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN8@MSG_WriteC
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN9@MSG_WriteC
$LN8@MSG_WriteC:
	mov	DWORD PTR tv74[ebp], 0
$LN9@MSG_WriteC:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??MSG_WriteClientData@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1664 : 
; 1665 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1666 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN10@MSG_WriteC
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN11@MSG_WriteC
$LN10@MSG_WriteC:
	mov	DWORD PTR tv83[ebp], 0
$LN11@MSG_WriteC:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??MSG_WriteClientData@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1667 : 
; 1668 : 	startBit = msg->iCurBit;

	mov	eax, DWORD PTR _msg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _startBit$[ebp], ecx

; 1669 : 
; 1670 : 	MSG_WriteOneBit( msg, 1 ); // have clientdata

	push	1
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8

; 1671 : 
; 1672 : 	// activate fields and call custom encode func
; 1673 : 	Delta_CustomEncode( dt, from, to );

	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	push	edx
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH

; 1674 : 
; 1675 : 	// process fields
; 1676 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_WriteC
$LN2@MSG_WriteC:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@MSG_WriteC:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_WriteC

; 1677 : 	{
; 1678 : 		if( Delta_WriteField( msg, pField, from, to, timebase ))

	push	ecx
	movss	xmm0, DWORD PTR _timebase$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_WriteField
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN5@MSG_WriteC

; 1679 : 			numChanges++;

	mov	eax, DWORD PTR _numChanges$[ebp]
	add	eax, 1
	mov	DWORD PTR _numChanges$[ebp], eax
$LN5@MSG_WriteC:

; 1680 : 	}

	jmp	SHORT $LN2@MSG_WriteC
$LN3@MSG_WriteC:

; 1681 : 
; 1682 : 	if( numChanges ) return; // we have updates

	cmp	DWORD PTR _numChanges$[ebp], 0
	je	SHORT $LN6@MSG_WriteC
	jmp	SHORT $LN1@MSG_WriteC
$LN6@MSG_WriteC:

; 1683 : 
; 1684 : 	MSG_SeekToBit( msg, startBit, SEEK_SET );

	push	0
	mov	eax, DWORD PTR _startBit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_SeekToBit
	add	esp, 12					; 0000000cH

; 1685 : 	MSG_WriteOneBit( msg, 0 ); // no changes

	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8
$LN1@MSG_WriteC:

; 1686 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_WriteClientData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _MSG_ReadDeltaMovevars
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv74 = -80						; size = 4
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_MSG_ReadDeltaMovevars PROC				; COMDAT

; 1620 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1621 : 	delta_t		*pField;
; 1622 : 	delta_info_t	*dt;
; 1623 : 	int		i;
; 1624 : 
; 1625 : 	dt = Delta_FindStruct( "movevars_t" );

	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1626 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@MSG_ReadDe
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN6@MSG_ReadDe
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@MSG_ReadDe
$LN6@MSG_ReadDe:
	mov	DWORD PTR tv74[ebp], 0
$LN7@MSG_ReadDe:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??MSG_ReadDeltaMovevars@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1627 : 
; 1628 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1629 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@MSG_ReadDe
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN9@MSG_ReadDe
$LN8@MSG_ReadDe:
	mov	DWORD PTR tv83[ebp], 0
$LN9@MSG_ReadDe:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??MSG_ReadDeltaMovevars@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1630 : 
; 1631 : 	*to = *from;

	mov	ecx, 40					; 00000028H
	mov	esi, DWORD PTR _from$[ebp]
	mov	edi, DWORD PTR _to$[ebp]
	rep movsd

; 1632 : 
; 1633 : 	// process fields
; 1634 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_ReadDe
$LN2@MSG_ReadDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@MSG_ReadDe:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_ReadDe

; 1635 : 	{
; 1636 : 		Delta_ReadField( msg, pField, from, to, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_ReadField
	add	esp, 20					; 00000014H

; 1637 : 	}

	jmp	SHORT $LN2@MSG_ReadDe
$LN3@MSG_ReadDe:

; 1638 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_ReadDeltaMovevars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _MSG_WriteDeltaMovevars
_TEXT	SEGMENT
tv83 = -88						; size = 4
tv74 = -88						; size = 4
_numChanges$ = -20					; size = 4
_startBit$ = -16					; size = 4
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_MSG_WriteDeltaMovevars PROC				; COMDAT

; 1584 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 1585 : 	delta_t		*pField;
; 1586 : 	delta_info_t	*dt;
; 1587 : 	int		i, startBit;
; 1588 : 	int		numChanges = 0;

	mov	DWORD PTR _numChanges$[ebp], 0

; 1589 : 
; 1590 : 	dt = Delta_FindStruct( "movevars_t" );

	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1591 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN8@MSG_WriteD
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN8@MSG_WriteD
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN9@MSG_WriteD
$LN8@MSG_WriteD:
	mov	DWORD PTR tv74[ebp], 0
$LN9@MSG_WriteD:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??MSG_WriteDeltaMovevars@@9@9
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1592 : 
; 1593 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1594 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN10@MSG_WriteD
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN11@MSG_WriteD
$LN10@MSG_WriteD:
	mov	DWORD PTR tv83[ebp], 0
$LN11@MSG_WriteD:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??MSG_WriteDeltaMovevars@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1595 : 
; 1596 : 	startBit = msg->iCurBit;

	mov	eax, DWORD PTR _msg$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _startBit$[ebp], ecx

; 1597 : 
; 1598 : 	// activate fields and call custom encode func
; 1599 : 	Delta_CustomEncode( dt, from, to );

	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	push	edx
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH

; 1600 : 
; 1601 : 	MSG_BeginServerCmd( msg, svc_deltamovevars );

	push	0
	push	1
	push	44					; 0000002cH
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteCmdExt
	add	esp, 16					; 00000010H

; 1602 : 
; 1603 : 	// process fields
; 1604 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_WriteD
$LN2@MSG_WriteD:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@MSG_WriteD:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_WriteD

; 1605 : 	{
; 1606 : 		if( Delta_WriteField( msg, pField, from, to, 0.0f ))

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_WriteField
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN5@MSG_WriteD

; 1607 : 			numChanges++;

	mov	eax, DWORD PTR _numChanges$[ebp]
	add	eax, 1
	mov	DWORD PTR _numChanges$[ebp], eax
$LN5@MSG_WriteD:

; 1608 : 	}

	jmp	SHORT $LN2@MSG_WriteD
$LN3@MSG_WriteD:

; 1609 : 
; 1610 : 	// if we have no changes - kill the message
; 1611 : 	if( !numChanges )

	cmp	DWORD PTR _numChanges$[ebp], 0
	jne	SHORT $LN6@MSG_WriteD

; 1612 : 	{
; 1613 : 		MSG_SeekToBit( msg, startBit, SEEK_SET );

	push	0
	mov	eax, DWORD PTR _startBit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_SeekToBit
	add	esp, 12					; 0000000cH

; 1614 : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@MSG_WriteD
$LN6@MSG_WriteD:

; 1615 : 	}
; 1616 : 	return true;

	mov	eax, 1
$LN1@MSG_WriteD:

; 1617 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_WriteDeltaMovevars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _MSG_ReadDeltaEvent
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv74 = -80						; size = 4
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_MSG_ReadDeltaEvent PROC				; COMDAT

; 1556 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1557 : 	delta_t		*pField;
; 1558 : 	delta_info_t	*dt;
; 1559 : 	int		i;
; 1560 : 
; 1561 : 	dt = Delta_FindStruct( "event_t" );

	push	OFFSET ??_C@_07DLLLNOCJ@event_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1562 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@MSG_ReadDe
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN6@MSG_ReadDe
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@MSG_ReadDe
$LN6@MSG_ReadDe:
	mov	DWORD PTR tv74[ebp], 0
$LN7@MSG_ReadDe:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??MSG_ReadDeltaEvent@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1563 : 
; 1564 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1565 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@MSG_ReadDe
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN9@MSG_ReadDe
$LN8@MSG_ReadDe:
	mov	DWORD PTR tv83[ebp], 0
$LN9@MSG_ReadDe:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??MSG_ReadDeltaEvent@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1566 : 
; 1567 : 	*to = *from;

	mov	ecx, 27					; 0000001bH
	mov	esi, DWORD PTR _from$[ebp]
	mov	edi, DWORD PTR _to$[ebp]
	rep movsd

; 1568 : 
; 1569 : 	// process fields
; 1570 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_ReadDe
$LN2@MSG_ReadDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@MSG_ReadDe:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_ReadDe

; 1571 : 	{
; 1572 : 		Delta_ReadField( msg, pField, from, to, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_ReadField
	add	esp, 20					; 00000014H

; 1573 : 	}

	jmp	SHORT $LN2@MSG_ReadDe
$LN3@MSG_ReadDe:

; 1574 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_ReadDeltaEvent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _MSG_WriteDeltaEvent
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv74 = -80						; size = 4
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_MSG_WriteDeltaEvent PROC				; COMDAT

; 1529 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1530 : 	delta_t		*pField;
; 1531 : 	delta_info_t	*dt;
; 1532 : 	int		i;
; 1533 : 
; 1534 : 	dt = Delta_FindStruct( "event_t" );

	push	OFFSET ??_C@_07DLLLNOCJ@event_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1535 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@MSG_WriteD
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN6@MSG_WriteD
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@MSG_WriteD
$LN6@MSG_WriteD:
	mov	DWORD PTR tv74[ebp], 0
$LN7@MSG_WriteD:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??MSG_WriteDeltaEvent@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1536 : 
; 1537 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1538 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@MSG_WriteD
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN9@MSG_WriteD
$LN8@MSG_WriteD:
	mov	DWORD PTR tv83[ebp], 0
$LN9@MSG_WriteD:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??MSG_WriteDeltaEvent@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1539 : 
; 1540 : 	// activate fields and call custom encode func
; 1541 : 	Delta_CustomEncode( dt, from, to );

	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	push	edx
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH

; 1542 : 
; 1543 : 	// process fields
; 1544 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_WriteD
$LN2@MSG_WriteD:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@MSG_WriteD:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_WriteD

; 1545 : 	{
; 1546 : 		Delta_WriteField( msg, pField, from, to, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_WriteField
	add	esp, 20					; 00000014H

; 1547 : 	}

	jmp	SHORT $LN2@MSG_WriteD
$LN3@MSG_WriteD:

; 1548 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_WriteDeltaEvent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _MSG_ReadDeltaUsercmd
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv74 = -80						; size = 4
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_MSG_ReadDeltaUsercmd PROC				; COMDAT

; 1494 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1495 : 	delta_t		*pField;
; 1496 : 	delta_info_t	*dt;
; 1497 : 	int		i;
; 1498 : 
; 1499 : 	dt = Delta_FindStruct( "usercmd_t" );

	push	OFFSET ??_C@_09FBPCDCLL@usercmd_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1500 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@MSG_ReadDe
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN6@MSG_ReadDe
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@MSG_ReadDe
$LN6@MSG_ReadDe:
	mov	DWORD PTR tv74[ebp], 0
$LN7@MSG_ReadDe:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??MSG_ReadDeltaUsercmd@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1501 : 
; 1502 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1503 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@MSG_ReadDe
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN9@MSG_ReadDe
$LN8@MSG_ReadDe:
	mov	DWORD PTR tv83[ebp], 0
$LN9@MSG_ReadDe:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??MSG_ReadDeltaUsercmd@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1504 : 
; 1505 : 	*to = *from;

	mov	ecx, 14					; 0000000eH
	mov	esi, DWORD PTR _from$[ebp]
	mov	edi, DWORD PTR _to$[ebp]
	rep movsd

; 1506 : 
; 1507 : 	// process fields
; 1508 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_ReadDe
$LN2@MSG_ReadDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@MSG_ReadDe:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_ReadDe

; 1509 : 	{
; 1510 : 		Delta_ReadField( msg, pField, from, to, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_ReadField
	add	esp, 20					; 00000014H

; 1511 : 	}

	jmp	SHORT $LN2@MSG_ReadDe
$LN3@MSG_ReadDe:

; 1512 : 
; 1513 : 	COM_NormalizeAngles( to->viewangles );

	mov	eax, DWORD PTR _to$[ebp]
	add	eax, 4
	push	eax
	call	_COM_NormalizeAngles
	add	esp, 4

; 1514 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_ReadDeltaUsercmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _MSG_WriteDeltaUsercmd
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv74 = -80						; size = 4
_i$ = -12						; size = 4
_dt$ = -8						; size = 4
_pField$ = -4						; size = 4
_msg$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_MSG_WriteDeltaUsercmd PROC				; COMDAT

; 1467 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1468 : 	delta_t		*pField;
; 1469 : 	delta_info_t	*dt;
; 1470 : 	int		i;
; 1471 : 
; 1472 : 	dt = Delta_FindStruct( "usercmd_t" );

	push	OFFSET ??_C@_09FBPCDCLL@usercmd_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 1473 : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@MSG_WriteD
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN6@MSG_WriteD
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@MSG_WriteD
$LN6@MSG_WriteD:
	mov	DWORD PTR tv74[ebp], 0
$LN7@MSG_WriteD:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??MSG_WriteDeltaUsercmd@@9@9
	add	ecx, 6
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1474 : 
; 1475 : 	pField = dt->pFields;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx

; 1476 : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN8@MSG_WriteD
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN9@MSG_WriteD
$LN8@MSG_WriteD:
	mov	DWORD PTR tv83[ebp], 0
$LN9@MSG_WriteD:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??MSG_WriteDeltaUsercmd@@9@9
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 1477 : 
; 1478 : 	// activate fields and call custom encode func
; 1479 : 	Delta_CustomEncode( dt, from, to );

	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	push	edx
	call	_Delta_CustomEncode
	add	esp, 12					; 0000000cH

; 1480 : 
; 1481 : 	// process fields
; 1482 : 	for( i = 0; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@MSG_WriteD
$LN2@MSG_WriteD:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@MSG_WriteD:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@MSG_WriteD

; 1483 : 	{
; 1484 : 		Delta_WriteField( msg, pField, from, to, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pField$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_Delta_WriteField
	add	esp, 20					; 00000014H

; 1485 : 	}

	jmp	SHORT $LN2@MSG_WriteD
$LN3@MSG_WriteD:

; 1486 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_WriteDeltaUsercmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_ParseTableField
_TEXT	SEGMENT
tv88 = -100						; size = 4
tv75 = -100						; size = 4
_dt$ = -32						; size = 4
_pName$ = -28						; size = 4
_bits$ = -24						; size = 4
_flags$ = -20						; size = 4
_post_mul$ = -16					; size = 4
_mul$ = -12						; size = 4
_nameIndex$ = -8					; size = 4
_tableIndex$ = -4					; size = 4
_msg$ = 8						; size = 4
_Delta_ParseTableField PROC				; COMDAT

; 576  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 577  : 	int		tableIndex, nameIndex;
; 578  : 	float		mul = 1.0f, post_mul = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _mul$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _post_mul$[ebp], xmm0

; 579  : 	int		flags, bits;
; 580  : 	const char	*pName;
; 581  : 	delta_info_t	*dt;
; 582  : 
; 583  : 	tableIndex = MSG_ReadUBitLong( msg, 4 );

	push	4
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadUBitLong
	add	esp, 8
	mov	DWORD PTR _tableIndex$[ebp], eax

; 584  : 	dt = Delta_FindStructByIndex( tableIndex );

	mov	eax, DWORD PTR _tableIndex$[ebp]
	push	eax
	call	_Delta_FindStructByIndex
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 585  : 
; 586  : 	Assert( dt != NULL );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@Delta_Pars
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN7@Delta_Pars
$LN6@Delta_Pars:
	mov	DWORD PTR tv75[ebp], 0
$LN7@Delta_Pars:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_ParseTableField@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0L@MMLOMCJB@dt?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv75[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 587  : 
; 588  : 	nameIndex = MSG_ReadUBitLong( msg, 8 );	// read field name index		

	push	8
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadUBitLong
	add	esp, 8
	mov	DWORD PTR _nameIndex$[ebp], eax

; 589  : 	Assert( nameIndex >= 0 && nameIndex < dt->maxFields );

	cmp	DWORD PTR _nameIndex$[ebp], 0
	jl	SHORT $LN8@Delta_Pars
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _nameIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN8@Delta_Pars
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN9@Delta_Pars
$LN8@Delta_Pars:
	mov	DWORD PTR tv88[ebp], 0
$LN9@Delta_Pars:
	push	0
	mov	edx, DWORD PTR ?__LINE__Var@?0??Delta_ParseTableField@@9@9
	add	edx, 13					; 0000000dH
	push	edx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0CM@LGHINALC@nameIndex?5?$DO?$DN?50?5?$CG?$CG?5nameIndex?5?$DM?5d@
	mov	eax, DWORD PTR tv88[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 590  : 	pName = dt->pInfo[nameIndex].name;

	imul	eax, DWORD PTR _nameIndex$[ebp], 12
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _pName$[ebp], eax

; 591  : 	flags = MSG_ReadUBitLong( msg, 10 );

	push	10					; 0000000aH
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadUBitLong
	add	esp, 8
	mov	DWORD PTR _flags$[ebp], eax

; 592  : 	bits = MSG_ReadUBitLong( msg, 5 ) + 1;

	push	5
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadUBitLong
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR _bits$[ebp], eax

; 593  : 
; 594  : 	// read the multipliers
; 595  : 	if( MSG_ReadOneBit( msg ))

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadOneBit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@Delta_Pars

; 596  : 		mul = MSG_ReadFloat( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadFloat
	add	esp, 4
	fstp	DWORD PTR _mul$[ebp]
$LN2@Delta_Pars:

; 597  : 
; 598  : 	if( MSG_ReadOneBit( msg ))

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadOneBit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@Delta_Pars

; 599  : 		post_mul = MSG_ReadFloat( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadFloat
	add	esp, 4
	fstp	DWORD PTR _post_mul$[ebp]
$LN3@Delta_Pars:

; 600  : 
; 601  : 	// delta encoders it's already initialized on this machine (local game)
; 602  : 	if( delta_init ) return;

	cmp	DWORD PTR _delta_init, 0
	je	SHORT $LN4@Delta_Pars
	jmp	SHORT $LN1@Delta_Pars
$LN4@Delta_Pars:

; 603  : 
; 604  : 	// add field to table
; 605  : 	Delta_AddField( dt->pName, pName, flags, bits, mul, post_mul );

	push	ecx
	movss	xmm0, DWORD PTR _post_mul$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mul$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _bits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pName$[ebp]
	push	edx
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Delta_AddField
	add	esp, 24					; 00000018H
$LN1@Delta_Pars:

; 606  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_ParseTableField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_WriteTableField
_TEXT	SEGMENT
tv135 = -76						; size = 4
tv88 = -76						; size = 4
tv70 = -76						; size = 4
_dt$ = -8						; size = 4
_nameIndex$ = -4					; size = 4
_msg$ = 8						; size = 4
_tableIndex$ = 12					; size = 4
_pField$ = 16						; size = 4
_Delta_WriteTableField PROC				; COMDAT

; 538  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 539  : 	int		nameIndex;
; 540  : 	delta_info_t	*dt;
; 541  : 	
; 542  : 	Assert( pField != NULL );

	cmp	DWORD PTR _pField$[ebp], 0
	je	SHORT $LN9@Delta_Writ
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN10@Delta_Writ
$LN9@Delta_Writ:
	mov	DWORD PTR tv70[ebp], 0
$LN10@Delta_Writ:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_WriteTableField@@9@9
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0P@GLDHLNHC@pField?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 543  : 
; 544  : 	if( !pField->name || !*pField->name )

	mov	eax, DWORD PTR _pField$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Delta_Writ
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN2@Delta_Writ
$LN3@Delta_Writ:

; 545  : 		return;	// not initialized ?

	jmp	$LN7@Delta_Writ
$LN2@Delta_Writ:

; 546  : 
; 547  : 	dt = Delta_FindStructByIndex( tableIndex );

	mov	eax, DWORD PTR _tableIndex$[ebp]
	push	eax
	call	_Delta_FindStructByIndex
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 548  : 	Assert( dt && dt->bInitialized );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN11@Delta_Writ
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN11@Delta_Writ
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN12@Delta_Writ
$LN11@Delta_Writ:
	mov	DWORD PTR tv88[ebp], 0
$LN12@Delta_Writ:
	push	0
	mov	ecx, DWORD PTR ?__LINE__Var@?0??Delta_WriteTableField@@9@9
	add	ecx, 10					; 0000000aH
	push	ecx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0BH@MOJKNLGI@dt?5?$CG?$CG?5dt?9?$DObInitialized@
	mov	edx, DWORD PTR tv88[ebp]
	push	edx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 549  : 
; 550  : 	nameIndex = Delta_IndexForFieldInfo( dt->pInfo, pField->name );

	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_Delta_IndexForFieldInfo
	add	esp, 8
	mov	DWORD PTR _nameIndex$[ebp], eax

; 551  : 	Assert( nameIndex >= 0 && nameIndex < dt->maxFields );

	cmp	DWORD PTR _nameIndex$[ebp], 0
	jl	SHORT $LN13@Delta_Writ
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _nameIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN13@Delta_Writ
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN14@Delta_Writ
$LN13@Delta_Writ:
	mov	DWORD PTR tv135[ebp], 0
$LN14@Delta_Writ:
	push	0
	mov	edx, DWORD PTR ?__LINE__Var@?0??Delta_WriteTableField@@9@9
	add	edx, 13					; 0000000dH
	push	edx
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0CM@LGHINALC@nameIndex?5?$DO?$DN?50?5?$CG?$CG?5nameIndex?5?$DM?5d@
	mov	eax, DWORD PTR tv135[ebp]
	push	eax
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 552  : 
; 553  : 	MSG_BeginServerCmd( msg, svc_deltatable );

	push	0
	push	1
	push	14					; 0000000eH
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteCmdExt
	add	esp, 16					; 00000010H

; 554  : 	MSG_WriteUBitLong( msg, tableIndex, 4 );		// assume we support 16 network tables

	push	4
	mov	eax, DWORD PTR _tableIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 555  : 	MSG_WriteUBitLong( msg, nameIndex, 8 );		// 255 fields by struct should be enough

	push	8
	mov	eax, DWORD PTR _nameIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 556  : 	MSG_WriteUBitLong( msg, pField->flags, 10 );	// flags are indicated various input types

	push	10					; 0000000aH
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 557  : 	MSG_WriteUBitLong( msg, pField->bits - 1, 5 );	// max received value is 32 (32 bit)

	push	5
	mov	eax, DWORD PTR _pField$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 558  : 
; 559  : 	// multipliers is null-compressed
; 560  : 	if( pField->multiplier != 1.0f )

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@Delta_Writ

; 561  : 	{
; 562  : 		MSG_WriteOneBit( msg, 1 );

	push	1
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8

; 563  : 		MSG_WriteFloat( msg, pField->multiplier );

	mov	eax, DWORD PTR _pField$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteFloat
	add	esp, 8

; 564  : 	}

	jmp	SHORT $LN5@Delta_Writ
$LN4@Delta_Writ:

; 565  : 	else MSG_WriteOneBit( msg, 0 );

	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8
$LN5@Delta_Writ:

; 566  : 
; 567  : 	if( pField->post_multiplier != 1.0f )

	mov	eax, DWORD PTR _pField$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN6@Delta_Writ

; 568  : 	{
; 569  : 		MSG_WriteOneBit( msg, 1 );

	push	1
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8

; 570  : 		MSG_WriteFloat( msg, pField->post_multiplier );

	mov	eax, DWORD PTR _pField$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_WriteFloat
	add	esp, 8

; 571  : 	}

	jmp	SHORT $LN7@Delta_Writ
$LN6@Delta_Writ:

; 572  : 	else MSG_WriteOneBit( msg, 0 );

	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_WriteOneBit
	add	esp, 8
$LN7@Delta_Writ:

; 573  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_WriteTableField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_UnsetFieldByIndex
_TEXT	SEGMENT
_dt$ = -4						; size = 4
_pFields$ = 8						; size = 4
_fieldNumber$ = 12					; size = 4
_Delta_UnsetFieldByIndex PROC				; COMDAT

; 2104 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 2105 : 	delta_info_t	*dt;
; 2106 : 
; 2107 : 	dt = Delta_FindStructByDelta( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	_Delta_FindStructByDelta
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 2108 : 	if( dt == NULL || fieldNumber < 0 || fieldNumber >= dt->numFields )

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN3@Delta_Unse
	cmp	DWORD PTR _fieldNumber$[ebp], 0
	jl	SHORT $LN3@Delta_Unse
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _fieldNumber$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jl	SHORT $LN2@Delta_Unse
$LN3@Delta_Unse:

; 2109 : 		return;

	jmp	SHORT $LN1@Delta_Unse
$LN2@Delta_Unse:

; 2110 : 
; 2111 : 	dt->pFields[fieldNumber].bInactive = true;

	mov	eax, DWORD PTR _fieldNumber$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+eax+28], 1
$LN1@Delta_Unse:

; 2112 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_UnsetFieldByIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_SetFieldByIndex
_TEXT	SEGMENT
_dt$ = -4						; size = 4
_pFields$ = 8						; size = 4
_fieldNumber$ = 12					; size = 4
_Delta_SetFieldByIndex PROC				; COMDAT

; 2093 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 2094 : 	delta_info_t	*dt;
; 2095 : 
; 2096 : 	dt = Delta_FindStructByDelta( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	_Delta_FindStructByDelta
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 2097 : 	if( dt == NULL || fieldNumber < 0 || fieldNumber >= dt->numFields )

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN3@Delta_SetF
	cmp	DWORD PTR _fieldNumber$[ebp], 0
	jl	SHORT $LN3@Delta_SetF
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _fieldNumber$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jl	SHORT $LN2@Delta_SetF
$LN3@Delta_SetF:

; 2098 : 		return;

	jmp	SHORT $LN1@Delta_SetF
$LN2@Delta_SetF:

; 2099 : 
; 2100 : 	dt->pFields[fieldNumber].bInactive = false;

	mov	eax, DWORD PTR _fieldNumber$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+eax+28], 0
$LN1@Delta_SetF:

; 2101 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_SetFieldByIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_UnsetField
_TEXT	SEGMENT
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_pFields$ = 8						; size = 4
_fieldname$ = 12					; size = 4
_Delta_UnsetField PROC					; COMDAT

; 2073 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 2074 : 	delta_info_t	*dt;
; 2075 : 	delta_t		*pField;
; 2076 : 	int		i;
; 2077 : 
; 2078 : 	dt = Delta_FindStructByDelta( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	_Delta_FindStructByDelta
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 2079 : 	if( dt == NULL || !fieldname || !fieldname[0] )

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@Delta_Unse
	cmp	DWORD PTR _fieldname$[ebp], 0
	je	SHORT $LN6@Delta_Unse
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _fieldname$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN5@Delta_Unse
$LN6@Delta_Unse:

; 2080 : 		return;

	jmp	SHORT $LN1@Delta_Unse
$LN5@Delta_Unse:

; 2081 : 
; 2082 : 	for( i = 0, pField = dt->pFields; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx
	jmp	SHORT $LN4@Delta_Unse
$LN2@Delta_Unse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@Delta_Unse:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN1@Delta_Unse

; 2083 : 	{
; 2084 : 		if( !Q_strcmp( pField->name, fieldname ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _fieldname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_Unse

; 2085 : 		{
; 2086 : 			pField->bInactive = true;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [eax+28], 1

; 2087 : 			return;

	jmp	SHORT $LN1@Delta_Unse
$LN7@Delta_Unse:

; 2088 : 		}
; 2089 : 	}

	jmp	SHORT $LN2@Delta_Unse
$LN1@Delta_Unse:

; 2090 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_UnsetField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_SetField
_TEXT	SEGMENT
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_pFields$ = 8						; size = 4
_fieldname$ = 12					; size = 4
_Delta_SetField PROC					; COMDAT

; 2053 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 2054 : 	delta_info_t	*dt;
; 2055 : 	delta_t		*pField;
; 2056 : 	int		i;
; 2057 : 
; 2058 : 	dt = Delta_FindStructByDelta( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	_Delta_FindStructByDelta
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 2059 : 	if( dt == NULL || !fieldname || !fieldname[0] )

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@Delta_SetF
	cmp	DWORD PTR _fieldname$[ebp], 0
	je	SHORT $LN6@Delta_SetF
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _fieldname$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN5@Delta_SetF
$LN6@Delta_SetF:

; 2060 : 		return;

	jmp	SHORT $LN1@Delta_SetF
$LN5@Delta_SetF:

; 2061 : 
; 2062 : 	for( i = 0, pField = dt->pFields; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx
	jmp	SHORT $LN4@Delta_SetF
$LN2@Delta_SetF:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@Delta_SetF:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN1@Delta_SetF

; 2063 : 	{
; 2064 : 		if( !Q_strcmp( pField->name, fieldname ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _fieldname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_SetF

; 2065 : 		{
; 2066 : 			pField->bInactive = false;

	mov	eax, DWORD PTR _pField$[ebp]
	mov	DWORD PTR [eax+28], 0

; 2067 : 			return;

	jmp	SHORT $LN1@Delta_SetF
$LN7@Delta_SetF:

; 2068 : 		}
; 2069 : 	}

	jmp	SHORT $LN2@Delta_SetF
$LN1@Delta_SetF:

; 2070 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_SetField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_FindField
_TEXT	SEGMENT
_i$ = -12						; size = 4
_pField$ = -8						; size = 4
_dt$ = -4						; size = 4
_pFields$ = 8						; size = 4
_fieldname$ = 12					; size = 4
_Delta_FindField PROC					; COMDAT

; 2035 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 2036 : 	delta_info_t	*dt;
; 2037 : 	delta_t		*pField;
; 2038 : 	int		i;
; 2039 : 
; 2040 : 	dt = Delta_FindStructByDelta( pFields );

	mov	eax, DWORD PTR _pFields$[ebp]
	push	eax
	call	_Delta_FindStructByDelta
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 2041 : 	if( dt == NULL || !fieldname || !fieldname[0] )

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN6@Delta_Find
	cmp	DWORD PTR _fieldname$[ebp], 0
	je	SHORT $LN6@Delta_Find
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _fieldname$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN5@Delta_Find
$LN6@Delta_Find:

; 2042 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN1@Delta_Find
$LN5@Delta_Find:

; 2043 : 
; 2044 : 	for( i = 0, pField = dt->pFields; i < dt->numFields; i++, pField++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pField$[ebp], ecx
	jmp	SHORT $LN4@Delta_Find
$LN2@Delta_Find:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _pField$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pField$[ebp], ecx
$LN4@Delta_Find:
	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN3@Delta_Find

; 2045 : 	{
; 2046 : 		if( !Q_strcmp( pField->name, fieldname ))

	push	99999					; 0001869fH
	mov	eax, DWORD PTR _fieldname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@Delta_Find

; 2047 : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN1@Delta_Find
$LN7@Delta_Find:

; 2048 : 	}

	jmp	SHORT $LN2@Delta_Find
$LN3@Delta_Find:

; 2049 : 	return -1;

	or	eax, -1
$LN1@Delta_Find:

; 2050 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_FindField ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_AddEncoder
_TEXT	SEGMENT
_dt$ = -4						; size = 4
_name$ = 8						; size = 4
_encodeFunc$ = 12					; size = 4
_Delta_AddEncoder PROC					; COMDAT

; 2013 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 2014 : 	delta_info_t	*dt;
; 2015 : 
; 2016 : 	dt = Delta_FindStructByEncoder( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_Delta_FindStructByEncoder
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 2017 : 
; 2018 : 	if( !dt || !dt->bInitialized )

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN3@Delta_AddE
	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jne	SHORT $LN2@Delta_AddE
$LN3@Delta_AddE:

; 2019 : 	{
; 2020 : 		Con_DPrintf( S_ERROR "Delta_AddEncoder: couldn't find delta with specified custom encode %s\n", name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0FC@CCNNIHHH@?$FO1Error?3?$FO7?5Delta_AddEncoder?3?5co@
	call	_Con_DPrintf
	add	esp, 8

; 2021 : 		return;

	jmp	SHORT $LN1@Delta_AddE
$LN2@Delta_AddE:

; 2022 : 	}
; 2023 : 
; 2024 : 	if( dt->customEncode == CUSTOM_NONE )

	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN4@Delta_AddE

; 2025 : 	{
; 2026 : 		Con_DPrintf( S_ERROR "Delta_AddEncoder: %s not supposed for custom encoding\n", dt->pName );

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0EC@MOAIINJL@?$FO1Error?3?$FO7?5Delta_AddEncoder?3?5?$CFs@
	call	_Con_DPrintf
	add	esp, 8

; 2027 : 		return;

	jmp	SHORT $LN1@Delta_AddE
$LN4@Delta_AddE:

; 2028 : 	}
; 2029 : 
; 2030 : 	// register new encode func
; 2031 : 	dt->userCallback = encodeFunc;	

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _encodeFunc$[ebp]
	mov	DWORD PTR [eax+56], ecx
$LN1@Delta_AddE:

; 2032 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_AddEncoder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_FindStructByIndex
_TEXT	SEGMENT
_index$ = 8						; size = 4
_Delta_FindStructByIndex PROC				; COMDAT

; 403  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 404  : 	if( index < 0 || index >= NUM_FIELDS( dt_info ))

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN3@Delta_Find
	cmp	DWORD PTR _index$[ebp], 8
	jb	SHORT $LN2@Delta_Find
$LN3@Delta_Find:

; 405  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@Delta_Find
$LN2@Delta_Find:

; 406  : 
; 407  : 	return &dt_info[index];

	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 6
	add	eax, OFFSET _dt_info
$LN1@Delta_Find:

; 408  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_FindStructByIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_NumTables
_TEXT	SEGMENT
_Delta_NumTables PROC					; COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 399  : 	return NUM_FIELDS( dt_info );

	mov	eax, 8

; 400  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_NumTables ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_InitFields
_TEXT	SEGMENT
_dt$ = -784						; size = 4
_token$ = -780						; size = 256
_encodeFunc$ = -524					; size = 256
_encodeDll$ = -268					; size = 256
_pfile$ = -12						; size = 4
_afile$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Delta_InitFields PROC					; COMDAT

; 806  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 912				; 00000390H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 807  : 	char		*afile, *pfile;
; 808  : 	string		encodeDll, encodeFunc, token;	
; 809  : 	delta_info_t	*dt;
; 810  : 
; 811  : 	afile = FS_LoadFile( DELTA_PATH, NULL, false );

	push	0
	push	0
	push	OFFSET ??_C@_09JMKDNJHO@delta?4lst@
	call	_FS_LoadFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _afile$[ebp], eax

; 812  : 	if( !afile ) Sys_Error( "DELTA_Load: couldn't load file %s\n", DELTA_PATH );

	cmp	DWORD PTR _afile$[ebp], 0
	jne	SHORT $LN4@Delta_Init
	push	OFFSET ??_C@_09JMKDNJHO@delta?4lst@
	push	OFFSET ??_C@_0CD@JNEKMLAN@DELTA_Load?3?5couldn?8t?5load?5file?5@
	call	_Sys_Error
	add	esp, 8
$LN4@Delta_Init:

; 813  : 
; 814  : 	pfile = afile;

	mov	eax, DWORD PTR _afile$[ebp]
	mov	DWORD PTR _pfile$[ebp], eax
$LN2@Delta_Init:

; 815  : 
; 816  : 	while(( pfile = COM_ParseFile( pfile, token )) != NULL )

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfile$[ebp]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax
	cmp	DWORD PTR _pfile$[ebp], 0
	je	$LN3@Delta_Init

; 817  : 	{
; 818  : 		dt = Delta_FindStruct( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 819  : 
; 820  : 		if( dt == NULL )

	cmp	DWORD PTR _dt$[ebp], 0
	jne	SHORT $LN5@Delta_Init

; 821  : 		{
; 822  : 			Sys_Error( "%s: unknown struct %s\n", DELTA_PATH, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET ??_C@_09JMKDNJHO@delta?4lst@
	push	OFFSET ??_C@_0BH@KBAMMLEG@?$CFs?3?5unknown?5struct?5?$CFs?6@
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN5@Delta_Init:

; 823  : 		}
; 824  : 
; 825  : 		pfile = COM_ParseFile( pfile, encodeDll );

	lea	eax, DWORD PTR _encodeDll$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfile$[ebp]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 826  : 
; 827  : 		if( !Q_stricmp( encodeDll, "none" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_04CGFJFPFD@none@
	lea	eax, DWORD PTR _encodeDll$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@Delta_Init

; 828  : 			Q_strcpy( encodeFunc, "null" );

	push	99999					; 0001869fH
	push	OFFSET ??_C@_04MLLLIHIP@null@
	lea	eax, DWORD PTR _encodeFunc$[ebp]
	push	eax
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN7@Delta_Init
$LN6@Delta_Init:

; 829  : 		else pfile = COM_ParseFile( pfile, encodeFunc );

	lea	eax, DWORD PTR _encodeFunc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfile$[ebp]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax
$LN7@Delta_Init:

; 830  : 
; 831  : 		// jump to '{'
; 832  : 		pfile = COM_ParseFile( pfile, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfile$[ebp]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 833  : 	
; 834  : 		if( token[0] != '{' )

	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _token$[ebp+ecx]
	cmp	edx, 123				; 0000007bH
	je	SHORT $LN8@Delta_Init

; 835  : 		{
; 836  : 			Sys_Error( "%s: missing '{' in section %s\n", DELTA_PATH, dt->pName );

	mov	eax, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_09JMKDNJHO@delta?4lst@
	push	OFFSET ??_C@_0BP@MPHIIHIK@?$CFs?3?5missing?5?8?$HL?8?5in?5section?5?$CFs?6@
	call	_Sys_Error
	add	esp, 12					; 0000000cH
$LN8@Delta_Init:

; 837  : 		}
; 838  : 
; 839  : 		Delta_ParseTable( &pfile, dt, encodeDll, encodeFunc );

	lea	eax, DWORD PTR _encodeFunc$[ebp]
	push	eax
	lea	ecx, DWORD PTR _encodeDll$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dt$[ebp]
	push	edx
	lea	eax, DWORD PTR _pfile$[ebp]
	push	eax
	call	_Delta_ParseTable
	add	esp, 16					; 00000010H

; 840  : 	}

	jmp	$LN2@Delta_Init
$LN3@Delta_Init:

; 841  : 	Mem_Free( afile );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_InitFields@@9@9
	add	eax, 35					; 00000023H
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _afile$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 842  : #if 0
; 843  : 	// adding some required fields that user may forget or don't know how to specified
; 844  : 	Delta_AddField( "event_t", "velocity[0]", DT_SIGNED | DT_FLOAT, 16, 8.0f, 1.0f );
; 845  : 	Delta_AddField( "event_t", "velocity[1]", DT_SIGNED | DT_FLOAT, 16, 8.0f, 1.0f );
; 846  : 	Delta_AddField( "event_t", "velocity[2]", DT_SIGNED | DT_FLOAT, 16, 8.0f, 1.0f );	
; 847  : #endif
; 848  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_InitFields ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_Shutdown
_TEXT	SEGMENT
_i$ = -4						; size = 4
_Delta_Shutdown PROC					; COMDAT

; 926  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 927  : 	int	i;
; 928  : 
; 929  : 	if( !delta_init ) return;

	cmp	DWORD PTR _delta_init, 0
	jne	SHORT $LN5@Delta_Shut
	jmp	$LN1@Delta_Shut
$LN5@Delta_Shut:

; 930  : 
; 931  : 	for( i = 0; i < NUM_FIELDS( dt_info ); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Shut
$LN2@Delta_Shut:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Delta_Shut:
	cmp	DWORD PTR _i$[ebp], 8
	jae	$LN3@Delta_Shut

; 932  : 	{
; 933  : 		dt_info[i].numFields = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	DWORD PTR _dt_info[eax+12], 0

; 934  : 		dt_info[i].customEncode = CUSTOM_NONE;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	DWORD PTR _dt_info[eax+20], 0

; 935  : 		dt_info[i].userCallback = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	DWORD PTR _dt_info[eax+56], 0

; 936  : 		dt_info[i].funcName[0] = '\0';

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	BYTE PTR _dt_info[eax+edx+24], 0

; 937  : 
; 938  : 		if( dt_info[i].pFields )

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	cmp	DWORD PTR _dt_info[eax+16], 0
	je	SHORT $LN6@Delta_Shut

; 939  : 		{
; 940  : 			Z_Free( dt_info[i].pFields );

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	cmp	DWORD PTR _dt_info[eax+16], 0
	je	SHORT $LN7@Delta_Shut
	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_Shutdown@@9@9
	add	eax, 14					; 0000000eH
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _dt_info[ecx+16]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN7@Delta_Shut:

; 941  : 			dt_info[i].pFields = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	DWORD PTR _dt_info[eax+16], 0
$LN6@Delta_Shut:

; 942  : 		}
; 943  : 
; 944  : 		dt_info[i].bInitialized = false;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	DWORD PTR _dt_info[eax+60], 0

; 945  : 	}

	jmp	$LN2@Delta_Shut
$LN3@Delta_Shut:

; 946  : 
; 947  : 	delta_init = false;

	mov	DWORD PTR _delta_init, 0
$LN1@Delta_Shut:

; 948  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_Shutdown ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_InitClient
_TEXT	SEGMENT
_numActive$ = -8					; size = 4
_i$ = -4						; size = 4
_Delta_InitClient PROC					; COMDAT

; 907  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 908  : 	int	i, numActive = 0;

	mov	DWORD PTR _numActive$[ebp], 0

; 909  : 
; 910  : 	// already initalized
; 911  : 	if( delta_init ) return;

	cmp	DWORD PTR _delta_init, 0
	je	SHORT $LN5@Delta_Init
	jmp	SHORT $LN1@Delta_Init
$LN5@Delta_Init:

; 912  : 
; 913  : 	for( i = 0; i < NUM_FIELDS( dt_info ); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Delta_Init
$LN2@Delta_Init:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Delta_Init:
	cmp	DWORD PTR _i$[ebp], 8
	jae	SHORT $LN3@Delta_Init

; 914  : 	{
; 915  : 		if( dt_info[i].numFields > 0 )

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	cmp	DWORD PTR _dt_info[eax+12], 0
	jle	SHORT $LN6@Delta_Init

; 916  : 		{
; 917  : 			dt_info[i].bInitialized = true;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	DWORD PTR _dt_info[eax+60], 1

; 918  : 			numActive++;

	mov	eax, DWORD PTR _numActive$[ebp]
	add	eax, 1
	mov	DWORD PTR _numActive$[ebp], eax
$LN6@Delta_Init:

; 919  : 		}
; 920  : 	}

	jmp	SHORT $LN2@Delta_Init
$LN3@Delta_Init:

; 921  : 
; 922  : 	if( numActive ) delta_init = true;

	cmp	DWORD PTR _numActive$[ebp], 0
	je	SHORT $LN1@Delta_Init
	mov	DWORD PTR _delta_init, 1
$LN1@Delta_Init:

; 923  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_InitClient ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_encode.c
;	COMDAT _Delta_Init
_TEXT	SEGMENT
tv73 = -72						; size = 4
_dt$ = -4						; size = 4
_Delta_Init PROC					; COMDAT

; 851  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 852  : 	delta_info_t	*dt;
; 853  : 
; 854  : 	// shutdown it first
; 855  : 	if( delta_init ) Delta_Shutdown ();

	cmp	DWORD PTR _delta_init, 0
	je	SHORT $LN2@Delta_Init
	call	_Delta_Shutdown
$LN2@Delta_Init:

; 856  : 
; 857  : 	Delta_InitFields ();	// initialize fields

	call	_Delta_InitFields

; 858  : 	delta_init = true;

	mov	DWORD PTR _delta_init, 1

; 859  : 
; 860  : 	dt = Delta_FindStruct( "movevars_t" );

	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_FindStruct
	add	esp, 4
	mov	DWORD PTR _dt$[ebp], eax

; 861  : 
; 862  : 	Assert( dt != NULL );

	cmp	DWORD PTR _dt$[ebp], 0
	je	SHORT $LN7@Delta_Init
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN8@Delta_Init
$LN7@Delta_Init:
	mov	DWORD PTR tv73[ebp], 0
$LN8@Delta_Init:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??Delta_Init@@9@9
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_0DH@NEPJEFLH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0L@MMLOMCJB@dt?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 863  : 	if( dt->bInitialized ) return;	// "movevars_t" already specified by user

	mov	eax, DWORD PTR _dt$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN3@Delta_Init
	jmp	$LN1@Delta_Init
$LN3@Delta_Init:

; 864  : 
; 865  : 	// create movevars_t delta internal
; 866  : 	Delta_AddField( "movevars_t", "gravity", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_07GFBFDLBM@gravity@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 867  : 	Delta_AddField( "movevars_t", "stopspeed", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_09HOPGGGAO@stopspeed@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 868  : 	Delta_AddField( "movevars_t", "maxspeed", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_08EAANIMDC@maxspeed@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 869  : 	Delta_AddField( "movevars_t", "spectatormaxspeed", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_0BC@KAGEBNNG@spectatormaxspeed@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 870  : 	Delta_AddField( "movevars_t", "accelerate", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_0L@JNMCGPPJ@accelerate@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 871  : 	Delta_AddField( "movevars_t", "airaccelerate", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_0O@HHDLAGFA@airaccelerate@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 872  : 	Delta_AddField( "movevars_t", "wateraccelerate", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_0BA@OLMKAKFP@wateraccelerate@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 873  : 	Delta_AddField( "movevars_t", "friction", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_08LKDNMFOC@friction@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 874  : 	Delta_AddField( "movevars_t", "edgefriction", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_0N@CFOJOFHL@edgefriction@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 875  : 	Delta_AddField( "movevars_t", "waterfriction", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_0O@CFDLGHIB@waterfriction@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 876  : 	Delta_AddField( "movevars_t", "bounce", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_06DPMIMFNG@bounce@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 877  : 	Delta_AddField( "movevars_t", "stepsize", DT_FLOAT|DT_SIGNED, 16, 16.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_08JDNOLFFK@stepsize@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 878  : 	Delta_AddField( "movevars_t", "maxvelocity", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_0M@NNKMOAFL@maxvelocity@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 879  : 
; 880  : 	if( FBitSet( host.features, ENGINE_WRITE_LARGE_COORD ))

	mov	eax, DWORD PTR _host+34752
	and	eax, 1
	je	SHORT $LN4@Delta_Init

; 881  : 		Delta_AddField( "movevars_t", "zmax", DT_FLOAT|DT_SIGNED, 18, 1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	18					; 00000012H
	push	260					; 00000104H
	push	OFFSET ??_C@_04ONAAINLL@zmax@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H
	jmp	SHORT $LN5@Delta_Init
$LN4@Delta_Init:

; 882  : 	else Delta_AddField( "movevars_t", "zmax", DT_FLOAT|DT_SIGNED, 16, 1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_04ONAAINLL@zmax@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H
$LN5@Delta_Init:

; 883  : 
; 884  : 	Delta_AddField( "movevars_t", "waveHeight", DT_FLOAT|DT_SIGNED, 16, 16.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_0L@HGGPCLLG@waveHeight@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 885  : 	Delta_AddField( "movevars_t", "skyName", DT_STRING, 1, 1.0f, 1.0f ); 

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	128					; 00000080H
	push	OFFSET ??_C@_07CBECEDCM@skyName@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 886  : 	Delta_AddField( "movevars_t", "footsteps", DT_INTEGER, 1, 1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	8
	push	OFFSET ??_C@_09IPEFJHNA@footsteps@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 887  : 	Delta_AddField( "movevars_t", "rollangle", DT_FLOAT|DT_SIGNED, 16, 32.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_09LMFNGIPD@rollangle@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 888  : 	Delta_AddField( "movevars_t", "rollspeed", DT_FLOAT|DT_SIGNED, 16, 8.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_09JBFACAMF@rollspeed@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 889  : 	Delta_AddField( "movevars_t", "skycolor_r", DT_FLOAT|DT_SIGNED, 16, 1.0f, 1.0f ); // 0 - 264

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_0L@HKKOFOOP@skycolor_r@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 890  : 	Delta_AddField( "movevars_t", "skycolor_g", DT_FLOAT|DT_SIGNED, 16, 1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_0L@ENBLLIPL@skycolor_g@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 891  : 	Delta_AddField( "movevars_t", "skycolor_b", DT_FLOAT|DT_SIGNED, 16, 1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_0L@DAGMEMLO@skycolor_b@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 892  : 	Delta_AddField( "movevars_t", "skyvec_x", DT_FLOAT|DT_SIGNED, 16, 32.0f, 1.0f ); // 0 - 1

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_08BJFOJCL@skyvec_x@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 893  : 	Delta_AddField( "movevars_t", "skyvec_y", DT_FLOAT|DT_SIGNED, 16, 32.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_08BIIONIGK@skyvec_y@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 894  : 	Delta_AddField( "movevars_t", "skyvec_z", DT_FLOAT|DT_SIGNED, 16, 32.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_08DDKDILKJ@skyvec_z@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 895  : 	Delta_AddField("movevars_t", "skydir_x", DT_FLOAT | DT_SIGNED, 16, 32.0f, 1.0f); // 0 - 1

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_08GCNOJHEA@skydir_x@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 896  : 	Delta_AddField("movevars_t", "skydir_y", DT_FLOAT | DT_SIGNED, 16, 32.0f, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_08HLMFKGAB@skydir_y@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 897  : 	Delta_AddField("movevars_t", "skydir_z", DT_FLOAT | DT_SIGNED, 16, 32.0f, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_08FAOIPFMC@skydir_z@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 898  : 	Delta_AddField("movevars_t", "skyangle", DT_ANGLE, 16, 1.0f, 1.0f); // 0 - 360

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	16					; 00000010H
	push	OFFSET ??_C@_08DOLFEKJL@skyangle@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 899  : 	Delta_AddField( "movevars_t", "wateralpha", DT_FLOAT|DT_SIGNED, 16, 32.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	16					; 00000010H
	push	260					; 00000104H
	push	OFFSET ??_C@_0L@PNIALNHI@wateralpha@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 900  : 	Delta_AddField( "movevars_t", "fog_settings", DT_INTEGER, 32, 1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	32					; 00000020H
	push	8
	push	OFFSET ??_C@_0N@OKELJJEF@fog_settings@
	push	OFFSET ??_C@_0L@KOFNIOBN@movevars_t@
	call	_Delta_AddField
	add	esp, 24					; 00000018H

; 901  : 
; 902  : 	// now done
; 903  : 	dt->bInitialized = true;

	mov	eax, DWORD PTR _dt$[ebp]
	mov	DWORD PTR [eax+60], 1
$LN1@Delta_Init:

; 904  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Delta_Init ENDP
_TEXT	ENDS
END
