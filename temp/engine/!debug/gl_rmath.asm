; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\gl_rmath.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
_DATA	ENDS
PUBLIC	_V_CalcFov
PUBLIC	_V_AdjustFov
PUBLIC	_Matrix4x4_ToArrayFloatGL
PUBLIC	_Matrix4x4_FromArrayFloatGL
PUBLIC	_Matrix4x4_Concat
PUBLIC	_Matrix4x4_ConcatTranslate
PUBLIC	_Matrix4x4_ConcatRotate
PUBLIC	_Matrix4x4_ConcatScale
PUBLIC	_Matrix4x4_ConcatScale3
PUBLIC	_Matrix4x4_CreateTranslate
PUBLIC	_Matrix4x4_CreateRotate
PUBLIC	_Matrix4x4_CreateScale
PUBLIC	_Matrix4x4_CreateScale3
PUBLIC	_Matrix4x4_CreateProjection
PUBLIC	_Matrix4x4_CreateOrtho
PUBLIC	_Matrix4x4_CreateModelview
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@400921fb60000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@4076800000000000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@42652ee0
PUBLIC	__real@42b40000
PUBLIC	__real@43330000
PUBLIC	__real@43f00000
PUBLIC	__real@44200000
PUBLIC	__real@bc8efa35
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_memcpy:PROC
EXTRN	_atan:PROC
EXTRN	_sqrt:PROC
EXTRN	_tan:PROC
EXTRN	_SinCos:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bc8efa35
CONST	SEGMENT
__real@bc8efa35 DD 0bc8efa35r			; -0.0174533
CONST	ENDS
;	COMDAT __real@44200000
CONST	SEGMENT
__real@44200000 DD 044200000r			; 640
CONST	ENDS
;	COMDAT __real@43f00000
CONST	SEGMENT
__real@43f00000 DD 043f00000r			; 480
CONST	ENDS
;	COMDAT __real@43330000
CONST	SEGMENT
__real@43330000 DD 043330000r			; 179
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@4076800000000000
CONST	SEGMENT
__real@4076800000000000 DQ 04076800000000000r	; 360
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	072H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	05cH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	07dH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	072H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_CreateModelview
_TEXT	SEGMENT
_out$ = 8						; size = 4
_Matrix4x4_CreateModelview PROC				; COMDAT

; 140  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 141  : 	out[0][0] = out[1][1] = out[2][2] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+ecx], xmm0

; 142  : 	out[3][0] = out[0][3] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+ecx], xmm0

; 143  : 	out[3][1] = out[1][3] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 144  : 	out[3][2] = out[2][3] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 145  : 	out[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0

; 146  : 	out[1][0] = out[0][2] = out[2][1] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+ecx], xmm0

; 147  : 	out[2][0] = out[0][1] = -1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+edx], xmm0

; 148  : 	out[1][2] = 1.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0

; 149  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_CreateModelview ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_CreateOrtho
_TEXT	SEGMENT
_out$ = 8						; size = 4
_xLeft$ = 12						; size = 4
_xRight$ = 16						; size = 4
_yBottom$ = 20						; size = 4
_yTop$ = 24						; size = 4
_zNear$ = 28						; size = 4
_zFar$ = 32						; size = 4
_Matrix4x4_CreateOrtho PROC				; COMDAT

; 118  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 119  : 	out[0][0] = 2.0f / (xRight - xLeft);

	movss	xmm0, DWORD PTR _xRight$[ebp]
	subss	xmm0, DWORD PTR _xLeft$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm1

; 120  : 	out[1][1] = 2.0f / (yTop - yBottom);

	movss	xmm0, DWORD PTR _yTop$[ebp]
	subss	xmm0, DWORD PTR _yBottom$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm1

; 121  : 	out[2][2] = -2.0f / (zFar - zNear);

	movss	xmm0, DWORD PTR _zFar$[ebp]
	subss	xmm0, DWORD PTR _zNear$[ebp]
	movss	xmm1, DWORD PTR __real@c0000000
	divss	xmm1, xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm1

; 122  : 	out[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0

; 123  : 	out[0][1] = out[0][2] = out[1][0] = out[1][2] = out[3][0] = out[3][1] = out[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 124  : 
; 125  : 	out[2][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 126  : 	out[2][1] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 127  : 	out[0][3] = -(xRight + xLeft) / (xRight - xLeft);

	movss	xmm0, DWORD PTR _xRight$[ebp]
	addss	xmm0, DWORD PTR _xLeft$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _xRight$[ebp]
	subss	xmm1, DWORD PTR _xLeft$[ebp]
	divss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR [ecx+eax], xmm0

; 128  : 	out[1][3] = -(yTop + yBottom) / (yTop - yBottom);

	movss	xmm0, DWORD PTR _yTop$[ebp]
	addss	xmm0, DWORD PTR _yBottom$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _yTop$[ebp]
	subss	xmm1, DWORD PTR _yBottom$[ebp]
	divss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	DWORD PTR [eax+edx], xmm0

; 129  : 	out[2][3] = -(zFar + zNear) / (zFar - zNear);

	movss	xmm0, DWORD PTR _zFar$[ebp]
	addss	xmm0, DWORD PTR _zNear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	DWORD PTR [eax+edx], xmm0

; 130  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_CreateOrtho ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_CreateProjection
_TEXT	SEGMENT
_out$ = 8						; size = 4
_xMax$ = 12						; size = 4
_xMin$ = 16						; size = 4
_yMax$ = 20						; size = 4
_yMin$ = 24						; size = 4
_zNear$ = 28						; size = 4
_zFar$ = 32						; size = 4
_Matrix4x4_CreateProjection PROC			; COMDAT

; 103  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 104  : 	out[0][0] = ( 2.0f * zNear ) / ( xMax - xMin );

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _zNear$[ebp]
	movss	xmm1, DWORD PTR _xMax$[ebp]
	subss	xmm1, DWORD PTR _xMin$[ebp]
	divss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 105  : 	out[1][1] = ( 2.0f * zNear ) / ( yMax - yMin );

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _zNear$[ebp]
	movss	xmm1, DWORD PTR _yMax$[ebp]
	subss	xmm1, DWORD PTR _yMin$[ebp]
	divss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 106  : 	out[2][2] = -( zFar + zNear ) / ( zFar - zNear );

	movss	xmm0, DWORD PTR _zFar$[ebp]
	addss	xmm0, DWORD PTR _zNear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 107  : 	out[3][3] = out[0][1] = out[1][0] = out[3][0] = out[0][3] = out[3][1] = out[1][3] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [edx+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 108  : 
; 109  : 	out[2][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 110  : 	out[2][1] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 111  : 	out[0][2] = ( xMax + xMin ) / ( xMax - xMin );

	movss	xmm0, DWORD PTR _xMax$[ebp]
	addss	xmm0, DWORD PTR _xMin$[ebp]
	movss	xmm1, DWORD PTR _xMax$[ebp]
	subss	xmm1, DWORD PTR _xMin$[ebp]
	divss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 112  : 	out[1][2] = ( yMax + yMin ) / ( yMax - yMin );

	movss	xmm0, DWORD PTR _yMax$[ebp]
	addss	xmm0, DWORD PTR _yMin$[ebp]
	movss	xmm1, DWORD PTR _yMax$[ebp]
	subss	xmm1, DWORD PTR _yMin$[ebp]
	divss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 113  : 	out[3][2] = -1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+edx], xmm0

; 114  : 	out[2][3] = -( 2.0f * zFar * zNear ) / ( zFar - zNear );

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _zFar$[ebp]
	mulss	xmm0, DWORD PTR _zNear$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _zFar$[ebp]
	subss	xmm1, DWORD PTR _zNear$[ebp]
	divss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	DWORD PTR [eax+edx], xmm0

; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_CreateProjection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_CreateScale3
_TEXT	SEGMENT
_out$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_Matrix4x4_CreateScale3 PROC				; COMDAT

; 263  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 264  : 	out[0][0] = x;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 265  : 	out[0][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 266  : 	out[0][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 267  : 	out[0][3] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 268  : 	out[1][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 269  : 	out[1][1] = y;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 270  : 	out[1][2] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 271  : 	out[1][3] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 272  : 	out[2][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 273  : 	out[2][1] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 274  : 	out[2][2] = z;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 275  : 	out[2][3] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 276  : 	out[3][0] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 277  : 	out[3][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 278  : 	out[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 279  : 	out[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0

; 280  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_CreateScale3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_CreateScale
_TEXT	SEGMENT
_out$ = 8						; size = 4
_x$ = 12						; size = 4
_Matrix4x4_CreateScale PROC				; COMDAT

; 243  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 244  : 	out[0][0] = x;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 245  : 	out[0][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 246  : 	out[0][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 247  : 	out[0][3] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 248  : 	out[1][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 249  : 	out[1][1] = x;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 250  : 	out[1][2] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 251  : 	out[1][3] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 252  : 	out[2][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 253  : 	out[2][1] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 254  : 	out[2][2] = x;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+ecx], xmm0

; 255  : 	out[2][3] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 256  : 	out[3][0] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 257  : 	out[3][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 258  : 	out[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 259  : 	out[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0

; 260  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_CreateScale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_CreateRotate
_TEXT	SEGMENT
tv242 = -84						; size = 8
_s$ = -12						; size = 4
_c$ = -8						; size = 4
_len$ = -4						; size = 4
_out$ = 8						; size = 4
_angle$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_z$ = 24						; size = 4
_Matrix4x4_CreateRotate PROC				; COMDAT

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 213  : 	float	len, c, s;
; 214  : 
; 215  : 	len = x * x + y * y + z * z;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _z$[ebp]
	mulss	xmm1, DWORD PTR _z$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _len$[ebp], xmm0

; 216  : 	if( len != 0.0f ) len = 1.0f / sqrt( len );

	movss	xmm0, DWORD PTR _len$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@Matrix4x4_
	cvtss2sd xmm0, DWORD PTR _len$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv242[ebp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR tv242[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _len$[ebp], xmm0
$LN2@Matrix4x4_:

; 217  : 	x *= len;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _len$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 218  : 	y *= len;

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _len$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 219  : 	z *= len;

	movss	xmm0, DWORD PTR _z$[ebp]
	mulss	xmm0, DWORD PTR _len$[ebp]
	movss	DWORD PTR _z$[ebp], xmm0

; 220  : 
; 221  : 	angle *= (-M_PI / 180.0f);

	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR __real@bc8efa35
	movss	DWORD PTR _angle$[ebp], xmm0

; 222  : 	SinCos( angle, &s, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 223  : 
; 224  : 	out[0][0]=x * x + c * (1 - x * x);

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _x$[ebp]
	mulss	xmm1, DWORD PTR _x$[ebp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	mulss	xmm2, DWORD PTR _c$[ebp]
	addss	xmm0, xmm2
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 225  : 	out[0][1]=x * y * (1 - c) + z * s;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _z$[ebp]
	mulss	xmm1, DWORD PTR _s$[ebp]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 226  : 	out[0][2]=z * x * (1 - c) - y * s;

	movss	xmm0, DWORD PTR _z$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _s$[ebp]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 227  : 	out[0][3]=0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 228  : 	out[1][0]=x * y * (1 - c) - z * s;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _z$[ebp]
	mulss	xmm1, DWORD PTR _s$[ebp]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 229  : 	out[1][1]=y * y + c * (1 - y * y);

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	mulss	xmm2, DWORD PTR _c$[ebp]
	addss	xmm0, xmm2
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 230  : 	out[1][2]=y * z * (1 - c) + x * s;

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _x$[ebp]
	mulss	xmm1, DWORD PTR _s$[ebp]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 231  : 	out[1][3]=0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 232  : 	out[2][0]=z * x * (1 - c) + y * s;

	movss	xmm0, DWORD PTR _z$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _s$[ebp]
	addss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 233  : 	out[2][1]=y * z * (1 - c) - x * s;

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _x$[ebp]
	mulss	xmm1, DWORD PTR _s$[ebp]
	subss	xmm0, xmm1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 234  : 	out[2][2]=z * z + c * (1 - z * z);

	movss	xmm0, DWORD PTR _z$[ebp]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR _z$[ebp]
	mulss	xmm1, DWORD PTR _z$[ebp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	mulss	xmm2, DWORD PTR _c$[ebp]
	addss	xmm0, xmm2
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 235  : 	out[2][3]=0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 236  : 	out[3][0]=0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 237  : 	out[3][1]=0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 238  : 	out[3][2]=0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 239  : 	out[3][3]=1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0

; 240  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_CreateRotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_CreateTranslate
_TEXT	SEGMENT
_out$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_Matrix4x4_CreateTranslate PROC				; COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 193  : 	out[0][0] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0

; 194  : 	out[0][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 195  : 	out[0][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 196  : 	out[0][3] = x;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 197  : 	out[1][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 198  : 	out[1][1] = 1.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0

; 199  : 	out[1][2] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 200  : 	out[1][3] = y;

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 201  : 	out[2][0] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 202  : 	out[2][1] = 0.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+ecx], xmm0

; 203  : 	out[2][2] = 1.0f;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0

; 204  : 	out[2][3] = z;

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 205  : 	out[3][0] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0

; 206  : 	out[3][1] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 207  : 	out[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+edx], xmm0

; 208  : 	out[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0

; 209  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_CreateTranslate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_ConcatScale3
_TEXT	SEGMENT
_temp$ = -132						; size = 64
_base$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_Matrix4x4_ConcatScale3 PROC				; COMDAT

; 310  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 311  : 	matrix4x4  base, temp;
; 312  : 
; 313  : 	Matrix4x4_Copy( base, out );

	push	64					; 00000040H
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 314  : 	Matrix4x4_CreateScale3( temp, x, y, z );

	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	_Matrix4x4_CreateScale3
	add	esp, 16					; 00000010H

; 315  : 	Matrix4x4_Concat( out, base, temp );

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_Matrix4x4_Concat
	add	esp, 12					; 0000000cH

; 316  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_ConcatScale3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_ConcatScale
_TEXT	SEGMENT
_temp$ = -132						; size = 64
_base$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_x$ = 12						; size = 4
_Matrix4x4_ConcatScale PROC				; COMDAT

; 301  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 302  : 	matrix4x4	base, temp;
; 303  : 
; 304  : 	Matrix4x4_Copy( base, out );

	push	64					; 00000040H
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 305  : 	Matrix4x4_CreateScale( temp, x );

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	_Matrix4x4_CreateScale
	add	esp, 8

; 306  : 	Matrix4x4_Concat( out, base, temp );

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_Matrix4x4_Concat
	add	esp, 12					; 0000000cH

; 307  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_ConcatScale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_ConcatRotate
_TEXT	SEGMENT
_temp$ = -132						; size = 64
_base$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_angle$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_z$ = 24						; size = 4
_Matrix4x4_ConcatRotate PROC				; COMDAT

; 292  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 293  : 	matrix4x4 base, temp;
; 294  : 
; 295  : 	Matrix4x4_Copy( base, out );

	push	64					; 00000040H
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 296  : 	Matrix4x4_CreateRotate( temp, angle, x, y, z );

	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	_Matrix4x4_CreateRotate
	add	esp, 20					; 00000014H

; 297  : 	Matrix4x4_Concat( out, base, temp );

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_Matrix4x4_Concat
	add	esp, 12					; 0000000cH

; 298  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_ConcatRotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_ConcatTranslate
_TEXT	SEGMENT
_temp$ = -132						; size = 64
_base$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_out$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_Matrix4x4_ConcatTranslate PROC				; COMDAT

; 283  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 284  : 	matrix4x4 base, temp;
; 285  : 
; 286  : 	Matrix4x4_Copy( base, out );

	push	64					; 00000040H
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	lea	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 287  : 	Matrix4x4_CreateTranslate( temp, x, y, z );

	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	_Matrix4x4_CreateTranslate
	add	esp, 16					; 00000010H

; 288  : 	Matrix4x4_Concat( out, base, temp );

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_Matrix4x4_Concat
	add	esp, 12					; 0000000cH

; 289  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_ConcatTranslate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_Concat
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in1$ = 12						; size = 4
_in2$ = 16						; size = 4
_Matrix4x4_Concat PROC					; COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 77   : 	out[0][0] = in1[0][0] * in2[0][0] + in1[0][1] * in2[1][0] + in1[0][2] * in2[2][0] + in1[0][3] * in2[3][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 78   : 	out[0][1] = in1[0][0] * in2[0][1] + in1[0][1] * in2[1][1] + in1[0][2] * in2[2][1] + in1[0][3] * in2[3][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 79   : 	out[0][2] = in1[0][0] * in2[0][2] + in1[0][1] * in2[1][2] + in1[0][2] * in2[2][2] + in1[0][3] * in2[3][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 80   : 	out[0][3] = in1[0][0] * in2[0][3] + in1[0][1] * in2[1][3] + in1[0][2] * in2[2][3] + in1[0][3] * in2[3][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	DWORD PTR [eax+edx], xmm0

; 81   : 	out[1][0] = in1[1][0] * in2[0][0] + in1[1][1] * in2[1][0] + in1[1][2] * in2[2][0] + in1[1][3] * in2[3][0];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	imul	eax, eax, 3
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 82   : 	out[1][1] = in1[1][0] * in2[0][1] + in1[1][1] * in2[1][1] + in1[1][2] * in2[2][1] + in1[1][3] * in2[3][1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	imul	eax, eax, 3
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 83   : 	out[1][2] = in1[1][0] * in2[0][2] + in1[1][1] * in2[1][2] + in1[1][2] * in2[2][2] + in1[1][3] * in2[3][2];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	imul	eax, eax, 3
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 84   : 	out[1][3] = in1[1][0] * in2[0][3] + in1[1][1] * in2[1][3] + in1[1][2] * in2[2][3] + in1[1][3] * in2[3][3];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	imul	eax, eax, 3
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR [ecx+eax], xmm0

; 85   : 	out[2][0] = in1[2][0] * in2[0][0] + in1[2][1] * in2[1][0] + in1[2][2] * in2[2][0] + in1[2][3] * in2[3][0];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	imul	eax, eax, 3
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR [ecx+eax], xmm0

; 86   : 	out[2][1] = in1[2][0] * in2[0][1] + in1[2][1] * in2[1][1] + in1[2][2] * in2[2][1] + in1[2][3] * in2[3][1];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	imul	eax, eax, 3
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 87   : 	out[2][2] = in1[2][0] * in2[0][2] + in1[2][1] * in2[1][2] + in1[2][2] * in2[2][2] + in1[2][3] * in2[3][2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	imul	eax, eax, 3
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 88   : 	out[2][3] = in1[2][0] * in2[0][3] + in1[2][1] * in2[1][3] + in1[2][2] * in2[2][3] + in1[2][3] * in2[3][3];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, 16					; 00000010H
	imul	eax, eax, 3
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+ecx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	DWORD PTR [ecx+eax], xmm0

; 89   : 	out[3][0] = in1[3][0] * in2[0][0] + in1[3][1] * in2[1][0] + in1[3][2] * in2[2][0] + in1[3][3] * in2[3][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0

; 90   : 	out[3][1] = in1[3][0] * in2[0][1] + in1[3][1] * in2[1][1] + in1[3][2] * in2[2][1] + in1[3][3] * in2[3][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 91   : 	out[3][2] = in1[3][0] * in2[0][2] + in1[3][1] * in2[1][2] + in1[3][2] * in2[2][2] + in1[3][3] * in2[3][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 92   : 	out[3][3] = in1[3][0] * in2[0][3] + in1[3][1] * in2[1][3] + in1[3][2] * in2[2][3] + in1[3][3] * in2[3][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 16					; 00000010H
	imul	edx, edx, 0
	add	edx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in1$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+esi]
	addss	xmm0, xmm1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	add	edx, DWORD PTR _in1$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _in1$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 16					; 00000010H
	imul	ecx, ecx, 3
	add	ecx, DWORD PTR _in2$[ebp]
	mov	esi, 4
	imul	esi, esi, 3
	movss	xmm1, DWORD PTR [eax+edx]
	mulss	xmm1, DWORD PTR [ecx+esi]
	addss	xmm0, xmm1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _out$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	DWORD PTR [eax+edx], xmm0

; 93   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_Concat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_FromArrayFloatGL
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_Matrix4x4_FromArrayFloatGL PROC			; COMDAT

; 172  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 173  : 	out[0][0] = in[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 174  : 	out[1][0] = in[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 175  : 	out[2][0] = in[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [ecx+edx], eax

; 176  : 	out[3][0] = in[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 177  : 	out[0][1] = in[4];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 178  : 	out[1][1] = in[5];

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx

; 179  : 	out[2][1] = in[6];

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx

; 180  : 	out[3][1] = in[7];

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 181  : 	out[0][2] = in[8];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 182  : 	out[1][2] = in[9];

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx

; 183  : 	out[2][2] = in[10];

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx

; 184  : 	out[3][2] = in[11];

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 185  : 	out[0][3] = in[12];

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 186  : 	out[1][3] = in[13];

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx

; 187  : 	out[2][3] = in[14];

	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx

; 188  : 	out[3][3] = in[15];

	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _out$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 189  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_FromArrayFloatGL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _Matrix4x4_ToArrayFloatGL
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_Matrix4x4_ToArrayFloatGL PROC				; COMDAT

; 152  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 153  : 	out[ 0] = in[0][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [esi+edx], eax

; 154  : 	out[ 1] = in[1][0];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 155  : 	out[ 2] = in[2][0];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 156  : 	out[ 3] = in[3][0];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [esi+edx], eax

; 157  : 	out[ 4] = in[0][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 2
	mov	esi, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [esi+eax], ecx

; 158  : 	out[ 5] = in[1][1];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 159  : 	out[ 6] = in[2][1];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	edx, edx, 6
	mov	esi, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 160  : 	out[ 7] = in[3][1];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	eax, eax, 7
	mov	esi, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [esi+eax], ecx

; 161  : 	out[ 8] = in[0][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [esi+eax], ecx

; 162  : 	out[ 9] = in[1][2];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	edx, edx, 9
	mov	esi, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 163  : 	out[10] = in[2][2];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	edx, edx, 10
	mov	esi, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [esi+edx], eax

; 164  : 	out[11] = in[3][2];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	eax, eax, 11
	mov	esi, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [esi+eax], ecx

; 165  : 	out[12] = in[0][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 4
	imul	edx, edx, 12
	mov	esi, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [esi+edx], eax

; 166  : 	out[13] = in[1][3];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	imul	ecx, ecx, 13
	mov	esi, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 167  : 	out[14] = in[2][3];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _in$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, 4
	imul	ecx, ecx, 14
	mov	esi, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	mov	DWORD PTR [esi+ecx], edx

; 168  : 	out[15] = in[3][3];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _in$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, 4
	imul	edx, edx, 15
	mov	esi, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [esi+edx], eax

; 169  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Matrix4x4_ToArrayFloatGL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _V_AdjustFov
_TEXT	SEGMENT
tv153 = -96						; size = 8
tv148 = -88						; size = 8
tv180 = -80						; size = 8
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_fov_x$ = 8						; size = 4
_fov_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_lock_x$ = 24						; size = 4
_V_AdjustFov PROC					; COMDAT

; 45   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 46   : 	float x, y;
; 47   : 
; 48   : 	if( width * 3 == 4 * height || width * 4 == height * 5 )

	movss	xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR __real@40400000
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR _height$[ebp]
	ucomiss	xmm0, xmm1
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@V_AdjustFo
	movss	xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR __real@40800000
	movss	xmm1, DWORD PTR _height$[ebp]
	mulss	xmm1, DWORD PTR __real@40a00000
	ucomiss	xmm0, xmm1
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@V_AdjustFo
$LN3@V_AdjustFo:

; 49   : 	{
; 50   : 		// 4:3 or 5:4 ratio
; 51   : 		return;

	jmp	$LN6@V_AdjustFo
$LN2@V_AdjustFo:

; 52   : 	}
; 53   : 
; 54   : 	if( lock_x )

	cmp	DWORD PTR _lock_x$[ebp], 0
	je	$LN4@V_AdjustFo

; 55   : 	{
; 56   : 		*fov_y = 2 * atan((width * 3) / (height * 4) * tan( *fov_y * M_PI / 360.0 * 0.5 )) * 360 / M_PI;

	movss	xmm0, DWORD PTR _width$[ebp]
	mulss	xmm0, DWORD PTR __real@40400000
	movss	xmm1, DWORD PTR _height$[ebp]
	mulss	xmm1, DWORD PTR __real@40800000
	divss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	mov	eax, DWORD PTR _fov_y$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR __real@40490fdb
	cvtss2sd xmm1, xmm1
	divsd	xmm1, QWORD PTR __real@4076800000000000
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv180[ebp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv148[ebp]
	movsd	xmm0, QWORD PTR tv180[ebp]
	mulsd	xmm0, QWORD PTR tv148[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv153[ebp]
	movsd	xmm0, QWORD PTR tv153[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	mulsd	xmm0, QWORD PTR __real@4076800000000000
	divsd	xmm0, QWORD PTR __real@400921fb60000000
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _fov_y$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 57   : 		return;

	jmp	$LN6@V_AdjustFo
$LN4@V_AdjustFo:

; 58   : 	}
; 59   : 
; 60   : 	y = V_CalcFov( fov_x, 640, 480 );

	push	ecx
	movss	xmm0, DWORD PTR __real@43f00000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@44200000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _fov_x$[ebp]
	push	eax
	call	_V_CalcFov
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _y$[ebp]

; 61   : 	x = *fov_x;

	mov	eax, DWORD PTR _fov_x$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _x$[ebp], xmm0

; 62   : 
; 63   : 	*fov_x = V_CalcFov( &y, height, width );

	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	call	_V_CalcFov
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _fov_x$[ebp]
	fstp	DWORD PTR [ecx]

; 64   : 	if( *fov_x < x ) *fov_x = x;

	mov	eax, DWORD PTR _fov_x$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN5@V_AdjustFo
	mov	eax, DWORD PTR _fov_x$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN6@V_AdjustFo
$LN5@V_AdjustFo:

; 65   : 	else *fov_y = y;

	mov	eax, DWORD PTR _fov_y$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax], xmm0
$LN6@V_AdjustFo:

; 66   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_V_AdjustFov ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rmath.c
;	COMDAT _V_CalcFov
_TEXT	SEGMENT
tv128 = -88						; size = 8
tv139 = -80						; size = 8
tv136 = -76						; size = 4
_half_fov_y$ = -8					; size = 4
_x$ = -4						; size = 4
_fov_x$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_V_CalcFov PROC						; COMDAT

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 28   : 	float	x, half_fov_y;
; 29   : 
; 30   : 	if( *fov_x < 1.0f || *fov_x > 179.0f )

	mov	eax, DWORD PTR _fov_x$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [eax]
	ja	SHORT $LN3@V_CalcFov
	mov	eax, DWORD PTR _fov_x$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR __real@43330000
	jbe	SHORT $LN2@V_CalcFov
$LN3@V_CalcFov:

; 31   : 		*fov_x = 90.0f; // default value

	mov	eax, DWORD PTR _fov_x$[ebp]
	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR [eax], xmm0
$LN2@V_CalcFov:

; 32   : 
; 33   : 	x = width / tan( DEG2RAD( *fov_x ) * 0.5f );

	cvtss2sd xmm0, DWORD PTR _width$[ebp]
	mov	eax, DWORD PTR _fov_x$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR __real@3c8efa35
	mulss	xmm1, DWORD PTR __real@3f000000
	cvtss2sd xmm1, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv139[ebp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv128[ebp]
	movsd	xmm0, QWORD PTR tv139[ebp]
	divsd	xmm0, QWORD PTR tv128[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _x$[ebp], xmm0

; 34   : 	half_fov_y = atan( height / x );

	movss	xmm0, DWORD PTR _height$[ebp]
	divss	xmm0, DWORD PTR _x$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	DWORD PTR _half_fov_y$[ebp]

; 35   : 
; 36   : 	return RAD2DEG( half_fov_y ) * 2;

	movss	xmm0, DWORD PTR _half_fov_y$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee0
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv136[ebp], xmm0
	fld	DWORD PTR tv136[ebp]

; 37   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_V_CalcFov ENDP
_TEXT	ENDS
END
