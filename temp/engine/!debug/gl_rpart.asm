; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\gl_rpart.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_cl_particles
_DATA	SEGMENT
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
COMM	_cl_free_particles:DWORD
COMM	_tracerred:DWORD
COMM	_tracergreen:DWORD
COMM	_tracerblue:DWORD
COMM	_traceralpha:DWORD
COMM	_tracerspeed:DWORD
COMM	_tracerlength:DWORD
COMM	_traceroffset:DWORD
COMM	_cl_active_particles:DWORD
COMM	_cl_active_tracers:DWORD
_DATA	ENDS
_BSS	SEGMENT
_cl_particles DD 01H DUP (?)
_BSS	ENDS
PUBLIC	_CL_Particle
PUBLIC	_CL_DrawParticlesExternal
PUBLIC	_R_FreeDeadParticles
PUBLIC	_CL_InitParticles
PUBLIC	_CL_ClearParticles
PUBLIC	_CL_FreeParticles
PUBLIC	_CL_DrawParticles
PUBLIC	_CL_DrawTracers
PUBLIC	_CL_ReadPointFile_f
PUBLIC	_R_AllocParticle
PUBLIC	_R_ParticleExplosion
PUBLIC	_R_ParticleExplosion2
PUBLIC	_R_Implosion
PUBLIC	_R_Blood
PUBLIC	_R_BloodStream
PUBLIC	_R_BlobExplosion
PUBLIC	_R_EntityParticles
PUBLIC	_R_FlickerParticles
PUBLIC	_R_RunParticleEffect
PUBLIC	_R_ParticleBurst
PUBLIC	_R_LavaSplash
PUBLIC	_R_TeleportSplash
PUBLIC	_R_RocketTrail
PUBLIC	_R_LookupColor
PUBLIC	_R_GetPackedColor
PUBLIC	_R_TracerEffect
PUBLIC	_R_UserTracerParticle
PUBLIC	_R_TracerParticles
PUBLIC	_R_ParticleLine
PUBLIC	_R_ParticleBox
PUBLIC	_R_ShowLine
PUBLIC	_R_BulletImpactParticles
PUBLIC	_R_LargeFunnel
PUBLIC	_R_StreakSplash
PUBLIC	_R_SparkStreaks
PUBLIC	_R_DebugParticle
PUBLIC	_CL_FreeParticle
PUBLIC	_R_AllocTracer
PUBLIC	?__LINE__Var@?0??CL_InitParticles@@9@9		; `CL_InitParticles'::`1'::__LINE__Var
PUBLIC	??_C@_0DF@JAJOEGLN@D?3?2DevDragon?2XashFE?2dev?2src?2eng@ ; `string'
PUBLIC	??_C@_0CI@EODOIAPO@tracer?5red?5component?5weight?5?$CI?50@ ; `string'
PUBLIC	??_C@_03LNMAPFD@0?48@				; `string'
PUBLIC	??_C@_09MOANENFM@tracerred@			; `string'
PUBLIC	??_C@_0CK@JHGHGJCM@tracer?5green?5component?5weight?5?$CI@ ; `string'
PUBLIC	??_C@_0M@JCGGBBEF@tracergreen@			; `string'
PUBLIC	??_C@_0CJ@NMAOBFAJ@tracer?5blue?5component?5weight?5?$CI?5@ ; `string'
PUBLIC	??_C@_03KHGJEAFP@0?44@				; `string'
PUBLIC	??_C@_0L@HKJFJODP@tracerblue@			; `string'
PUBLIC	??_C@_0CA@NDNALAOK@tracer?5alpha?5amount?5?$CI?50?5?9?51?40?5?$CJ@ ; `string'
PUBLIC	??_C@_03LOHCHBBO@0?45@				; `string'
PUBLIC	??_C@_0M@HDGIPDIK@traceralpha@			; `string'
PUBLIC	??_C@_0N@OJBABCOM@tracer?5speed@		; `string'
PUBLIC	??_C@_04BMLKGOAG@6000@				; `string'
PUBLIC	??_C@_0M@IKAOOKCC@tracerspeed@			; `string'
PUBLIC	??_C@_0BF@MEDMFCHN@tracer?5length?5factor@	; `string'
PUBLIC	??_C@_0N@HLLMILEE@tracerlength@			; `string'
PUBLIC	??_C@_0BH@PPPAAIEJ@tracer?5starting?5offset@	; `string'
PUBLIC	??_C@_02PJNFELNH@30@				; `string'
PUBLIC	??_C@_0N@NIFIPMGE@traceroffset@			; `string'
PUBLIC	?__LINE__Var@?0??CL_FreeParticles@@9@9		; `CL_FreeParticles'::`1'::__LINE__Var
PUBLIC	??_C@_0CC@BJDAFHFN@?$FO1Error?3?$FO7?5Overflow?5?$CFd?5particle@ ; `string'
PUBLIC	??_C@_0CA@CEDNCPFN@?$FO1Error?3?$FO7?5Overflow?5?$CFd?5tracers?6@ ; `string'
PUBLIC	??_C@_0CH@PKONPJOH@?$FO1Error?3?$FO7?5UserTracer?5with?5colo@ ; `string'
PUBLIC	?__LINE__Var@?0??CL_ReadPointFile_f@@9@9	; `CL_ReadPointFile_f'::`1'::__LINE__Var
PUBLIC	??_C@_0M@OOKLKFOI@maps?1?$CFs?4pts@		; `string'
PUBLIC	??_C@_0BN@JCJEHCDP@?$FO1Error?3?$FO7?5couldn?8t?5open?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0P@DNKMKNEK@Reading?5?$CFs?4?4?4?6@	; `string'
PUBLIC	??_C@_0CH@INBPIBDD@?$FO1Error?3?$FO7?5not?5enough?5free?5part@ ; `string'
PUBLIC	??_C@_0BA@OCDBFJMH@?$CFi?5points?5read?6@	; `string'
PUBLIC	??_C@_0BG@IBGKBEMO@map?5?$CFs?5has?5no?5leaks?$CB?6@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3727c5ac
PUBLIC	__real@3b03126f
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d75c28f
PUBLIC	__real@3d99999a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@3eae147b
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f50624de0000000
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae140000000
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fa99999a0000000
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fd3333340000000
PUBLIC	__real@3fd9999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3feccccccccccccd
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4019999a
PUBLIC	__real@40233333
PUBLIC	__real@4024000000000000
PUBLIC	__real@4027ae14
PUBLIC	__real@402e000000000000
PUBLIC	__real@4030000000000000
PUBLIC	__real@403e000000000000
PUBLIC	__real@40400000
PUBLIC	__real@406fe00000000000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40c00000
PUBLIC	__real@40e00000
PUBLIC	__real@40f869f000000000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41700000
PUBLIC	__real@41800000
PUBLIC	__real@41a00000
PUBLIC	__real@41f00000
PUBLIC	__real@42000000
PUBLIC	__real@42480000
PUBLIC	__real@427c0000
PUBLIC	__real@42800000
PUBLIC	__real@42a00000
PUBLIC	__real@42c00000
PUBLIC	__real@42c80000
PUBLIC	__real@42de0000
PUBLIC	__real@42e20000
PUBLIC	__real@43000000
PUBLIC	__real@430f0000
PUBLIC	__real@437f0000
PUBLIC	__real@43800000
PUBLIC	__real@44480000
PUBLIC	__real@447a0000
PUBLIC	__real@46040000
PUBLIC	__real@497423f0
PUBLIC	__real@bd75c28f
PUBLIC	__real@bf000000
PUBLIC	__real@bf800000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c0400000
PUBLIC	__real@c1000000
PUBLIC	__real@c1200000
PUBLIC	__real@c1800000
PUBLIC	__real@c2000000
PUBLIC	__real@c2c80000
PUBLIC	__real@c3800000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_memcpy:PROC
EXTRN	_Q_atof:PROC
EXTRN	_Q_snprintf:PROC
EXTRN	__Mem_Alloc:PROC
EXTRN	__Mem_Free:PROC
EXTRN	_Cvar_Get:PROC
EXTRN	_FS_LoadFile:PROC
EXTRN	_Con_DPrintf:PROC
EXTRN	_Con_Printf:PROC
EXTRN	_COM_ParseFile:PROC
EXTRN	_COM_RandomLong:PROC
EXTRN	_COM_RandomFloat:PROC
EXTRN	_LightToTexGamma:PROC
EXTRN	_sqrt:PROC
EXTRN	_SinCos:PROC
EXTRN	_VectorNormalizeLength2:PROC
EXTRN	_VectorVectors:PROC
EXTRN	_CL_DrawBeams:PROC
EXTRN	_GL_Bind:PROC
EXTRN	_R_CullBox:PROC
EXTRN	_R_SetupRefParams:PROC
EXTRN	_R_SetupGL:PROC
EXTRN	_R_SetupFrustum:PROC
EXTRN	_PM_ParticleLine:PROC
EXTRN	_PM_DrawBBox:PROC
EXTRN	_TriSpriteTexture:PROC
EXTRN	_TriWorldToScreen:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_host:BYTE
EXTRN	_SI:BYTE
EXTRN	_m_bytenormals:BYTE
EXTRN	_world:BYTE
EXTRN	_cl:BYTE
EXTRN	_cls:BYTE
EXTRN	_clgame:BYTE
EXTRN	_cl_draw_particles:DWORD
EXTRN	_cl_draw_tracers:DWORD
EXTRN	_r_stats:BYTE
EXTRN	_RI:BYTE
EXTRN	_tr:BYTE
EXTRN	_cl_sprite_dot:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_cl_avelocities DD 01e6H DUP (?)
_cl_lasttimewarn DD 01H DUP (?)
?tracercount@?1??R_RocketTrail@@9@9 DD 01H DUP (?)	; `R_RocketTrail'::`2'::tracercount
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c3800000
CONST	SEGMENT
__real@c3800000 DD 0c3800000r			; -256
CONST	ENDS
;	COMDAT __real@c2c80000
CONST	SEGMENT
__real@c2c80000 DD 0c2c80000r			; -100
CONST	ENDS
;	COMDAT __real@c2000000
CONST	SEGMENT
__real@c2000000 DD 0c2000000r			; -32
CONST	ENDS
;	COMDAT __real@c1800000
CONST	SEGMENT
__real@c1800000 DD 0c1800000r			; -16
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@bd75c28f
CONST	SEGMENT
__real@bd75c28f DD 0bd75c28fr			; -0.06
CONST	ENDS
;	COMDAT __real@497423f0
CONST	SEGMENT
__real@497423f0 DD 0497423f0r			; 999999
CONST	ENDS
;	COMDAT __real@46040000
CONST	SEGMENT
__real@46040000 DD 046040000r			; 8448
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@44480000
CONST	SEGMENT
__real@44480000 DD 044480000r			; 800
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@430f0000
CONST	SEGMENT
__real@430f0000 DD 0430f0000r			; 143
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42e20000
CONST	SEGMENT
__real@42e20000 DD 042e20000r			; 113
CONST	ENDS
;	COMDAT __real@42de0000
CONST	SEGMENT
__real@42de0000 DD 042de0000r			; 111
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42c00000
CONST	SEGMENT
__real@42c00000 DD 042c00000r			; 96
CONST	ENDS
;	COMDAT __real@42a00000
CONST	SEGMENT
__real@42a00000 DD 042a00000r			; 80
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@427c0000
CONST	SEGMENT
__real@427c0000 DD 0427c0000r			; 63
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40f869f000000000
CONST	SEGMENT
__real@40f869f000000000 DQ 040f869f000000000r	; 99999
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@403e000000000000
CONST	SEGMENT
__real@403e000000000000 DQ 0403e000000000000r	; 30
CONST	ENDS
;	COMDAT __real@4030000000000000
CONST	SEGMENT
__real@4030000000000000 DQ 04030000000000000r	; 16
CONST	ENDS
;	COMDAT __real@402e000000000000
CONST	SEGMENT
__real@402e000000000000 DQ 0402e000000000000r	; 15
CONST	ENDS
;	COMDAT __real@4027ae14
CONST	SEGMENT
__real@4027ae14 DD 04027ae14r			; 2.62
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@40233333
CONST	SEGMENT
__real@40233333 DD 040233333r			; 2.55
CONST	ENDS
;	COMDAT __real@4019999a
CONST	SEGMENT
__real@4019999a DD 04019999ar			; 2.4
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feccccccccccccd
CONST	SEGMENT
__real@3feccccccccccccd DQ 03feccccccccccccdr	; 0.9
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd9999a
CONST	SEGMENT
__real@3fd9999a DD 03fd9999ar			; 1.7
CONST	ENDS
;	COMDAT __real@3fd3333340000000
CONST	SEGMENT
__real@3fd3333340000000 DQ 03fd3333340000000r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fa99999a0000000
CONST	SEGMENT
__real@3fa99999a0000000 DQ 03fa99999a0000000r	; 0.05
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3f847ae140000000
CONST	SEGMENT
__real@3f847ae140000000 DQ 03f847ae140000000r	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f50624de0000000
CONST	SEGMENT
__real@3f50624de0000000 DQ 03f50624de0000000r	; 0.001
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3eae147b
CONST	SEGMENT
__real@3eae147b DD 03eae147br			; 0.34
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d99999a
CONST	SEGMENT
__real@3d99999a DD 03d99999ar			; 0.075
CONST	ENDS
;	COMDAT __real@3d75c28f
CONST	SEGMENT
__real@3d75c28f DD 03d75c28fr			; 0.06
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@3b03126f
CONST	SEGMENT
__real@3b03126f DD 03b03126fr			; 0.002
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0BG@IBGKBEMO@map?5?$CFs?5has?5no?5leaks?$CB?6@
CONST	SEGMENT
??_C@_0BG@IBGKBEMO@map?5?$CFs?5has?5no?5leaks?$CB?6@ DB 'map %s has no le'
	DB	'aks!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OCDBFJMH@?$CFi?5points?5read?6@
CONST	SEGMENT
??_C@_0BA@OCDBFJMH@?$CFi?5points?5read?6@ DB '%i points read', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@INBPIBDD@?$FO1Error?3?$FO7?5not?5enough?5free?5part@
CONST	SEGMENT
??_C@_0CH@INBPIBDD@?$FO1Error?3?$FO7?5not?5enough?5free?5part@ DB '^1Erro'
	DB	'r:^7 not enough free particles!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DNKMKNEK@Reading?5?$CFs?4?4?4?6@
CONST	SEGMENT
??_C@_0P@DNKMKNEK@Reading?5?$CFs?4?4?4?6@ DB 'Reading %s...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JCJEHCDP@?$FO1Error?3?$FO7?5couldn?8t?5open?5?$CFs?6@
CONST	SEGMENT
??_C@_0BN@JCJEHCDP@?$FO1Error?3?$FO7?5couldn?8t?5open?5?$CFs?6@ DB '^1Err'
	DB	'or:^7 couldn''t open %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OOKLKFOI@maps?1?$CFs?4pts@
CONST	SEGMENT
??_C@_0M@OOKLKFOI@maps?1?$CFs?4pts@ DB 'maps/%s.pts', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??CL_ReadPointFile_f@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??CL_ReadPointFile_f@@9@9 DD 0641H	; `CL_ReadPointFile_f'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@PKONPJOH@?$FO1Error?3?$FO7?5UserTracer?5with?5colo@
CONST	SEGMENT
??_C@_0CH@PKONPJOH@?$FO1Error?3?$FO7?5UserTracer?5with?5colo@ DB '^1Error'
	DB	':^7 UserTracer with color > %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CEDNCPFN@?$FO1Error?3?$FO7?5Overflow?5?$CFd?5tracers?6@
CONST	SEGMENT
??_C@_0CA@CEDNCPFN@?$FO1Error?3?$FO7?5Overflow?5?$CFd?5tracers?6@ DB '^1E'
	DB	'rror:^7 Overflow %d tracers', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BJDAFHFN@?$FO1Error?3?$FO7?5Overflow?5?$CFd?5particle@
CONST	SEGMENT
??_C@_0CC@BJDAFHFN@?$FO1Error?3?$FO7?5Overflow?5?$CFd?5particle@ DB '^1Er'
	DB	'ror:^7 Overflow %d particles', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??CL_FreeParticles@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??CL_FreeParticles@@9@9 DD 0b4H		; `CL_FreeParticles'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@NIFIPMGE@traceroffset@
CONST	SEGMENT
??_C@_0N@NIFIPMGE@traceroffset@ DB 'traceroffset', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02PJNFELNH@30@
CONST	SEGMENT
??_C@_02PJNFELNH@30@ DB '30', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PPPAAIEJ@tracer?5starting?5offset@
CONST	SEGMENT
??_C@_0BH@PPPAAIEJ@tracer?5starting?5offset@ DB 'tracer starting offset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HLLMILEE@tracerlength@
CONST	SEGMENT
??_C@_0N@HLLMILEE@tracerlength@ DB 'tracerlength', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MEDMFCHN@tracer?5length?5factor@
CONST	SEGMENT
??_C@_0BF@MEDMFCHN@tracer?5length?5factor@ DB 'tracer length factor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IKAOOKCC@tracerspeed@
CONST	SEGMENT
??_C@_0M@IKAOOKCC@tracerspeed@ DB 'tracerspeed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BMLKGOAG@6000@
CONST	SEGMENT
??_C@_04BMLKGOAG@6000@ DB '6000', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OJBABCOM@tracer?5speed@
CONST	SEGMENT
??_C@_0N@OJBABCOM@tracer?5speed@ DB 'tracer speed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HDGIPDIK@traceralpha@
CONST	SEGMENT
??_C@_0M@HDGIPDIK@traceralpha@ DB 'traceralpha', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LOHCHBBO@0?45@
CONST	SEGMENT
??_C@_03LOHCHBBO@0?45@ DB '0.5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NDNALAOK@tracer?5alpha?5amount?5?$CI?50?5?9?51?40?5?$CJ@
CONST	SEGMENT
??_C@_0CA@NDNALAOK@tracer?5alpha?5amount?5?$CI?50?5?9?51?40?5?$CJ@ DB 'tr'
	DB	'acer alpha amount ( 0 - 1.0 )', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HKJFJODP@tracerblue@
CONST	SEGMENT
??_C@_0L@HKJFJODP@tracerblue@ DB 'tracerblue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHGJEAFP@0?44@
CONST	SEGMENT
??_C@_03KHGJEAFP@0?44@ DB '0.4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NMAOBFAJ@tracer?5blue?5component?5weight?5?$CI?5@
CONST	SEGMENT
??_C@_0CJ@NMAOBFAJ@tracer?5blue?5component?5weight?5?$CI?5@ DB 'tracer bl'
	DB	'ue component weight ( 0 - 1.0 )', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCGGBBEF@tracergreen@
CONST	SEGMENT
??_C@_0M@JCGGBBEF@tracergreen@ DB 'tracergreen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JHGHGJCM@tracer?5green?5component?5weight?5?$CI@
CONST	SEGMENT
??_C@_0CK@JHGHGJCM@tracer?5green?5component?5weight?5?$CI@ DB 'tracer gre'
	DB	'en component weight ( 0 - 1.0 )', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MOANENFM@tracerred@
CONST	SEGMENT
??_C@_09MOANENFM@tracerred@ DB 'tracerred', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LNMAPFD@0?48@
CONST	SEGMENT
??_C@_03LNMAPFD@0?48@ DB '0.8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EODOIAPO@tracer?5red?5component?5weight?5?$CI?50@
CONST	SEGMENT
??_C@_0CI@EODOIAPO@tracer?5red?5component?5weight?5?$CI?50@ DB 'tracer re'
	DB	'd component weight ( 0 - 1.0 )', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@JAJOEGLN@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
CONST	SEGMENT
??_C@_0DF@JAJOEGLN@D?3?2DevDragon?2XashFE?2dev?2src?2eng@ DB 'D:\DevDrago'
	DB	'n\XashFE\dev\src\engine\client\gl_rpart.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??CL_InitParticles@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??CL_InitParticles@@9@9 DD 080H		; `CL_InitParticles'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
_ramp1	DD	06fH
	DD	06dH
	DD	06bH
	DD	069H
	DD	067H
	DD	065H
	DD	063H
	DD	061H
_ramp2	DD	06fH
	DD	06eH
	DD	06dH
	DD	06cH
	DD	06bH
	DD	06aH
	DD	068H
	DD	066H
_ramp3	DD	06dH
	DD	06bH
	DD	06H
	DD	05H
	DD	04H
	DD	03H
_gTracerSize DD	03fc00000r			; 1.5
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
_gSparkRamp DD	0feH
	DD	0fdH
	DD	0fcH
	DD	06fH
	DD	06eH
	DD	06dH
	DD	06cH
	DD	067H
	DD	060H
_gTracerColors DB 0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0a7H
	DB	011H
	DB	0ffH
	DB	082H
	DB	05aH
	DB	037H
	DB	03cH
	DB	090H
	DB	0ffH
	DB	082H
	DB	05aH
	DB	0ffH
	DB	08cH
	DB	05aH
	DB	0c8H
	DB	082H
	DB	05aH
	DB	0ffH
	DB	078H
	DB	046H
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0dH
	DB	0e0H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	011eH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	01dfH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	03f7H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	03d9H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	02b4H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	022bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	03aeH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0e79H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	03cfH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	03d3H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	033cH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	02caH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0526H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0258H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	029bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0e07H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0103bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	014H
	DB	0f4H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _CL_CullTracer
_TEXT	SEGMENT
_i$ = -32						; size = 4
_maxs$ = -28						; size = 12
_mins$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_start$ = 12						; size = 4
_end$ = 16						; size = 4
_CL_CullTracer PROC					; COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 515  : 	vec3_t	mins, maxs;
; 516  : 	int	i;
; 517  : 
; 518  : 	// compute the bounding box
; 519  : 	for( i = 0; i < 3; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CL_CullTra
$LN2@CL_CullTra:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CL_CullTra:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN3@CL_CullTra

; 520  : 	{
; 521  : 		if( start[i] < end[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	comiss	xmm0, DWORD PTR [esi+edx*4]
	jbe	SHORT $LN5@CL_CullTra

; 522  : 		{
; 523  : 			mins[i] = start[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _mins$[ebp+eax*4], ecx

; 524  : 			maxs[i] = end[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _maxs$[ebp+eax*4], ecx

; 525  : 		}

	jmp	SHORT $LN6@CL_CullTra
$LN5@CL_CullTra:

; 526  : 		else
; 527  : 		{
; 528  : 			mins[i] = end[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _mins$[ebp+eax*4], ecx

; 529  : 			maxs[i] = start[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _maxs$[ebp+eax*4], ecx
$LN6@CL_CullTra:

; 530  : 		}
; 531  : 		
; 532  : 		// don't let it be zero sized
; 533  : 		if( mins[i] == maxs[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _mins$[ebp+eax*4]
	ucomiss	xmm0, DWORD PTR _maxs$[ebp+ecx*4]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@CL_CullTra

; 534  : 		{
; 535  : 			maxs[i] += gTracerSize[p->type] * 2.0f;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movss	xmm0, DWORD PTR _gTracerSize[ecx*4]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _i$[ebp]
	addss	xmm0, DWORD PTR _maxs$[ebp+edx*4]
	mov	eax, DWORD PTR _i$[ebp]
	movss	DWORD PTR _maxs$[ebp+eax*4], xmm0
$LN7@CL_CullTra:

; 536  : 		}
; 537  : 	}

	jmp	$LN2@CL_CullTra
$LN3@CL_CullTra:

; 538  : 
; 539  : 	// check bbox
; 540  : 	return R_CullBox( mins, maxs );

	lea	eax, DWORD PTR _maxs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	push	ecx
	call	_R_CullBox
	add	esp, 8

; 541  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_CullTracer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_AllocTracer
_TEXT	SEGMENT
_p$ = -4						; size = 4
_org$ = 8						; size = 4
_vel$ = 12						; size = 4
_life$ = 16						; size = 4
_R_AllocTracer PROC					; COMDAT

; 265  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 266  : 	particle_t	*p;
; 267  : 
; 268  : 	if( !cl_draw_tracers->value )

	mov	eax, DWORD PTR _cl_draw_tracers
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@R_AllocTra

; 269  : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_AllocTra
$LN2@R_AllocTra:

; 270  : 
; 271  : 	// never alloc particles when we not in game
; 272  : 	if( tr.frametime == 0.0 ) return NULL;

	movsd	xmm0, QWORD PTR _tr+87584
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@R_AllocTra
	xor	eax, eax
	jmp	$LN1@R_AllocTra
$LN3@R_AllocTra:

; 273  : 
; 274  : 	if( !cl_free_particles )

	cmp	DWORD PTR _cl_free_particles, 0
	jne	SHORT $LN4@R_AllocTra

; 275  : 	{
; 276  : 		if( cl_lasttimewarn < host.realtime )

	cvtss2sd xmm0, DWORD PTR _cl_lasttimewarn
	movsd	xmm1, QWORD PTR _host+1440
	comisd	xmm1, xmm0
	jbe	SHORT $LN5@R_AllocTra

; 277  : 		{
; 278  : 			// don't spam about overflow
; 279  : 			Con_DPrintf( S_ERROR "Overflow %d tracers\n", GI->max_particles );

	mov	eax, DWORD PTR _SI+768
	mov	ecx, DWORD PTR [eax+1668]
	push	ecx
	push	OFFSET ??_C@_0CA@CEDNCPFN@?$FO1Error?3?$FO7?5Overflow?5?$CFd?5tracers?6@
	call	_Con_DPrintf
	add	esp, 8

; 280  : 			cl_lasttimewarn = host.realtime + 1.0f;

	movsd	xmm0, QWORD PTR _host+1440
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _cl_lasttimewarn, xmm0
$LN5@R_AllocTra:

; 281  : 		}
; 282  : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_AllocTra
$LN4@R_AllocTra:

; 283  : 	}
; 284  : 
; 285  : 	p = cl_free_particles;

	mov	eax, DWORD PTR _cl_free_particles
	mov	DWORD PTR _p$[ebp], eax

; 286  : 	cl_free_particles = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _cl_free_particles, ecx

; 287  : 	p->next = cl_active_tracers;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _cl_active_tracers
	mov	DWORD PTR [eax+16], ecx

; 288  : 	cl_active_tracers = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _cl_active_tracers, eax

; 289  : 
; 290  : 	// clear old particle
; 291  : 	p->type = pt_static;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 0

; 292  : 	VectorCopy( org, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 293  : 	VectorCopy( vel, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _vel$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax+20], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _vel$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax+20], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _vel$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx+20], eax

; 294  : 	p->die = cl.time + life;

	cvtss2sd xmm0, DWORD PTR _life$[ebp]
	addsd	xmm0, QWORD PTR _cl+2167640
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 295  : 	p->ramp = tracerlength->value;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _tracerlength
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+32], edx

; 296  : 	p->color = 4; // select custom color

	mov	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 297  : 	p->packedColor = 255; // alpha

	mov	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+14], ax

; 298  : 
; 299  : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN1@R_AllocTra:

; 300  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_AllocTracer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _CL_FreeParticle
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CL_FreeParticle PROC					; COMDAT

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 195  : 	if( p->deathfunc )

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN2@CL_FreePar

; 196  : 	{
; 197  : 		// call right the deathfunc before die
; 198  : 		p->deathfunc( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 4

; 199  : 		p->deathfunc = NULL;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN2@CL_FreePar:

; 200  : 	}
; 201  : 
; 202  : 	p->next = cl_free_particles;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _cl_free_particles
	mov	DWORD PTR [eax+16], ecx

; 203  : 	cl_free_particles = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _cl_free_particles, eax

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_FreeParticle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_DebugParticle
_TEXT	SEGMENT
_p$ = -4						; size = 4
_pos$ = 8						; size = 4
_r$ = 12						; size = 1
_g$ = 16						; size = 1
_b$ = 20						; size = 1
_R_DebugParticle PROC					; COMDAT

; 1435 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1436 : 	particle_t	*p;
; 1437 : 
; 1438 : 	p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1439 : 	if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@R_DebugPar
	jmp	$LN1@R_DebugPar
$LN2@R_DebugPar:

; 1440 : 
; 1441 : 	VectorCopy( pos, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 1442 : 	p->color = R_LookupColor( r, g, b );

	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _g$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _r$[ebp]
	push	edx
	call	_R_LookupColor
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1443 : 	p->die = cl.time + 0.01f;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@3f847ae140000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0
$LN1@R_DebugPar:

; 1444 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_DebugParticle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_SparkStreaks
_TEXT	SEGMENT
_i$ = -24						; size = 4
_vel$ = -20						; size = 12
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pos$ = 8						; size = 4
_count$ = 12						; size = 4
_velocityMin$ = 16					; size = 4
_velocityMax$ = 20					; size = 4
_R_SparkStreaks PROC					; COMDAT

; 1541 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1542 : 	particle_t	*p;
; 1543 : 	vec3_t		vel;
; 1544 : 	int		i;
; 1545 : 	
; 1546 : 	for( i = 0; i<count; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_SparkStr
$LN2@R_SparkStr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_SparkStr:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN3@R_SparkStr

; 1547 : 	{
; 1548 : 		vel[0] = COM_RandomFloat( velocityMin, velocityMax );

	cvtsi2ss xmm0, DWORD PTR _velocityMax$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _velocityMin$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	mov	eax, 4
	imul	ecx, eax, 0
	fstp	DWORD PTR _vel$[ebp+ecx]

; 1549 : 		vel[1] = COM_RandomFloat( velocityMin, velocityMax );

	cvtsi2ss xmm0, DWORD PTR _velocityMax$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _velocityMin$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	mov	eax, 4
	shl	eax, 0
	fstp	DWORD PTR _vel$[ebp+eax]

; 1550 : 		vel[2] = COM_RandomFloat( velocityMin, velocityMax );

	cvtsi2ss xmm0, DWORD PTR _velocityMax$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _velocityMin$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	mov	eax, 4
	shl	eax, 1
	fstp	DWORD PTR _vel$[ebp+eax]

; 1551 : 
; 1552 : 		p = R_AllocTracer( pos, vel, COM_RandomFloat( 0.1f, 0.5f ));

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 4
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _vel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_R_AllocTracer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax

; 1553 : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN5@R_SparkStr
	jmp	SHORT $LN3@R_SparkStr
$LN5@R_SparkStr:

; 1554 : 
; 1555 : 		p->color = 5;

	mov	eax, 5
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1556 : 		p->type = pt_grav;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 1

; 1557 : 		p->ramp = 0.5f;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+32], xmm0

; 1558 : 	}

	jmp	$LN2@R_SparkStr
$LN3@R_SparkStr:

; 1559 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_SparkStreaks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_StreakSplash
_TEXT	SEGMENT
tv145 = -116						; size = 4
tv205 = -112						; size = 4
tv195 = -108						; size = 4
tv185 = -104						; size = 4
tv78 = -104						; size = 4
_i$ = -36						; size = 4
_p$ = -32						; size = 4
_vel2$ = -28						; size = 12
_vel$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pos$ = 8						; size = 4
_dir$ = 12						; size = 4
_color$ = 16						; size = 4
_count$ = 20						; size = 4
_speed$ = 24						; size = 4
_velocityMin$ = 28					; size = 4
_velocityMax$ = 32					; size = 4
_R_StreakSplash PROC					; COMDAT

; 1408 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1409 : 	vec3_t		vel, vel2;
; 1410 : 	particle_t	*p;	
; 1411 : 	int		i;
; 1412 : 
; 1413 : 	VectorScale( dir, speed, vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _vel$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _vel$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR tv78[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv78[ebp]
	movss	DWORD PTR _vel$[ebp+ecx], xmm0

; 1414 : 
; 1415 : 	for( i = 0; i < count; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_StreakSp
$LN2@R_StreakSp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_StreakSp:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN3@R_StreakSp

; 1416 : 	{
; 1417 : 		VectorAddScalar( vel, COM_RandomFloat( velocityMin, velocityMax ), vel2 );

	mov	eax, 4
	imul	esi, eax, 0
	cvtsi2ss xmm0, DWORD PTR _velocityMax$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _velocityMin$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv185[ebp]
	movss	xmm0, DWORD PTR tv185[ebp]
	addss	xmm0, DWORD PTR _vel$[ebp+esi]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _vel2$[ebp+edx], xmm0
	mov	esi, 4
	shl	esi, 0
	cvtsi2ss xmm0, DWORD PTR _velocityMax$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _velocityMin$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv195[ebp]
	movss	xmm0, DWORD PTR tv195[ebp]
	addss	xmm0, DWORD PTR _vel$[ebp+esi]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _vel2$[ebp+eax], xmm0
	mov	esi, 4
	shl	esi, 1
	cvtsi2ss xmm0, DWORD PTR _velocityMax$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _velocityMin$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv205[ebp]
	movss	xmm0, DWORD PTR _vel$[ebp+esi]
	addss	xmm0, DWORD PTR tv205[ebp]
	movss	DWORD PTR tv145[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv145[ebp]
	movss	DWORD PTR _vel2$[ebp+ecx], xmm0

; 1418 : 		p = R_AllocTracer( pos, vel2, COM_RandomFloat( 0.1f, 0.5f ));

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 4
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _vel2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_R_AllocTracer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax

; 1419 : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN5@R_StreakSp
	jmp	SHORT $LN3@R_StreakSp
$LN5@R_StreakSp:

; 1420 : 
; 1421 : 		p->type = pt_grav;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 1

; 1422 : 		p->color = color;

	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR _color$[ebp]
	mov	WORD PTR [eax+12], cx

; 1423 : 		p->ramp = 1.0f;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 1424 : 	}

	jmp	$LN2@R_StreakSp
$LN3@R_StreakSp:

; 1425 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_StreakSplash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_LargeFunnel
_TEXT	SEGMENT
tv348 = -116						; size = 4
tv263 = -116						; size = 4
tv234 = -116						; size = 4
tv205 = -116						; size = 4
tv166 = -116						; size = 4
_j$ = -48						; size = 4
_i$ = -44						; size = 4
_dest$ = -40						; size = 12
_dir$ = -28						; size = 12
_dist$ = -16						; size = 4
_vel$ = -12						; size = 4
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_org$ = 8						; size = 4
_reverse$ = 12						; size = 4
_R_LargeFunnel PROC					; COMDAT

; 1063 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1064 : 	particle_t	*p;
; 1065 : 	float		vel, dist;
; 1066 : 	vec3_t		dir, dest;
; 1067 : 	int		i, j;
; 1068 : 
; 1069 : 	for( i = -8; i < 8; i++ )

	mov	DWORD PTR _i$[ebp], -8			; fffffff8H
	jmp	SHORT $LN4@R_LargeFun
$LN2@R_LargeFun:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_LargeFun:
	cmp	DWORD PTR _i$[ebp], 8
	jge	$LN3@R_LargeFun

; 1070 : 	{
; 1071 : 		for( j = -8; j < 8; j++ )

	mov	DWORD PTR _j$[ebp], -8			; fffffff8H
	jmp	SHORT $LN7@R_LargeFun
$LN5@R_LargeFun:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@R_LargeFun:
	cmp	DWORD PTR _j$[ebp], 8
	jge	$LN6@R_LargeFun

; 1072 : 		{
; 1073 : 			p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1074 : 			if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN8@R_LargeFun
	jmp	$LN3@R_LargeFun
$LN8@R_LargeFun:

; 1075 : 
; 1076 : 			dest[0] = (i * 32.0f) + org[0];

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR __real@42000000
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _org$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dest$[ebp+ecx], xmm0

; 1077 : 			dest[1] = (j * 32.0f) + org[1];

	cvtsi2ss xmm0, DWORD PTR _j$[ebp]
	mulss	xmm0, DWORD PTR __real@42000000
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _org$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _dest$[ebp+edx], xmm0

; 1078 : 			dest[2] = org[2] + COM_RandomFloat( 100.0f, 800.0f );

	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@44480000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv263[ebp]
	mov	eax, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv263[ebp]
	addss	xmm0, DWORD PTR [eax+esi]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _dest$[ebp+ecx], xmm0

; 1079 : 
; 1080 : 			if( reverse )

	cmp	DWORD PTR _reverse$[ebp], 0
	je	$LN9@R_LargeFun

; 1081 : 			{
; 1082 : 				VectorCopy( org, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 1083 : 				VectorSubtract( dest, p->org, dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dest$[ebp+ecx]
	subss	xmm0, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dest$[ebp+edx]
	subss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _dir$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dest$[ebp+eax]
	subss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR tv166[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv166[ebp]
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 1084 : 			}

	jmp	$LN10@R_LargeFun
$LN9@R_LargeFun:

; 1085 : 			else
; 1086 : 			{
; 1087 : 				VectorCopy( dest, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _dest$[ebp+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _dest$[ebp+eax]
	mov	DWORD PTR [edx+ecx], eax

; 1088 : 				VectorSubtract( org, p->org, dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _org$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _org$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _dir$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _org$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR [esi+ecx]
	movss	DWORD PTR tv205[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv205[ebp]
	movss	DWORD PTR _dir$[ebp+eax], xmm0
$LN10@R_LargeFun:

; 1089 : 			}
; 1090 : 
; 1091 : 			vel = dest[2] / 8.0f;

	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _dest$[ebp+eax]
	divss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR _vel$[ebp], xmm0

; 1092 : 			if( vel < 64.0f ) vel = 64.0f;

	movss	xmm0, DWORD PTR __real@42800000
	comiss	xmm0, DWORD PTR _vel$[ebp]
	jbe	SHORT $LN11@R_LargeFun
	movss	xmm0, DWORD PTR __real@42800000
	movss	DWORD PTR _vel$[ebp], xmm0
$LN11@R_LargeFun:

; 1093 : 
; 1094 : 			dist = VectorNormalizeLength( dir );

	lea	eax, DWORD PTR _dir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dir$[ebp]
	push	ecx
	call	_VectorNormalizeLength2
	add	esp, 8
	fstp	DWORD PTR _dist$[ebp]

; 1095 : 			vel += COM_RandomFloat( 64.0f, 128.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@43000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv348[ebp]
	movss	xmm0, DWORD PTR tv348[ebp]
	addss	xmm0, DWORD PTR _vel$[ebp]
	movss	DWORD PTR _vel$[ebp], xmm0

; 1096 : 			VectorScale( dir, vel, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _vel$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+edx]
	mulss	xmm0, DWORD PTR _vel$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _dir$[ebp+edx]
	mulss	xmm0, DWORD PTR _vel$[ebp]
	movss	DWORD PTR tv234[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv234[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 1097 : 			p->die = cl.time + (dist / vel );

	movss	xmm0, DWORD PTR _dist$[ebp]
	divss	xmm0, DWORD PTR _vel$[ebp]
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR _cl+2167640
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 1098 : 			p->color = 244; // green color

	mov	eax, 244				; 000000f4H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1099 : 		}

	jmp	$LN5@R_LargeFun
$LN6@R_LargeFun:

; 1100 : 	}

	jmp	$LN2@R_LargeFun
$LN3@R_LargeFun:

; 1101 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_LargeFunnel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_BulletImpactParticles
_TEXT	SEGMENT
tv224 = -116						; size = 4
tv357 = -112						; size = 4
tv343 = -108						; size = 4
tv329 = -104						; size = 4
tv84 = -104						; size = 4
_p$ = -36						; size = 4
_dir$ = -32						; size = 12
_dist$ = -20						; size = 4
_color$ = -16						; size = 4
_quantity$ = -12					; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pos$ = 8						; size = 4
_R_BulletImpactParticles PROC				; COMDAT

; 1338 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1339 : 	int		i, quantity;
; 1340 : 	int		color;
; 1341 : 	float		dist;
; 1342 : 	vec3_t		dir;
; 1343 : 	particle_t	*p;
; 1344 : 	
; 1345 : 	VectorSubtract( pos, RI.vieworg, dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR _RI[eax+200]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR _RI[eax+200]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _dir$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _pos$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR _RI[ecx+200]
	movss	DWORD PTR tv84[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv84[ebp]
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 1346 : 	dist = VectorLength( dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _dir$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm1, DWORD PTR _dir$[ebp+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR _dir$[ebp+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _dist$[ebp]

; 1347 : 	if( dist > 1000.0f ) dist = 1000.0f;

	movss	xmm0, DWORD PTR _dist$[ebp]
	comiss	xmm0, DWORD PTR __real@447a0000
	jbe	SHORT $LN5@R_BulletIm
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR _dist$[ebp], xmm0
$LN5@R_BulletIm:

; 1348 : 
; 1349 : 	quantity = (1000.0f - dist) / 100.0f;

	movss	xmm0, DWORD PTR __real@447a0000
	subss	xmm0, DWORD PTR _dist$[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvttss2si eax, xmm0
	mov	DWORD PTR _quantity$[ebp], eax

; 1350 : 	if( quantity == 0 ) quantity = 1;

	cmp	DWORD PTR _quantity$[ebp], 0
	jne	SHORT $LN6@R_BulletIm
	mov	DWORD PTR _quantity$[ebp], 1
$LN6@R_BulletIm:

; 1351 : 
; 1352 : 	color = 3 - ((30 * quantity) / 100 );

	imul	eax, DWORD PTR _quantity$[ebp], 30
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, 3
	sub	edx, eax
	mov	DWORD PTR _color$[ebp], edx

; 1353 : 	R_SparkStreaks( pos, 2, -200, 200 );

	push	200					; 000000c8H
	push	-200					; ffffff38H
	push	2
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	_R_SparkStreaks
	add	esp, 16					; 00000010H

; 1354 : 
; 1355 : 	for( i = 0; i < quantity * 4; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_BulletIm
$LN2@R_BulletIm:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_BulletIm:
	mov	eax, DWORD PTR _quantity$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN3@R_BulletIm

; 1356 : 	{
; 1357 : 		p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1358 : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN7@R_BulletIm
	jmp	$LN3@R_BulletIm
$LN7@R_BulletIm:

; 1359 : 
; 1360 : 		VectorCopy( pos, p->org);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 1361 : 
; 1362 : 		p->vel[0] = COM_RandomFloat( -1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	fstp	DWORD PTR [edx+ecx+20]

; 1363 : 		p->vel[1] = COM_RandomFloat( -1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	fstp	DWORD PTR [ecx+eax+20]

; 1364 : 		p->vel[2] = COM_RandomFloat( -1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	fstp	DWORD PTR [ecx+eax+20]

; 1365 : 		VectorScale( p->vel, COM_RandomFloat( 50.0f, 100.0f ), p->vel );

	mov	eax, 4
	imul	esi, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv329[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv329[ebp]
	mulss	xmm0, DWORD PTR [ecx+esi+20]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	esi, 4
	shl	esi, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv343[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv343[ebp]
	mulss	xmm0, DWORD PTR [edx+esi+20]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv357[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+esi+20]
	mulss	xmm0, DWORD PTR tv357[ebp]
	movss	DWORD PTR tv224[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv224[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 1366 : 
; 1367 : 		p->die = cl.time + 0.5;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 1368 : 		p->color = 3 - color;

	mov	eax, 3
	sub	eax, DWORD PTR _color$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1369 : 		p->type = pt_grav;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 1

; 1370 : 	}

	jmp	$LN2@R_BulletIm
$LN3@R_BulletIm:

; 1371 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_BulletImpactParticles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_ShowLine
_TEXT	SEGMENT
tv191 = -104						; size = 4
tv134 = -104						; size = 4
tv84 = -104						; size = 4
_p$ = -36						; size = 4
_len$ = -32						; size = 4
_org$ = -28						; size = 12
_dir$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_R_ShowLine PROC					; COMDAT

; 1306 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1307 : 	vec3_t		dir, org;
; 1308 : 	float		len;
; 1309 : 	particle_t	*p;
; 1310 : 
; 1311 : 	VectorSubtract( end, start, dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _dir$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR [esi+ecx]
	movss	DWORD PTR tv84[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv84[ebp]
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 1312 : 	len = VectorNormalizeLength( dir );

	lea	eax, DWORD PTR _dir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dir$[ebp]
	push	ecx
	call	_VectorNormalizeLength2
	add	esp, 8
	fstp	DWORD PTR _len$[ebp]

; 1313 : 	VectorScale( dir, 5.0f, dir );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR __real@40a00000
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _dir$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR __real@40a00000
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _dir$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _dir$[ebp+eax]
	mulss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv134[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv134[ebp]
	movss	DWORD PTR _dir$[ebp+ecx], xmm0

; 1314 : 	VectorCopy( start, org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	DWORD PTR _org$[ebp+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR _org$[ebp+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _start$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _org$[ebp+ecx], eax
$LN2@R_ShowLine:

; 1315 : 	
; 1316 : 	while( len > 0 )

	movss	xmm0, DWORD PTR _len$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN3@R_ShowLine

; 1317 : 	{
; 1318 : 		len -= 5.0f;

	movss	xmm0, DWORD PTR _len$[ebp]
	subss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR _len$[ebp], xmm0

; 1319 : 
; 1320 : 		p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1321 : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN4@R_ShowLine
	jmp	$LN3@R_ShowLine
$LN4@R_ShowLine:

; 1322 : 
; 1323 : 		p->die = cl.time + 30;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@403e000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 1324 : 		p->color = 75;

	mov	eax, 75					; 0000004bH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1325 : 
; 1326 : 		VectorCopy( org, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _org$[ebp+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _org$[ebp+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _org$[ebp+eax]
	mov	DWORD PTR [edx+ecx], eax

; 1327 : 		VectorAdd( org, dir, org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _org$[ebp+ecx]
	addss	xmm0, DWORD PTR _dir$[ebp+eax]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _org$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _org$[ebp+eax]
	addss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _org$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _org$[ebp+eax]
	addss	xmm0, DWORD PTR _dir$[ebp+ecx]
	movss	DWORD PTR tv191[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR _org$[ebp+edx], xmm0

; 1328 : 	}

	jmp	$LN2@R_ShowLine
$LN3@R_ShowLine:

; 1329 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_ShowLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_ParticleBox
_TEXT	SEGMENT
tv175 = -112						; size = 4
tv154 = -112						; size = 4
tv133 = -112						; size = 4
_pcolor$ = -44						; size = 4
_origin$ = -40						; size = 12
_maxs$ = -28						; size = 12
_mins$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_absmin$ = 8						; size = 4
_absmax$ = 12						; size = 4
_r$ = 16						; size = 1
_g$ = 20						; size = 1
_b$ = 24						; size = 1
_life$ = 28						; size = 4
_R_ParticleBox PROC					; COMDAT

; 1285 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1286 : 	vec3_t	mins, maxs;
; 1287 : 	vec3_t	origin;
; 1288 : 	int	pcolor;
; 1289 : 
; 1290 : 	pcolor = R_LookupColor( r, g, b );

	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _g$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _r$[ebp]
	push	edx
	call	_R_LookupColor
	add	esp, 12					; 0000000cH
	cwde
	mov	DWORD PTR _pcolor$[ebp], eax

; 1291 : 
; 1292 : 	VectorAverage( absmax, absmin, origin );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _absmax$[ebp]
	mov	esi, DWORD PTR _absmin$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR [esi+eax]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	mov	eax, 4
	imul	ecx, eax, 0
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _origin$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _absmax$[ebp]
	mov	esi, DWORD PTR _absmin$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	addss	xmm0, DWORD PTR [esi+eax]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	mov	edx, 4
	shl	edx, 0
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _origin$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _absmax$[ebp]
	mov	esi, DWORD PTR _absmin$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR [esi+ecx]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv133[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv133[ebp]
	movss	DWORD PTR _origin$[ebp+eax], xmm0

; 1293 : 	VectorSubtract( absmax, origin, maxs );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _absmax$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR _origin$[ebp+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _maxs$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _absmax$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR _origin$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _maxs$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _absmax$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR _origin$[ebp+ecx]
	movss	DWORD PTR tv154[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv154[ebp]
	movss	DWORD PTR _maxs$[ebp+eax], xmm0

; 1294 : 	VectorSubtract( absmin, origin, mins );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _absmin$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR _origin$[ebp+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _mins$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _absmin$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR _origin$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _mins$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _absmin$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR _origin$[ebp+ecx]
	movss	DWORD PTR tv175[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv175[ebp]
	movss	DWORD PTR _mins$[ebp+eax], xmm0

; 1295 : 
; 1296 : 	PM_DrawBBox( mins, maxs, origin, pcolor, life );

	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pcolor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _origin$[ebp]
	push	ecx
	lea	edx, DWORD PTR _maxs$[ebp]
	push	edx
	lea	eax, DWORD PTR _mins$[ebp]
	push	eax
	call	_PM_DrawBBox
	add	esp, 20					; 00000014H

; 1297 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_ParticleBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_ParticleLine
_TEXT	SEGMENT
_pcolor$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_r$ = 16						; size = 1
_g$ = 20						; size = 1
_b$ = 24						; size = 1
_life$ = 28						; size = 4
_R_ParticleLine PROC					; COMDAT

; 1271 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1272 : 	int	pcolor;
; 1273 : 
; 1274 : 	pcolor = R_LookupColor( r, g, b );

	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _g$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _r$[ebp]
	push	edx
	call	_R_LookupColor
	add	esp, 12					; 0000000cH
	cwde
	mov	DWORD PTR _pcolor$[ebp], eax

; 1275 : 	PM_ParticleLine( start, end, pcolor, life, 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pcolor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	call	_PM_ParticleLine
	add	esp, 20					; 00000014H

; 1276 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_ParticleLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_TracerParticles
_TEXT	SEGMENT
_org$ = 8						; size = 4
_vel$ = 12						; size = 4
_life$ = 16						; size = 4
_R_TracerParticles PROC					; COMDAT

; 1529 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1530 : 	return R_AllocTracer( org, vel, life );

	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _vel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _org$[ebp]
	push	ecx
	call	_R_AllocTracer
	add	esp, 12					; 0000000cH

; 1531 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_TracerParticles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_UserTracerParticle
_TEXT	SEGMENT
_p$ = -4						; size = 4
_org$ = 8						; size = 4
_vel$ = 12						; size = 4
_life$ = 16						; size = 4
_colorIndex$ = 20					; size = 4
_length$ = 24						; size = 4
_deathcontext$ = 28					; size = 1
_deathfunc$ = 32					; size = 4
_R_UserTracerParticle PROC				; COMDAT

; 1500 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1501 : 	particle_t	*p;
; 1502 : 
; 1503 : 	if( colorIndex < 0 )

	cmp	DWORD PTR _colorIndex$[ebp], 0
	jge	SHORT $LN2@R_UserTrac

; 1504 : 		return;

	jmp	SHORT $LN4@R_UserTrac
$LN2@R_UserTrac:

; 1505 : 
; 1506 : 	if( colorIndex > ARRAYSIZE( gTracerColors ))

	cmp	DWORD PTR _colorIndex$[ebp], 12		; 0000000cH
	jbe	SHORT $LN3@R_UserTrac

; 1507 : 	{
; 1508 : 		Con_Printf( S_ERROR "UserTracer with color > %d\n", ARRAYSIZE( gTracerColors ));

	push	12					; 0000000cH
	push	OFFSET ??_C@_0CH@PKONPJOH@?$FO1Error?3?$FO7?5UserTracer?5with?5colo@
	call	_Con_Printf
	add	esp, 8

; 1509 : 		return;

	jmp	SHORT $LN4@R_UserTrac
$LN3@R_UserTrac:

; 1510 : 	}
; 1511 : 
; 1512 : 	if(( p = R_AllocTracer( org, vel, life )) != NULL )

	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _vel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _org$[ebp]
	push	ecx
	call	_R_AllocTracer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN4@R_UserTrac

; 1513 : 	{
; 1514 : 		p->context = deathcontext;

	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR _deathcontext$[ebp]
	mov	BYTE PTR [eax+52], cl

; 1515 : 		p->deathfunc = deathfunc;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _deathfunc$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 1516 : 		p->color = colorIndex;

	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR _colorIndex$[ebp]
	mov	WORD PTR [eax+12], cx

; 1517 : 		p->ramp = length;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _length$[ebp]
	movss	DWORD PTR [eax+32], xmm0
$LN4@R_UserTrac:

; 1518 : 	}
; 1519 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_UserTracerParticle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_TracerEffect
_TEXT	SEGMENT
tv298 = -120						; size = 4
tv223 = -120						; size = 4
tv208 = -120						; size = 4
tv187 = -120						; size = 4
tv167 = -120						; size = 4
tv90 = -120						; size = 4
tv69 = -120						; size = 4
_offset$ = -52						; size = 4
_speed$ = -48						; size = 4
_len$ = -44						; size = 4
_dir$ = -40						; size = 12
_vel$ = -28						; size = 12
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_R_TracerEffect PROC					; COMDAT

; 1473 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1474 : 	vec3_t	pos, vel, dir;
; 1475 : 	float	len, speed;
; 1476 : 	float	offset;
; 1477 : 
; 1478 : 	speed = Q_max( tracerspeed->value, 3.0f );

	mov	eax, DWORD PTR _tracerspeed
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR __real@40400000
	jbe	SHORT $LN4@R_TracerEf
	mov	ecx, DWORD PTR _tracerspeed
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN5@R_TracerEf
$LN4@R_TracerEf:
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR tv69[ebp], xmm0
$LN5@R_TracerEf:
	movss	xmm0, DWORD PTR tv69[ebp]
	movss	DWORD PTR _speed$[ebp], xmm0

; 1479 : 
; 1480 : 	VectorSubtract( end, start, dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _dir$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR [esi+ecx]
	movss	DWORD PTR tv90[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv90[ebp]
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 1481 : 	len = VectorLength( dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _dir$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm1, DWORD PTR _dir$[ebp+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR _dir$[ebp+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _len$[ebp]

; 1482 : 	if( len == 0.0f ) return;

	movss	xmm0, DWORD PTR _len$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@R_TracerEf
	jmp	$LN1@R_TracerEf
$LN2@R_TracerEf:

; 1483 : 
; 1484 : 	VectorScale( dir, 1.0f / len, dir ); // normalize

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _len$[ebp]
	mulss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _dir$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _len$[ebp]
	mulss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _dir$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _len$[ebp]
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, xmm0
	movss	DWORD PTR tv167[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv167[ebp]
	movss	DWORD PTR _dir$[ebp+ecx], xmm0

; 1485 : 	offset = COM_RandomFloat( -10.0f, 9.0f ) + traceroffset->value;

	push	ecx
	movss	xmm0, DWORD PTR __real@41100000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c1200000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv298[ebp]
	movss	xmm0, DWORD PTR tv298[ebp]
	mov	eax, DWORD PTR _traceroffset
	addss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _offset$[ebp], xmm0

; 1486 : 	VectorScale( dir, offset, vel );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _offset$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _vel$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _offset$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _vel$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _dir$[ebp+eax]
	mulss	xmm0, DWORD PTR _offset$[ebp]
	movss	DWORD PTR tv187[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR _vel$[ebp+ecx], xmm0

; 1487 : 	VectorAdd( start, vel, pos );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR _vel$[ebp+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _pos$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	addss	xmm0, DWORD PTR _vel$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _pos$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _vel$[ebp+ecx]
	movss	DWORD PTR tv208[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv208[ebp]
	movss	DWORD PTR _pos$[ebp+eax], xmm0

; 1488 : 	VectorScale( dir, speed, vel );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _vel$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _vel$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _dir$[ebp+eax]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR tv223[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv223[ebp]
	movss	DWORD PTR _vel$[ebp+ecx], xmm0

; 1489 : 
; 1490 : 	R_AllocTracer( pos, vel, len / speed );

	movss	xmm0, DWORD PTR _len$[ebp]
	divss	xmm0, DWORD PTR _speed$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _vel$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_R_AllocTracer
	add	esp, 12					; 0000000cH
$LN1@R_TracerEf:

; 1491 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_TracerEffect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_GetPackedColor
_TEXT	SEGMENT
_packed$ = 8						; size = 4
_color$ = 12						; size = 2
_R_GetPackedColor PROC					; COMDAT

; 117  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 118  : 	if( packed ) *packed = 0;

	cmp	DWORD PTR _packed$[ebp], 0
	je	SHORT $LN1@R_GetPacke
	xor	eax, eax
	mov	ecx, DWORD PTR _packed$[ebp]
	mov	WORD PTR [ecx], ax
$LN1@R_GetPacke:

; 119  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_GetPackedColor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_LookupColor
_TEXT	SEGMENT
_bf$ = -28						; size = 4
_gf$ = -24						; size = 4
_rf$ = -20						; size = 4
_bestdiff$ = -16					; size = 4
_diff$ = -12						; size = 4
_best$ = -8						; size = 4
_i$ = -4						; size = 4
_r$ = 8							; size = 1
_g$ = 12						; size = 1
_b$ = 16						; size = 1
_R_LookupColor PROC					; COMDAT

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 83   : 	int	i, best;
; 84   : 	float	diff, bestdiff;
; 85   : 	float	rf, gf, bf;
; 86   : 
; 87   : 	bestdiff = 999999;

	movss	xmm0, DWORD PTR __real@497423f0
	movss	DWORD PTR _bestdiff$[ebp], xmm0

; 88   : 	best = 65535;

	mov	DWORD PTR _best$[ebp], 65535		; 0000ffffH

; 89   : 
; 90   : 	for( i = 0; i < 256; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_LookupCo
$LN2@R_LookupCo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_LookupCo:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	$LN3@R_LookupCo

; 91   : 	{
; 92   : 		rf = r - clgame.palette[i].r;

	movzx	eax, BYTE PTR _r$[ebp]
	imul	ecx, DWORD PTR _i$[ebp], 3
	movzx	edx, BYTE PTR _clgame[ecx+217656]
	sub	eax, edx
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _rf$[ebp], xmm0

; 93   : 		gf = g - clgame.palette[i].g;

	movzx	eax, BYTE PTR _g$[ebp]
	imul	ecx, DWORD PTR _i$[ebp], 3
	movzx	edx, BYTE PTR _clgame[ecx+217657]
	sub	eax, edx
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _gf$[ebp], xmm0

; 94   : 		bf = b - clgame.palette[i].b;

	movzx	eax, BYTE PTR _b$[ebp]
	imul	ecx, DWORD PTR _i$[ebp], 3
	movzx	edx, BYTE PTR _clgame[ecx+217658]
	sub	eax, edx
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _bf$[ebp], xmm0

; 95   : 
; 96   : 		// convert color to monochrome
; 97   : 		diff = rf * (rf * 0.2) + gf * (gf * 0.5) + bf * (bf * 0.3);

	cvtss2sd xmm0, DWORD PTR _rf$[ebp]
	cvtss2sd xmm1, DWORD PTR _rf$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fc999999999999a
	mulsd	xmm0, xmm1
	cvtss2sd xmm1, DWORD PTR _gf$[ebp]
	cvtss2sd xmm2, DWORD PTR _gf$[ebp]
	mulsd	xmm2, QWORD PTR __real@3fe0000000000000
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	cvtss2sd xmm1, DWORD PTR _bf$[ebp]
	cvtss2sd xmm2, DWORD PTR _bf$[ebp]
	mulsd	xmm2, QWORD PTR __real@3fd3333333333333
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _diff$[ebp], xmm0

; 98   : 
; 99   : 		if ( diff < bestdiff )

	movss	xmm0, DWORD PTR _bestdiff$[ebp]
	comiss	xmm0, DWORD PTR _diff$[ebp]
	jbe	SHORT $LN5@R_LookupCo

; 100  : 		{
; 101  : 			bestdiff = diff;

	movss	xmm0, DWORD PTR _diff$[ebp]
	movss	DWORD PTR _bestdiff$[ebp], xmm0

; 102  : 			best = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _best$[ebp], eax
$LN5@R_LookupCo:

; 103  : 		}
; 104  : 	}

	jmp	$LN2@R_LookupCo
$LN3@R_LookupCo:

; 105  : 
; 106  : 	return best;

	movzx	eax, WORD PTR _best$[ebp]

; 107  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_LookupColor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_RocketTrail
_TEXT	SEGMENT
tv545 = -148						; size = 4
tv400 = -148						; size = 4
tv361 = -148						; size = 4
tv267 = -148						; size = 4
tv231 = -148						; size = 4
tv190 = -148						; size = 4
tv1086 = -144						; size = 4
tv958 = -144						; size = 4
tv906 = -144						; size = 4
tv816 = -144						; size = 4
tv767 = -144						; size = 4
tv716 = -144						; size = 4
tv1071 = -140						; size = 4
tv944 = -140						; size = 4
tv892 = -140						; size = 4
tv802 = -140						; size = 4
tv753 = -140						; size = 4
tv702 = -140						; size = 4
tv1056 = -136						; size = 4
tv930 = -136						; size = 4
tv878 = -136						; size = 4
tv788 = -136						; size = 4
tv739 = -136						; size = 4
tv688 = -136						; size = 4
tv593 = -136						; size = 4
tv503 = -136						; size = 4
tv482 = -136						; size = 4
tv455 = -136						; size = 4
tv149 = -136						; size = 4
tv140 = -136						; size = 4
tv84 = -136						; size = 4
_p$ = -68						; size = 4
_dec$ = -64						; size = 4
_len$ = -60						; size = 4
_y$ = -56						; size = 4
_x$ = -52						; size = 4
_c$ = -48						; size = 4
_s$ = -44						; size = 4
_up$ = -40						; size = 12
_right$ = -28						; size = 12
_vec$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_type$ = 16						; size = 4
_R_RocketTrail PROC					; COMDAT

; 1152 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1153 : 	vec3_t		vec, right, up;
; 1154 : 	static int	tracercount;
; 1155 : 	float		s, c, x, y;
; 1156 : 	float		len, dec;
; 1157 : 	particle_t	*p;
; 1158 : 
; 1159 : 	VectorSubtract( end, start, vec );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _vec$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _vec$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR [esi+ecx]
	movss	DWORD PTR tv84[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv84[ebp]
	movss	DWORD PTR _vec$[ebp+eax], xmm0

; 1160 : 	len = VectorNormalizeLength( vec );

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	call	_VectorNormalizeLength2
	add	esp, 8
	fstp	DWORD PTR _len$[ebp]

; 1161 : 
; 1162 : 	if( type == 7 )

	cmp	DWORD PTR _type$[ebp], 7
	jne	SHORT $LN6@R_RocketTr

; 1163 : 	{
; 1164 : 		VectorVectors( vec, right, up );

	lea	eax, DWORD PTR _up$[ebp]
	push	eax
	lea	ecx, DWORD PTR _right$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vec$[ebp]
	push	edx
	call	_VectorVectors
	add	esp, 12					; 0000000cH
$LN6@R_RocketTr:

; 1165 : 	}
; 1166 : 
; 1167 : 	if( type < 128 )

	cmp	DWORD PTR _type$[ebp], 128		; 00000080H
	jge	SHORT $LN7@R_RocketTr

; 1168 : 	{
; 1169 : 		dec = 3.0f;

	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _dec$[ebp], xmm0

; 1170 : 	}

	jmp	SHORT $LN8@R_RocketTr
$LN7@R_RocketTr:

; 1171 : 	else
; 1172 : 	{
; 1173 : 		dec = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dec$[ebp], xmm0

; 1174 : 		type -= 128;

	mov	eax, DWORD PTR _type$[ebp]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR _type$[ebp], eax
$LN8@R_RocketTr:

; 1175 : 	}
; 1176 : 
; 1177 : 	VectorScale( vec, dec, vec );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _vec$[ebp+ecx]
	mulss	xmm0, DWORD PTR _dec$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _vec$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _vec$[ebp+ecx]
	mulss	xmm0, DWORD PTR _dec$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _vec$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _vec$[ebp+eax]
	mulss	xmm0, DWORD PTR _dec$[ebp]
	movss	DWORD PTR tv140[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv140[ebp]
	movss	DWORD PTR _vec$[ebp+ecx], xmm0
$LN2@R_RocketTr:

; 1178 : 
; 1179 : 	while( len > 0 )

	movss	xmm0, DWORD PTR _len$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN3@R_RocketTr

; 1180 : 	{
; 1181 : 		len -= dec;

	movss	xmm0, DWORD PTR _len$[ebp]
	subss	xmm0, DWORD PTR _dec$[ebp]
	movss	DWORD PTR _len$[ebp], xmm0

; 1182 : 
; 1183 : 		p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1184 : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN9@R_RocketTr
	jmp	$LN3@R_RocketTr
$LN9@R_RocketTr:

; 1185 : 		
; 1186 : 		p->die = cl.time + 2.0f;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 1187 : 
; 1188 : 		switch( type )

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv149[ebp], eax
	cmp	DWORD PTR tv149[ebp], 7
	ja	$LN22@R_RocketTr
	mov	ecx, DWORD PTR tv149[ebp]
	jmp	DWORD PTR $LN24@R_RocketTr[ecx*4]
$LN10@R_RocketTr:

; 1189 : 		{
; 1190 : 		case 0:	// rocket trail
; 1191 : 			p->ramp = COM_RandomLong( 0, 3 );

	push	3
	push	0
	call	_COM_RandomLong
	add	esp, 8
	cvtsi2ss xmm0, eax
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 1192 : 			p->color = ramp3[(int)p->ramp];

	mov	eax, DWORD PTR _p$[ebp]
	cvttss2si ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR _ramp3[ecx*4]
	mov	WORD PTR [edx+12], ax

; 1193 : 			p->type = pt_fire;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 3

; 1194 : 			VectorAddScalar( start, COM_RandomFloat( -3.0f, 3.0f ), p->org );

	mov	eax, 4
	imul	esi, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv688[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR tv688[ebp]
	addss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	esi, 4
	shl	esi, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv702[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR tv702[ebp]
	addss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv716[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+esi]
	addss	xmm0, DWORD PTR tv716[ebp]
	movss	DWORD PTR tv190[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv190[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 1195 : 			break;

	jmp	$LN4@R_RocketTr
$LN11@R_RocketTr:

; 1196 : 		case 1:	// smoke smoke
; 1197 : 			p->ramp = COM_RandomLong( 2, 5 );

	push	5
	push	2
	call	_COM_RandomLong
	add	esp, 8
	cvtsi2ss xmm0, eax
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 1198 : 			p->color = ramp3[(int)p->ramp];

	mov	eax, DWORD PTR _p$[ebp]
	cvttss2si ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR _ramp3[ecx*4]
	mov	WORD PTR [edx+12], ax

; 1199 : 			p->type = pt_fire;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 3

; 1200 : 			VectorAddScalar( start, COM_RandomFloat( -3.0f, 3.0f ), p->org );

	mov	eax, 4
	imul	esi, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv739[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR tv739[ebp]
	addss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	esi, 4
	shl	esi, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv753[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR tv753[ebp]
	addss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv767[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+esi]
	addss	xmm0, DWORD PTR tv767[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv231[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 1201 : 			break;

	jmp	$LN4@R_RocketTr
$LN12@R_RocketTr:

; 1202 : 		case 2:	// blood
; 1203 : 			p->type = pt_grav;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 1

; 1204 : 			p->color = COM_RandomLong( 67, 74 );

	push	74					; 0000004aH
	push	67					; 00000043H
	call	_COM_RandomLong
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1205 : 			VectorAddScalar( start, COM_RandomFloat( -3.0f, 3.0f ), p->org );

	mov	eax, 4
	imul	esi, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv788[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR tv788[ebp]
	addss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	esi, 4
	shl	esi, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv802[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR tv802[ebp]
	addss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv816[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+esi]
	addss	xmm0, DWORD PTR tv816[ebp]
	movss	DWORD PTR tv267[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv267[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 1206 : 			break;

	jmp	$LN4@R_RocketTr
$LN13@R_RocketTr:

; 1207 : 		case 3:
; 1208 : 		case 5:	// tracer
; 1209 : 			p->die = cl.time + 0.5f;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 1210 : 
; 1211 : 			if( type == 3 ) p->color = 52 + (( tracercount & 4 )<<1 );

	cmp	DWORD PTR _type$[ebp], 3
	jne	SHORT $LN15@R_RocketTr
	mov	eax, DWORD PTR ?tracercount@?1??R_RocketTrail@@9@9
	and	eax, 4
	lea	ecx, DWORD PTR [eax+eax+52]
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx+12], cx
	jmp	SHORT $LN16@R_RocketTr
$LN15@R_RocketTr:

; 1212 : 			else p->color = 230 + (( tracercount & 4 )<<1 );

	mov	eax, DWORD PTR ?tracercount@?1??R_RocketTrail@@9@9
	and	eax, 4
	lea	ecx, DWORD PTR [eax+eax+230]
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx+12], cx
$LN16@R_RocketTr:

; 1213 : 
; 1214 : 			VectorCopy( start, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 1215 : 			tracercount++;

	mov	eax, DWORD PTR ?tracercount@?1??R_RocketTrail@@9@9
	add	eax, 1
	mov	DWORD PTR ?tracercount@?1??R_RocketTrail@@9@9, eax

; 1216 : 
; 1217 : 			if( FBitSet( tracercount, 1 ))

	mov	eax, DWORD PTR ?tracercount@?1??R_RocketTrail@@9@9
	and	eax, 1
	je	SHORT $LN17@R_RocketTr

; 1218 : 			{
; 1219 : 				p->vel[0] = 30.0f *  vec[1];

	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR _vec$[ebp+eax]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 1220 : 				p->vel[1] = 30.0f * -vec[0];

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _vec$[ebp+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@41f00000
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 1221 : 			}

	jmp	SHORT $LN18@R_RocketTr
$LN17@R_RocketTr:

; 1222 : 			else
; 1223 : 			{
; 1224 : 				p->vel[0] = 30.0f * -vec[1];

	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _vec$[ebp+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@41f00000
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 1225 : 				p->vel[1] = 30.0f *  vec[0];

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR _vec$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0
$LN18@R_RocketTr:

; 1226 : 			}
; 1227 : 			break;

	jmp	$LN4@R_RocketTr
$LN19@R_RocketTr:

; 1228 : 		case 4:	// slight blood
; 1229 : 			p->type = pt_grav;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 1

; 1230 : 			p->color = COM_RandomLong( 67, 70 );

	push	70					; 00000046H
	push	67					; 00000043H
	call	_COM_RandomLong
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1231 : 			VectorAddScalar( start, COM_RandomFloat( -3.0f, 3.0f ), p->org );

	mov	eax, 4
	imul	esi, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv878[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR tv878[ebp]
	addss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	esi, 4
	shl	esi, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv892[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR tv892[ebp]
	addss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv906[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+esi]
	addss	xmm0, DWORD PTR tv906[ebp]
	movss	DWORD PTR tv361[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv361[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 1232 : 			len -= 3.0f;

	movss	xmm0, DWORD PTR _len$[ebp]
	subss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _len$[ebp], xmm0

; 1233 : 			break;

	jmp	$LN4@R_RocketTr
$LN20@R_RocketTr:

; 1234 : 		case 6:	// voor trail
; 1235 : 			p->color = COM_RandomLong( 152, 155 );

	push	155					; 0000009bH
	push	152					; 00000098H
	call	_COM_RandomLong
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1236 : 			p->die += 0.3f;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	addss	xmm0, DWORD PTR __real@3e99999a
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+36], xmm0

; 1237 : 			VectorAddScalar( start, COM_RandomFloat( -8.0f, 8.0f ), p->org );

	mov	eax, 4
	imul	esi, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c1000000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv930[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR tv930[ebp]
	addss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	esi, 4
	shl	esi, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c1000000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv944[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR tv944[ebp]
	addss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c1000000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv958[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+esi]
	addss	xmm0, DWORD PTR tv958[ebp]
	movss	DWORD PTR tv400[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv400[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 1238 : 			break;

	jmp	$LN4@R_RocketTr
$LN21@R_RocketTr:

; 1239 : 		case 7:	// explosion tracer
; 1240 : 			x = COM_RandomLong( 0, 65535 );

	push	65535					; 0000ffffH
	push	0
	call	_COM_RandomLong
	add	esp, 8
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 1241 : 			y = COM_RandomLong( 8, 16 );

	push	16					; 00000010H
	push	8
	call	_COM_RandomLong
	add	esp, 8
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _y$[ebp], xmm0

; 1242 : 			SinCos( x, &s, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 1243 : 			s *= y;

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _s$[ebp], xmm0

; 1244 : 			c *= y;

	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _c$[ebp], xmm0

; 1245 : 
; 1246 : 			VectorMAMAM( 1.0f, start, s, right, c, up, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _right$[ebp+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _up$[ebp+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _right$[ebp+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _up$[ebp+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR _s$[ebp]
	mulss	xmm1, DWORD PTR _right$[ebp+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR _c$[ebp]
	mulss	xmm1, DWORD PTR _up$[ebp+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR tv455[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv455[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1247 : 			VectorSubtract( start, p->org, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _start$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _start$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR [esi+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _start$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR [esi+eax]
	movss	DWORD PTR tv482[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv482[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 1248 : 			VectorScale( p->vel, 2.0f, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv503[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv503[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 1249 : 			VectorMA( p->vel, COM_RandomFloat( 96.0f, 111.0f ), vec, p->vel );

	mov	eax, 4
	imul	esi, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@42de0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42c00000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv1056[ebp]
	movss	xmm0, DWORD PTR tv1056[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mulss	xmm0, DWORD PTR _vec$[ebp+edx]
	mov	eax, DWORD PTR _p$[ebp]
	addss	xmm0, DWORD PTR [eax+esi+20]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	esi, 4
	shl	esi, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@42de0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42c00000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv1071[ebp]
	movss	xmm0, DWORD PTR tv1071[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mulss	xmm0, DWORD PTR _vec$[ebp+ecx]
	mov	edx, DWORD PTR _p$[ebp]
	addss	xmm0, DWORD PTR [edx+esi+20]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@42de0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42c00000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv1086[ebp]
	movss	xmm0, DWORD PTR tv1086[ebp]
	mov	edx, 4
	shl	edx, 1
	mulss	xmm0, DWORD PTR _vec$[ebp+edx]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [eax+esi+20]
	addss	xmm1, xmm0
	movss	DWORD PTR tv545[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv545[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0

; 1250 : 			p->ramp = COM_RandomLong( 0, 3 );

	push	3
	push	0
	call	_COM_RandomLong
	add	esp, 8
	cvtsi2ss xmm0, eax
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 1251 : 			p->color = ramp3[(int)p->ramp];

	mov	eax, DWORD PTR _p$[ebp]
	cvttss2si ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR _ramp3[ecx*4]
	mov	WORD PTR [edx+12], ax

; 1252 : 			p->type = pt_explode2;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 5

; 1253 : 			break;

	jmp	SHORT $LN4@R_RocketTr
$LN22@R_RocketTr:

; 1254 : 		default:
; 1255 : 			// just build line to show error
; 1256 : 			VectorCopy( start, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax
$LN4@R_RocketTr:

; 1257 : 			break;
; 1258 : 		}
; 1259 : 
; 1260 : 		VectorAdd( start, vec, start );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR _vec$[ebp+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _start$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _vec$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _start$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	addss	xmm0, DWORD PTR _vec$[ebp+eax]
	movss	DWORD PTR tv593[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR tv593[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1261 : 	}

	jmp	$LN2@R_RocketTr
$LN3@R_RocketTr:

; 1262 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN24@R_RocketTr:
	DD	$LN10@R_RocketTr
	DD	$LN11@R_RocketTr
	DD	$LN12@R_RocketTr
	DD	$LN13@R_RocketTr
	DD	$LN19@R_RocketTr
	DD	$LN13@R_RocketTr
	DD	$LN20@R_RocketTr
	DD	$LN21@R_RocketTr
_R_RocketTrail ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_TeleportSplash
_TEXT	SEGMENT
tv285 = -112						; size = 4
tv272 = -112						; size = 4
tv259 = -112						; size = 4
tv239 = -112						; size = 8
tv340 = -108						; size = 4
tv338 = -108						; size = 4
tv336 = -108						; size = 4
tv222 = -108						; size = 4
_ilength$1 = -40					; size = 4
_k$ = -36						; size = 4
_j$ = -32						; size = 4
_i$ = -28						; size = 4
_vel$ = -24						; size = 4
_dir$ = -20						; size = 12
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_org$ = 8						; size = 4
_R_TeleportSplash PROC					; COMDAT

; 1110 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1111 : 	particle_t	*p;
; 1112 : 	vec3_t		dir;
; 1113 : 	float		vel;
; 1114 : 	int		i, j, k;
; 1115 : 
; 1116 : 	for( i = -16; i < 16; i += 4 )

	mov	DWORD PTR _i$[ebp], -16			; fffffff0H
	jmp	SHORT $LN4@R_Teleport
$LN2@R_Teleport:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_Teleport:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN3@R_Teleport

; 1117 : 	{
; 1118 : 		for( j = -16; j < 16; j += 4 )

	mov	DWORD PTR _j$[ebp], -16			; fffffff0H
	jmp	SHORT $LN7@R_Teleport
$LN5@R_Teleport:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 4
	mov	DWORD PTR _j$[ebp], eax
$LN7@R_Teleport:
	cmp	DWORD PTR _j$[ebp], 16			; 00000010H
	jge	$LN6@R_Teleport

; 1119 : 		{
; 1120 : 			for( k = -24; k < 32; k += 4 )

	mov	DWORD PTR _k$[ebp], -24			; ffffffe8H
	jmp	SHORT $LN10@R_Teleport
$LN8@R_Teleport:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 4
	mov	DWORD PTR _k$[ebp], eax
$LN10@R_Teleport:
	cmp	DWORD PTR _k$[ebp], 32			; 00000020H
	jge	$LN9@R_Teleport

; 1121 : 			{
; 1122 : 				p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1123 : 				if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN11@R_Teleport
	jmp	$LN3@R_Teleport
$LN11@R_Teleport:

; 1124 : 		
; 1125 : 				p->die = cl.time + COM_RandomFloat( 0.2f, 0.34f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3eae147b
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	QWORD PTR tv239[ebp]
	movsd	xmm0, QWORD PTR tv239[ebp]
	addsd	xmm0, QWORD PTR _cl+2167640
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 1126 : 				p->color = COM_RandomLong( 7, 14 );

	push	14					; 0000000eH
	push	7
	call	_COM_RandomLong
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1127 : 				p->type = pt_slowgrav;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 2

; 1128 : 				
; 1129 : 				dir[0] = j * 8.0f;

	cvtsi2ss xmm0, DWORD PTR _j$[ebp]
	mulss	xmm0, DWORD PTR __real@41000000
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0

; 1130 : 				dir[1] = i * 8.0f;

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR __real@41000000
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 1131 : 				dir[2] = k * 8.0f;

	cvtsi2ss xmm0, DWORD PTR _k$[ebp]
	mulss	xmm0, DWORD PTR __real@41000000
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 1132 : 	
; 1133 : 				p->org[0] = org[0] + i + COM_RandomFloat( 0.0f, 3.0f );

	mov	eax, 4
	imul	ecx, eax, 0
	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _org$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx]
	push	ecx
	movss	xmm1, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm1
	push	ecx
	xorps	xmm1, xmm1
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv336[ebp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv259[ebp]
	movss	xmm0, DWORD PTR tv336[ebp]
	addss	xmm0, DWORD PTR tv259[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 1134 : 				p->org[1] = org[1] + j + COM_RandomFloat( 0.0f, 3.0f );

	mov	eax, 4
	shl	eax, 0
	cvtsi2ss xmm0, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _org$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax]
	push	ecx
	movss	xmm1, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm1
	push	ecx
	xorps	xmm1, xmm1
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv338[ebp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv272[ebp]
	movss	xmm0, DWORD PTR tv338[ebp]
	addss	xmm0, DWORD PTR tv272[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1135 : 				p->org[2] = org[2] + k + COM_RandomFloat( 0.0f, 3.0f );

	mov	eax, 4
	shl	eax, 1
	cvtsi2ss xmm0, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _org$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax]
	push	ecx
	movss	xmm1, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm1
	push	ecx
	xorps	xmm1, xmm1
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv340[ebp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv285[ebp]
	movss	xmm0, DWORD PTR tv340[ebp]
	addss	xmm0, DWORD PTR tv285[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 1136 : 	
; 1137 : 				VectorNormalize( dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _dir$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm1, DWORD PTR _dir$[ebp+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR _dir$[ebp+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _ilength$1[ebp]
	movss	xmm0, DWORD PTR _ilength$1[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN12@R_Teleport
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ilength$1[ebp]
	movss	DWORD PTR _ilength$1[ebp], xmm0
$LN12@R_Teleport:
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _dir$[ebp+eax], xmm0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _dir$[ebp+eax]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _dir$[ebp+eax]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _dir$[ebp+ecx], xmm0

; 1138 : 				vel = COM_RandomFloat( 50.0f, 113.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@42e20000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR _vel$[ebp]

; 1139 : 				VectorScale( dir, vel, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _vel$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+edx]
	mulss	xmm0, DWORD PTR _vel$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _dir$[ebp+edx]
	mulss	xmm0, DWORD PTR _vel$[ebp]
	movss	DWORD PTR tv222[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv222[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 1140 : 			}

	jmp	$LN8@R_Teleport
$LN9@R_Teleport:

; 1141 : 		}

	jmp	$LN5@R_Teleport
$LN6@R_Teleport:

; 1142 : 	}

	jmp	$LN2@R_Teleport
$LN3@R_Teleport:

; 1143 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_TeleportSplash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_LavaSplash
_TEXT	SEGMENT
tv260 = -112						; size = 4
tv251 = -112						; size = 4
tv237 = -112						; size = 8
tv339 = -108						; size = 4
tv337 = -108						; size = 4
tv284 = -108						; size = 4
tv220 = -108						; size = 4
_ilength$1 = -40					; size = 4
_k$ = -36						; size = 4
_j$ = -32						; size = 4
_i$ = -28						; size = 4
_dir$ = -24						; size = 12
_vel$ = -12						; size = 4
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_org$ = 8						; size = 4
_R_LavaSplash PROC					; COMDAT

; 988  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 989  : 	particle_t	*p;
; 990  : 	float		vel;
; 991  : 	vec3_t		dir;
; 992  : 	int		i, j, k;
; 993  : 
; 994  : 	for( i = -16; i < 16; i++ )

	mov	DWORD PTR _i$[ebp], -16			; fffffff0H
	jmp	SHORT $LN4@R_LavaSpla
$LN2@R_LavaSpla:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_LavaSpla:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN3@R_LavaSpla

; 995  : 	{
; 996  : 		for( j = -16; j <16; j++ )

	mov	DWORD PTR _j$[ebp], -16			; fffffff0H
	jmp	SHORT $LN7@R_LavaSpla
$LN5@R_LavaSpla:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@R_LavaSpla:
	cmp	DWORD PTR _j$[ebp], 16			; 00000010H
	jge	$LN6@R_LavaSpla

; 997  : 		{
; 998  : 			for( k = 0; k < 1; k++ )

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN10@R_LavaSpla
$LN8@R_LavaSpla:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN10@R_LavaSpla:
	cmp	DWORD PTR _k$[ebp], 1
	jge	$LN9@R_LavaSpla

; 999  : 			{
; 1000 : 				p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1001 : 				if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN11@R_LavaSpla
	jmp	$LN3@R_LavaSpla
$LN11@R_LavaSpla:

; 1002 : 
; 1003 : 				p->die = cl.time + COM_RandomFloat( 2.0f, 2.62f );

	push	ecx
	movss	xmm0, DWORD PTR __real@4027ae14
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	QWORD PTR tv237[ebp]
	movsd	xmm0, QWORD PTR tv237[ebp]
	addsd	xmm0, QWORD PTR _cl+2167640
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 1004 : 				p->color = COM_RandomLong( 224, 231 );

	push	231					; 000000e7H
	push	224					; 000000e0H
	call	_COM_RandomLong
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1005 : 				p->type = pt_slowgrav;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 2

; 1006 : 				
; 1007 : 				dir[0] = j * 8.0f + COM_RandomFloat( 0.0f, 7.0f );

	cvtsi2ss xmm0, DWORD PTR _j$[ebp]
	mulss	xmm0, DWORD PTR __real@41000000
	push	ecx
	movss	xmm1, DWORD PTR __real@40e00000
	movss	DWORD PTR [esp], xmm1
	push	ecx
	xorps	xmm1, xmm1
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv337[ebp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv251[ebp]
	movss	xmm0, DWORD PTR tv337[ebp]
	addss	xmm0, DWORD PTR tv251[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0

; 1008 : 				dir[1] = i * 8.0f + COM_RandomFloat( 0.0f, 7.0f );

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR __real@41000000
	push	ecx
	movss	xmm1, DWORD PTR __real@40e00000
	movss	DWORD PTR [esp], xmm1
	push	ecx
	xorps	xmm1, xmm1
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv339[ebp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv260[ebp]
	movss	xmm0, DWORD PTR tv339[ebp]
	addss	xmm0, DWORD PTR tv260[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 1009 : 				dir[2] = 256.0f;

	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@43800000
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 1010 : 
; 1011 : 				p->org[0] = org[0] + dir[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR _dir$[ebp+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 1012 : 				p->org[1] = org[1] + dir[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 1013 : 				p->org[2] = org[2] + COM_RandomFloat( 0.0f, 63.0f );

	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@427c0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv284[ebp]
	mov	eax, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv284[ebp]
	addss	xmm0, DWORD PTR [eax+esi]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 1014 : 
; 1015 : 				VectorNormalize( dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _dir$[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm1, DWORD PTR _dir$[ebp+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR _dir$[ebp+eax]
	mulss	xmm1, DWORD PTR _dir$[ebp+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _ilength$1[ebp]
	movss	xmm0, DWORD PTR _ilength$1[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN12@R_LavaSpla
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ilength$1[ebp]
	movss	DWORD PTR _ilength$1[ebp], xmm0
$LN12@R_LavaSpla:
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _dir$[ebp+eax], xmm0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _dir$[ebp+eax]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _dir$[ebp+eax]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _dir$[ebp+ecx], xmm0

; 1016 : 				vel = COM_RandomFloat( 50.0f, 113.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@42e20000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR _vel$[ebp]

; 1017 : 				VectorScale( dir, vel, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mulss	xmm0, DWORD PTR _vel$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _dir$[ebp+edx]
	mulss	xmm0, DWORD PTR _vel$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _dir$[ebp+edx]
	mulss	xmm0, DWORD PTR _vel$[ebp]
	movss	DWORD PTR tv220[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv220[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 1018 : 			}

	jmp	$LN8@R_LavaSpla
$LN9@R_LavaSpla:

; 1019 : 		}

	jmp	$LN5@R_LavaSpla
$LN6@R_LavaSpla:

; 1020 : 	}

	jmp	$LN2@R_LavaSpla
$LN3@R_LavaSpla:

; 1021 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_LavaSplash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_ParticleBurst
_TEXT	SEGMENT
tv242 = -124						; size = 8
tv169 = -124						; size = 4
tv295 = -120						; size = 4
tv343 = -116						; size = 8
tv283 = -116						; size = 4
tv271 = -112						; size = 4
tv223 = -112						; size = 4
tv193 = -112						; size = 4
_dist$ = -44						; size = 4
_j$ = -40						; size = 4
_i$ = -36						; size = 4
_dest$ = -32						; size = 12
_dir$ = -20						; size = 12
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_org$ = 8						; size = 4
_size$ = 12						; size = 4
_color$ = 16						; size = 4
_life$ = 20						; size = 4
_R_ParticleBurst PROC					; COMDAT

; 1030 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1031 : 	particle_t	*p;
; 1032 : 	vec3_t		dir, dest;
; 1033 : 	int		i, j;
; 1034 : 	float		dist;
; 1035 : 
; 1036 : 	for( i = 0; i < 32; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_Particle
$LN2@R_Particle:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_Particle:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	$LN3@R_Particle

; 1037 : 	{
; 1038 : 		for( j = 0; j < 32; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@R_Particle
$LN5@R_Particle:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@R_Particle:
	cmp	DWORD PTR _j$[ebp], 32			; 00000020H
	jge	$LN6@R_Particle

; 1039 : 		{
; 1040 : 			p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1041 : 			if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN8@R_Particle
	jmp	$LN3@R_Particle
$LN8@R_Particle:

; 1042 : 
; 1043 : 			p->die = cl.time + life + COM_RandomFloat( -0.5f, 0.5f );

	cvtss2sd xmm0, DWORD PTR _life$[ebp]
	addsd	xmm0, QWORD PTR _cl+2167640
	push	ecx
	movss	xmm1, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm1
	push	ecx
	movss	xmm1, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm1
	movsd	QWORD PTR tv343[ebp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	QWORD PTR tv242[ebp]
	movsd	xmm0, QWORD PTR tv343[ebp]
	addsd	xmm0, QWORD PTR tv242[ebp]
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 1044 : 			p->color = color + COM_RandomLong( 0, 10 );

	push	10					; 0000000aH
	push	0
	call	_COM_RandomLong
	add	esp, 8
	add	eax, DWORD PTR _color$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1045 : 			p->ramp = 1.0f;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 1046 : 
; 1047 : 			VectorCopy( org, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 1048 : 			VectorAddScalar( org, COM_RandomFloat( -size, size ), dest );

	mov	eax, 4
	imul	esi, eax, 0
	cvtsi2ss xmm0, DWORD PTR _size$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _size$[ebp]
	neg	ecx
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv271[ebp]
	mov	edx, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv271[ebp]
	addss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dest$[ebp+ecx], xmm0
	mov	esi, 4
	shl	esi, 0
	cvtsi2ss xmm0, DWORD PTR _size$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _size$[ebp]
	neg	edx
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv283[ebp]
	mov	eax, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv283[ebp]
	addss	xmm0, DWORD PTR [eax+esi]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _dest$[ebp+ecx], xmm0
	mov	esi, 4
	shl	esi, 1
	cvtsi2ss xmm0, DWORD PTR _size$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _size$[ebp]
	neg	edx
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv295[ebp]
	mov	eax, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR [eax+esi]
	addss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR tv169[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv169[ebp]
	movss	DWORD PTR _dest$[ebp+ecx], xmm0

; 1049 : 			VectorSubtract( dest, p->org, dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dest$[ebp+ecx]
	subss	xmm0, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dest$[ebp+edx]
	subss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _dir$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dest$[ebp+eax]
	subss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR tv193[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv193[ebp]
	movss	DWORD PTR _dir$[ebp+eax], xmm0

; 1050 : 			dist = VectorNormalizeLength( dir );

	lea	eax, DWORD PTR _dir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dir$[ebp]
	push	ecx
	call	_VectorNormalizeLength2
	add	esp, 8
	fstp	DWORD PTR _dist$[ebp]

; 1051 : 			VectorScale( dir, ( dist / life ), p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _dist$[ebp]
	divss	xmm0, DWORD PTR _life$[ebp]
	mulss	xmm0, DWORD PTR _dir$[ebp+ecx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _dist$[ebp]
	divss	xmm0, DWORD PTR _life$[ebp]
	mulss	xmm0, DWORD PTR _dir$[ebp+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _dist$[ebp]
	divss	xmm0, DWORD PTR _life$[ebp]
	movss	xmm1, DWORD PTR _dir$[ebp+edx]
	mulss	xmm1, xmm0
	movss	DWORD PTR tv223[ebp], xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv223[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 1052 : 		}

	jmp	$LN5@R_Particle
$LN6@R_Particle:

; 1053 : 	}

	jmp	$LN2@R_Particle
$LN3@R_Particle:

; 1054 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_ParticleBurst ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_RunParticleEffect
_TEXT	SEGMENT
tv147 = -88						; size = 4
tv227 = -84						; size = 4
tv213 = -80						; size = 4
tv186 = -80						; size = 8
tv199 = -76						; size = 4
tv165 = -76						; size = 4
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_org$ = 8						; size = 4
_dir$ = 12						; size = 4
_color$ = 16						; size = 4
_count$ = 20						; size = 4
_R_RunParticleEffect PROC				; COMDAT

; 842  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 843  : 	particle_t	*p;
; 844  : 	int		i;
; 845  : 
; 846  : 	if( count == 1024 )

	cmp	DWORD PTR _count$[ebp], 1024		; 00000400H
	jne	SHORT $LN5@R_RunParti

; 847  : 	{
; 848  : 		// rocket explosion
; 849  : 		R_ParticleExplosion( org );

	mov	eax, DWORD PTR _org$[ebp]
	push	eax
	call	_R_ParticleExplosion
	add	esp, 4

; 850  : 		return;

	jmp	$LN3@R_RunParti
$LN5@R_RunParti:

; 851  : 	}
; 852  : 	
; 853  : 	for( i = 0; i < count; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_RunParti
$LN2@R_RunParti:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_RunParti:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN3@R_RunParti

; 854  : 	{
; 855  : 		p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 856  : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN6@R_RunParti
	jmp	$LN3@R_RunParti
$LN6@R_RunParti:

; 857  : 
; 858  : 		p->color = (color & ~7) + COM_RandomLong( 0, 7 );

	mov	esi, DWORD PTR _color$[ebp]
	and	esi, -8					; fffffff8H
	push	7
	push	0
	call	_COM_RandomLong
	add	esp, 8
	add	esi, eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax+12], si

; 859  : 		p->die = cl.time + COM_RandomFloat( 0.1f, 0.4f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	QWORD PTR tv186[ebp]
	movsd	xmm0, QWORD PTR tv186[ebp]
	addsd	xmm0, QWORD PTR _cl+2167640
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 860  : 		p->type = pt_slowgrav;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 2

; 861  : 
; 862  : 		VectorAddScalar( org, COM_RandomFloat( -8.0f, 8.0f ), p->org );

	mov	eax, 4
	imul	esi, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c1000000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv199[ebp]
	mov	ecx, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv199[ebp]
	addss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	esi, 4
	shl	esi, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c1000000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv213[ebp]
	mov	edx, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv213[ebp]
	addss	xmm0, DWORD PTR [edx+esi]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c1000000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv227[ebp]
	mov	edx, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR [edx+esi]
	addss	xmm0, DWORD PTR tv227[ebp]
	movss	DWORD PTR tv147[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv147[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 863  : 		VectorScale( dir, 15.0f, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@41700000
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@41700000
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _dir$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR tv165[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv165[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 864  : 	}

	jmp	$LN2@R_RunParti
$LN3@R_RunParti:

; 865  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_RunParticleEffect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_FlickerParticles
_TEXT	SEGMENT
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_org$ = 8						; size = 4
_R_FlickerParticles PROC				; COMDAT

; 1380 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1381 : 	particle_t	*p;
; 1382 : 	int		i;
; 1383 : 
; 1384 : 	for( i = 0; i < 15; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_FlickerP
$LN2@R_FlickerP:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_FlickerP:
	cmp	DWORD PTR _i$[ebp], 15			; 0000000fH
	jge	$LN3@R_FlickerP

; 1385 : 	{
; 1386 : 		p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1387 : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN5@R_FlickerP
	jmp	$LN3@R_FlickerP
$LN5@R_FlickerP:

; 1388 : 
; 1389 : 		VectorCopy( org, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 1390 : 		p->vel[0] = COM_RandomFloat( -32.0f, 32.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c2000000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	fstp	DWORD PTR [edx+ecx+20]

; 1391 : 		p->vel[1] = COM_RandomFloat( -32.0f, 32.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c2000000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	fstp	DWORD PTR [ecx+eax+20]

; 1392 : 		p->vel[2] = COM_RandomFloat( 80.0f, 143.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@430f0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42a00000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	fstp	DWORD PTR [ecx+eax+20]

; 1393 : 
; 1394 : 		p->die = cl.time + 2.0f;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 1395 : 		p->type = pt_blob2;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 7

; 1396 : 		p->color = 254;

	mov	eax, 254				; 000000feH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1397 : 	}

	jmp	$LN2@R_FlickerP
$LN3@R_FlickerP:

; 1398 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_FlickerParticles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_EntityParticles
_TEXT	SEGMENT
tv197 = -120						; size = 4
tv142 = -120						; size = 4
_i$ = -52						; size = 4
_p$ = -48						; size = 4
_forward$ = -44						; size = 12
_cy$ = -32						; size = 4
_cp$ = -28						; size = 4
_cr$ = -24						; size = 4
_sy$ = -20						; size = 4
_sp$ = -16						; size = 4
_sr$ = -12						; size = 4
_angle$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ent$ = 8						; size = 4
_R_EntityParticles PROC					; COMDAT

; 705  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 706  : 	float		angle;
; 707  : 	float		sr, sp, sy, cr, cp, cy;
; 708  : 	vec3_t		forward;	
; 709  : 	particle_t	*p;
; 710  : 	int		i;
; 711  : 
; 712  : 	for( i = 0; i < NUMVERTEXNORMALS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_EntityPa
$LN2@R_EntityPa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_EntityPa:
	cmp	DWORD PTR _i$[ebp], 162			; 000000a2H
	jge	$LN3@R_EntityPa

; 713  : 	{
; 714  : 		p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 715  : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN5@R_EntityPa
	jmp	$LN3@R_EntityPa
$LN5@R_EntityPa:

; 716  : 
; 717  : 		angle = cl.time * cl_avelocities[i][0];

	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, 4
	imul	edx, ecx, 0
	cvtss2sd xmm0, DWORD PTR _cl_avelocities[eax+edx]
	mulsd	xmm0, QWORD PTR _cl+2167640
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _angle$[ebp], xmm0

; 718  : 		SinCos( angle, &sy, &cy );

	lea	eax, DWORD PTR _cy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sy$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 719  : 		angle = cl.time * cl_avelocities[i][1];

	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, 4
	shl	ecx, 0
	cvtss2sd xmm0, DWORD PTR _cl_avelocities[eax+ecx]
	mulsd	xmm0, QWORD PTR _cl+2167640
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _angle$[ebp], xmm0

; 720  : 		SinCos( angle, &sp, &cp );

	lea	eax, DWORD PTR _cp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sp$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 721  : 		angle = cl.time * cl_avelocities[i][2];

	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, 4
	shl	ecx, 1
	cvtss2sd xmm0, DWORD PTR _cl_avelocities[eax+ecx]
	mulsd	xmm0, QWORD PTR _cl+2167640
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _angle$[ebp], xmm0

; 722  : 		SinCos( angle, &sr, &cr );

	lea	eax, DWORD PTR _cr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_SinCos
	add	esp, 12					; 0000000cH

; 723  : 	
; 724  : 		VectorSet( forward, cp * cy, cp * sy, -sp ); 

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _cy$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _forward$[ebp+ecx], xmm0
	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _sy$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _forward$[ebp+edx], xmm0
	movss	xmm0, DWORD PTR _sp$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv142[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv142[ebp]
	movss	DWORD PTR _forward$[ebp+eax], xmm0

; 725  : 
; 726  : 		p->die = cl.time + 0.001f;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@3f50624de0000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 727  : 		p->color = 111; // yellow

	mov	eax, 111				; 0000006fH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 728  : 
; 729  : 		VectorMAMAM( 1.0f, ent->origin, 64.0f, m_bytenormals[i], 16.0f, forward, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ent$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR [edx+ecx+3224]
	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm1, DWORD PTR __real@42800000
	mulss	xmm1, DWORD PTR _m_bytenormals[eax+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm1, DWORD PTR __real@41800000
	mulss	xmm1, DWORD PTR _forward$[ebp+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _ent$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR [eax+edx+3224]
	imul	ecx, DWORD PTR _i$[ebp], 12
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR __real@42800000
	mulss	xmm1, DWORD PTR _m_bytenormals[ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR __real@41800000
	mulss	xmm1, DWORD PTR _forward$[ebp+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _ent$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR [ecx+eax+3224]
	imul	edx, DWORD PTR _i$[ebp], 12
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR __real@42800000
	mulss	xmm1, DWORD PTR _m_bytenormals[edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR __real@41800000
	mulss	xmm1, DWORD PTR _forward$[ebp+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR tv197[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv197[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 730  : 	}

	jmp	$LN2@R_EntityPa
$LN3@R_EntityPa:

; 731  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_EntityParticles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_BlobExplosion
_TEXT	SEGMENT
tv151 = -84						; size = 8
tv174 = -80						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_org$ = 8						; size = 4
_R_BlobExplosion PROC					; COMDAT

; 803  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 804  : 	particle_t	*p;
; 805  : 	int		i, j;
; 806  : 
; 807  : 	for( i = 0; i < 1024; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_BlobExpl
$LN2@R_BlobExpl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_BlobExpl:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jge	$LN3@R_BlobExpl

; 808  : 	{
; 809  : 		p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 810  : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN8@R_BlobExpl
	jmp	$LN3@R_BlobExpl
$LN8@R_BlobExpl:

; 811  : 
; 812  : 		p->die = cl.time + COM_RandomFloat( 2.0f, 2.4f );

	push	ecx
	movss	xmm0, DWORD PTR __real@4019999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	QWORD PTR tv151[ebp]
	movsd	xmm0, QWORD PTR tv151[ebp]
	addsd	xmm0, QWORD PTR _cl+2167640
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 813  : 		p->packedColor = 255; // use old code for blob particles

	mov	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+14], ax

; 814  : 
; 815  : 		if( i & 1 )

	mov	eax, DWORD PTR _i$[ebp]
	and	eax, 1
	je	SHORT $LN9@R_BlobExpl

; 816  : 		{
; 817  : 			p->type = pt_blob;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 6

; 818  : 			p->color = COM_RandomLong( 66, 71 );

	push	71					; 00000047H
	push	66					; 00000042H
	call	_COM_RandomLong
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 819  : 		}

	jmp	SHORT $LN10@R_BlobExpl
$LN9@R_BlobExpl:

; 820  : 		else
; 821  : 		{
; 822  : 			p->type = pt_blob2;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 7

; 823  : 			p->color = COM_RandomLong( 150, 155 );

	push	155					; 0000009bH
	push	150					; 00000096H
	call	_COM_RandomLong
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax
$LN10@R_BlobExpl:

; 824  : 		}
; 825  : 
; 826  : 		for( j = 0; j < 3; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@R_BlobExpl
$LN5@R_BlobExpl:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@R_BlobExpl:
	cmp	DWORD PTR _j$[ebp], 3
	jge	SHORT $LN6@R_BlobExpl

; 827  : 		{
; 828  : 			p->org[j] = org[j] + COM_RandomFloat( -16.0f, 16.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c1800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv174[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv174[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0

; 829  : 			p->vel[j] = COM_RandomFloat( -256.0f, 256.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@43800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c3800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fstp	DWORD PTR [ecx+eax*4+20]

; 830  : 		}

	jmp	$LN5@R_BlobExpl
$LN6@R_BlobExpl:

; 831  : 	}

	jmp	$LN2@R_BlobExpl
$LN3@R_BlobExpl:

; 832  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_BlobExplosion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_BloodStream
_TEXT	SEGMENT
tv583 = -92						; size = 4
tv570 = -92						; size = 4
tv557 = -92						; size = 4
tv379 = -92						; size = 4
tv358 = -92						; size = 4
tv273 = -92						; size = 4
tv252 = -92						; size = 4
tv170 = -92						; size = 4
_num$1 = -24						; size = 4
_accel$ = -20						; size = 4
_arc$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_org$ = 8						; size = 4
_dir$ = 12						; size = 4
_pcolor$ = 16						; size = 4
_speed$ = 20						; size = 4
_R_BloodStream PROC					; COMDAT

; 911  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 912  : 	particle_t	*p;
; 913  : 	int		i, j;
; 914  : 	float		arc;
; 915  : 	float		accel = speed;

	cvtsi2ss xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR _accel$[ebp], xmm0

; 916  : 
; 917  : 	for( arc = 0.05f, i = 0; i < 100; i++ )

	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR _arc$[ebp], xmm0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_BloodStr
$LN2@R_BloodStr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_BloodStr:
	cmp	DWORD PTR _i$[ebp], 100			; 00000064H
	jge	$LN3@R_BloodStr

; 918  : 	{
; 919  : 		p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 920  : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN11@R_BloodStr
	jmp	$LN6@R_BloodStr
$LN11@R_BloodStr:

; 921  : 
; 922  : 		p->die = cl.time + 2.0f;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 923  : 		p->type = pt_vox_grav;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 9

; 924  : 		p->color = pcolor + COM_RandomLong( 0, 9 );

	push	9
	push	0
	call	_COM_RandomLong
	add	esp, 8
	add	eax, DWORD PTR _pcolor$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 925  : 
; 926  : 		VectorCopy( org, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 927  : 		VectorCopy( dir, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _dir$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax+20], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax+20], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _dir$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx+20], eax

; 928  : 
; 929  : 		p->vel[2] -= arc;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	subss	xmm0, DWORD PTR _arc$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 930  : 		arc -= 0.005f;

	movss	xmm0, DWORD PTR _arc$[ebp]
	subss	xmm0, DWORD PTR __real@3ba3d70a
	movss	DWORD PTR _arc$[ebp], xmm0

; 931  : 		VectorScale( p->vel, accel, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR _accel$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	mulss	xmm0, DWORD PTR _accel$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR _accel$[ebp]
	movss	DWORD PTR tv170[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv170[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 932  : 		accel -= 0.00001f; // so last few will drip

	movss	xmm0, DWORD PTR _accel$[ebp]
	subss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR _accel$[ebp], xmm0

; 933  : 	}

	jmp	$LN2@R_BloodStr
$LN3@R_BloodStr:

; 934  : 
; 935  : 	for( arc = 0.075f, i = 0; i < ( speed / 5 ); i++ )

	movss	xmm0, DWORD PTR __real@3d99999a
	movss	DWORD PTR _arc$[ebp], xmm0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@R_BloodStr
$LN5@R_BloodStr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@R_BloodStr:
	mov	eax, DWORD PTR _speed$[ebp]
	cdq
	mov	ecx, 5
	idiv	ecx
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN6@R_BloodStr

; 936  : 	{
; 937  : 		float	num;
; 938  : 
; 939  : 		p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 940  : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN12@R_BloodStr
	jmp	$LN6@R_BloodStr
$LN12@R_BloodStr:

; 941  : 
; 942  : 		p->die = cl.time + 3.0f;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@4008000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 943  : 		p->color = pcolor + COM_RandomLong( 0, 9 );

	push	9
	push	0
	call	_COM_RandomLong
	add	esp, 8
	add	eax, DWORD PTR _pcolor$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 944  : 		p->type = pt_vox_slowgrav;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 8

; 945  : 
; 946  : 		VectorCopy( org, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 947  : 		VectorCopy( dir, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _dir$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax+20], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax+20], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _dir$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx+20], eax

; 948  : 
; 949  : 		p->vel[2] -= arc;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	subss	xmm0, DWORD PTR _arc$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 950  : 		arc -= 0.005f;

	movss	xmm0, DWORD PTR _arc$[ebp]
	subss	xmm0, DWORD PTR __real@3ba3d70a
	movss	DWORD PTR _arc$[ebp], xmm0

; 951  : 
; 952  : 		num = COM_RandomFloat( 0.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR _num$1[ebp]

; 953  : 		accel = speed * num;

	cvtsi2ss xmm0, DWORD PTR _speed$[ebp]
	mulss	xmm0, DWORD PTR _num$1[ebp]
	movss	DWORD PTR _accel$[ebp], xmm0

; 954  : 		num *= 1.7f;

	movss	xmm0, DWORD PTR _num$1[ebp]
	mulss	xmm0, DWORD PTR __real@3fd9999a
	movss	DWORD PTR _num$1[ebp], xmm0

; 955  : 
; 956  : 		VectorScale( p->vel, num, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR _num$1[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	mulss	xmm0, DWORD PTR _num$1[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR _num$1[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 957  : 		VectorScale( p->vel, accel, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR _accel$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	mulss	xmm0, DWORD PTR _accel$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR _accel$[ebp]
	movss	DWORD PTR tv273[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv273[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 958  : 
; 959  : 		for( j = 0; j < 2; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN10@R_BloodStr
$LN8@R_BloodStr:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN10@R_BloodStr:
	cmp	DWORD PTR _j$[ebp], 2
	jge	$LN9@R_BloodStr

; 960  : 		{
; 961  : 			p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 962  : 			if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN13@R_BloodStr
	jmp	$LN6@R_BloodStr
$LN13@R_BloodStr:

; 963  : 
; 964  : 			p->die = cl.time + 3.0f;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@4008000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 965  : 			p->color = pcolor + COM_RandomLong( 0, 9 );

	push	9
	push	0
	call	_COM_RandomLong
	add	esp, 8
	add	eax, DWORD PTR _pcolor$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 966  : 			p->type = pt_vox_slowgrav;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 8

; 967  : 
; 968  : 			p->org[0] = org[0] + COM_RandomFloat( -1.0f, 1.0f );

	mov	eax, 4
	imul	esi, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv557[ebp]
	mov	ecx, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv557[ebp]
	addss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 969  : 			p->org[1] = org[1] + COM_RandomFloat( -1.0f, 1.0f );

	mov	esi, 4
	shl	esi, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv570[ebp]
	mov	eax, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv570[ebp]
	addss	xmm0, DWORD PTR [eax+esi]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 970  : 			p->org[2] = org[2] + COM_RandomFloat( -1.0f, 1.0f );

	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv583[ebp]
	mov	eax, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv583[ebp]
	addss	xmm0, DWORD PTR [eax+esi]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 971  : 
; 972  : 			VectorCopy( dir, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _dir$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax+20], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _dir$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax+20], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _dir$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx+20], eax

; 973  : 			p->vel[2] -= arc;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	subss	xmm0, DWORD PTR _arc$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 974  : 
; 975  : 			VectorScale( p->vel, num, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR _num$1[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	mulss	xmm0, DWORD PTR _num$1[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR _num$1[ebp]
	movss	DWORD PTR tv358[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv358[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 976  : 			VectorScale( p->vel, accel, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR _accel$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	mulss	xmm0, DWORD PTR _accel$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR _accel$[ebp]
	movss	DWORD PTR tv379[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv379[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 977  : 		}

	jmp	$LN8@R_BloodStr
$LN9@R_BloodStr:

; 978  : 	}

	jmp	$LN5@R_BloodStr
$LN6@R_BloodStr:

; 979  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_BloodStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_Blood
_TEXT	SEGMENT
tv238 = -140						; size = 4
tv193 = -140						; size = 4
tv166 = -140						; size = 4
tv433 = -136						; size = 4
tv385 = -136						; size = 4
tv345 = -136						; size = 4
tv420 = -132						; size = 4
tv373 = -132						; size = 4
tv332 = -132						; size = 4
tv407 = -128						; size = 4
tv361 = -128						; size = 4
tv319 = -128						; size = 4
tv256 = -128						; size = 4
_ilength$1 = -60					; size = 4
_p$ = -56						; size = 4
_j$ = -52						; size = 4
_i$ = -48						; size = 4
_pspeed$ = -44						; size = 4
_vec$ = -40						; size = 12
_dir$ = -28						; size = 12
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_org$ = 8						; size = 4
_ndir$ = 12						; size = 4
_pcolor$ = 16						; size = 4
_speed$ = 20						; size = 4
_R_Blood PROC						; COMDAT

; 875  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 876  : 	vec3_t		pos, dir, vec;
; 877  : 	float		pspeed = speed * 3.0f;

	cvtsi2ss xmm0, DWORD PTR _speed$[ebp]
	mulss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _pspeed$[ebp], xmm0

; 878  : 	int		i, j;
; 879  : 	particle_t	*p;
; 880  : 
; 881  : 	VectorNormalize2( ndir, dir );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _ndir$[ebp]
	mov	esi, DWORD PTR _ndir$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _ndir$[ebp]
	mov	esi, DWORD PTR _ndir$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _ndir$[ebp]
	mov	esi, DWORD PTR _ndir$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _ilength$1[ebp]
	movss	xmm0, DWORD PTR _ilength$1[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN8@R_Blood
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ilength$1[ebp]
	movss	DWORD PTR _ilength$1[ebp], xmm0
$LN8@R_Blood:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ndir$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _dir$[ebp+ecx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ndir$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _dir$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _ndir$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR _dir$[ebp+edx], xmm0

; 882  : 
; 883  : 	for( i = 0; i < (speed / 2); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_Blood
$LN2@R_Blood:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_Blood:
	mov	eax, DWORD PTR _speed$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN3@R_Blood

; 884  : 	{
; 885  : 		VectorAddScalar( org, COM_RandomFloat( -3.0f, 3.0f ), pos );

	mov	eax, 4
	imul	esi, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv319[ebp]
	mov	ecx, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv319[ebp]
	addss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _pos$[ebp+eax], xmm0
	mov	esi, 4
	shl	esi, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv332[ebp]
	mov	ecx, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv332[ebp]
	addss	xmm0, DWORD PTR [ecx+esi]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _pos$[ebp+edx], xmm0
	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv345[ebp]
	mov	eax, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR [eax+esi]
	addss	xmm0, DWORD PTR tv345[ebp]
	movss	DWORD PTR tv166[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv166[ebp]
	movss	DWORD PTR _pos$[ebp+ecx], xmm0

; 886  : 		VectorAddScalar( dir, COM_RandomFloat( -0.06f, 0.06f ), vec );

	mov	eax, 4
	imul	esi, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@3d75c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bd75c28f
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv361[ebp]
	movss	xmm0, DWORD PTR tv361[ebp]
	addss	xmm0, DWORD PTR _dir$[ebp+esi]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _vec$[ebp+edx], xmm0
	mov	esi, 4
	shl	esi, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@3d75c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bd75c28f
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv373[ebp]
	movss	xmm0, DWORD PTR tv373[ebp]
	addss	xmm0, DWORD PTR _dir$[ebp+esi]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _vec$[ebp+eax], xmm0
	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@3d75c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bd75c28f
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv385[ebp]
	movss	xmm0, DWORD PTR _dir$[ebp+esi]
	addss	xmm0, DWORD PTR tv385[ebp]
	movss	DWORD PTR tv193[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv193[ebp]
	movss	DWORD PTR _vec$[ebp+ecx], xmm0

; 887  : 
; 888  : 		for( j = 0; j < 7; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@R_Blood
$LN5@R_Blood:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@R_Blood:
	cmp	DWORD PTR _j$[ebp], 7
	jge	$LN6@R_Blood

; 889  : 		{
; 890  : 			p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 891  : 			if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN9@R_Blood
	jmp	$LN3@R_Blood
$LN9@R_Blood:

; 892  : 
; 893  : 			p->die = cl.time + 1.5f;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@3ff8000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 894  : 			p->color = pcolor + COM_RandomLong( 0, 9 );

	push	9
	push	0
	call	_COM_RandomLong
	add	esp, 8
	add	eax, DWORD PTR _pcolor$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 895  : 			p->type = pt_vox_grav;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 9

; 896  : 
; 897  : 			VectorAddScalar( pos, COM_RandomFloat( -1.0f, 1.0f ), p->org );

	mov	eax, 4
	imul	esi, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv407[ebp]
	movss	xmm0, DWORD PTR tv407[ebp]
	addss	xmm0, DWORD PTR _pos$[ebp+esi]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx], xmm0
	mov	esi, 4
	shl	esi, 0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv420[ebp]
	movss	xmm0, DWORD PTR tv420[ebp]
	addss	xmm0, DWORD PTR _pos$[ebp+esi]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0
	mov	esi, 4
	shl	esi, 1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv433[ebp]
	movss	xmm0, DWORD PTR _pos$[ebp+esi]
	addss	xmm0, DWORD PTR tv433[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 898  : 			VectorScale( vec, pspeed, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _vec$[ebp+ecx]
	mulss	xmm0, DWORD PTR _pspeed$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _vec$[ebp+edx]
	mulss	xmm0, DWORD PTR _pspeed$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _vec$[ebp+edx]
	mulss	xmm0, DWORD PTR _pspeed$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0

; 899  : 		}

	jmp	$LN5@R_Blood
$LN6@R_Blood:

; 900  : 	}

	jmp	$LN2@R_Blood
$LN3@R_Blood:

; 901  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_Blood ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_Implosion
_TEXT	SEGMENT
tv201 = -124						; size = 4
tv191 = -124						; size = 4
tv181 = -124						; size = 4
tv157 = -124						; size = 4
tv136 = -124						; size = 4
_i$ = -56						; size = 4
_p$ = -52						; size = 4
_factor$ = -48						; size = 4
_vel$ = -44						; size = 12
_temp$ = -32						; size = 12
_start$ = -20						; size = 12
_dist$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_end$ = 8						; size = 4
_radius$ = 12						; size = 4
_count$ = 16						; size = 4
_life$ = 20						; size = 4
_R_Implosion PROC					; COMDAT

; 1569 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1570 : 	float		dist = ( radius / 100.0f );

	movss	xmm0, DWORD PTR _radius$[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _dist$[ebp], xmm0

; 1571 : 	vec3_t		start, temp, vel;
; 1572 : 	float		factor;
; 1573 : 	particle_t	*p;
; 1574 : 	int		i;
; 1575 : 
; 1576 : 	if( life <= 0.0f ) life = 0.1f; // to avoid divide by zero

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR _life$[ebp]
	jb	SHORT $LN5@R_Implosio
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _life$[ebp], xmm0
$LN5@R_Implosio:

; 1577 : 	factor = -1.0 / life;

	cvtss2sd xmm0, DWORD PTR _life$[ebp]
	movsd	xmm1, QWORD PTR __real@bff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _factor$[ebp], xmm0

; 1578 : 
; 1579 : 	for ( i = 0; i < count; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_Implosio
$LN2@R_Implosio:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_Implosio:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN3@R_Implosio

; 1580 : 	{
; 1581 : 		temp[0] = dist * COM_RandomFloat( -100.0f, 100.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c2c80000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv181[ebp]
	movss	xmm0, DWORD PTR tv181[ebp]
	mulss	xmm0, DWORD PTR _dist$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _temp$[ebp+ecx], xmm0

; 1582 : 		temp[1] = dist * COM_RandomFloat( -100.0f, 100.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c2c80000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv191[ebp]
	movss	xmm0, DWORD PTR tv191[ebp]
	mulss	xmm0, DWORD PTR _dist$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _temp$[ebp+eax], xmm0

; 1583 : 		temp[2] = dist * COM_RandomFloat( 0.0f, 100.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv201[ebp]
	movss	xmm0, DWORD PTR tv201[ebp]
	mulss	xmm0, DWORD PTR _dist$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR _temp$[ebp+eax], xmm0

; 1584 : 		VectorScale( temp, factor, vel );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _temp$[ebp+ecx]
	mulss	xmm0, DWORD PTR _factor$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _vel$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _temp$[ebp+ecx]
	mulss	xmm0, DWORD PTR _factor$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _vel$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _temp$[ebp+eax]
	mulss	xmm0, DWORD PTR _factor$[ebp]
	movss	DWORD PTR tv136[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv136[ebp]
	movss	DWORD PTR _vel$[ebp+ecx], xmm0

; 1585 : 		VectorAdd( temp, end, start );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _end$[ebp]
	movss	xmm0, DWORD PTR _temp$[ebp+ecx]
	addss	xmm0, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _start$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _end$[ebp]
	movss	xmm0, DWORD PTR _temp$[ebp+edx]
	addss	xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _start$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _end$[ebp]
	movss	xmm0, DWORD PTR _temp$[ebp+eax]
	addss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR tv157[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv157[ebp]
	movss	DWORD PTR _start$[ebp+eax], xmm0

; 1586 : 
; 1587 : 		if(( p = R_AllocTracer( start, vel, life )) == NULL )

	push	ecx
	movss	xmm0, DWORD PTR _life$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _vel$[ebp]
	push	eax
	lea	ecx, DWORD PTR _start$[ebp]
	push	ecx
	call	_R_AllocTracer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN6@R_Implosio

; 1588 : 			return;

	jmp	SHORT $LN3@R_Implosio
$LN6@R_Implosio:

; 1589 : 
; 1590 : 		p->type = pt_explode;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 4

; 1591 : 	}

	jmp	$LN2@R_Implosio
$LN3@R_Implosio:

; 1592 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_Implosion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_ParticleExplosion2
_TEXT	SEGMENT
tv150 = -84						; size = 4
_p$ = -16						; size = 4
_colorMod$ = -12					; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_org$ = 8						; size = 4
_colorStart$ = 12					; size = 4
_colorLength$ = 16					; size = 4
_R_ParticleExplosion2 PROC				; COMDAT

; 771  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 772  : 	int		i, j;
; 773  : 	int		colorMod = 0;

	mov	DWORD PTR _colorMod$[ebp], 0

; 774  : 	particle_t	*p;
; 775  : 
; 776  : 	for( i = 0; i < 512; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_Particle
$LN2@R_Particle:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_Particle:
	cmp	DWORD PTR _i$[ebp], 512			; 00000200H
	jge	$LN3@R_Particle

; 777  : 	{
; 778  : 		p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 779  : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN8@R_Particle
	jmp	$LN3@R_Particle
$LN8@R_Particle:

; 780  : 
; 781  : 		p->die = cl.time + 0.3f;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@3fd3333340000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 782  : 		p->color = colorStart + ( colorMod % colorLength );

	mov	eax, DWORD PTR _colorMod$[ebp]
	cdq
	idiv	DWORD PTR _colorLength$[ebp]
	add	edx, DWORD PTR _colorStart$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax+12], dx

; 783  : 		p->packedColor = 255; // use old code for blob particles

	mov	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+14], ax

; 784  : 		colorMod++;

	mov	eax, DWORD PTR _colorMod$[ebp]
	add	eax, 1
	mov	DWORD PTR _colorMod$[ebp], eax

; 785  : 
; 786  : 		p->type = pt_blob;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 6

; 787  : 
; 788  : 		for( j = 0; j < 3; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@R_Particle
$LN5@R_Particle:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@R_Particle:
	cmp	DWORD PTR _j$[ebp], 3
	jge	SHORT $LN6@R_Particle

; 789  : 		{
; 790  : 			p->org[j] = org[j] + COM_RandomFloat( -16.0f, 16.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c1800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv150[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv150[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0

; 791  : 			p->vel[j] = COM_RandomFloat( -256.0f, 256.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@43800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c3800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fstp	DWORD PTR [ecx+eax*4+20]

; 792  : 		}

	jmp	$LN5@R_Particle
$LN6@R_Particle:

; 793  : 	}

	jmp	$LN2@R_Particle
$LN3@R_Particle:

; 794  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_ParticleExplosion2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_ParticleExplosion
_TEXT	SEGMENT
tv150 = -80						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_org$ = 8						; size = 4
_R_ParticleExplosion PROC				; COMDAT

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 741  : 	particle_t	*p;
; 742  : 	int		i, j;
; 743  : 
; 744  : 	for( i = 0; i < 1024; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_Particle
$LN2@R_Particle:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_Particle:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jge	$LN3@R_Particle

; 745  : 	{
; 746  : 		p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 747  : 		if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN8@R_Particle
	jmp	$LN3@R_Particle
$LN8@R_Particle:

; 748  : 
; 749  : 		p->die = cl.time + 5.0f;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@4014000000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 750  : 		p->ramp = COM_RandomLong( 0, 3 );

	push	3
	push	0
	call	_COM_RandomLong
	add	esp, 8
	cvtsi2ss xmm0, eax
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 751  : 		p->color = ramp1[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR _ramp1[ecx]
	mov	WORD PTR [edx+12], ax

; 752  : 
; 753  : 		for( j = 0; j < 3; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@R_Particle
$LN5@R_Particle:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@R_Particle:
	cmp	DWORD PTR _j$[ebp], 3
	jge	SHORT $LN6@R_Particle

; 754  : 		{
; 755  : 			p->org[j] = org[j] + COM_RandomFloat( -16.0f, 16.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c1800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	fstp	DWORD PTR tv150[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _org$[ebp]
	movss	xmm0, DWORD PTR tv150[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0

; 756  : 			p->vel[j] = COM_RandomFloat( -256.0f, 256.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@43800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c3800000
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	fstp	DWORD PTR [ecx+eax*4+20]

; 757  : 		}

	jmp	$LN5@R_Particle
$LN6@R_Particle:

; 758  : 
; 759  : 		if( i & 1 ) p->type = pt_explode;

	mov	eax, DWORD PTR _i$[ebp]
	and	eax, 1
	je	SHORT $LN9@R_Particle
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 4
	jmp	SHORT $LN10@R_Particle
$LN9@R_Particle:

; 760  : 		else p->type = pt_explode2;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 5
$LN10@R_Particle:

; 761  : 	}

	jmp	$LN2@R_Particle
$LN3@R_Particle:

; 762  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_ParticleExplosion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_AllocParticle
_TEXT	SEGMENT
_p$ = -4						; size = 4
_callback$ = 8						; size = 4
_R_AllocParticle PROC					; COMDAT

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 215  : 	particle_t	*p;
; 216  : 
; 217  : 	if( !cl_draw_particles->value )

	mov	eax, DWORD PTR _cl_draw_particles
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@R_AllocPar

; 218  : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_AllocPar
$LN2@R_AllocPar:

; 219  : 
; 220  : 	// never alloc particles when we not in game
; 221  : 	if( tr.frametime == 0.0 ) return NULL;

	movsd	xmm0, QWORD PTR _tr+87584
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@R_AllocPar
	xor	eax, eax
	jmp	$LN1@R_AllocPar
$LN3@R_AllocPar:

; 222  : 
; 223  : 	if( !cl_free_particles )

	cmp	DWORD PTR _cl_free_particles, 0
	jne	SHORT $LN4@R_AllocPar

; 224  : 	{
; 225  : 		if( cl_lasttimewarn < host.realtime )

	cvtss2sd xmm0, DWORD PTR _cl_lasttimewarn
	movsd	xmm1, QWORD PTR _host+1440
	comisd	xmm1, xmm0
	jbe	SHORT $LN5@R_AllocPar

; 226  : 		{
; 227  : 			// don't spam about overflow
; 228  : 			Con_DPrintf( S_ERROR "Overflow %d particles\n", GI->max_particles );

	mov	eax, DWORD PTR _SI+768
	mov	ecx, DWORD PTR [eax+1668]
	push	ecx
	push	OFFSET ??_C@_0CC@BJDAFHFN@?$FO1Error?3?$FO7?5Overflow?5?$CFd?5particle@
	call	_Con_DPrintf
	add	esp, 8

; 229  : 			cl_lasttimewarn = host.realtime + 1.0f;

	movsd	xmm0, QWORD PTR _host+1440
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _cl_lasttimewarn, xmm0
$LN5@R_AllocPar:

; 230  : 		}
; 231  : 		return NULL;

	xor	eax, eax
	jmp	$LN1@R_AllocPar
$LN4@R_AllocPar:

; 232  : 	}
; 233  : 
; 234  : 	p = cl_free_particles;

	mov	eax, DWORD PTR _cl_free_particles
	mov	DWORD PTR _p$[ebp], eax

; 235  : 	cl_free_particles = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _cl_free_particles, ecx

; 236  : 	p->next = cl_active_particles;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _cl_active_particles
	mov	DWORD PTR [eax+16], ecx

; 237  : 	cl_active_particles = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _cl_active_particles, eax

; 238  : 
; 239  : 	// clear old particle
; 240  : 	p->type = pt_static;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 0

; 241  : 	VectorClear( p->vel );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx+20], xmm0

; 242  : 	VectorClear( p->org );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 243  : 	p->packedColor = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+14], ax

; 244  : 	p->die = cl.time;

	cvtsd2ss xmm0, QWORD PTR _cl+2167640
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 245  : 	p->color = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 246  : 	p->ramp = 0;

	mov	eax, DWORD PTR _p$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+32], xmm0

; 247  : 
; 248  : 	if( callback )

	cmp	DWORD PTR _callback$[ebp], 0
	je	SHORT $LN6@R_AllocPar

; 249  : 	{
; 250  : 		p->type = pt_clientcustom;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 10			; 0000000aH

; 251  : 		p->callback = callback;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	DWORD PTR [eax+48], ecx
$LN6@R_AllocPar:

; 252  : 	}
; 253  : 
; 254  : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN1@R_AllocPar:

; 255  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_AllocParticle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _CL_ReadPointFile_f
_TEXT	SEGMENT
_token$ = -352						; size = 256
_filename$ = -96					; size = 64
_p$ = -32						; size = 4
_count$ = -28						; size = 4
_org$ = -24						; size = 12
_pfile$ = -12						; size = 4
_afile$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_CL_ReadPointFile_f PROC				; COMDAT

; 1601 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1602 : 	char		*afile, *pfile;
; 1603 : 	vec3_t		org;
; 1604 : 	int		count;
; 1605 : 	particle_t	*p;
; 1606 : 	char		filename[64];
; 1607 : 	string		token;
; 1608 : 	
; 1609 : 	Q_snprintf( filename, sizeof( filename ), "maps/%s.pts", clgame.mapname );

	push	OFFSET _clgame+228
	push	OFFSET ??_C@_0M@OOKLKFOI@maps?1?$CFs?4pts@
	push	64					; 00000040H
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 1610 : 	afile = FS_LoadFile( filename, NULL, false );

	push	0
	push	0
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_FS_LoadFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _afile$[ebp], eax

; 1611 : 
; 1612 : 	if( !afile )

	cmp	DWORD PTR _afile$[ebp], 0
	jne	SHORT $LN4@CL_ReadPoi

; 1613 : 	{
; 1614 : 		Con_Printf( S_ERROR "couldn't open %s\n", filename );

	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@JCJEHCDP@?$FO1Error?3?$FO7?5couldn?8t?5open?5?$CFs?6@
	call	_Con_Printf
	add	esp, 8

; 1615 : 		return;

	jmp	$LN10@CL_ReadPoi
$LN4@CL_ReadPoi:

; 1616 : 	}
; 1617 : 	
; 1618 : 	Con_Printf( "Reading %s...\n", filename );

	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0P@DNKMKNEK@Reading?5?$CFs?4?4?4?6@
	call	_Con_Printf
	add	esp, 8

; 1619 : 
; 1620 : 	count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 1621 : 	pfile = afile;

	mov	eax, DWORD PTR _afile$[ebp]
	mov	DWORD PTR _pfile$[ebp], eax
$LN2@CL_ReadPoi:

; 1622 : 
; 1623 : 	while( 1 )

	mov	eax, 1
	test	eax, eax
	je	$LN3@CL_ReadPoi

; 1624 : 	{
; 1625 : 		pfile = COM_ParseFile( pfile, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfile$[ebp]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 1626 : 		if( !pfile ) break;

	cmp	DWORD PTR _pfile$[ebp], 0
	jne	SHORT $LN5@CL_ReadPoi
	jmp	$LN3@CL_ReadPoi
$LN5@CL_ReadPoi:

; 1627 : 		org[0] = Q_atof( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, 4
	imul	edx, ecx, 0
	fstp	DWORD PTR _org$[ebp+edx]

; 1628 : 
; 1629 : 		pfile = COM_ParseFile( pfile, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfile$[ebp]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 1630 : 		if( !pfile ) break;

	cmp	DWORD PTR _pfile$[ebp], 0
	jne	SHORT $LN6@CL_ReadPoi
	jmp	$LN3@CL_ReadPoi
$LN6@CL_ReadPoi:

; 1631 : 		org[1] = Q_atof( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 0
	fstp	DWORD PTR _org$[ebp+ecx]

; 1632 : 
; 1633 : 		pfile = COM_ParseFile( pfile, token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfile$[ebp]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax

; 1634 : 		if( !pfile ) break;

	cmp	DWORD PTR _pfile$[ebp], 0
	jne	SHORT $LN7@CL_ReadPoi
	jmp	$LN3@CL_ReadPoi
$LN7@CL_ReadPoi:

; 1635 : 		org[2] = Q_atof( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_Q_atof
	add	esp, 4
	mov	ecx, 4
	shl	ecx, 1
	fstp	DWORD PTR _org$[ebp+ecx]

; 1636 : 
; 1637 : 		count++;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 1638 : 		
; 1639 : 		if( !cl_free_particles )

	cmp	DWORD PTR _cl_free_particles, 0
	jne	SHORT $LN8@CL_ReadPoi

; 1640 : 		{
; 1641 : 			Con_Printf( S_ERROR "not enough free particles!\n" );

	push	OFFSET ??_C@_0CH@INBPIBDD@?$FO1Error?3?$FO7?5not?5enough?5free?5part@
	call	_Con_Printf
	add	esp, 4

; 1642 : 			break;

	jmp	$LN3@CL_ReadPoi
$LN8@CL_ReadPoi:

; 1643 : 		}
; 1644 : 
; 1645 : 		// NOTE: can't use R_AllocParticle because this command
; 1646 : 		// may be executed from the console, while frametime is 0
; 1647 : 		p = cl_free_particles;

	mov	eax, DWORD PTR _cl_free_particles
	mov	DWORD PTR _p$[ebp], eax

; 1648 : 		cl_free_particles = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _cl_free_particles, ecx

; 1649 : 		p->next = cl_active_particles;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _cl_active_particles
	mov	DWORD PTR [eax+16], ecx

; 1650 : 		cl_active_particles = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _cl_active_particles, eax

; 1651 : 
; 1652 : 		p->ramp = 0;		

	mov	eax, DWORD PTR _p$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+32], xmm0

; 1653 : 		p->type = pt_static;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 0

; 1654 : 		p->die = cl.time + 99999;

	movsd	xmm0, QWORD PTR _cl+2167640
	addsd	xmm0, QWORD PTR __real@40f869f000000000
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 1655 : 		p->color = (-count) & 15;

	mov	eax, DWORD PTR _count$[ebp]
	neg	eax
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+12], ax

; 1656 : 		VectorCopy( org, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _org$[ebp+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _org$[ebp+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _org$[ebp+eax]
	mov	DWORD PTR [edx+ecx], eax

; 1657 : 		VectorClear( p->vel );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx+20], xmm0

; 1658 : 	}

	jmp	$LN2@CL_ReadPoi
$LN3@CL_ReadPoi:

; 1659 : 
; 1660 : 	Mem_Free( afile );

	mov	eax, DWORD PTR ?__LINE__Var@?0??CL_ReadPointFile_f@@9@9
	add	eax, 59					; 0000003bH
	push	eax
	push	OFFSET ??_C@_0DF@JAJOEGLN@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _afile$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 1661 : 
; 1662 : 	if( count ) Con_Printf( "%i points read\n", count );

	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN9@CL_ReadPoi
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@OCDBFJMH@?$CFi?5points?5read?6@
	call	_Con_Printf
	add	esp, 8
	jmp	SHORT $LN10@CL_ReadPoi
$LN9@CL_ReadPoi:

; 1663 : 	else Con_Printf( "map %s has no leaks!\n", clgame.mapname );

	push	OFFSET _clgame+228
	push	OFFSET ??_C@_0BG@IBGKBEMO@map?5?$CFs?5has?5no?5leaks?$CB?6@
	call	_Con_Printf
	add	esp, 8
$LN10@CL_ReadPoi:

; 1664 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_ReadPointFile_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _CL_DrawTracers
_TEXT	SEGMENT
tv603 = -240						; size = 4
tv528 = -240						; size = 4
tv495 = -240						; size = 4
tv462 = -240						; size = 4
tv435 = -240						; size = 4
tv408 = -240						; size = 4
tv387 = -240						; size = 4
tv348 = -240						; size = 4
tv271 = -240						; size = 4
tv226 = -240						; size = 4
tv202 = -240						; size = 4
_ilength$1 = -172					; size = 4
_pColor$2 = -168					; size = 4
_normal$3 = -164					; size = 12
_tmp$4 = -152						; size = 12
_tmp2$5 = -140						; size = 12
_verts$6 = -128						; size = 48
_p$ = -80						; size = 4
_delta$ = -76						; size = 12
_end$ = -64						; size = 12
_start$ = -52						; size = 12
_screen$ = -40						; size = 12
_screenLast$ = -28					; size = 12
_gravity$ = -16						; size = 4
_atten$ = -12						; size = 4
_scale$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_frametime$ = 8						; size = 8
_CL_DrawTracers PROC					; COMDAT

; 551  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 552  : 	float		scale, atten, gravity;
; 553  : 	vec3_t		screenLast, screen;
; 554  : 	vec3_t		start, end, delta;
; 555  : 	particle_t	*p;
; 556  : 
; 557  : 	if( !cl_draw_tracers->value )

	mov	eax, DWORD PTR _cl_draw_tracers
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@CL_DrawTra

; 558  : 		return;

	jmp	$LN1@CL_DrawTra
$LN5@CL_DrawTra:

; 559  : 
; 560  : 	// update tracer color if this is changed
; 561  : 	if( FBitSet( tracerred->flags|tracergreen->flags|tracerblue->flags|traceralpha->flags, FCVAR_CHANGED ))

	mov	eax, DWORD PTR _tracerred
	mov	ecx, DWORD PTR _tracergreen
	mov	edx, DWORD PTR [eax+8]
	or	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _tracerblue
	or	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _traceralpha
	or	edx, DWORD PTR [ecx+8]
	and	edx, 8192				; 00002000H
	je	$LN6@CL_DrawTra

; 562  : 	{
; 563  : 		gTracerColors[4].r = (byte)(tracerred->value * traceralpha->value * 255);

	mov	eax, DWORD PTR _tracerred
	mov	ecx, DWORD PTR _traceralpha
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	mov	eax, 3
	shl	eax, 2
	mov	BYTE PTR _gTracerColors[eax], dl

; 564  : 		gTracerColors[4].g = (byte)(tracergreen->value * traceralpha->value * 255);

	mov	eax, DWORD PTR _tracergreen
	mov	ecx, DWORD PTR _traceralpha
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	mov	eax, 3
	shl	eax, 2
	mov	BYTE PTR _gTracerColors[eax+1], dl

; 565  : 		gTracerColors[4].b = (byte)(tracerblue->value * traceralpha->value * 255);

	mov	eax, DWORD PTR _tracerblue
	mov	ecx, DWORD PTR _traceralpha
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	mov	eax, 3
	shl	eax, 2
	mov	BYTE PTR _gTracerColors[eax+2], dl

; 566  : 		ClearBits( tracerred->flags, FCVAR_CHANGED );

	mov	eax, DWORD PTR _tracerred
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -8193				; ffffdfffH
	mov	edx, DWORD PTR _tracerred
	mov	DWORD PTR [edx+8], ecx

; 567  : 		ClearBits( tracergreen->flags, FCVAR_CHANGED );

	mov	eax, DWORD PTR _tracergreen
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -8193				; ffffdfffH
	mov	edx, DWORD PTR _tracergreen
	mov	DWORD PTR [edx+8], ecx

; 568  : 		ClearBits( tracerblue->flags, FCVAR_CHANGED );

	mov	eax, DWORD PTR _tracerblue
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -8193				; ffffdfffH
	mov	edx, DWORD PTR _tracerblue
	mov	DWORD PTR [edx+8], ecx

; 569  : 		ClearBits( traceralpha->flags, FCVAR_CHANGED );

	mov	eax, DWORD PTR _traceralpha
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -8193				; ffffdfffH
	mov	edx, DWORD PTR _traceralpha
	mov	DWORD PTR [edx+8], ecx
$LN6@CL_DrawTra:

; 570  : 	}
; 571  : 
; 572  : 	R_FreeDeadParticles( &cl_active_tracers );

	push	OFFSET _cl_active_tracers
	call	_R_FreeDeadParticles
	add	esp, 4

; 573  : 
; 574  : 	if( !cl_active_tracers )

	cmp	DWORD PTR _cl_active_tracers, 0
	jne	SHORT $LN7@CL_DrawTra

; 575  : 		return;	// nothing to draw?

	jmp	$LN1@CL_DrawTra
$LN7@CL_DrawTra:

; 576  : 
; 577  : 	if( !TriSpriteTexture( cl_sprite_dot, 0 ))

	push	0
	mov	eax, DWORD PTR _cl_sprite_dot
	push	eax
	call	_TriSpriteTexture
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@CL_DrawTra

; 578  : 		return;

	jmp	$LN1@CL_DrawTra
$LN8@CL_DrawTra:

; 579  : 
; 580  : 	pglEnable( GL_BLEND );

	push	3042					; 00000be2H
	call	DWORD PTR _pglEnable

; 581  : 	pglBlendFunc( GL_SRC_ALPHA, GL_ONE );

	push	1
	push	770					; 00000302H
	call	DWORD PTR _pglBlendFunc

; 582  : 	pglDisable( GL_ALPHA_TEST );

	push	3008					; 00000bc0H
	call	DWORD PTR _pglDisable

; 583  : 	pglDepthMask( GL_FALSE );

	push	0
	call	DWORD PTR _pglDepthMask

; 584  : 
; 585  : 	gravity = frametime * clgame.movevars.gravity;

	cvtss2sd xmm0, DWORD PTR _clgame+1024
	mulsd	xmm0, QWORD PTR _frametime$[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _gravity$[ebp], xmm0

; 586  : 	scale = 1.0 - (frametime * 0.9);

	movsd	xmm0, QWORD PTR _frametime$[ebp]
	mulsd	xmm0, QWORD PTR __real@3feccccccccccccd
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _scale$[ebp], xmm0

; 587  : 	if( scale < 0.0f ) scale = 0.0f;

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR _scale$[ebp]
	jbe	SHORT $LN9@CL_DrawTra
	xorps	xmm0, xmm0
	movss	DWORD PTR _scale$[ebp], xmm0
$LN9@CL_DrawTra:

; 588  : 
; 589  : 	for( p = cl_active_tracers; p; p = p->next )

	mov	eax, DWORD PTR _cl_active_tracers
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN4@CL_DrawTra
$LN2@CL_DrawTra:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _p$[ebp], ecx
$LN4@CL_DrawTra:
	cmp	DWORD PTR _p$[ebp], 0
	je	$LN3@CL_DrawTra

; 590  : 	{
; 591  : 		atten = (p->die - cl.time);

	mov	eax, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+36]
	subsd	xmm0, QWORD PTR _cl+2167640
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _atten$[ebp], xmm0

; 592  : 		if( atten > 0.1f ) atten = 0.1f;

	movss	xmm0, DWORD PTR _atten$[ebp]
	comiss	xmm0, DWORD PTR __real@3dcccccd
	jbe	SHORT $LN10@CL_DrawTra
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _atten$[ebp], xmm0
$LN10@CL_DrawTra:

; 593  : 
; 594  : 		VectorScale( p->vel, ( p->ramp * atten ), delta );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+32]
	mulss	xmm0, DWORD PTR _atten$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mulss	xmm0, DWORD PTR [eax+ecx+20]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _delta$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+32]
	mulss	xmm0, DWORD PTR _atten$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mulss	xmm0, DWORD PTR [edx+eax+20]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR _delta$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+32]
	mulss	xmm0, DWORD PTR _atten$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx+20]
	mulss	xmm1, xmm0
	movss	DWORD PTR tv202[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv202[ebp]
	movss	DWORD PTR _delta$[ebp+ecx], xmm0

; 595  : 		VectorAdd( p->org, delta, end );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR _delta$[ebp+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _end$[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	addss	xmm0, DWORD PTR _delta$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _end$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _delta$[ebp+ecx]
	movss	DWORD PTR tv226[ebp], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR tv226[ebp]
	movss	DWORD PTR _end$[ebp+eax], xmm0

; 596  : 		VectorCopy( p->org, start );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	DWORD PTR _start$[ebp+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR _start$[ebp+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _start$[ebp+ecx], eax

; 597  : 
; 598  : 		if( !CL_CullTracer( p, start, end ))

	lea	eax, DWORD PTR _end$[ebp]
	push	eax
	lea	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_CL_CullTracer
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN11@CL_DrawTra

; 599  : 		{
; 600  : 			vec3_t	verts[4], tmp2;
; 601  : 			vec3_t	tmp, normal;
; 602  : 			color24	*pColor;
; 603  : 
; 604  : 			// Transform point into screen space
; 605  : 			TriWorldToScreen( start, screen );

	lea	eax, DWORD PTR _screen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _start$[ebp]
	push	ecx
	call	_TriWorldToScreen
	add	esp, 8

; 606  : 			TriWorldToScreen( end, screenLast );

	lea	eax, DWORD PTR _screenLast$[ebp]
	push	eax
	lea	ecx, DWORD PTR _end$[ebp]
	push	ecx
	call	_TriWorldToScreen
	add	esp, 8

; 607  : 
; 608  : 			// build world-space normal to screen-space direction vector
; 609  : 			VectorSubtract( screen, screenLast, tmp );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _screen$[ebp+ecx]
	subss	xmm0, DWORD PTR _screenLast$[ebp+eax]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _tmp$4[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _screen$[ebp+eax]
	subss	xmm0, DWORD PTR _screenLast$[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _tmp$4[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _screen$[ebp+eax]
	subss	xmm0, DWORD PTR _screenLast$[ebp+ecx]
	movss	DWORD PTR tv271[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv271[ebp]
	movss	DWORD PTR _tmp$4[ebp+edx], xmm0

; 610  : 
; 611  : 			// we don't need Z, we're in screen space
; 612  : 			tmp[2] = 0;

	mov	eax, 4
	shl	eax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR _tmp$4[ebp+eax], xmm0

; 613  : 			VectorNormalize( tmp );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _tmp$4[ebp+ecx]
	mulss	xmm0, DWORD PTR _tmp$4[ebp+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _tmp$4[ebp+ecx]
	mulss	xmm1, DWORD PTR _tmp$4[ebp+edx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR _tmp$4[ebp+eax]
	mulss	xmm1, DWORD PTR _tmp$4[ebp+ecx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR _ilength$1[ebp]
	movss	xmm0, DWORD PTR _ilength$1[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN12@CL_DrawTra
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _ilength$1[ebp]
	movss	DWORD PTR _ilength$1[ebp], xmm0
$LN12@CL_DrawTra:
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _tmp$4[ebp+ecx]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _tmp$4[ebp+eax], xmm0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _tmp$4[ebp+eax]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _tmp$4[ebp+ecx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _tmp$4[ebp+eax]
	mulss	xmm0, DWORD PTR _ilength$1[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _tmp$4[ebp+ecx], xmm0

; 614  : 
; 615  : 			// build point along noraml line (normal is -y, x)
; 616  : 			VectorScale( RI.cull_vup, tmp[0] * gTracerSize[p->type], normal );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+40]
	movss	xmm0, DWORD PTR _tmp$4[ebp+eax]
	mulss	xmm0, DWORD PTR _gTracerSize[edx*4]
	mulss	xmm0, DWORD PTR _RI[ecx+296]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _normal$3[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+40]
	movss	xmm0, DWORD PTR _tmp$4[ebp+ecx]
	mulss	xmm0, DWORD PTR _gTracerSize[eax*4]
	mulss	xmm0, DWORD PTR _RI[edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _normal$3[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+40]
	movss	xmm0, DWORD PTR _tmp$4[ebp+ecx]
	mulss	xmm0, DWORD PTR _gTracerSize[eax*4]
	movss	xmm1, DWORD PTR _RI[edx+296]
	mulss	xmm1, xmm0
	movss	DWORD PTR tv348[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv348[ebp]
	movss	DWORD PTR _normal$3[ebp+ecx], xmm0

; 617  : 			VectorScale( RI.cull_vright, -tmp[1] * gTracerSize[p->type], tmp2 );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR _tmp$4[ebp+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+40]
	mulss	xmm0, DWORD PTR _gTracerSize[edx*4]
	mulss	xmm0, DWORD PTR _RI[ecx+284]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR _tmp2$5[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _tmp$4[ebp+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	mulss	xmm0, DWORD PTR _gTracerSize[eax*4]
	mulss	xmm0, DWORD PTR _RI[edx+284]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _tmp2$5[ebp+ecx], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _tmp$4[ebp+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	mulss	xmm0, DWORD PTR _gTracerSize[eax*4]
	movss	xmm1, DWORD PTR _RI[edx+284]
	mulss	xmm1, xmm0
	movss	DWORD PTR tv387[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv387[ebp]
	movss	DWORD PTR _tmp2$5[ebp+ecx], xmm0

; 618  : 			VectorSubtract( normal, tmp2, normal );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _normal$3[ebp+ecx]
	subss	xmm0, DWORD PTR _tmp2$5[ebp+eax]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _normal$3[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _normal$3[ebp+eax]
	subss	xmm0, DWORD PTR _tmp2$5[ebp+ecx]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _normal$3[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _normal$3[ebp+eax]
	subss	xmm0, DWORD PTR _tmp2$5[ebp+ecx]
	movss	DWORD PTR tv408[ebp], xmm0
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv408[ebp]
	movss	DWORD PTR _normal$3[ebp+edx], xmm0

; 619  : 
; 620  : 			// compute four vertexes
; 621  : 			VectorSubtract( start, normal, verts[0] ); 

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _start$[ebp+ecx]
	subss	xmm0, DWORD PTR _normal$3[ebp+eax]
	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 0
	lea	eax, DWORD PTR _verts$6[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _start$[ebp+eax]
	subss	xmm0, DWORD PTR _normal$3[ebp+ecx]
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _verts$6[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _start$[ebp+eax]
	subss	xmm0, DWORD PTR _normal$3[ebp+ecx]
	movss	DWORD PTR tv435[ebp], xmm0
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _verts$6[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv435[ebp]
	movss	DWORD PTR [ecx+edx], xmm0

; 622  : 			VectorAdd( start, normal, verts[1] ); 

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR _start$[ebp+ecx]
	addss	xmm0, DWORD PTR _normal$3[ebp+eax]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR _verts$6[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR [edx+ecx], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR _start$[ebp+edx]
	addss	xmm0, DWORD PTR _normal$3[ebp+eax]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR _verts$6[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _start$[ebp+ecx]
	addss	xmm0, DWORD PTR _normal$3[ebp+edx]
	movss	DWORD PTR tv462[ebp], xmm0
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR _verts$6[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv462[ebp]
	movss	DWORD PTR [ecx+edx], xmm0

; 623  : 			VectorAdd( verts[0], delta, verts[2] ); 

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _verts$6[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, 4
	imul	eax, eax, 0
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR _delta$[ebp+eax]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR _verts$6[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR [edx+ecx], xmm0
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _verts$6[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	addss	xmm0, DWORD PTR _delta$[ebp+eax]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR _verts$6[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 0
	lea	eax, DWORD PTR _verts$6[ebp+edx]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	addss	xmm0, DWORD PTR _delta$[ebp+edx]
	movss	DWORD PTR tv495[ebp], xmm0
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR _verts$6[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv495[ebp]
	movss	DWORD PTR [ecx+edx], xmm0

; 624  : 			VectorAdd( verts[1], delta, verts[3] ); 

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR _verts$6[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 4
	imul	edx, edx, 0
	movss	xmm0, DWORD PTR [ecx+eax]
	addss	xmm0, DWORD PTR _delta$[ebp+edx]
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _verts$6[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	DWORD PTR [edx+ecx], xmm0
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR _verts$6[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	addss	xmm0, DWORD PTR _delta$[ebp+edx]
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _verts$6[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR _verts$6[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _delta$[ebp+ecx]
	movss	DWORD PTR tv528[ebp], xmm0
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 3
	lea	ecx, DWORD PTR _verts$6[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv528[ebp]
	movss	DWORD PTR [ecx+edx], xmm0

; 625  : 
; 626  : 			pColor = &gTracerColors[p->color];

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax+12]
	imul	edx, ecx, 3
	add	edx, OFFSET _gTracerColors
	mov	DWORD PTR _pColor$2[ebp], edx

; 627  : 			pglColor4ub( pColor->r, pColor->g, pColor->b, p->packedColor );

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	push	ecx
	mov	edx, DWORD PTR _pColor$2[ebp]
	movzx	eax, BYTE PTR [edx+2]
	push	eax
	mov	ecx, DWORD PTR _pColor$2[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	push	edx
	mov	eax, DWORD PTR _pColor$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	DWORD PTR _pglColor4ub

; 628  : 
; 629  : 			pglBegin( GL_QUADS );

	push	7
	call	DWORD PTR _pglBegin

; 630  : 				pglTexCoord2f( 0.0f, 0.8f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 631  : 				pglVertex3fv( verts[2] );

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR _verts$6[ebp+eax]
	push	ecx
	call	DWORD PTR _pglVertex3fv

; 632  : 				pglTexCoord2f( 1.0f, 0.8f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 633  : 				pglVertex3fv( verts[3] );

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _verts$6[ebp+ecx]
	push	edx
	call	DWORD PTR _pglVertex3fv

; 634  : 				pglTexCoord2f( 1.0f, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 635  : 				pglVertex3fv( verts[1] );

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR _verts$6[ebp+eax]
	push	ecx
	call	DWORD PTR _pglVertex3fv

; 636  : 				pglTexCoord2f( 0.0f, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 637  : 				pglVertex3fv( verts[0] );

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _verts$6[ebp+ecx]
	push	edx
	call	DWORD PTR _pglVertex3fv

; 638  : 			pglEnd();

	call	DWORD PTR _pglEnd
$LN11@CL_DrawTra:

; 639  : 		}
; 640  : 
; 641  : 		// evaluate position
; 642  : 		VectorMA( p->org, frametime, p->vel, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	cvtss2sd xmm1, DWORD PTR [edx+ecx+20]
	mulsd	xmm1, QWORD PTR _frametime$[ebp]
	addsd	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	cvtss2sd xmm1, DWORD PTR [eax+edx+20]
	mulsd	xmm1, QWORD PTR _frametime$[ebp]
	addsd	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 0
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	cvtss2sd xmm1, DWORD PTR [eax+edx+20]
	mulsd	xmm1, QWORD PTR _frametime$[ebp]
	addsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv603[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv603[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 643  : 
; 644  : 		if( p->type == pt_grav )

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+40], 1
	jne	$LN13@CL_DrawTra

; 645  : 		{
; 646  : 			p->vel[0] *= scale;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0

; 647  : 			p->vel[1] *= scale;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 648  : 			p->vel[2] -= gravity;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	subss	xmm0, DWORD PTR _gravity$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 649  : 
; 650  : 			p->packedColor = 255 * (p->die - cl.time) * 2;

	mov	eax, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+36]
	subsd	xmm0, QWORD PTR _cl+2167640
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	cvttsd2si ecx, xmm0
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx+14], cx

; 651  : 			if( p->packedColor > 255 ) p->packedColor = 255;

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax+14]
	cmp	ecx, 255				; 000000ffH
	jle	SHORT $LN15@CL_DrawTra
	mov	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+14], ax
$LN15@CL_DrawTra:

; 652  : 		}

	jmp	SHORT $LN16@CL_DrawTra
$LN13@CL_DrawTra:

; 653  : 		else if( p->type == pt_slowgrav )

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+40], 2
	jne	SHORT $LN16@CL_DrawTra

; 654  : 		{
; 655  : 			p->vel[2] = gravity * 0.05;

	cvtss2sd xmm0, DWORD PTR _gravity$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fa999999999999a
	mov	eax, 4
	shl	eax, 1
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
$LN16@CL_DrawTra:

; 656  : 		}
; 657  : 	}

	jmp	$LN2@CL_DrawTra
$LN3@CL_DrawTra:

; 658  : 
; 659  : 	pglDepthMask( GL_TRUE );

	push	1
	call	DWORD PTR _pglDepthMask
$LN1@CL_DrawTra:

; 660  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_DrawTracers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _CL_DrawParticles
_TEXT	SEGMENT
tv224 = -136						; size = 4
tv737 = -132						; size = 4
tv731 = -132						; size = 4
tv598 = -132						; size = 4
tv555 = -132						; size = 4
tv489 = -132						; size = 4
tv427 = -132						; size = 4
tv425 = -132						; size = 4
tv223 = -132						; size = 4
tv213 = -132						; size = 4
tv198 = -132						; size = 4
tv181 = -132						; size = 4
tv175 = -132						; size = 4
tv135 = -132						; size = 4
_size$ = -64						; size = 4
_alpha$ = -60						; size = 4
_pColor$ = -56						; size = 4
_up$ = -52						; size = 12
_right$ = -40						; size = 12
_grav$ = -28						; size = 4
_dvel$ = -24						; size = 4
_time1$ = -20						; size = 4
_time2$ = -16						; size = 4
_time3$ = -12						; size = 4
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_frametime$ = 8						; size = 8
_CL_DrawParticles PROC					; COMDAT

; 359  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 360  : 	particle_t	*p;
; 361  : 	float		time3 = 15.0f * frametime;

	movsd	xmm0, QWORD PTR __real@402e000000000000
	mulsd	xmm0, QWORD PTR _frametime$[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _time3$[ebp], xmm0

; 362  : 	float		time2 = 10.0f * frametime;

	movsd	xmm0, QWORD PTR __real@4024000000000000
	mulsd	xmm0, QWORD PTR _frametime$[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _time2$[ebp], xmm0

; 363  : 	float		time1 = 5.0f * frametime;

	movsd	xmm0, QWORD PTR __real@4014000000000000
	mulsd	xmm0, QWORD PTR _frametime$[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _time1$[ebp], xmm0

; 364  : 	float		dvel = 4.0f * frametime;

	movsd	xmm0, QWORD PTR __real@4010000000000000
	mulsd	xmm0, QWORD PTR _frametime$[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _dvel$[ebp], xmm0

; 365  : 	float		grav = frametime * clgame.movevars.gravity * 0.05f;

	cvtss2sd xmm0, DWORD PTR _clgame+1024
	mulsd	xmm0, QWORD PTR _frametime$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fa99999a0000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _grav$[ebp], xmm0

; 366  : 	vec3_t		right, up;
; 367  : 	color24		*pColor;
; 368  : 	int		alpha;
; 369  : 	float		size;
; 370  : 
; 371  : 	if( !cl_draw_particles->value )

	mov	eax, DWORD PTR _cl_draw_particles
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@CL_DrawPar

; 372  : 		return;

	jmp	$LN1@CL_DrawPar
$LN7@CL_DrawPar:

; 373  : 
; 374  : 	R_FreeDeadParticles( &cl_active_particles );

	push	OFFSET _cl_active_particles
	call	_R_FreeDeadParticles
	add	esp, 4

; 375  : 
; 376  : 	if( !cl_active_particles )

	cmp	DWORD PTR _cl_active_particles, 0
	jne	SHORT $LN8@CL_DrawPar

; 377  : 		return;	// nothing to draw?

	jmp	$LN1@CL_DrawPar
$LN8@CL_DrawPar:

; 378  : 
; 379  : 	pglEnable( GL_BLEND );

	push	3042					; 00000be2H
	call	DWORD PTR _pglEnable

; 380  : 	pglDisable( GL_ALPHA_TEST );

	push	3008					; 00000bc0H
	call	DWORD PTR _pglDisable

; 381  : 	pglBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );

	push	771					; 00000303H
	push	770					; 00000302H
	call	DWORD PTR _pglBlendFunc

; 382  : 
; 383  : 	GL_Bind( GL_TEXTURE0, tr.particleTexture );

	mov	eax, DWORD PTR _tr+4
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 384  : 	pglTexEnvf( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE );

	push	ecx
	movss	xmm0, DWORD PTR __real@46040000
	movss	DWORD PTR [esp], xmm0
	push	8704					; 00002200H
	push	8960					; 00002300H
	call	DWORD PTR _pglTexEnvf

; 385  : 	pglDepthMask( GL_FALSE );

	push	0
	call	DWORD PTR _pglDepthMask

; 386  : 
; 387  : 	pglBegin( GL_QUADS );

	push	7
	call	DWORD PTR _pglBegin

; 388  : 
; 389  : 	for( p = cl_active_particles; p; p = p->next )

	mov	eax, DWORD PTR _cl_active_particles
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN4@CL_DrawPar
$LN2@CL_DrawPar:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _p$[ebp], ecx
$LN4@CL_DrawPar:
	cmp	DWORD PTR _p$[ebp], 0
	je	$LN3@CL_DrawPar

; 390  : 	{
; 391  : 		if(( p->type != pt_blob ) || ( p->packedColor == 255 ))

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+40], 6
	jne	SHORT $LN10@CL_DrawPar
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax+14]
	cmp	ecx, 255				; 000000ffH
	jne	$LN9@CL_DrawPar
$LN10@CL_DrawPar:

; 392  : 		{
; 393  : 			size = PART_SIZE; // get initial size of particle

	mov	eax, DWORD PTR _cl_draw_particles
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR [eax+12]
	jbe	SHORT $LN39@CL_DrawPar
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv135[ebp], xmm0
	jmp	SHORT $LN40@CL_DrawPar
$LN39@CL_DrawPar:
	mov	ecx, DWORD PTR _cl_draw_particles
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR tv135[ebp], xmm0
$LN40@CL_DrawPar:
	movss	xmm0, DWORD PTR tv135[ebp]
	movss	DWORD PTR _size$[ebp], xmm0

; 394  : 
; 395  : 			// scale up to keep particles from disappearing
; 396  : 			size += (p->org[0] - RI.vieworg[0]) * RI.cull_vforward[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	subss	xmm0, DWORD PTR _RI[eax+200]
	mov	eax, 4
	imul	ecx, eax, 0
	mulss	xmm0, DWORD PTR _RI[ecx+272]
	addss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR _size$[ebp], xmm0

; 397  : 			size += (p->org[1] - RI.vieworg[1]) * RI.cull_vforward[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR _RI[ecx+200]
	mov	eax, 4
	shl	eax, 0
	mulss	xmm0, DWORD PTR _RI[eax+272]
	addss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR _size$[ebp], xmm0

; 398  : 			size += (p->org[2] - RI.vieworg[2]) * RI.cull_vforward[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR _RI[ecx+200]
	mov	eax, 4
	shl	eax, 1
	mulss	xmm0, DWORD PTR _RI[eax+272]
	addss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR _size$[ebp], xmm0

; 399  : 
; 400  : 			if( size < 20.0f ) size = PART_SIZE;

	movss	xmm0, DWORD PTR __real@41a00000
	comiss	xmm0, DWORD PTR _size$[ebp]
	jbe	SHORT $LN11@CL_DrawPar
	mov	eax, DWORD PTR _cl_draw_particles
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR [eax+12]
	jbe	SHORT $LN41@CL_DrawPar
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv175[ebp], xmm0
	jmp	SHORT $LN42@CL_DrawPar
$LN41@CL_DrawPar:
	mov	ecx, DWORD PTR _cl_draw_particles
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR tv175[ebp], xmm0
$LN42@CL_DrawPar:
	movss	xmm0, DWORD PTR tv175[ebp]
	movss	DWORD PTR _size$[ebp], xmm0
	jmp	SHORT $LN12@CL_DrawPar
$LN11@CL_DrawPar:

; 401  : 			else size = PART_SIZE + size * 0.002f;

	mov	eax, DWORD PTR _cl_draw_particles
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR [eax+12]
	jbe	SHORT $LN43@CL_DrawPar
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv181[ebp], xmm0
	jmp	SHORT $LN44@CL_DrawPar
$LN43@CL_DrawPar:
	mov	ecx, DWORD PTR _cl_draw_particles
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR tv181[ebp], xmm0
$LN44@CL_DrawPar:
	movss	xmm0, DWORD PTR _size$[ebp]
	mulss	xmm0, DWORD PTR __real@3b03126f
	addss	xmm0, DWORD PTR tv181[ebp]
	movss	DWORD PTR _size$[ebp], xmm0
$LN12@CL_DrawPar:

; 402  : 
; 403  : 			// scale the axes by radius
; 404  : 			VectorScale( RI.cull_vright, size, right );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _RI[ecx+284]
	mulss	xmm0, DWORD PTR _size$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _right$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _RI[ecx+284]
	mulss	xmm0, DWORD PTR _size$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _right$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _RI[eax+284]
	mulss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR tv198[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv198[ebp]
	movss	DWORD PTR _right$[ebp+ecx], xmm0

; 405  : 			VectorScale( RI.cull_vup, size, up );

	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR _RI[ecx+296]
	mulss	xmm0, DWORD PTR _size$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	DWORD PTR _up$[ebp+eax], xmm0
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _RI[ecx+296]
	mulss	xmm0, DWORD PTR _size$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR _up$[ebp+edx], xmm0
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _RI[eax+296]
	mulss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR tv213[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv213[ebp]
	movss	DWORD PTR _up$[ebp+ecx], xmm0

; 406  : 
; 407  : 			p->color = bound( 0, p->color, 255 );

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax+12]
	test	ecx, ecx
	jl	SHORT $LN47@CL_DrawPar
	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, WORD PTR [edx+12]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN45@CL_DrawPar
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, WORD PTR [ecx+12]
	mov	DWORD PTR tv223[ebp], edx
	jmp	SHORT $LN46@CL_DrawPar
$LN45@CL_DrawPar:
	mov	DWORD PTR tv223[ebp], 255		; 000000ffH
$LN46@CL_DrawPar:
	mov	eax, DWORD PTR tv223[ebp]
	mov	DWORD PTR tv224[ebp], eax
	jmp	SHORT $LN48@CL_DrawPar
$LN47@CL_DrawPar:
	mov	DWORD PTR tv224[ebp], 0
$LN48@CL_DrawPar:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR tv224[ebp]
	mov	WORD PTR [ecx+12], dx

; 408  : 			pColor = &clgame.palette[p->color];

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax+12]
	imul	edx, ecx, 3
	add	edx, OFFSET _clgame+217656
	mov	DWORD PTR _pColor$[ebp], edx

; 409  : 
; 410  : 			alpha = 255 * (p->die - cl.time) * 16.0f;

	mov	eax, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+36]
	subsd	xmm0, QWORD PTR _cl+2167640
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	mulsd	xmm0, QWORD PTR __real@4030000000000000
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _alpha$[ebp], ecx

; 411  : 			if( alpha > 255 || p->type == pt_static )

	cmp	DWORD PTR _alpha$[ebp], 255		; 000000ffH
	jg	SHORT $LN14@CL_DrawPar
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN13@CL_DrawPar
$LN14@CL_DrawPar:

; 412  : 				alpha = 255;

	mov	DWORD PTR _alpha$[ebp], 255		; 000000ffH
$LN13@CL_DrawPar:

; 413  : 
; 414  : 			pglColor4ub( LightToTexGamma( pColor->r ), LightToTexGamma( pColor->g ), LightToTexGamma( pColor->b ), alpha );

	movzx	eax, BYTE PTR _alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pColor$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	push	edx
	call	_LightToTexGamma
	add	esp, 4
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _pColor$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	push	edx
	call	_LightToTexGamma
	add	esp, 4
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _pColor$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	_LightToTexGamma
	add	esp, 4
	movzx	eax, al
	push	eax
	call	DWORD PTR _pglColor4ub

; 415  : 
; 416  : 			pglTexCoord2f( 0.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 417  : 			pglVertex3f( p->org[0] - right[0] + up[0], p->org[1] - right[1] + up[1], p->org[2] - right[2] + up[2] );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR _right$[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	addss	xmm0, DWORD PTR _up$[ebp+eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	subss	xmm0, DWORD PTR _right$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	addss	xmm0, DWORD PTR _up$[ebp+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	subss	xmm0, DWORD PTR _right$[ebp+edx]
	mov	edx, 4
	imul	eax, edx, 0
	addss	xmm0, DWORD PTR _up$[ebp+eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex3f

; 418  : 			pglTexCoord2f( 0.0f, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 419  : 			pglVertex3f( p->org[0] + right[0] + up[0], p->org[1] + right[1] + up[1], p->org[2] + right[2] + up[2] );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _right$[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	addss	xmm0, DWORD PTR _up$[ebp+eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	addss	xmm0, DWORD PTR _right$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	addss	xmm0, DWORD PTR _up$[ebp+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	addss	xmm0, DWORD PTR _right$[ebp+edx]
	mov	edx, 4
	imul	eax, edx, 0
	addss	xmm0, DWORD PTR _up$[ebp+eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex3f

; 420  : 			pglTexCoord2f( 1.0f, 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 421  : 			pglVertex3f( p->org[0] + right[0] - up[0], p->org[1] + right[1] - up[1], p->org[2] + right[2] - up[2] );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR _right$[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	subss	xmm0, DWORD PTR _up$[ebp+eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	addss	xmm0, DWORD PTR _right$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	subss	xmm0, DWORD PTR _up$[ebp+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	addss	xmm0, DWORD PTR _right$[ebp+edx]
	mov	edx, 4
	imul	eax, edx, 0
	subss	xmm0, DWORD PTR _up$[ebp+eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex3f

; 422  : 			pglTexCoord2f( 1.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 423  : 			pglVertex3f( p->org[0] - right[0] - up[0], p->org[1] - right[1] - up[1], p->org[2] - right[2] - up[2] );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR _right$[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	subss	xmm0, DWORD PTR _up$[ebp+eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	subss	xmm0, DWORD PTR _right$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	subss	xmm0, DWORD PTR _up$[ebp+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	subss	xmm0, DWORD PTR _right$[ebp+edx]
	mov	edx, 4
	imul	eax, edx, 0
	subss	xmm0, DWORD PTR _up$[ebp+eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex3f

; 424  : 			r_stats.c_particle_count++;

	mov	eax, DWORD PTR _r_stats+40
	add	eax, 1
	mov	DWORD PTR _r_stats+40, eax
$LN9@CL_DrawPar:

; 425  : 		}
; 426  : 
; 427  : 		if( p->type != pt_clientcustom )

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+40], 10			; 0000000aH
	je	$LN15@CL_DrawPar

; 428  : 		{
; 429  : 			// update position.
; 430  : 			VectorMA( p->org, frametime, p->vel, p->org );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	cvtss2sd xmm1, DWORD PTR [edx+ecx+20]
	mulsd	xmm1, QWORD PTR _frametime$[ebp]
	addsd	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	cvtss2sd xmm1, DWORD PTR [eax+edx+20]
	mulsd	xmm1, QWORD PTR _frametime$[ebp]
	addsd	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 0
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	cvtss2sd xmm1, DWORD PTR [eax+edx+20]
	mulsd	xmm1, QWORD PTR _frametime$[ebp]
	addsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv425[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv425[ebp]
	movss	DWORD PTR [edx+ecx], xmm0
$LN15@CL_DrawPar:

; 431  : 		}
; 432  : 
; 433  : 		switch( p->type )

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR tv427[ebp], ecx
	mov	edx, DWORD PTR tv427[ebp]
	sub	edx, 1
	mov	DWORD PTR tv427[ebp], edx
	cmp	DWORD PTR tv427[ebp], 9
	ja	$LN5@CL_DrawPar
	mov	eax, DWORD PTR tv427[ebp]
	jmp	DWORD PTR $LN51@CL_DrawPar[eax*4]

; 434  : 		{
; 435  : 		case pt_static:
; 436  : 			break;

	jmp	$LN5@CL_DrawPar
$LN17@CL_DrawPar:

; 437  : 		case pt_fire:
; 438  : 			p->ramp += time1;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	addss	xmm0, DWORD PTR _time1$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 439  : 			if( p->ramp >= 6.0f ) p->die = -1.0f;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	comiss	xmm0, DWORD PTR __real@40c00000
	jb	SHORT $LN18@CL_DrawPar
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+36], xmm0
	jmp	SHORT $LN19@CL_DrawPar
$LN18@CL_DrawPar:

; 440  : 			else p->color = ramp3[(int)p->ramp];

	mov	eax, DWORD PTR _p$[ebp]
	cvttss2si ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR _ramp3[ecx*4]
	mov	WORD PTR [edx+12], ax
$LN19@CL_DrawPar:

; 441  : 			p->vel[2] += grav;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	addss	xmm0, DWORD PTR _grav$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 442  : 			break;

	jmp	$LN5@CL_DrawPar
$LN20@CL_DrawPar:

; 443  : 		case pt_explode:
; 444  : 			p->ramp += time2;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	addss	xmm0, DWORD PTR _time2$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 445  : 			if( p->ramp >= 8.0f ) p->die = -1.0f;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	comiss	xmm0, DWORD PTR __real@41000000
	jb	SHORT $LN21@CL_DrawPar
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+36], xmm0
	jmp	SHORT $LN22@CL_DrawPar
$LN21@CL_DrawPar:

; 446  : 			else p->color = ramp1[(int)p->ramp];

	mov	eax, DWORD PTR _p$[ebp]
	cvttss2si ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR _ramp1[ecx*4]
	mov	WORD PTR [edx+12], ax
$LN22@CL_DrawPar:

; 447  : 			VectorMA( p->vel, dvel, p->vel, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dvel$[ebp]
	mulss	xmm0, DWORD PTR [edx+eax+20]
	mov	eax, DWORD PTR _p$[ebp]
	addss	xmm0, DWORD PTR [eax+ecx+20]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dvel$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx+20]
	mov	edx, DWORD PTR _p$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx+20]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dvel$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+20]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [eax+edx+20]
	addss	xmm1, xmm0
	movss	DWORD PTR tv489[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv489[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0

; 448  : 			p->vel[2] -= grav;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	subss	xmm0, DWORD PTR _grav$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 449  : 			break;

	jmp	$LN5@CL_DrawPar
$LN23@CL_DrawPar:

; 450  : 		case pt_explode2:
; 451  : 			p->ramp += time3;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	addss	xmm0, DWORD PTR _time3$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 452  : 			if( p->ramp >= 8.0f ) p->die = -1.0f;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	comiss	xmm0, DWORD PTR __real@41000000
	jb	SHORT $LN24@CL_DrawPar
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+36], xmm0
	jmp	SHORT $LN25@CL_DrawPar
$LN24@CL_DrawPar:

; 453  : 			else p->color = ramp2[(int)p->ramp];

	mov	eax, DWORD PTR _p$[ebp]
	cvttss2si ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR _ramp2[ecx*4]
	mov	WORD PTR [edx+12], ax
$LN25@CL_DrawPar:

; 454  : 			VectorMA( p->vel,-frametime, p->vel, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+ecx+20]
	movsd	xmm1, QWORD PTR _frametime$[ebp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	cvtss2sd xmm2, DWORD PTR [edx+ecx+20]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax+20]
	movsd	xmm1, QWORD PTR _frametime$[ebp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	cvtss2sd xmm2, DWORD PTR [eax+edx+20]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 0
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax+20]
	movsd	xmm1, QWORD PTR _frametime$[ebp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	cvtss2sd xmm2, DWORD PTR [eax+edx+20]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv555[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv555[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0

; 455  : 			p->vel[2] -= grav;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	subss	xmm0, DWORD PTR _grav$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 456  : 			break;

	jmp	$LN5@CL_DrawPar
$LN26@CL_DrawPar:

; 457  : 		case pt_blob:
; 458  : 			if( p->packedColor == 255 )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax+14]
	cmp	ecx, 255				; 000000ffH
	jne	$LN27@CL_DrawPar

; 459  : 			{
; 460  : 				// normal blob explosion
; 461  : 				VectorMA( p->vel, dvel, p->vel, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dvel$[ebp]
	mulss	xmm0, DWORD PTR [edx+eax+20]
	mov	eax, DWORD PTR _p$[ebp]
	addss	xmm0, DWORD PTR [eax+ecx+20]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dvel$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx+20]
	mov	edx, DWORD PTR _p$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx+20]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+eax+20], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dvel$[ebp]
	mulss	xmm0, DWORD PTR [ecx+eax+20]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [eax+edx+20]
	addss	xmm1, xmm0
	movss	DWORD PTR tv598[ebp], xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv598[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0

; 462  : 				p->vel[2] -= grav;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	subss	xmm0, DWORD PTR _grav$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 463  : 				break;

	jmp	$LN5@CL_DrawPar
$LN27@CL_DrawPar:

; 464  : 			}
; 465  : 		case pt_blob2:
; 466  : 			if( p->packedColor == 255 )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, WORD PTR [eax+14]
	cmp	ecx, 255				; 000000ffH
	jne	$LN29@CL_DrawPar

; 467  : 			{
; 468  : 				// normal blob explosion
; 469  : 				p->vel[0] -= p->vel[0] * dvel;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+eax+20]
	mulss	xmm0, DWORD PTR _dvel$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx+20]
	subss	xmm1, xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm1

; 470  : 				p->vel[1] -= p->vel[1] * dvel;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+20]
	mulss	xmm0, DWORD PTR _dvel$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+20]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm1

; 471  : 				p->vel[2] -= grav;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	subss	xmm0, DWORD PTR _grav$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 472  : 			}

	jmp	$LN30@CL_DrawPar
$LN29@CL_DrawPar:

; 473  : 			else
; 474  : 			{
; 475  : 				p->ramp += time2;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	addss	xmm0, DWORD PTR _time2$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 476  : 				if( p->ramp >= 9.0f ) p->ramp = 0.0f;

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	comiss	xmm0, DWORD PTR __real@41100000
	jb	SHORT $LN31@CL_DrawPar
	mov	eax, DWORD PTR _p$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+32], xmm0
$LN31@CL_DrawPar:

; 477  : 				p->color = gSparkRamp[(int)p->ramp];

	mov	eax, DWORD PTR _p$[ebp]
	cvttss2si ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR _gSparkRamp[ecx*4]
	mov	WORD PTR [edx+12], ax

; 478  : 				VectorMA( p->vel, -frametime * 0.5f, p->vel, p->vel );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+ecx+20]
	movsd	xmm1, QWORD PTR _frametime$[ebp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	cvtss2sd xmm2, DWORD PTR [edx+ecx+20]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	mov	eax, 4
	imul	ecx, eax, 0
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax+20]
	movsd	xmm1, QWORD PTR _frametime$[ebp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	cvtss2sd xmm2, DWORD PTR [eax+edx+20]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 0
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _p$[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax+20]
	movsd	xmm1, QWORD PTR _frametime$[ebp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	cvtss2sd xmm2, DWORD PTR [eax+edx+20]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv731[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR tv731[ebp]
	movss	DWORD PTR [edx+ecx+20], xmm0

; 479  : 				p->type = COM_RandomLong( 0, 3 ) ? pt_blob : pt_blob2;

	push	3
	push	0
	call	_COM_RandomLong
	add	esp, 8
	test	eax, eax
	je	SHORT $LN49@CL_DrawPar
	mov	DWORD PTR tv737[ebp], 6
	jmp	SHORT $LN50@CL_DrawPar
$LN49@CL_DrawPar:
	mov	DWORD PTR tv737[ebp], 7
$LN50@CL_DrawPar:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv737[ebp]
	mov	DWORD PTR [eax+40], ecx

; 480  : 				p->vel[2] -= grav * 5.0f;

	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _grav$[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+20]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm1
$LN30@CL_DrawPar:

; 481  : 			}
; 482  : 			break;

	jmp	$LN5@CL_DrawPar
$LN32@CL_DrawPar:

; 483  : 		case pt_grav:
; 484  : 			p->vel[2] -= grav * 20.0f;

	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _grav$[ebp]
	mulss	xmm0, DWORD PTR __real@41a00000
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+20]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm1

; 485  : 			break;

	jmp	$LN5@CL_DrawPar
$LN33@CL_DrawPar:

; 486  : 		case pt_slowgrav:
; 487  : 			p->vel[2] -= grav;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+20]
	subss	xmm0, DWORD PTR _grav$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 488  : 			break;

	jmp	$LN5@CL_DrawPar
$LN34@CL_DrawPar:

; 489  : 		case pt_vox_grav:
; 490  : 			p->vel[2] -= grav * 8.0f;

	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _grav$[ebp]
	mulss	xmm0, DWORD PTR __real@41000000
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+20]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm1

; 491  : 			break;

	jmp	SHORT $LN5@CL_DrawPar
$LN35@CL_DrawPar:

; 492  : 		case pt_vox_slowgrav:
; 493  : 			p->vel[2] -= grav * 4.0f;

	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _grav$[ebp]
	mulss	xmm0, DWORD PTR __real@40800000
	mov	ecx, DWORD PTR _p$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+20]
	subss	xmm1, xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm1

; 494  : 			break;

	jmp	SHORT $LN5@CL_DrawPar
$LN36@CL_DrawPar:

; 495  : 		case pt_clientcustom:
; 496  : 			if( p->callback )

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN37@CL_DrawPar

; 497  : 				p->callback( p, frametime );

	cvtsd2ss xmm0, QWORD PTR _frametime$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	add	esp, 8
$LN37@CL_DrawPar:
$LN5@CL_DrawPar:

; 498  : 			break;
; 499  : 		}
; 500  : 	}

	jmp	$LN2@CL_DrawPar
$LN3@CL_DrawPar:

; 501  : 
; 502  : 	pglEnd();

	call	DWORD PTR _pglEnd

; 503  : 	pglDepthMask( GL_TRUE );

	push	1
	call	DWORD PTR _pglDepthMask
$LN1@CL_DrawPar:

; 504  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN51@CL_DrawPar:
	DD	$LN32@CL_DrawPar
	DD	$LN33@CL_DrawPar
	DD	$LN17@CL_DrawPar
	DD	$LN20@CL_DrawPar
	DD	$LN23@CL_DrawPar
	DD	$LN26@CL_DrawPar
	DD	$LN27@CL_DrawPar
	DD	$LN35@CL_DrawPar
	DD	$LN34@CL_DrawPar
	DD	$LN36@CL_DrawPar
_CL_DrawParticles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _CL_FreeParticles
_TEXT	SEGMENT
_CL_FreeParticles PROC					; COMDAT

; 180  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 181  : 	if( cl_particles )

	cmp	DWORD PTR _cl_particles, 0
	je	SHORT $LN2@CL_FreePar

; 182  : 		Mem_Free( cl_particles );

	mov	eax, DWORD PTR ?__LINE__Var@?0??CL_FreeParticles@@9@9
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0DF@JAJOEGLN@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _cl_particles
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN2@CL_FreePar:

; 183  : 	cl_particles = NULL;

	mov	DWORD PTR _cl_particles, 0

; 184  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_FreeParticles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _CL_ClearParticles
_TEXT	SEGMENT
_i$ = -4						; size = 4
_CL_ClearParticles PROC					; COMDAT

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 159  : 	int	i;
; 160  : 
; 161  : 	if( !cl_particles ) return;

	cmp	DWORD PTR _cl_particles, 0
	jne	SHORT $LN5@CL_ClearPa
	jmp	SHORT $LN1@CL_ClearPa
$LN5@CL_ClearPa:

; 162  : 
; 163  : 	cl_free_particles = cl_particles;

	mov	eax, DWORD PTR _cl_particles
	mov	DWORD PTR _cl_free_particles, eax

; 164  : 	cl_active_particles = NULL;

	mov	DWORD PTR _cl_active_particles, 0

; 165  : 	cl_active_tracers = NULL;

	mov	DWORD PTR _cl_active_tracers, 0

; 166  : 
; 167  : 	for( i = 0; i < GI->max_particles - 1; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CL_ClearPa
$LN2@CL_ClearPa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CL_ClearPa:
	mov	eax, DWORD PTR _SI+768
	mov	ecx, DWORD PTR [eax+1668]
	sub	ecx, 1
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN3@CL_ClearPa

; 168  : 		cl_particles[i].next = &cl_particles[i+1];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	ecx, eax, 56
	add	ecx, DWORD PTR _cl_particles
	imul	edx, DWORD PTR _i$[ebp], 56
	mov	eax, DWORD PTR _cl_particles
	mov	DWORD PTR [eax+edx+16], ecx
	jmp	SHORT $LN2@CL_ClearPa
$LN3@CL_ClearPa:

; 169  : 
; 170  : 	cl_particles[GI->max_particles-1].next = NULL;

	mov	eax, DWORD PTR _SI+768
	mov	ecx, DWORD PTR [eax+1668]
	sub	ecx, 1
	imul	edx, ecx, 56
	mov	eax, DWORD PTR _cl_particles
	mov	DWORD PTR [eax+edx+16], 0
$LN1@CL_ClearPa:

; 171  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_ClearParticles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _CL_InitParticles
_TEXT	SEGMENT
_i$ = -4						; size = 4
_CL_InitParticles PROC					; COMDAT

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 129  : 	int	i;
; 130  : 
; 131  : 	cl_particles = Mem_Calloc( cls.mempool, sizeof( particle_t ) * GI->max_particles );

	mov	eax, DWORD PTR ?__LINE__Var@?0??CL_InitParticles@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DF@JAJOEGLN@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	1
	mov	ecx, DWORD PTR _SI+768
	imul	edx, DWORD PTR [ecx+1668], 56
	push	edx
	mov	eax, DWORD PTR _cls+40
	push	eax
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cl_particles, eax

; 132  : 	CL_ClearParticles ();

	call	_CL_ClearParticles

; 133  : 
; 134  : 	// this is used for EF_BRIGHTFIELD
; 135  : 	for( i = 0; i < NUMVERTEXNORMALS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CL_InitPar
$LN2@CL_InitPar:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CL_InitPar:
	cmp	DWORD PTR _i$[ebp], 162			; 000000a2H
	jge	$LN3@CL_InitPar

; 136  : 	{
; 137  : 		cl_avelocities[i][0] = COM_RandomFloat( 0.0f, 2.55f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40233333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, 4
	imul	edx, ecx, 0
	fstp	DWORD PTR _cl_avelocities[eax+edx]

; 138  : 		cl_avelocities[i][1] = COM_RandomFloat( 0.0f, 2.55f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40233333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, 4
	shl	ecx, 0
	fstp	DWORD PTR _cl_avelocities[eax+ecx]

; 139  : 		cl_avelocities[i][2] = COM_RandomFloat( 0.0f, 2.55f );

	push	ecx
	movss	xmm0, DWORD PTR __real@40233333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	_COM_RandomFloat
	add	esp, 8
	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, 4
	shl	ecx, 1
	fstp	DWORD PTR _cl_avelocities[eax+ecx]

; 140  : 	}

	jmp	$LN2@CL_InitPar
$LN3@CL_InitPar:

; 141  : 
; 142  : 	tracerred = Cvar_Get( "tracerred", "0.8", 0, "tracer red component weight ( 0 - 1.0 )" );

	push	OFFSET ??_C@_0CI@EODOIAPO@tracer?5red?5component?5weight?5?$CI?50@
	push	0
	push	OFFSET ??_C@_03LNMAPFD@0?48@
	push	OFFSET ??_C@_09MOANENFM@tracerred@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tracerred, eax

; 143  : 	tracergreen = Cvar_Get( "tracergreen", "0.8", 0, "tracer green component weight ( 0 - 1.0 )" );

	push	OFFSET ??_C@_0CK@JHGHGJCM@tracer?5green?5component?5weight?5?$CI@
	push	0
	push	OFFSET ??_C@_03LNMAPFD@0?48@
	push	OFFSET ??_C@_0M@JCGGBBEF@tracergreen@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tracergreen, eax

; 144  : 	tracerblue = Cvar_Get( "tracerblue", "0.4", 0, "tracer blue component weight ( 0 - 1.0 )" );

	push	OFFSET ??_C@_0CJ@NMAOBFAJ@tracer?5blue?5component?5weight?5?$CI?5@
	push	0
	push	OFFSET ??_C@_03KHGJEAFP@0?44@
	push	OFFSET ??_C@_0L@HKJFJODP@tracerblue@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tracerblue, eax

; 145  : 	traceralpha = Cvar_Get( "traceralpha", "0.5", 0, "tracer alpha amount ( 0 - 1.0 )" );

	push	OFFSET ??_C@_0CA@NDNALAOK@tracer?5alpha?5amount?5?$CI?50?5?9?51?40?5?$CJ@
	push	0
	push	OFFSET ??_C@_03LOHCHBBO@0?45@
	push	OFFSET ??_C@_0M@HDGIPDIK@traceralpha@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _traceralpha, eax

; 146  : 	tracerspeed = Cvar_Get( "tracerspeed", "6000", 0, "tracer speed" );

	push	OFFSET ??_C@_0N@OJBABCOM@tracer?5speed@
	push	0
	push	OFFSET ??_C@_04BMLKGOAG@6000@
	push	OFFSET ??_C@_0M@IKAOOKCC@tracerspeed@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tracerspeed, eax

; 147  : 	tracerlength = Cvar_Get( "tracerlength", "0.8", 0, "tracer length factor" );

	push	OFFSET ??_C@_0BF@MEDMFCHN@tracer?5length?5factor@
	push	0
	push	OFFSET ??_C@_03LNMAPFD@0?48@
	push	OFFSET ??_C@_0N@HLLMILEE@tracerlength@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tracerlength, eax

; 148  : 	traceroffset = Cvar_Get( "traceroffset", "30", 0, "tracer starting offset" );

	push	OFFSET ??_C@_0BH@PPPAAIEJ@tracer?5starting?5offset@
	push	0
	push	OFFSET ??_C@_02PJNFELNH@30@
	push	OFFSET ??_C@_0N@NIFIPMGE@traceroffset@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _traceroffset, eax

; 149  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_InitParticles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _R_FreeDeadParticles
_TEXT	SEGMENT
_kill$ = -8						; size = 4
_p$ = -4						; size = 4
_ppparticles$ = 8					; size = 4
_R_FreeDeadParticles PROC				; COMDAT

; 310  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
$LN2@R_FreeDead:

; 311  : 	particle_t	*p, *kill;
; 312  : 
; 313  : 	// kill all the ones hanging direcly off the base pointer
; 314  : 	while( 1 ) 

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@R_FreeDead

; 315  : 	{
; 316  : 		kill = *ppparticles;

	mov	eax, DWORD PTR _ppparticles$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _kill$[ebp], ecx

; 317  : 		if( kill && kill->die < cl.time )

	cmp	DWORD PTR _kill$[ebp], 0
	je	SHORT $LN9@R_FreeDead
	mov	eax, DWORD PTR _kill$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+36]
	movsd	xmm1, QWORD PTR _cl+2167640
	comisd	xmm1, xmm0
	jbe	SHORT $LN9@R_FreeDead

; 318  : 		{
; 319  : 			if( kill->deathfunc )

	mov	eax, DWORD PTR _kill$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN10@R_FreeDead

; 320  : 				kill->deathfunc( kill );

	mov	eax, DWORD PTR _kill$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kill$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 4
$LN10@R_FreeDead:

; 321  : 			kill->deathfunc = NULL;

	mov	eax, DWORD PTR _kill$[ebp]
	mov	DWORD PTR [eax+44], 0

; 322  : 			*ppparticles = kill->next;

	mov	eax, DWORD PTR _ppparticles$[ebp]
	mov	ecx, DWORD PTR _kill$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx

; 323  : 			kill->next = cl_free_particles;

	mov	eax, DWORD PTR _kill$[ebp]
	mov	ecx, DWORD PTR _cl_free_particles
	mov	DWORD PTR [eax+16], ecx

; 324  : 			cl_free_particles = kill;

	mov	eax, DWORD PTR _kill$[ebp]
	mov	DWORD PTR _cl_free_particles, eax

; 325  : 			continue;

	jmp	SHORT $LN2@R_FreeDead
$LN9@R_FreeDead:

; 326  : 		}
; 327  : 		break;

	jmp	SHORT $LN3@R_FreeDead

; 328  : 	}

	jmp	SHORT $LN2@R_FreeDead
$LN3@R_FreeDead:

; 329  : 
; 330  : 	// kill off all the others
; 331  : 	for( p = *ppparticles; p; p = p->next )

	mov	eax, DWORD PTR _ppparticles$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN6@R_FreeDead
$LN4@R_FreeDead:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _p$[ebp], ecx
$LN6@R_FreeDead:
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN5@R_FreeDead
$LN7@R_FreeDead:

; 332  : 	{
; 333  : 		while( 1 )

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN8@R_FreeDead

; 334  : 		{
; 335  : 			kill = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _kill$[ebp], ecx

; 336  : 			if( kill && kill->die < cl.time )

	cmp	DWORD PTR _kill$[ebp], 0
	je	SHORT $LN11@R_FreeDead
	mov	eax, DWORD PTR _kill$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+36]
	movsd	xmm1, QWORD PTR _cl+2167640
	comisd	xmm1, xmm0
	jbe	SHORT $LN11@R_FreeDead

; 337  : 			{
; 338  : 				if( kill->deathfunc )

	mov	eax, DWORD PTR _kill$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN12@R_FreeDead

; 339  : 					kill->deathfunc( kill );

	mov	eax, DWORD PTR _kill$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kill$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 4
$LN12@R_FreeDead:

; 340  : 				kill->deathfunc = NULL;

	mov	eax, DWORD PTR _kill$[ebp]
	mov	DWORD PTR [eax+44], 0

; 341  : 				p->next = kill->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _kill$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 342  : 				kill->next = cl_free_particles;

	mov	eax, DWORD PTR _kill$[ebp]
	mov	ecx, DWORD PTR _cl_free_particles
	mov	DWORD PTR [eax+16], ecx

; 343  : 				cl_free_particles = kill;

	mov	eax, DWORD PTR _kill$[ebp]
	mov	DWORD PTR _cl_free_particles, eax

; 344  : 				continue;

	jmp	SHORT $LN7@R_FreeDead
$LN11@R_FreeDead:

; 345  : 			}
; 346  : 			break;

	jmp	SHORT $LN8@R_FreeDead

; 347  : 		}

	jmp	SHORT $LN7@R_FreeDead
$LN8@R_FreeDead:

; 348  : 	}

	jmp	$LN4@R_FreeDead
$LN5@R_FreeDead:

; 349  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_FreeDeadParticles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _CL_DrawParticlesExternal
_TEXT	SEGMENT
_oldRI$ = -4900						; size = 4896
__$ArrayPad$ = -4					; size = 4
_rvp$ = 8						; size = 4
_trans_pass$ = 12					; size = 4
_frametime$ = 16					; size = 4
_CL_DrawParticlesExternal PROC				; COMDAT

; 670  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 5412				; 00001524H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 671  : 	ref_instance_t	oldRI = RI;

	push	4896					; 00001320H
	push	OFFSET _RI
	lea	eax, DWORD PTR _oldRI$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 672  : 
; 673  : 	memcpy( &oldRI, &RI, sizeof( ref_instance_t ));

	push	4896					; 00001320H
	push	OFFSET _RI
	lea	eax, DWORD PTR _oldRI$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 674  : 	R_SetupRefParams( rvp );

	mov	eax, DWORD PTR _rvp$[ebp]
	push	eax
	call	_R_SetupRefParams
	add	esp, 4

; 675  : 	R_SetupFrustum();

	call	_R_SetupFrustum

; 676  : 	R_SetupGL( false );	// don't touch GL-states

	push	0
	call	_R_SetupGL
	add	esp, 4

; 677  : 
; 678  : 	// setup PVS for frame
; 679  : 	memcpy( RI.visbytes, tr.visbytes, world.visbytes );

	mov	eax, DWORD PTR _world+2588
	push	eax
	push	OFFSET _tr+83228
	push	OFFSET _RI+776
	call	_memcpy
	add	esp, 12					; 0000000cH

; 680  : 	tr.frametime = frametime;

	cvtss2sd xmm0, DWORD PTR _frametime$[ebp]
	movsd	QWORD PTR _tr+87584, xmm0

; 681  : 
; 682  : 	if( trans_pass == false )

	cmp	DWORD PTR _trans_pass$[ebp], 0
	jne	SHORT $LN2@CL_DrawPar

; 683  : 	{
; 684  : 		CL_DrawBeams( false );

	push	0
	call	_CL_DrawBeams
	add	esp, 4

; 685  : 	}

	jmp	SHORT $LN3@CL_DrawPar
$LN2@CL_DrawPar:

; 686  : 	else
; 687  : 	{
; 688  : 		CL_DrawBeams( true );

	push	1
	call	_CL_DrawBeams
	add	esp, 4

; 689  : 		CL_DrawParticles( tr.frametime );

	sub	esp, 8
	movsd	xmm0, QWORD PTR _tr+87584
	movsd	QWORD PTR [esp], xmm0
	call	_CL_DrawParticles
	add	esp, 8

; 690  : 		CL_DrawTracers( tr.frametime );

	sub	esp, 8
	movsd	xmm0, QWORD PTR _tr+87584
	movsd	QWORD PTR [esp], xmm0
	call	_CL_DrawTracers
	add	esp, 8
$LN3@CL_DrawPar:

; 691  : 	}
; 692  : 
; 693  : 	// restore internal state
; 694  : 	memcpy( &RI, &oldRI, sizeof( ref_instance_t ));

	push	4896					; 00001320H
	lea	eax, DWORD PTR _oldRI$[ebp]
	push	eax
	push	OFFSET _RI
	call	_memcpy
	add	esp, 12					; 0000000cH

; 695  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_DrawParticlesExternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_rpart.c
;	COMDAT _CL_Particle
_TEXT	SEGMENT
_p$ = -4						; size = 4
_org$ = 8						; size = 4
_color$ = 12						; size = 4
_life$ = 16						; size = 4
_zpos$ = 20						; size = 4
_zvel$ = 24						; size = 4
_CL_Particle PROC					; COMDAT

; 1454 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1455 : 	particle_t	*p;
; 1456 : 
; 1457 : 	p = R_AllocParticle( NULL );

	push	0
	call	_R_AllocParticle
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1458 : 	if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@CL_Particl
	jmp	$LN1@CL_Particl
$LN2@CL_Particl:

; 1459 : 
; 1460 : 	if( org ) VectorCopy( org, p->org );

	cmp	DWORD PTR _org$[ebp], 0
	je	SHORT $LN3@CL_Particl
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _org$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax
$LN3@CL_Particl:

; 1461 : 	p->die = cl.time + life;

	cvtss2sd xmm0, DWORD PTR _life$[ebp]
	addsd	xmm0, QWORD PTR _cl+2167640
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 1462 : 	p->vel[2] += zvel;	// ???

	mov	eax, 4
	shl	eax, 1
	cvtsi2ss xmm0, DWORD PTR _zvel$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax+20]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+edx+20], xmm0

; 1463 : 	p->color = color;

	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR _color$[ebp]
	mov	WORD PTR [eax+12], cx
$LN1@CL_Particl:

; 1464 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_Particle ENDP
_TEXT	ENDS
END
