; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\cl_netgraph.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_net_graph:DWORD
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
COMM	_net_graphpos:DWORD
COMM	_net_graphwidth:DWORD
COMM	_net_graphheight:DWORD
COMM	_net_graphsolid:DWORD
COMM	_net_scale:DWORD
_DATA	ENDS
PUBLIC	_CL_InitNetgraph
PUBLIC	_SCR_DrawNetGraph
PUBLIC	_NetGraph_AtEdge
PUBLIC	_NetGraph_InitColors
PUBLIC	_NetGraph_GetFrameData
PUBLIC	_NetGraph_DrawTimes
PUBLIC	_NetGraph_DrawHatches
PUBLIC	_NetGraph_DrawTextFields
PUBLIC	_NetGraph_DrawDataSegment
PUBLIC	_NetGraph_ColorForHeight
PUBLIC	_NetGraph_DrawDataUsage
PUBLIC	_NetGraph_GetScreenPos
PUBLIC	??_C@_08GCLKNLMG@?$CF?41f?5fps@			; `string'
PUBLIC	??_C@_05GJFBACJN@?$CFi?5ms@			; `string'
PUBLIC	??_C@_0BC@EMBIEHNP@in?5?3?5?5?$CFi?5?$CF?42f?5k?1s@ ; `string'
PUBLIC	??_C@_0BC@PMNHPCNO@out?3?5?5?$CFi?5?$CF?42f?5k?1s@ ; `string'
PUBLIC	??_C@_0BD@EBEODEIK@loss?3?5?$CFi?5choke?3?5?$CFi@ ; `string'
PUBLIC	??_C@_04EBNBDLPH@?$CFi?1s@			; `string'
PUBLIC	??_C@_09LBNBCOKH@net_scale@			; `string'
PUBLIC	??_C@_0BJ@PHFNKGGL@draw?5network?5usage?5graph@	; `string'
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_09NEIEPEEB@net_graph@			; `string'
PUBLIC	??_C@_0BN@NHFBDDFJ@network?5usage?5graph?5position@ ; `string'
PUBLIC	??_C@_01HIHLOKLC@1@				; `string'
PUBLIC	??_C@_0N@MHPLICBH@net_graphpos@			; `string'
PUBLIC	??_C@_0CA@MGOENFJH@network?5usage?5graph?5scale?5level@ ; `string'
PUBLIC	??_C@_01BMBHCPLG@5@				; `string'
PUBLIC	??_C@_0BK@CMGLPNGA@network?5usage?5graph?5width@ ; `string'
PUBLIC	??_C@_03FAOGDFEJ@192@				; `string'
PUBLIC	??_C@_0P@KHGCCKHM@net_graphwidth@		; `string'
PUBLIC	??_C@_0BL@FKKFKGML@network?5usage?5graph?5height@ ; `string'
PUBLIC	??_C@_02JLHCEMDI@64@				; `string'
PUBLIC	??_C@_0BA@EOCPPDFD@net_graphheight@		; `string'
PUBLIC	??_C@_0CF@BIBPIKE@fill?5segments?5in?5network?5usage?5@ ; `string'
PUBLIC	??_C@_0P@MOEMMKAK@net_graphsolid@		; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff199999999999a
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@4059000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@41200000
PUBLIC	__real@41c00000
PUBLIC	__real@447a0000
PUBLIC	__real@44800000
PUBLIC	__real@46040000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c008000000000000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_Sys_DoubleTime:PROC
EXTRN	_va:PROC
EXTRN	_Cvar_Get:PROC
EXTRN	_Cvar_SetValue:PROC
EXTRN	_Con_DrawString:PROC
EXTRN	_Con_SetFont:PROC
EXTRN	_Con_RestoreFont:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_host:BYTE
EXTRN	_CL_UPDATE_BACKUP:DWORD
EXTRN	_cl:BYTE
EXTRN	_cls:BYTE
EXTRN	_cl_cmdrate:DWORD
EXTRN	_cl_updaterate:DWORD
EXTRN	_glState:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_netstat_packet_latency DQ 0400H DUP (?)
_netstat_cmdinfo DB 03000H DUP (?)
_netstat_graph DB 04800H DUP (?)
_packet_loss DD	01H DUP (?)
_packet_choke DD 01H DUP (?)
_framerate DD	01H DUP (?)
_maxmsgbytes DD	01H DUP (?)
?nexttime@?1??NetGraph_GetFrameData@@9@9 DQ 01H DUP (?)	; `NetGraph_GetFrameData'::`2'::nexttime
?lastout@?1??NetGraph_DrawTextFields@@9@9 DD 01H DUP (?) ; `NetGraph_DrawTextFields'::`2'::lastout
_BSS	ENDS
;	COMDAT __real@c008000000000000
CONST	SEGMENT
__real@c008000000000000 DQ 0c008000000000000r	; -3
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@46040000
CONST	SEGMENT
__real@46040000 DD 046040000r			; 8448
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff199999999999a
CONST	SEGMENT
__real@3ff199999999999a DQ 03ff199999999999ar	; 1.1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0P@MOEMMKAK@net_graphsolid@
CONST	SEGMENT
??_C@_0P@MOEMMKAK@net_graphsolid@ DB 'net_graphsolid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BIBPIKE@fill?5segments?5in?5network?5usage?5@
CONST	SEGMENT
??_C@_0CF@BIBPIKE@fill?5segments?5in?5network?5usage?5@ DB 'fill segments'
	DB	' in network usage graph', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EOCPPDFD@net_graphheight@
CONST	SEGMENT
??_C@_0BA@EOCPPDFD@net_graphheight@ DB 'net_graphheight', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JLHCEMDI@64@
CONST	SEGMENT
??_C@_02JLHCEMDI@64@ DB '64', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FKKFKGML@network?5usage?5graph?5height@
CONST	SEGMENT
??_C@_0BL@FKKFKGML@network?5usage?5graph?5height@ DB 'network usage graph'
	DB	' height', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KHGCCKHM@net_graphwidth@
CONST	SEGMENT
??_C@_0P@KHGCCKHM@net_graphwidth@ DB 'net_graphwidth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03FAOGDFEJ@192@
CONST	SEGMENT
??_C@_03FAOGDFEJ@192@ DB '192', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CMGLPNGA@network?5usage?5graph?5width@
CONST	SEGMENT
??_C@_0BK@CMGLPNGA@network?5usage?5graph?5width@ DB 'network usage graph '
	DB	'width', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01BMBHCPLG@5@
CONST	SEGMENT
??_C@_01BMBHCPLG@5@ DB '5', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MGOENFJH@network?5usage?5graph?5scale?5level@
CONST	SEGMENT
??_C@_0CA@MGOENFJH@network?5usage?5graph?5scale?5level@ DB 'network usage'
	DB	' graph scale level', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MHPLICBH@net_graphpos@
CONST	SEGMENT
??_C@_0N@MHPLICBH@net_graphpos@ DB 'net_graphpos', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1@
CONST	SEGMENT
??_C@_01HIHLOKLC@1@ DB '1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NHFBDDFJ@network?5usage?5graph?5position@
CONST	SEGMENT
??_C@_0BN@NHFBDDFJ@network?5usage?5graph?5position@ DB 'network usage gra'
	DB	'ph position', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09NEIEPEEB@net_graph@
CONST	SEGMENT
??_C@_09NEIEPEEB@net_graph@ DB 'net_graph', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PHFNKGGL@draw?5network?5usage?5graph@
CONST	SEGMENT
??_C@_0BJ@PHFNKGGL@draw?5network?5usage?5graph@ DB 'draw network usage gr'
	DB	'aph', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09LBNBCOKH@net_scale@
CONST	SEGMENT
??_C@_09LBNBCOKH@net_scale@ DB 'net_scale', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EBNBDLPH@?$CFi?1s@
CONST	SEGMENT
??_C@_04EBNBDLPH@?$CFi?1s@ DB '%i/s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EBEODEIK@loss?3?5?$CFi?5choke?3?5?$CFi@
CONST	SEGMENT
??_C@_0BD@EBEODEIK@loss?3?5?$CFi?5choke?3?5?$CFi@ DB 'loss: %i choke: %i', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PMNHPCNO@out?3?5?5?$CFi?5?$CF?42f?5k?1s@
CONST	SEGMENT
??_C@_0BC@PMNHPCNO@out?3?5?5?$CFi?5?$CF?42f?5k?1s@ DB 'out:  %i %.2f k/s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EMBIEHNP@in?5?3?5?5?$CFi?5?$CF?42f?5k?1s@
CONST	SEGMENT
??_C@_0BC@EMBIEHNP@in?5?3?5?5?$CFi?5?$CF?42f?5k?1s@ DB 'in :  %i %.2f k/s'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05GJFBACJN@?$CFi?5ms@
CONST	SEGMENT
??_C@_05GJFBACJN@?$CFi?5ms@ DB '%i ms', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GCLKNLMG@?$CF?41f?5fps@
CONST	SEGMENT
??_C@_08GCLKNLMG@?$CF?41f?5fps@ DB '%.1f fps', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_netcolors DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0f0H
	DB	07fH
	DB	03fH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	03fH
	DB	0ffH
	DB	03fH
	DB	096H
	ORG $+96
_sendcolor DB	058H
	DB	01dH
	DB	082H
	DB	0ffH
_holdcolor DB	0ffH
	DB	00H
	DB	00H
	DB	0c8H
_extrap_base_color DB 0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	04ceH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0114H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	022fH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	0430H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	0dH
	DW	01c6H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _NetGraph_GetScreenPos
_TEXT	SEGMENT
tv82 = -68						; size = 4
tv73 = -68						; size = 4
_rect$ = 8						; size = 4
_w$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_NetGraph_GetScreenPos PROC				; COMDAT

; 596  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 597  : 	rect->left = rect->top = 0;

	mov	eax, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [ecx], 0

; 598  : 	rect->right = glState.width;

	mov	eax, DWORD PTR _rect$[ebp]
	mov	ecx, DWORD PTR _glState
	mov	DWORD PTR [eax+4], ecx

; 599  : 	rect->bottom = glState.height;

	mov	eax, DWORD PTR _rect$[ebp]
	mov	ecx, DWORD PTR _glState+4
	mov	DWORD PTR [eax+12], ecx

; 600  : 
; 601  : 	*w = Q_min( NET_TIMINGS, net_graphwidth->value );

	mov	eax, DWORD PTR _net_graphwidth
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR __real@44800000
	jbe	SHORT $LN9@NetGraph_G
	movss	xmm0, DWORD PTR __real@44800000
	movss	DWORD PTR tv73[ebp], xmm0
	jmp	SHORT $LN10@NetGraph_G
$LN9@NetGraph_G:
	mov	ecx, DWORD PTR _net_graphwidth
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR tv73[ebp], xmm0
$LN10@NetGraph_G:
	cvttss2si edx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], edx

; 602  : 	if( rect->right < *w + 10 )

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _rect$[ebp]
	cmp	DWORD PTR [edx+4], ecx
	jge	SHORT $LN4@NetGraph_G

; 603  : 		*w = rect->right - 10;

	mov	eax, DWORD PTR _rect$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], ecx
$LN4@NetGraph_G:

; 604  : 
; 605  : 	// detect x and y position
; 606  : 	switch( (int)net_graphpos->value )

	mov	eax, DWORD PTR _net_graphpos
	cvttss2si ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv82[ebp], ecx
	cmp	DWORD PTR tv82[ebp], 1
	je	SHORT $LN5@NetGraph_G
	cmp	DWORD PTR tv82[ebp], 2
	je	SHORT $LN6@NetGraph_G
	jmp	SHORT $LN7@NetGraph_G
$LN5@NetGraph_G:

; 607  : 	{
; 608  : 	case 1: // right sided
; 609  : 		*x = rect->left + rect->right - 5 - *w;

	mov	eax, DWORD PTR _rect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _rect$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [ecx+eax-5]
	mov	edx, DWORD PTR _w$[ebp]
	sub	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx

; 610  : 		break;

	jmp	SHORT $LN2@NetGraph_G
$LN6@NetGraph_G:

; 611  : 	case 2: // center
; 612  : 		*x = rect->left + ( rect->right - 10 - *w ) / 2;

	mov	eax, DWORD PTR _rect$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _w$[ebp]
	sub	eax, DWORD PTR [ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _rect$[ebp]
	add	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], eax

; 613  : 		break;

	jmp	SHORT $LN2@NetGraph_G
$LN7@NetGraph_G:

; 614  : 	default: // left sided
; 615  : 		*x = rect->left + 5;

	mov	eax, DWORD PTR _rect$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 5
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx], ecx
$LN2@NetGraph_G:

; 616  : 		break;
; 617  : 	}
; 618  : 
; 619  : 	*y = rect->bottom + rect->top - NETGRAPH_LERP_HEIGHT - 5;

	mov	eax, DWORD PTR _rect$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _rect$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [ecx+eax-29]
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx], ecx

; 620  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_NetGraph_GetScreenPos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _NetGraph_DrawDataUsage
_TEXT	SEGMENT
tv90 = -124						; size = 4
$T1 = -120						; size = 4
$T2 = -116						; size = 4
_color$ = -48						; size = 4
_fill$ = -44						; size = 16
_pingheight$ = -28					; size = 4
_ping$ = -24						; size = 4
_lastvalidh$ = -20					; size = 4
_h$ = -16						; size = 4
_i$ = -12						; size = 4
_a$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_w$ = 16						; size = 4
_NetGraph_DrawDataUsage PROC				; COMDAT

; 484  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 485  : 	int	a, i, h, lastvalidh = 0, ping;

	mov	DWORD PTR _lastvalidh$[ebp], 0

; 486  : 	int	pingheight = net_graphheight->value - NETGRAPH_LERP_HEIGHT - 2;

	mov	eax, DWORD PTR _net_graphheight
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR __real@41c00000
	subss	xmm0, DWORD PTR __real@40000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR _pingheight$[ebp], ecx

; 487  : 	wrect_t	fill = { 0 };

	xor	eax, eax
	mov	DWORD PTR _fill$[ebp], eax
	mov	DWORD PTR _fill$[ebp+4], eax
	mov	DWORD PTR _fill$[ebp+8], eax
	mov	DWORD PTR _fill$[ebp+12], eax

; 488  : 	byte	color[4];
; 489  : 
; 490  : 	for( a = 0; a < w; a++ )

	mov	DWORD PTR _a$[ebp], 0
	jmp	SHORT $LN4@NetGraph_D
$LN2@NetGraph_D:
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 1
	mov	DWORD PTR _a$[ebp], eax
$LN4@NetGraph_D:
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	$LN3@NetGraph_D

; 491  : 	{
; 492  : 		i = (cls.netchan.incoming_sequence - a) & NET_TIMINGS_MASK;

	mov	eax, DWORD PTR _cls+26864
	sub	eax, DWORD PTR _a$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _i$[ebp], eax

; 493  : 		h = netstat_packet_latency[i].latency;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _netstat_packet_latency[eax*8]
	mov	DWORD PTR _h$[ebp], ecx

; 494  : 
; 495  : 		NetGraph_ColorForHeight( &netstat_packet_latency[i], color, &ping );

	lea	eax, DWORD PTR _ping$[ebp]
	push	eax
	lea	ecx, DWORD PTR _color$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _netstat_packet_latency[edx*8]
	push	eax
	call	_NetGraph_ColorForHeight
	add	esp, 12					; 0000000cH

; 496  : 
; 497  : 		if( !ping ) h = lastvalidh;

	cmp	DWORD PTR _ping$[ebp], 0
	jne	SHORT $LN5@NetGraph_D
	mov	eax, DWORD PTR _lastvalidh$[ebp]
	mov	DWORD PTR _h$[ebp], eax
	jmp	SHORT $LN6@NetGraph_D
$LN5@NetGraph_D:

; 498  : 		else lastvalidh = h;

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _lastvalidh$[ebp], eax
$LN6@NetGraph_D:

; 499  : 
; 500  : 		if( h > pingheight )

	mov	eax, DWORD PTR _h$[ebp]
	cmp	eax, DWORD PTR _pingheight$[ebp]
	jle	SHORT $LN7@NetGraph_D

; 501  : 			h = pingheight;

	mov	eax, DWORD PTR _pingheight$[ebp]
	mov	DWORD PTR _h$[ebp], eax
$LN7@NetGraph_D:

; 502  : 
; 503  : 		fill.left = x + w - a - 1;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _w$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	sub	eax, 1
	mov	DWORD PTR _fill$[ebp], eax

; 504  : 		fill.top = y - h;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _fill$[ebp+8], eax

; 505  : 		fill.right = 1;

	mov	DWORD PTR _fill$[ebp+4], 1

; 506  : 		fill.bottom = ping ? 1: h;

	cmp	DWORD PTR _ping$[ebp], 0
	je	SHORT $LN27@NetGraph_D
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN28@NetGraph_D
$LN27@NetGraph_D:
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv90[ebp], eax
$LN28@NetGraph_D:
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR _fill$[ebp+12], ecx

; 507  : 
; 508  : 		if( !ping )

	cmp	DWORD PTR _ping$[ebp], 0
	jne	SHORT $LN8@NetGraph_D

; 509  : 		{
; 510  : 			if( fill.bottom > 3 )

	cmp	DWORD PTR _fill$[ebp+12], 3
	jle	SHORT $LN10@NetGraph_D

; 511  : 			{
; 512  : 				fill.bottom = 2;

	mov	DWORD PTR _fill$[ebp+12], 2

; 513  : 				NetGraph_DrawRect( &fill, color );

	lea	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fill$[ebp]
	push	ecx
	call	_NetGraph_DrawRect
	add	esp, 8

; 514  : 				fill.top += fill.bottom - 2;

	mov	eax, DWORD PTR _fill$[ebp+12]
	mov	ecx, DWORD PTR _fill$[ebp+8]
	lea	edx, DWORD PTR [ecx+eax-2]
	mov	DWORD PTR _fill$[ebp+8], edx

; 515  : 				NetGraph_DrawRect( &fill, color );

	lea	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fill$[ebp]
	push	ecx
	call	_NetGraph_DrawRect
	add	esp, 8

; 516  : 			}

	jmp	SHORT $LN11@NetGraph_D
$LN10@NetGraph_D:

; 517  : 			else
; 518  : 			{
; 519  : 				NetGraph_DrawRect( &fill, color );

	lea	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fill$[ebp]
	push	ecx
	call	_NetGraph_DrawRect
	add	esp, 8
$LN11@NetGraph_D:

; 520  : 			}
; 521  : 		}

	jmp	SHORT $LN9@NetGraph_D
$LN8@NetGraph_D:

; 522  : 		else
; 523  : 		{
; 524  : 			NetGraph_DrawRect( &fill, color );

	lea	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fill$[ebp]
	push	ecx
	call	_NetGraph_DrawRect
	add	esp, 8
$LN9@NetGraph_D:

; 525  : 		}
; 526  : 
; 527  : 		fill.top = y;

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _fill$[ebp+8], eax

; 528  : 		fill.bottom = 1;

	mov	DWORD PTR _fill$[ebp+12], 1

; 529  : 
; 530  : 		color[0] = 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 4
	jae	SHORT $LN29@NetGraph_D
	jmp	SHORT $LN30@NetGraph_D
$LN29@NetGraph_D:
	call	___report_rangecheckfailure
$LN30@NetGraph_D:
	mov	edx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _color$[ebp+edx], 0

; 531  : 		color[1] = 255;

	mov	eax, 1
	shl	eax, 0
	mov	BYTE PTR _color$[ebp+eax], 255		; 000000ffH

; 532  : 		color[2] = 0;

	mov	eax, 1
	shl	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 4
	jae	SHORT $LN31@NetGraph_D
	jmp	SHORT $LN32@NetGraph_D
$LN31@NetGraph_D:
	call	___report_rangecheckfailure
$LN32@NetGraph_D:
	mov	ecx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _color$[ebp+ecx], 0

; 533  : 		color[3] = 160;

	mov	eax, 1
	imul	ecx, eax, 3
	mov	BYTE PTR _color$[ebp+ecx], 160		; 000000a0H

; 534  : 
; 535  : 		if( NetGraph_AtEdge( a, w ))

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_NetGraph_AtEdge
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@NetGraph_D

; 536  : 			NetGraph_DrawRect( &fill, color );

	lea	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fill$[ebp]
	push	ecx
	call	_NetGraph_DrawRect
	add	esp, 8
$LN12@NetGraph_D:

; 537  : 
; 538  : 		if( net_graph->value < 2 )

	mov	eax, DWORD PTR _net_graph
	movss	xmm0, DWORD PTR __real@40000000
	comiss	xmm0, DWORD PTR [eax+12]
	jbe	SHORT $LN13@NetGraph_D

; 539  : 			continue;

	jmp	$LN2@NetGraph_D
$LN13@NetGraph_D:

; 540  : 
; 541  : 		color[0] = color[1] = color[2] = color[3] = 255;

	mov	eax, 1
	imul	ecx, eax, 3
	mov	BYTE PTR _color$[ebp+ecx], 255		; 000000ffH
	mov	edx, 1
	shl	edx, 1
	mov	BYTE PTR _color$[ebp+edx], 255		; 000000ffH
	mov	eax, 1
	shl	eax, 0
	mov	BYTE PTR _color$[ebp+eax], 255		; 000000ffH
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	BYTE PTR _color$[ebp+edx], 255		; 000000ffH

; 542  : 		fill.top = y - net_graphheight->value - 1;

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _net_graphheight
	subss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR __real@3f800000
	cvttss2si ecx, xmm0
	mov	DWORD PTR _fill$[ebp+8], ecx

; 543  : 		fill.bottom = 1;

	mov	DWORD PTR _fill$[ebp+12], 1

; 544  : 
; 545  : 		if( NetGraph_AtEdge( a, w ))

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_NetGraph_AtEdge
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@NetGraph_D

; 546  : 			NetGraph_DrawRect( &fill, color );

	lea	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fill$[ebp]
	push	ecx
	call	_NetGraph_DrawRect
	add	esp, 8
$LN14@NetGraph_D:

; 547  : 
; 548  : 		fill.top -= 1;

	mov	eax, DWORD PTR _fill$[ebp+8]
	sub	eax, 1
	mov	DWORD PTR _fill$[ebp+8], eax

; 549  : 
; 550  : 		if( netstat_packet_latency[i].latency > 9995 )

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _netstat_packet_latency[eax*8], 9995 ; 0000270bH
	jle	SHORT $LN15@NetGraph_D

; 551  : 			continue; // skip invalid

	jmp	$LN2@NetGraph_D
$LN15@NetGraph_D:

; 552  : 
; 553  : 		if( !NetGraph_DrawDataSegment( &fill, netstat_graph[i].client, 255, 0, 0, 128 ))

	push	128					; 00000080H
	push	0
	push	0
	push	255					; 000000ffH
	imul	eax, DWORD PTR _i$[ebp], 18
	movzx	ecx, WORD PTR _netstat_graph[eax]
	push	ecx
	lea	edx, DWORD PTR _fill$[ebp]
	push	edx
	call	_NetGraph_DrawDataSegment
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN16@NetGraph_D

; 554  : 			continue;

	jmp	$LN2@NetGraph_D
$LN16@NetGraph_D:

; 555  : 
; 556  : 		if( !NetGraph_DrawDataSegment( &fill, netstat_graph[i].players, 255, 255, 0, 128 ))

	push	128					; 00000080H
	push	0
	push	255					; 000000ffH
	push	255					; 000000ffH
	imul	eax, DWORD PTR _i$[ebp], 18
	movzx	ecx, WORD PTR _netstat_graph[eax+2]
	push	ecx
	lea	edx, DWORD PTR _fill$[ebp]
	push	edx
	call	_NetGraph_DrawDataSegment
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN17@NetGraph_D

; 557  : 			continue;

	jmp	$LN2@NetGraph_D
$LN17@NetGraph_D:

; 558  : 
; 559  : 		if( !NetGraph_DrawDataSegment( &fill, netstat_graph[i].entities, 255, 0, 255, 128 ))

	push	128					; 00000080H
	push	255					; 000000ffH
	push	0
	push	255					; 000000ffH
	imul	eax, DWORD PTR _i$[ebp], 18
	movzx	ecx, WORD PTR _netstat_graph[eax+4]
	push	ecx
	lea	edx, DWORD PTR _fill$[ebp]
	push	edx
	call	_NetGraph_DrawDataSegment
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN18@NetGraph_D

; 560  : 			continue;

	jmp	$LN2@NetGraph_D
$LN18@NetGraph_D:

; 561  : 
; 562  : 		if( !NetGraph_DrawDataSegment( &fill, netstat_graph[i].tentities, 0, 0, 255, 128 ))

	push	128					; 00000080H
	push	255					; 000000ffH
	push	0
	push	0
	imul	eax, DWORD PTR _i$[ebp], 18
	movzx	ecx, WORD PTR _netstat_graph[eax+6]
	push	ecx
	lea	edx, DWORD PTR _fill$[ebp]
	push	edx
	call	_NetGraph_DrawDataSegment
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN19@NetGraph_D

; 563  : 			continue;

	jmp	$LN2@NetGraph_D
$LN19@NetGraph_D:

; 564  : 
; 565  : 		if( !NetGraph_DrawDataSegment( &fill, netstat_graph[i].sound, 0, 255, 0, 128 ))

	push	128					; 00000080H
	push	0
	push	255					; 000000ffH
	push	0
	imul	eax, DWORD PTR _i$[ebp], 18
	movzx	ecx, WORD PTR _netstat_graph[eax+8]
	push	ecx
	lea	edx, DWORD PTR _fill$[ebp]
	push	edx
	call	_NetGraph_DrawDataSegment
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN20@NetGraph_D

; 566  : 			continue;

	jmp	$LN2@NetGraph_D
$LN20@NetGraph_D:

; 567  : 
; 568  : 		if( !NetGraph_DrawDataSegment( &fill, netstat_graph[i].event, 0, 255, 255, 128 ))

	push	128					; 00000080H
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	0
	imul	eax, DWORD PTR _i$[ebp], 18
	movzx	ecx, WORD PTR _netstat_graph[eax+10]
	push	ecx
	lea	edx, DWORD PTR _fill$[ebp]
	push	edx
	call	_NetGraph_DrawDataSegment
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN21@NetGraph_D

; 569  : 			continue;

	jmp	$LN2@NetGraph_D
$LN21@NetGraph_D:

; 570  : 
; 571  : 		if( !NetGraph_DrawDataSegment( &fill, netstat_graph[i].usr, 200, 200, 200, 128 ))

	push	128					; 00000080H
	push	200					; 000000c8H
	push	200					; 000000c8H
	push	200					; 000000c8H
	imul	eax, DWORD PTR _i$[ebp], 18
	movzx	ecx, WORD PTR _netstat_graph[eax+12]
	push	ecx
	lea	edx, DWORD PTR _fill$[ebp]
	push	edx
	call	_NetGraph_DrawDataSegment
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN22@NetGraph_D

; 572  : 			continue;

	jmp	$LN2@NetGraph_D
$LN22@NetGraph_D:

; 573  : 
; 574  : 		if( !NetGraph_DrawDataSegment( &fill, netstat_graph[i].voicebytes, 255, 255, 255, 255 ))

	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	imul	eax, DWORD PTR _i$[ebp], 18
	movzx	ecx, WORD PTR _netstat_graph[eax+16]
	push	ecx
	lea	edx, DWORD PTR _fill$[ebp]
	push	edx
	call	_NetGraph_DrawDataSegment
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN23@NetGraph_D

; 575  : 			continue;

	jmp	$LN2@NetGraph_D
$LN23@NetGraph_D:

; 576  : 
; 577  : 		fill.top = y - net_graphheight->value - 1;

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _net_graphheight
	subss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR __real@3f800000
	cvttss2si ecx, xmm0
	mov	DWORD PTR _fill$[ebp+8], ecx

; 578  : 		fill.bottom = 1;

	mov	DWORD PTR _fill$[ebp+12], 1

; 579  : 		fill.top -= 2;

	mov	eax, DWORD PTR _fill$[ebp+8]
	sub	eax, 2
	mov	DWORD PTR _fill$[ebp+8], eax

; 580  : 
; 581  : 		if( !NetGraph_DrawDataSegment( &fill, netstat_graph[i].msgbytes, 240, 240, 240, 128 ))

	push	128					; 00000080H
	push	240					; 000000f0H
	push	240					; 000000f0H
	push	240					; 000000f0H
	imul	eax, DWORD PTR _i$[ebp], 18
	movzx	ecx, WORD PTR _netstat_graph[eax+14]
	push	ecx
	lea	edx, DWORD PTR _fill$[ebp]
	push	edx
	call	_NetGraph_DrawDataSegment
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN24@NetGraph_D

; 582  : 			continue;

	jmp	$LN2@NetGraph_D
$LN24@NetGraph_D:

; 583  : 	}

	jmp	$LN2@NetGraph_D
$LN3@NetGraph_D:

; 584  : 
; 585  : 	if( net_graph->value >= 2 )

	mov	eax, DWORD PTR _net_graph
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR __real@40000000
	jb	SHORT $LN25@NetGraph_D

; 586  : 		NetGraph_DrawHatches( x, y - net_graphheight->value - 1 );

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _net_graphheight
	subss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR __real@3f800000
	cvttss2si ecx, xmm0
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_NetGraph_DrawHatches
	add	esp, 8
$LN25@NetGraph_D:

; 587  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_NetGraph_DrawDataUsage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _NetGraph_ColorForHeight
_TEXT	SEGMENT
tv65 = -68						; size = 4
_packet$ = 8						; size = 4
_color$ = 12						; size = 4
_ping$ = 16						; size = 4
_NetGraph_ColorForHeight PROC				; COMDAT

; 449  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 450  : 	switch( packet->latency )

	mov	eax, DWORD PTR _packet$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 9997		; 0000270dH
	je	SHORT $LN6@NetGraph_C
	cmp	DWORD PTR tv65[ebp], 9998		; 0000270eH
	je	SHORT $LN5@NetGraph_C
	cmp	DWORD PTR tv65[ebp], 9999		; 0000270fH
	je	SHORT $LN4@NetGraph_C
	jmp	SHORT $LN7@NetGraph_C
$LN4@NetGraph_C:

; 451  : 	{
; 452  : 	case 9999:
; 453  : 		memcpy( color, netcolors[0], sizeof( byte ) * 4 ); // dropped

	push	4
	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, OFFSET _netcolors
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 454  : 		*ping = 0;

	mov	eax, DWORD PTR _ping$[ebp]
	mov	DWORD PTR [eax], 0

; 455  : 		break;

	jmp	$LN1@NetGraph_C
$LN5@NetGraph_C:

; 456  : 	case 9998:
; 457  : 		memcpy( color, netcolors[1], sizeof( byte ) * 4 ); // invalid

	push	4
	mov	eax, 4
	shl	eax, 0
	add	eax, OFFSET _netcolors
	push	eax
	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 458  : 		*ping = 0;

	mov	eax, DWORD PTR _ping$[ebp]
	mov	DWORD PTR [eax], 0

; 459  : 		break;

	jmp	SHORT $LN1@NetGraph_C
$LN6@NetGraph_C:

; 460  : 	case 9997:
; 461  : 		memcpy( color, netcolors[2], sizeof( byte ) * 4 ); // skipped

	push	4
	mov	eax, 4
	shl	eax, 1
	add	eax, OFFSET _netcolors
	push	eax
	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 462  : 		*ping = 0;

	mov	eax, DWORD PTR _ping$[ebp]
	mov	DWORD PTR [eax], 0

; 463  : 		break;

	jmp	SHORT $LN1@NetGraph_C
$LN7@NetGraph_C:

; 464  : 	default:
; 465  : 		*ping = 1;

	mov	eax, DWORD PTR _ping$[ebp]
	mov	DWORD PTR [eax], 1

; 466  : 		if( packet->choked )

	mov	eax, DWORD PTR _packet$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN8@NetGraph_C

; 467  : 		{
; 468  : 			memcpy( color, netcolors[3], sizeof( byte ) * 4 );

	push	4
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, OFFSET _netcolors
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 469  : 		}

	jmp	SHORT $LN1@NetGraph_C
$LN8@NetGraph_C:

; 470  : 		else
; 471  : 		{
; 472  : 			memcpy( color, netcolors[4], sizeof( byte ) * 4 );

	push	4
	mov	eax, 4
	shl	eax, 2
	add	eax, OFFSET _netcolors
	push	eax
	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@NetGraph_C:

; 473  : 		}
; 474  : 	}
; 475  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_NetGraph_ColorForHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _NetGraph_DrawDataSegment
_TEXT	SEGMENT
_colors$ = -8						; size = 4
_h$ = -4						; size = 4
_fill$ = 8						; size = 4
_bytes$ = 12						; size = 4
_r$ = 16						; size = 1
_g$ = 20						; size = 1
_b$ = 24						; size = 1
_a$ = 28						; size = 1
_NetGraph_DrawDataSegment PROC				; COMDAT

; 422  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 423  : 	float	h = bytes / net_scale->value;

	cvtsi2ss xmm0, DWORD PTR _bytes$[ebp]
	mov	eax, DWORD PTR _net_scale
	divss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _h$[ebp], xmm0

; 424  : 	byte	colors[4] = { r, g, b, a };

	mov	al, BYTE PTR _r$[ebp]
	mov	BYTE PTR _colors$[ebp], al
	mov	al, BYTE PTR _g$[ebp]
	mov	BYTE PTR _colors$[ebp+1], al
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR _colors$[ebp+2], al
	mov	al, BYTE PTR _a$[ebp]
	mov	BYTE PTR _colors$[ebp+3], al

; 425  : 
; 426  : 	fill->top -= (int)h;

	cvttss2si eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _fill$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	eax, DWORD PTR _fill$[ebp]
	mov	DWORD PTR [eax+8], edx

; 427  : 
; 428  : 	if( net_graphsolid->value )

	mov	eax, DWORD PTR _net_graphsolid
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@NetGraph_D

; 429  : 		fill->bottom = (int)h;

	cvttss2si eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _fill$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN3@NetGraph_D
$LN2@NetGraph_D:

; 430  : 	else fill->bottom = 1;

	mov	eax, DWORD PTR _fill$[ebp]
	mov	DWORD PTR [eax+12], 1
$LN3@NetGraph_D:

; 431  : 
; 432  : 	if( fill->top > 1 )

	mov	eax, DWORD PTR _fill$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jle	SHORT $LN4@NetGraph_D

; 433  : 	{
; 434  : 		NetGraph_DrawRect( fill, colors );

	lea	eax, DWORD PTR _colors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fill$[ebp]
	push	ecx
	call	_NetGraph_DrawRect
	add	esp, 8

; 435  : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@NetGraph_D
$LN4@NetGraph_D:

; 436  : 	}
; 437  : 
; 438  : 	return 0;

	xor	eax, eax
$LN1@NetGraph_D:

; 439  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_NetGraph_DrawDataSegment ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _NetGraph_DrawTextFields
_TEXT	SEGMENT
tv135 = -108						; size = 8
tv79 = -104						; size = 4
tv71 = -104						; size = 4
_choke$1 = -36						; size = 4
_loss$2 = -32						; size = 4
_last_y$ = -28						; size = 4
_j$ = -24						; size = 4
_i$ = -20						; size = 4
_out$ = -16						; size = 4
_pty$ = -12						; size = 4
_ptx$ = -8						; size = 4
_colors$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_w$ = 16						; size = 4
_rect$ = 20						; size = 16
_count$ = 36						; size = 4
_avg$ = 40						; size = 4
_packet_loss$ = 44					; size = 4
_packet_choke$ = 48					; size = 4
_NetGraph_DrawTextFields PROC				; COMDAT

; 352  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi

; 353  : 	static int	lastout;
; 354  : 	rgba_t		colors = { 0.9 * 255, 0.9 * 255, 0.7 * 255, 255 };

	mov	BYTE PTR _colors$[ebp], 229		; 000000e5H
	mov	BYTE PTR _colors$[ebp+1], 229		; 000000e5H
	mov	BYTE PTR _colors$[ebp+2], 178		; 000000b2H
	mov	BYTE PTR _colors$[ebp+3], 255		; 000000ffH

; 355  : 	int		ptx = Q_max( x + w - NETGRAPH_LERP_HEIGHT - 1, 1 );

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax-25]
	cmp	edx, 1
	jle	SHORT $LN12@NetGraph_D
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax-25]
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN13@NetGraph_D
$LN12@NetGraph_D:
	mov	DWORD PTR tv71[ebp], 1
$LN13@NetGraph_D:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _ptx$[ebp], eax

; 356  : 	int		pty = Q_max( rect.top + rect.bottom - NETGRAPH_LERP_HEIGHT - 3, 1 );

	mov	eax, DWORD PTR _rect$[ebp+12]
	mov	ecx, DWORD PTR _rect$[ebp+8]
	lea	edx, DWORD PTR [ecx+eax-27]
	cmp	edx, 1
	jle	SHORT $LN14@NetGraph_D
	mov	eax, DWORD PTR _rect$[ebp+12]
	mov	ecx, DWORD PTR _rect$[ebp+8]
	lea	edx, DWORD PTR [ecx+eax-27]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN15@NetGraph_D
$LN14@NetGraph_D:
	mov	DWORD PTR tv79[ebp], 1
$LN15@NetGraph_D:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR _pty$[ebp], eax

; 357  : 	int		out, i = ( cls.netchan.outgoing_sequence - 1 ) & NET_TIMINGS_MASK;

	mov	eax, DWORD PTR _cls+26880
	sub	eax, 1
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _i$[ebp], eax

; 358  : 	int		j = cls.netchan.incoming_sequence & NET_TIMINGS_MASK;

	mov	eax, DWORD PTR _cls+26864
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _j$[ebp], eax

; 359  : 	int		last_y = y - net_graphheight->value;

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _net_graphheight
	subss	xmm0, DWORD PTR [eax+12]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _last_y$[ebp], ecx

; 360  : 
; 361  : 	if( count > 0 )

	cmp	DWORD PTR _count$[ebp], 0
	jle	$LN2@NetGraph_D

; 362  : 	{
; 363  : 		avg = avg / (float)( count - ( host.frametime * FRAMERATE_AVG_FRAC ));

	cvtsi2sd xmm0, DWORD PTR _count$[ebp]
	movsd	xmm1, QWORD PTR _host+1448
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	subsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR _avg$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _avg$[ebp], xmm1

; 364  : 
; 365  : 		if( cl_updaterate->value > 0.0f )

	mov	eax, DWORD PTR _cl_updaterate
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN4@NetGraph_D

; 366  : 			avg -= 1000.0f / cl_updaterate->value;

	mov	eax, DWORD PTR _cl_updaterate
	movss	xmm0, DWORD PTR __real@447a0000
	divss	xmm0, DWORD PTR [eax+12]
	movss	xmm1, DWORD PTR _avg$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _avg$[ebp], xmm1
$LN4@NetGraph_D:

; 367  : 
; 368  : 		// can't be below zero
; 369  : 		avg = Q_max( 0.0, avg );

	cvtss2sd xmm0, DWORD PTR _avg$[ebp]
	xorps	xmm1, xmm1
	comisd	xmm1, xmm0
	jbe	SHORT $LN16@NetGraph_D
	xorps	xmm0, xmm0
	movsd	QWORD PTR tv135[ebp], xmm0
	jmp	SHORT $LN17@NetGraph_D
$LN16@NetGraph_D:
	cvtss2sd xmm0, DWORD PTR _avg$[ebp]
	movsd	QWORD PTR tv135[ebp], xmm0
$LN17@NetGraph_D:
	cvtsd2ss xmm0, QWORD PTR tv135[ebp]
	movss	DWORD PTR _avg$[ebp], xmm0

; 370  : 	}

	jmp	SHORT $LN3@NetGraph_D
$LN2@NetGraph_D:

; 371  : 	else avg = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _avg$[ebp], xmm0
$LN3@NetGraph_D:

; 372  : 
; 373  : 	// move rolling average
; 374  : 	framerate = FRAMERATE_AVG_FRAC * host.frametime + ( 1.0 - FRAMERATE_AVG_FRAC ) * framerate;

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	mulsd	xmm0, QWORD PTR _host+1448
	cvtss2sd xmm1, DWORD PTR _framerate
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	addsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _framerate, xmm0

; 375  : 	Con_SetFont( 0 );

	push	0
	call	_Con_SetFont
	add	esp, 4

; 376  : 
; 377  : 	if( framerate > 0.0f )

	movss	xmm0, DWORD PTR _framerate
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN9@NetGraph_D

; 378  : 	{
; 379  : 		y -= net_graphheight->value;

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _net_graphheight
	subss	xmm0, DWORD PTR [eax+12]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _y$[ebp], ecx

; 380  : 
; 381  : 		Con_DrawString( x, y, va( "%.1f fps" , 1.0f / framerate ), colors );

	lea	eax, DWORD PTR _colors$[ebp]
	push	eax
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _framerate
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_08GCLKNLMG@?$CF?41f?5fps@
	call	_va
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_Con_DrawString
	add	esp, 16					; 00000010H

; 382  : 
; 383  : 		if( avg > 1.0f )

	movss	xmm0, DWORD PTR _avg$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN6@NetGraph_D

; 384  : 			Con_DrawString( x + 75, y, va( "%i ms" , (int)avg ), colors );

	lea	eax, DWORD PTR _colors$[ebp]
	push	eax
	cvttss2si ecx, DWORD PTR _avg$[ebp]
	push	ecx
	push	OFFSET ??_C@_05GJFBACJN@?$CFi?5ms@
	call	_va
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 75					; 0000004bH
	push	eax
	call	_Con_DrawString
	add	esp, 16					; 00000010H
$LN6@NetGraph_D:

; 385  : 
; 386  : 		y += 15;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 15					; 0000000fH
	mov	DWORD PTR _y$[ebp], eax

; 387  : 
; 388  : 		out = netstat_cmdinfo[i].size;

	imul	eax, DWORD PTR _i$[ebp], 12
	mov	ecx, DWORD PTR _netstat_cmdinfo[eax+4]
	mov	DWORD PTR _out$[ebp], ecx

; 389  : 		if( !out ) out = lastout;

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN7@NetGraph_D
	mov	eax, DWORD PTR ?lastout@?1??NetGraph_DrawTextFields@@9@9
	mov	DWORD PTR _out$[ebp], eax
	jmp	SHORT $LN8@NetGraph_D
$LN7@NetGraph_D:

; 390  : 		else lastout = out;

	mov	eax, DWORD PTR _out$[ebp]
	mov	DWORD PTR ?lastout@?1??NetGraph_DrawTextFields@@9@9, eax
$LN8@NetGraph_D:

; 391  : 
; 392  : 		Con_DrawString( x, y, va( "in :  %i %.2f k/s", netstat_graph[j].msgbytes, cls.netchan.flow[FLOW_INCOMING].avgkbytespersec ), colors );

	lea	eax, DWORD PTR _colors$[ebp]
	push	eax
	mov	ecx, 544				; 00000220H
	shl	ecx, 0
	cvtss2sd xmm0, DWORD PTR _cls[ecx+290004]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	imul	edx, DWORD PTR _j$[ebp], 18
	movzx	eax, WORD PTR _netstat_graph[edx+14]
	push	eax
	push	OFFSET ??_C@_0BC@EMBIEHNP@in?5?3?5?5?$CFi?5?$CF?42f?5k?1s@
	call	_va
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_Con_DrawString
	add	esp, 16					; 00000010H

; 393  : 		y += 15;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 15					; 0000000fH
	mov	DWORD PTR _y$[ebp], eax

; 394  : 
; 395  : 		Con_DrawString( x, y, va( "out:  %i %.2f k/s", out, cls.netchan.flow[FLOW_OUTGOING].avgkbytespersec ), colors );

	lea	eax, DWORD PTR _colors$[ebp]
	push	eax
	mov	ecx, 544				; 00000220H
	imul	edx, ecx, 0
	cvtss2sd xmm0, DWORD PTR _cls[edx+290004]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	push	OFFSET ??_C@_0BC@PMNHPCNO@out?3?5?5?$CFi?5?$CF?42f?5k?1s@
	call	_va
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_Con_DrawString
	add	esp, 16					; 00000010H

; 396  : 		y += 15;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 15					; 0000000fH
	mov	DWORD PTR _y$[ebp], eax

; 397  : 
; 398  : 		if( net_graph->value > 2 )

	mov	eax, DWORD PTR _net_graph
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR __real@40000000
	jbe	SHORT $LN9@NetGraph_D

; 399  : 		{
; 400  : 			int	loss = (int)(( packet_loss + PACKETLOSS_AVG_FRAC ) - 0.01 );

	cvtsi2sd xmm0, DWORD PTR _packet_loss$[ebp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	subsd	xmm0, QWORD PTR __real@3f847ae147ae147b
	cvttsd2si eax, xmm0
	mov	DWORD PTR _loss$2[ebp], eax

; 401  : 			int	choke = (int)(( packet_choke + PACKETCHOKE_AVG_FRAC ) - 0.01 );

	cvtsi2sd xmm0, DWORD PTR _packet_choke$[ebp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	subsd	xmm0, QWORD PTR __real@3f847ae147ae147b
	cvttsd2si eax, xmm0
	mov	DWORD PTR _choke$1[ebp], eax

; 402  : 
; 403  : 			Con_DrawString( x, y, va( "loss: %i choke: %i", loss, choke ), colors );

	lea	eax, DWORD PTR _colors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _choke$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _loss$2[ebp]
	push	edx
	push	OFFSET ??_C@_0BD@EBEODEIK@loss?3?5?$CFi?5choke?3?5?$CFi@
	call	_va
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_Con_DrawString
	add	esp, 16					; 00000010H
$LN9@NetGraph_D:

; 404  : 		}
; 405  : 	}
; 406  : 
; 407  : 	if( net_graph->value < 3 )

	mov	eax, DWORD PTR _net_graph
	movss	xmm0, DWORD PTR __real@40400000
	comiss	xmm0, DWORD PTR [eax+12]
	jbe	SHORT $LN10@NetGraph_D

; 408  : 		Con_DrawString( ptx, pty, va( "%i/s", (int)cl_cmdrate->value ), colors );

	lea	eax, DWORD PTR _colors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cl_cmdrate
	cvttss2si edx, DWORD PTR [ecx+12]
	push	edx
	push	OFFSET ??_C@_04EBNBDLPH@?$CFi?1s@
	call	_va
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _pty$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptx$[ebp]
	push	ecx
	call	_Con_DrawString
	add	esp, 16					; 00000010H
$LN10@NetGraph_D:

; 409  : 
; 410  : 	Con_DrawString( ptx, last_y, va( "%i/s" , (int)cl_updaterate->value ), colors );

	lea	eax, DWORD PTR _colors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cl_updaterate
	cvttss2si edx, DWORD PTR [ecx+12]
	push	edx
	push	OFFSET ??_C@_04EBNBDLPH@?$CFi?1s@
	call	_va
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _last_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptx$[ebp]
	push	ecx
	call	_Con_DrawString
	add	esp, 16					; 00000010H

; 411  : 
; 412  : 	Con_RestoreFont();

	call	_Con_RestoreFont

; 413  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_NetGraph_DrawTextFields ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _NetGraph_DrawHatches
_TEXT	SEGMENT
tv69 = -104						; size = 4
_starty$ = -36						; size = 4
_hatch$ = -32						; size = 16
_color$ = -16						; size = 4
_colorminor$ = -12					; size = 4
_ystep$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_NetGraph_DrawHatches PROC				; COMDAT

; 323  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 324  : 	int	ystep = (int)( 10.0f / net_scale->value );

	mov	eax, DWORD PTR _net_scale
	movss	xmm0, DWORD PTR __real@41200000
	divss	xmm0, DWORD PTR [eax+12]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _ystep$[ebp], ecx

; 325  : 	byte	colorminor[4] = { 0, 63, 63, 200 };

	mov	BYTE PTR _colorminor$[ebp], 0
	mov	BYTE PTR _colorminor$[ebp+1], 63	; 0000003fH
	mov	BYTE PTR _colorminor$[ebp+2], 63	; 0000003fH
	mov	BYTE PTR _colorminor$[ebp+3], 200	; 000000c8H

; 326  : 	byte	color[4] = { 0, 200, 0, 255 };

	mov	BYTE PTR _color$[ebp], 0
	mov	BYTE PTR _color$[ebp+1], 200		; 000000c8H
	mov	BYTE PTR _color$[ebp+2], 0
	mov	BYTE PTR _color$[ebp+3], 255		; 000000ffH

; 327  : 	wrect_t	hatch = { x, 4, y, 1 };

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _hatch$[ebp], eax
	mov	DWORD PTR _hatch$[ebp+4], 4
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _hatch$[ebp+8], eax
	mov	DWORD PTR _hatch$[ebp+12], 1

; 328  : 	int	starty;
; 329  : 
; 330  : 	ystep = Q_max( ystep, 1 );

	cmp	DWORD PTR _ystep$[ebp], 1
	jle	SHORT $LN9@NetGraph_D
	mov	eax, DWORD PTR _ystep$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN10@NetGraph_D
$LN9@NetGraph_D:
	mov	DWORD PTR tv69[ebp], 1
$LN10@NetGraph_D:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _ystep$[ebp], ecx

; 331  : 
; 332  : 	for( starty = hatch.top; hatch.top > 0 && ((starty - hatch.top) * net_scale->value < (maxmsgbytes + 50)); hatch.top -= ystep )

	mov	eax, DWORD PTR _hatch$[ebp+8]
	mov	DWORD PTR _starty$[ebp], eax
	jmp	SHORT $LN4@NetGraph_D
$LN2@NetGraph_D:
	mov	eax, DWORD PTR _hatch$[ebp+8]
	sub	eax, DWORD PTR _ystep$[ebp]
	mov	DWORD PTR _hatch$[ebp+8], eax
$LN4@NetGraph_D:
	cmp	DWORD PTR _hatch$[ebp+8], 0
	jle	SHORT $LN3@NetGraph_D
	mov	eax, DWORD PTR _starty$[ebp]
	sub	eax, DWORD PTR _hatch$[ebp+8]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _net_scale
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _maxmsgbytes
	add	edx, 50					; 00000032H
	cvtsi2ss xmm1, edx
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@NetGraph_D

; 333  : 	{
; 334  : 		if(!((int)((starty - hatch.top) * net_scale->value ) % 50 ))

	mov	eax, DWORD PTR _starty$[ebp]
	sub	eax, DWORD PTR _hatch$[ebp+8]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _net_scale
	mulss	xmm0, DWORD PTR [ecx+12]
	cvttss2si eax, xmm0
	cdq
	mov	ecx, 50					; 00000032H
	idiv	ecx
	test	edx, edx
	jne	SHORT $LN5@NetGraph_D

; 335  : 		{
; 336  : 			NetGraph_DrawRect( &hatch, color );

	lea	eax, DWORD PTR _color$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hatch$[ebp]
	push	ecx
	call	_NetGraph_DrawRect
	add	esp, 8

; 337  : 		}

	jmp	SHORT $LN7@NetGraph_D
$LN5@NetGraph_D:

; 338  : 		else if( ystep > 5 )

	cmp	DWORD PTR _ystep$[ebp], 5
	jle	SHORT $LN7@NetGraph_D

; 339  : 		{
; 340  : 			NetGraph_DrawRect( &hatch, colorminor );

	lea	eax, DWORD PTR _colorminor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hatch$[ebp]
	push	ecx
	call	_NetGraph_DrawRect
	add	esp, 8
$LN7@NetGraph_D:

; 341  : 		}
; 342  : 	}

	jmp	$LN2@NetGraph_D
$LN3@NetGraph_D:

; 343  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_NetGraph_DrawHatches ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _NetGraph_DrawTimes
_TEXT	SEGMENT
_oldh$1 = -52						; size = 4
_start$2 = -48						; size = 4
_fill$ = -44						; size = 16
_colors$ = -28						; size = 4
_h$ = -24						; size = 4
_a$ = -20						; size = 4
_extrap_point$ = -16					; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_rect$ = 8						; size = 16
_x$ = 24						; size = 4
_w$ = 28						; size = 4
_NetGraph_DrawTimes PROC				; COMDAT

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 249  : 	int	i, j, extrap_point = NETGRAPH_LERP_HEIGHT / 3, a, h;

	mov	DWORD PTR _extrap_point$[ebp], 8

; 250  : 	rgba_t	colors = { 0.9 * 255, 0.9 * 255, 0.7 * 255, 255 };

	mov	BYTE PTR _colors$[ebp], 229		; 000000e5H
	mov	BYTE PTR _colors$[ebp+1], 229		; 000000e5H
	mov	BYTE PTR _colors$[ebp+2], 178		; 000000b2H
	mov	BYTE PTR _colors$[ebp+3], 255		; 000000ffH

; 251  : 	wrect_t	fill;
; 252  : 
; 253  : 	for( a = 0; a < w; a++ )

	mov	DWORD PTR _a$[ebp], 0
	jmp	SHORT $LN4@NetGraph_D
$LN2@NetGraph_D:
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 1
	mov	DWORD PTR _a$[ebp], eax
$LN4@NetGraph_D:
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jge	$LN3@NetGraph_D

; 254  : 	{
; 255  : 		i = ( cls.netchan.outgoing_sequence - a ) & NET_TIMINGS_MASK;

	mov	eax, DWORD PTR _cls+26880
	sub	eax, DWORD PTR _a$[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _i$[ebp], eax

; 256  : 		h = ( netstat_cmdinfo[i].cmd_lerp / 3.0f ) * NETGRAPH_LERP_HEIGHT;

	imul	eax, DWORD PTR _i$[ebp], 12
	movss	xmm0, DWORD PTR _netstat_cmdinfo[eax]
	divss	xmm0, DWORD PTR __real@40400000
	mulss	xmm0, DWORD PTR __real@41c00000
	cvttss2si ecx, xmm0
	mov	DWORD PTR _h$[ebp], ecx

; 257  : 
; 258  : 		fill.left = x + w - a - 1;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _w$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	sub	eax, 1
	mov	DWORD PTR _fill$[ebp], eax

; 259  : 		fill.right = fill.bottom = 1;

	mov	DWORD PTR _fill$[ebp+12], 1
	mov	eax, DWORD PTR _fill$[ebp+12]
	mov	DWORD PTR _fill$[ebp+4], eax

; 260  : 		fill.top = rect.top + rect.bottom - 4;

	mov	eax, DWORD PTR _rect$[ebp+12]
	mov	ecx, DWORD PTR _rect$[ebp+8]
	lea	edx, DWORD PTR [ecx+eax-4]
	mov	DWORD PTR _fill$[ebp+8], edx

; 261  : 
; 262  : 		if( h >= extrap_point )

	mov	eax, DWORD PTR _h$[ebp]
	cmp	eax, DWORD PTR _extrap_point$[ebp]
	jl	$LN11@NetGraph_D

; 263  : 		{
; 264  : 			int	start = 0;

	mov	DWORD PTR _start$2[ebp], 0

; 265  : 
; 266  : 			h -= extrap_point;

	mov	eax, DWORD PTR _h$[ebp]
	sub	eax, DWORD PTR _extrap_point$[ebp]
	mov	DWORD PTR _h$[ebp], eax

; 267  : 			fill.top -= extrap_point;

	mov	eax, DWORD PTR _fill$[ebp+8]
	sub	eax, DWORD PTR _extrap_point$[ebp]
	mov	DWORD PTR _fill$[ebp+8], eax

; 268  : 
; 269  : 			if( !net_graphsolid->value )

	mov	eax, DWORD PTR _net_graphsolid
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN13@NetGraph_D

; 270  : 			{
; 271  : 				fill.top -= (h - 1);

	mov	eax, DWORD PTR _h$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _fill$[ebp+8]
	sub	ecx, eax
	mov	DWORD PTR _fill$[ebp+8], ecx

; 272  : 				start = (h - 1);

	mov	eax, DWORD PTR _h$[ebp]
	sub	eax, 1
	mov	DWORD PTR _start$2[ebp], eax
$LN13@NetGraph_D:

; 273  : 			}
; 274  : 
; 275  : 			for( j = start; j < h; j++ )

	mov	eax, DWORD PTR _start$2[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN7@NetGraph_D
$LN5@NetGraph_D:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@NetGraph_D:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _h$[ebp]
	jge	SHORT $LN6@NetGraph_D

; 276  : 			{
; 277  : 				NetGraph_DrawRect( &fill, netcolors[NETGRAPH_NET_COLORS + j + extrap_point] );

	mov	eax, DWORD PTR _extrap_point$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR [ecx+eax+5]
	lea	eax, DWORD PTR _netcolors[edx*4]
	push	eax
	lea	ecx, DWORD PTR _fill$[ebp]
	push	ecx
	call	_NetGraph_DrawRect
	add	esp, 8

; 278  : 				fill.top--;

	mov	eax, DWORD PTR _fill$[ebp+8]
	sub	eax, 1
	mov	DWORD PTR _fill$[ebp+8], eax

; 279  : 			}

	jmp	SHORT $LN5@NetGraph_D
$LN6@NetGraph_D:

; 280  : 		}

	jmp	SHORT $LN9@NetGraph_D
$LN11@NetGraph_D:

; 281  : 		else
; 282  : 		{
; 283  : 			int	oldh = h;

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _oldh$1[ebp], eax

; 284  : 
; 285  : 			fill.top -= h;

	mov	eax, DWORD PTR _fill$[ebp+8]
	sub	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _fill$[ebp+8], eax

; 286  : 			h = extrap_point - h;

	mov	eax, DWORD PTR _extrap_point$[ebp]
	sub	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR _h$[ebp], eax

; 287  : 
; 288  : 			if( !net_graphsolid->value )

	mov	eax, DWORD PTR _net_graphsolid
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN14@NetGraph_D

; 289  : 				h = 1;

	mov	DWORD PTR _h$[ebp], 1
$LN14@NetGraph_D:

; 290  : 
; 291  : 			for( j = 0; j < h; j++ )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN10@NetGraph_D
$LN8@NetGraph_D:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN10@NetGraph_D:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _h$[ebp]
	jge	SHORT $LN9@NetGraph_D

; 292  : 			{
; 293  : 				NetGraph_DrawRect( &fill, netcolors[NETGRAPH_NET_COLORS + j + oldh] );

	mov	eax, DWORD PTR _oldh$1[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	lea	edx, DWORD PTR [ecx+eax+5]
	lea	eax, DWORD PTR _netcolors[edx*4]
	push	eax
	lea	ecx, DWORD PTR _fill$[ebp]
	push	ecx
	call	_NetGraph_DrawRect
	add	esp, 8

; 294  : 				fill.top--;

	mov	eax, DWORD PTR _fill$[ebp+8]
	sub	eax, 1
	mov	DWORD PTR _fill$[ebp+8], eax

; 295  : 			}

	jmp	SHORT $LN8@NetGraph_D
$LN9@NetGraph_D:

; 296  : 		}
; 297  : 
; 298  : 		fill.top = rect.top + rect.bottom - 4 - extrap_point;

	mov	eax, DWORD PTR _rect$[ebp+12]
	mov	ecx, DWORD PTR _rect$[ebp+8]
	lea	edx, DWORD PTR [ecx+eax-4]
	sub	edx, DWORD PTR _extrap_point$[ebp]
	mov	DWORD PTR _fill$[ebp+8], edx

; 299  : 
; 300  : 		if( NetGraph_AtEdge( a, w ))

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_NetGraph_AtEdge
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@NetGraph_D

; 301  : 			NetGraph_DrawRect( &fill, extrap_base_color );

	push	OFFSET _extrap_base_color
	lea	eax, DWORD PTR _fill$[ebp]
	push	eax
	call	_NetGraph_DrawRect
	add	esp, 8
$LN15@NetGraph_D:

; 302  : 
; 303  : 		fill.top = rect.top + rect.bottom - 4;

	mov	eax, DWORD PTR _rect$[ebp+12]
	mov	ecx, DWORD PTR _rect$[ebp+8]
	lea	edx, DWORD PTR [ecx+eax-4]
	mov	DWORD PTR _fill$[ebp+8], edx

; 304  : 
; 305  : 		if( netstat_cmdinfo[i].sent )

	imul	eax, DWORD PTR _i$[ebp], 12
	cmp	DWORD PTR _netstat_cmdinfo[eax+8], 0
	je	SHORT $LN16@NetGraph_D

; 306  : 			NetGraph_DrawRect( &fill, sendcolor );

	push	OFFSET _sendcolor
	lea	eax, DWORD PTR _fill$[ebp]
	push	eax
	call	_NetGraph_DrawRect
	add	esp, 8
	jmp	SHORT $LN17@NetGraph_D
$LN16@NetGraph_D:

; 307  : 		else NetGraph_DrawRect( &fill, holdcolor );

	push	OFFSET _holdcolor
	lea	eax, DWORD PTR _fill$[ebp]
	push	eax
	call	_NetGraph_DrawRect
	add	esp, 8
$LN17@NetGraph_D:

; 308  : 	}

	jmp	$LN2@NetGraph_D
$LN3@NetGraph_D:

; 309  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_NetGraph_DrawTimes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _NetGraph_GetFrameData
_TEXT	SEGMENT
tv137 = -116						; size = 8
tv193 = -112						; size = 4
tv69 = -112						; size = 4
_frame_latency$1 = -44					; size = 4
_g$2 = -40						; size = 4
_p$3 = -36						; size = 4
_f$4 = -32						; size = 4
_choke$ = -28						; size = 4
_loss$ = -24						; size = 4
_newtime$ = -20						; size = 8
_loss_count$ = -12					; size = 4
_choke_count$ = -8					; size = 4
_i$ = -4						; size = 4
_latency$ = 8						; size = 4
_latency_count$ = 12					; size = 4
_NetGraph_GetFrameData PROC				; COMDAT

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi

; 167  : 	int		i, choke_count = 0, loss_count = 0;

	mov	DWORD PTR _choke_count$[ebp], 0
	mov	DWORD PTR _loss_count$[ebp], 0

; 168  : 	double		newtime = Sys_DoubleTime();

	call	_Sys_DoubleTime
	fstp	QWORD PTR _newtime$[ebp]

; 169  : 	static double	nexttime = 0;
; 170  : 	float		loss, choke;
; 171  : 
; 172  : 	*latency_count = 0;

	mov	eax, DWORD PTR _latency_count$[ebp]
	mov	DWORD PTR [eax], 0

; 173  : 	*latency = 0.0f;

	mov	eax, DWORD PTR _latency$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0

; 174  : 
; 175  : 	if( newtime >= nexttime )

	movsd	xmm0, QWORD PTR _newtime$[ebp]
	comisd	xmm0, QWORD PTR ?nexttime@?1??NetGraph_GetFrameData@@9@9
	jb	SHORT $LN8@NetGraph_G

; 176  : 	{
; 177  : 		// soft fading of net peak usage
; 178  : 		maxmsgbytes = Q_max( 0, maxmsgbytes - 50 );

	mov	eax, DWORD PTR _maxmsgbytes
	sub	eax, 50					; 00000032H
	jns	SHORT $LN20@NetGraph_G
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN21@NetGraph_G
$LN20@NetGraph_G:
	mov	ecx, DWORD PTR _maxmsgbytes
	sub	ecx, 50					; 00000032H
	mov	DWORD PTR tv69[ebp], ecx
$LN21@NetGraph_G:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _maxmsgbytes, edx

; 179  : 		nexttime = newtime + 0.05;

	movsd	xmm0, QWORD PTR _newtime$[ebp]
	addsd	xmm0, QWORD PTR __real@3fa999999999999a
	movsd	QWORD PTR ?nexttime@?1??NetGraph_GetFrameData@@9@9, xmm0
$LN8@NetGraph_G:

; 180  : 	}
; 181  : 
; 182  : 	for( i = cls.netchan.incoming_sequence - CL_UPDATE_BACKUP + 1; i <= cls.netchan.incoming_sequence; i++ )

	mov	eax, DWORD PTR _cls+26864
	sub	eax, DWORD PTR _CL_UPDATE_BACKUP
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN4@NetGraph_G
$LN2@NetGraph_G:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@NetGraph_G:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cls+26864
	jg	$LN3@NetGraph_G

; 183  : 	{
; 184  : 		frame_t *f = cl.frames + ( i & CL_UPDATE_MASK );

	mov	eax, DWORD PTR _CL_UPDATE_BACKUP
	sub	eax, 1
	and	eax, DWORD PTR _i$[ebp]
	imul	ecx, eax, 24056
	add	ecx, OFFSET _cl+88
	mov	DWORD PTR _f$4[ebp], ecx

; 185  : 		struct packet_latency_t *p = netstat_packet_latency + ( i & NET_TIMINGS_MASK );

	mov	eax, DWORD PTR _i$[ebp]
	and	eax, 1023				; 000003ffH
	lea	ecx, DWORD PTR _netstat_packet_latency[eax*8]
	mov	DWORD PTR _p$3[ebp], ecx

; 186  : 		netbandwidthgraph_t *g = netstat_graph + ( i & NET_TIMINGS_MASK );

	mov	eax, DWORD PTR _i$[ebp]
	and	eax, 1023				; 000003ffH
	imul	ecx, eax, 18
	add	ecx, OFFSET _netstat_graph
	mov	DWORD PTR _g$2[ebp], ecx

; 187  : 
; 188  : 		p->choked = f->choked;

	mov	eax, DWORD PTR _p$3[ebp]
	mov	ecx, DWORD PTR _f$4[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+4], edx

; 189  : 		if( p->choked ) choke_count++;

	mov	eax, DWORD PTR _p$3[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN9@NetGraph_G
	mov	eax, DWORD PTR _choke_count$[ebp]
	add	eax, 1
	mov	DWORD PTR _choke_count$[ebp], eax
$LN9@NetGraph_G:

; 190  : 
; 191  : 		if( !f->valid )

	mov	eax, DWORD PTR _f$4[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN10@NetGraph_G

; 192  : 		{
; 193  : 			p->latency = 9998; // broken delta

	mov	eax, DWORD PTR _p$3[ebp]
	mov	DWORD PTR [eax], 9998			; 0000270eH

; 194  : 		}

	jmp	$LN16@NetGraph_G
$LN10@NetGraph_G:

; 195  : 		else if( f->receivedtime == -1.0 )

	mov	eax, DWORD PTR _f$4[ebp]
	movsd	xmm0, QWORD PTR [eax]
	ucomisd	xmm0, QWORD PTR __real@bff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN12@NetGraph_G

; 196  : 		{
; 197  : 			p->latency = 9999; // dropped

	mov	eax, DWORD PTR _p$3[ebp]
	mov	DWORD PTR [eax], 9999			; 0000270fH

; 198  : 			loss_count++;

	mov	eax, DWORD PTR _loss_count$[ebp]
	add	eax, 1
	mov	DWORD PTR _loss_count$[ebp], eax

; 199  : 		}

	jmp	$LN16@NetGraph_G
$LN12@NetGraph_G:

; 200  : 		else if( f->receivedtime == -3.0 )

	mov	eax, DWORD PTR _f$4[ebp]
	movsd	xmm0, QWORD PTR [eax]
	ucomisd	xmm0, QWORD PTR __real@c008000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN14@NetGraph_G

; 201  : 		{
; 202  : 			p->latency = 9997; // skipped

	mov	eax, DWORD PTR _p$3[ebp]
	mov	DWORD PTR [eax], 9997			; 0000270dH

; 203  : 		}

	jmp	$LN16@NetGraph_G
$LN14@NetGraph_G:

; 204  : 		else
; 205  : 		{
; 206  : 			int frame_latency = Q_min( 1.0f, f->latency );

	mov	eax, DWORD PTR _f$4[ebp]
	movsd	xmm0, QWORD PTR [eax+8]
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jbe	SHORT $LN22@NetGraph_G
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR tv137[ebp], xmm0
	jmp	SHORT $LN23@NetGraph_G
$LN22@NetGraph_G:
	mov	ecx, DWORD PTR _f$4[ebp]
	movsd	xmm0, QWORD PTR [ecx+8]
	movsd	QWORD PTR tv137[ebp], xmm0
$LN23@NetGraph_G:
	cvttsd2si edx, QWORD PTR tv137[ebp]
	mov	DWORD PTR _frame_latency$1[ebp], edx

; 207  : 			p->latency = (( frame_latency + 0.1 ) / 1.1 ) * ( net_graphheight->value - NETGRAPH_LERP_HEIGHT - 2 );

	cvtsi2sd xmm0, DWORD PTR _frame_latency$1[ebp]
	addsd	xmm0, QWORD PTR __real@3fb999999999999a
	divsd	xmm0, QWORD PTR __real@3ff199999999999a
	mov	eax, DWORD PTR _net_graphheight
	movss	xmm1, DWORD PTR [eax+12]
	subss	xmm1, DWORD PTR __real@41c00000
	subss	xmm1, DWORD PTR __real@40000000
	cvtss2sd xmm1, xmm1
	mulsd	xmm0, xmm1
	cvttsd2si ecx, xmm0
	mov	edx, DWORD PTR _p$3[ebp]
	mov	DWORD PTR [edx], ecx

; 208  : 
; 209  : 			if( i > cls.netchan.incoming_sequence - NUM_LATENCY_SAMPLES )

	mov	eax, DWORD PTR _cls+26864
	sub	eax, 8
	cmp	DWORD PTR _i$[ebp], eax
	jle	SHORT $LN16@NetGraph_G

; 210  : 			{
; 211  : 				(*latency) += 1000.0f * f->latency;

	mov	eax, DWORD PTR _f$4[ebp]
	movsd	xmm0, QWORD PTR __real@408f400000000000
	mulsd	xmm0, QWORD PTR [eax+8]
	mov	ecx, DWORD PTR _latency$[ebp]
	cvtss2sd xmm1, DWORD PTR [ecx]
	addsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	mov	edx, DWORD PTR _latency$[ebp]
	movss	DWORD PTR [edx], xmm0

; 212  : 				(*latency_count)++;

	mov	eax, DWORD PTR _latency_count$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _latency_count$[ebp]
	mov	DWORD PTR [edx], ecx
$LN16@NetGraph_G:

; 213  : 			}
; 214  : 		}
; 215  : 
; 216  : 		memcpy( g, &f->graphdata, sizeof( netbandwidthgraph_t ));

	push	18					; 00000012H
	mov	eax, DWORD PTR _f$4[ebp]
	add	eax, 23768				; 00005cd8H
	push	eax
	mov	ecx, DWORD PTR _g$2[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 217  : 
; 218  : 		if( g->msgbytes > maxmsgbytes )

	mov	eax, DWORD PTR _g$2[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cmp	ecx, DWORD PTR _maxmsgbytes
	jle	SHORT $LN17@NetGraph_G

; 219  : 			maxmsgbytes = g->msgbytes;

	mov	eax, DWORD PTR _g$2[ebp]
	movzx	ecx, WORD PTR [eax+14]
	mov	DWORD PTR _maxmsgbytes, ecx
$LN17@NetGraph_G:

; 220  : 	}

	jmp	$LN2@NetGraph_G
$LN3@NetGraph_G:

; 221  : 
; 222  : 	if( maxmsgbytes > 1000 )

	cmp	DWORD PTR _maxmsgbytes, 1000		; 000003e8H
	jle	SHORT $LN18@NetGraph_G

; 223  : 		maxmsgbytes = 1000;

	mov	DWORD PTR _maxmsgbytes, 1000		; 000003e8H
$LN18@NetGraph_G:

; 224  : 
; 225  : 	for( i = cls.netchan.outgoing_sequence - CL_UPDATE_BACKUP + 1; i <= cls.netchan.outgoing_sequence; i++ )

	mov	eax, DWORD PTR _cls+26880
	sub	eax, DWORD PTR _CL_UPDATE_BACKUP
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN7@NetGraph_G
$LN5@NetGraph_G:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@NetGraph_G:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cls+26880
	jg	$LN6@NetGraph_G

; 226  : 	{
; 227  : 		netstat_cmdinfo[i & NET_TIMINGS_MASK].cmd_lerp = cl.commands[i & CL_UPDATE_MASK].frame_lerp;

	mov	eax, DWORD PTR _CL_UPDATE_BACKUP
	sub	eax, 1
	and	eax, DWORD PTR _i$[ebp]
	imul	ecx, eax, 88
	mov	edx, DWORD PTR _i$[ebp]
	and	edx, 1023				; 000003ffH
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _cl[ecx+1539688]
	mov	DWORD PTR _netstat_cmdinfo[eax], ecx

; 228  : 		netstat_cmdinfo[i & NET_TIMINGS_MASK].sent = cl.commands[i & CL_UPDATE_MASK].heldback ? false : true;

	mov	eax, DWORD PTR _CL_UPDATE_BACKUP
	sub	eax, 1
	and	eax, DWORD PTR _i$[ebp]
	imul	ecx, eax, 88
	cmp	DWORD PTR _cl[ecx+1539752], 0
	je	SHORT $LN24@NetGraph_G
	mov	DWORD PTR tv193[ebp], 0
	jmp	SHORT $LN25@NetGraph_G
$LN24@NetGraph_G:
	mov	DWORD PTR tv193[ebp], 1
$LN25@NetGraph_G:
	mov	edx, DWORD PTR _i$[ebp]
	and	edx, 1023				; 000003ffH
	imul	eax, edx, 12
	mov	ecx, DWORD PTR tv193[ebp]
	mov	DWORD PTR _netstat_cmdinfo[eax+8], ecx

; 229  : 		netstat_cmdinfo[i & NET_TIMINGS_MASK].size = cl.commands[i & CL_UPDATE_MASK].sendsize;

	mov	eax, DWORD PTR _CL_UPDATE_BACKUP
	sub	eax, 1
	and	eax, DWORD PTR _i$[ebp]
	imul	ecx, eax, 88
	mov	edx, DWORD PTR _i$[ebp]
	and	edx, 1023				; 000003ffH
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _cl[ecx+1539756]
	mov	DWORD PTR _netstat_cmdinfo[eax+4], ecx

; 230  : 	}

	jmp	$LN5@NetGraph_G
$LN6@NetGraph_G:

; 231  : 
; 232  : 	// packet loss
; 233  : 	loss = 100.0 * (float)loss_count / CL_UPDATE_BACKUP;

	cvtsi2ss xmm0, DWORD PTR _loss_count$[ebp]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@4059000000000000
	cvtsi2sd xmm1, DWORD PTR _CL_UPDATE_BACKUP
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _loss$[ebp], xmm0

; 234  : 	packet_loss = PACKETLOSS_AVG_FRAC * packet_loss + ( 1.0 - PACKETLOSS_AVG_FRAC ) * loss;

	cvtss2sd xmm0, DWORD PTR _packet_loss
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtss2sd xmm1, DWORD PTR _loss$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	addsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _packet_loss, xmm0

; 235  : 
; 236  : 	// packet choke
; 237  : 	choke = 100.0 * (float)choke_count / CL_UPDATE_BACKUP;

	cvtsi2ss xmm0, DWORD PTR _choke_count$[ebp]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@4059000000000000
	cvtsi2sd xmm1, DWORD PTR _CL_UPDATE_BACKUP
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _choke$[ebp], xmm0

; 238  : 	packet_choke = PACKETCHOKE_AVG_FRAC * packet_choke + ( 1.0 - PACKETCHOKE_AVG_FRAC ) * choke;

	cvtss2sd xmm0, DWORD PTR _packet_choke
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtss2sd xmm1, DWORD PTR _choke$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	addsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _packet_choke, xmm0

; 239  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_NetGraph_GetFrameData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _NetGraph_InitColors
_TEXT	SEGMENT
_f$ = -56						; size = 4
_hfrac$ = -52						; size = 4
_i$ = -48						; size = 4
_dc$ = -44						; size = 24
_maxcolor$ = -20					; size = 6
_mincolor$ = -12					; size = 6
__$ArrayPad$ = -4					; size = 4
_NetGraph_InitColors PROC				; COMDAT

; 112  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 113  : 	byte	mincolor[2][3];
; 114  : 	byte	maxcolor[2][3];
; 115  : 	float	dc[2][3];
; 116  : 	int	i, hfrac;	
; 117  : 	float	f;
; 118  :  
; 119  : 	mincolor[0][0] = 63;

	mov	eax, 3
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _mincolor$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR [edx+ecx], 63			; 0000003fH

; 120  : 	mincolor[0][1] = 0;

	mov	eax, 3
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _mincolor$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	mov	BYTE PTR [edx+eax], 0

; 121  : 	mincolor[0][2] = 100;

	mov	eax, 3
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _mincolor$[ebp+ecx]
	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR [edx+eax], 100			; 00000064H

; 122  :  
; 123  : 	maxcolor[0][0] = 0;

	mov	eax, 3
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _maxcolor$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR [edx+ecx], 0

; 124  : 	maxcolor[0][1] = 63;

	mov	eax, 3
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _maxcolor$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	mov	BYTE PTR [edx+eax], 63			; 0000003fH

; 125  : 	maxcolor[0][2] = 255;

	mov	eax, 3
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _maxcolor$[ebp+ecx]
	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR [edx+eax], 255			; 000000ffH

; 126  :  
; 127  : 	mincolor[1][0] = 255;

	mov	eax, 3
	shl	eax, 0
	lea	ecx, DWORD PTR _mincolor$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	mov	BYTE PTR [ecx+eax], 255			; 000000ffH

; 128  : 	mincolor[1][1] = 127;

	mov	eax, 3
	shl	eax, 0
	lea	ecx, DWORD PTR _mincolor$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR [ecx+edx], 127			; 0000007fH

; 129  : 	mincolor[1][2] = 0;

	mov	eax, 3
	shl	eax, 0
	lea	ecx, DWORD PTR _mincolor$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	mov	BYTE PTR [ecx+edx], 0

; 130  :  
; 131  : 	maxcolor[1][0] = 250;

	mov	eax, 3
	shl	eax, 0
	lea	ecx, DWORD PTR _maxcolor$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	mov	BYTE PTR [ecx+eax], 250			; 000000faH

; 132  : 	maxcolor[1][1] = 0;

	mov	eax, 3
	shl	eax, 0
	lea	ecx, DWORD PTR _maxcolor$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR [ecx+edx], 0

; 133  : 	maxcolor[1][2] = 0;

	mov	eax, 3
	shl	eax, 0
	lea	ecx, DWORD PTR _maxcolor$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	mov	BYTE PTR [ecx+edx], 0

; 134  :  
; 135  : 	for( i = 0; i < 3; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@NetGraph_I
$LN2@NetGraph_I:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@NetGraph_I:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN3@NetGraph_I

; 136  : 	{
; 137  : 		dc[0][i] = (float)(maxcolor[0][i] - mincolor[0][i]);

	mov	eax, 3
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _maxcolor$[ebp+ecx]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 3
	imul	eax, edx, 0
	lea	edx, DWORD PTR _mincolor$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [edx+eax]
	sub	ecx, edx
	cvtsi2ss xmm0, ecx
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _dc$[ebp+ecx]
	mov	eax, DWORD PTR _i$[ebp]
	movss	DWORD PTR [edx+eax*4], xmm0

; 138  : 		dc[1][i] = (float)(maxcolor[1][i] - mincolor[1][i]);

	mov	eax, 3
	shl	eax, 0
	lea	ecx, DWORD PTR _maxcolor$[ebp+eax]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 3
	shl	ecx, 0
	lea	edx, DWORD PTR _mincolor$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [edx+ecx]
	sub	eax, edx
	cvtsi2ss xmm0, eax
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR _dc$[ebp+eax]
	mov	edx, DWORD PTR _i$[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0

; 139  : 	}

	jmp	$LN2@NetGraph_I
$LN3@NetGraph_I:

; 140  :  
; 141  : 	hfrac = NETGRAPH_LERP_HEIGHT / 3;

	mov	DWORD PTR _hfrac$[ebp], 8

; 142  :  
; 143  : 	for( i = 0; i < NETGRAPH_LERP_HEIGHT; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@NetGraph_I
$LN5@NetGraph_I:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@NetGraph_I:
	cmp	DWORD PTR _i$[ebp], 24			; 00000018H
	jge	$LN6@NetGraph_I

; 144  : 	{
; 145  : 		if( i < hfrac )

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _hfrac$[ebp]
	jge	$LN8@NetGraph_I

; 146  : 		{
; 147  : 			f = (float)i / (float)hfrac;

	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	cvtsi2ss xmm1, DWORD PTR _hfrac$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _f$[ebp], xmm0

; 148  : 			VectorMA( mincolor[0], f, dc[0], netcolors[NETGRAPH_NET_COLORS + i] );

	mov	eax, 3
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _mincolor$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	cvtsi2ss xmm0, edx
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _dc$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm1, DWORD PTR _f$[ebp]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mov	edx, 1
	imul	eax, edx, 0
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _netcolors[eax+edx*4+20], cl
	mov	eax, 3
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _mincolor$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax]
	cvtsi2ss xmm0, ecx
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _dc$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR _f$[ebp]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 1
	shl	eax, 0
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _netcolors[eax+edx*4+20], cl
	mov	eax, 3
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _mincolor$[ebp+ecx]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [edx+eax]
	cvtsi2ss xmm0, ecx
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _dc$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR _f$[ebp]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 1
	shl	eax, 1
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _netcolors[eax+edx*4+20], cl

; 149  : 		}

	jmp	$LN9@NetGraph_I
$LN8@NetGraph_I:

; 150  : 		else
; 151  : 		{
; 152  : 			f = (float)(i - hfrac) / (float)(NETGRAPH_LERP_HEIGHT - hfrac );

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, DWORD PTR _hfrac$[ebp]
	cvtsi2ss xmm0, eax
	mov	ecx, 24					; 00000018H
	sub	ecx, DWORD PTR _hfrac$[ebp]
	cvtsi2ss xmm1, ecx
	divss	xmm0, xmm1
	movss	DWORD PTR _f$[ebp], xmm0

; 153  : 			VectorMA( mincolor[1], f, dc[1], netcolors[NETGRAPH_NET_COLORS + i] );

	mov	eax, 3
	shl	eax, 0
	lea	ecx, DWORD PTR _mincolor$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	cvtsi2ss xmm0, ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR _dc$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm1, DWORD PTR _f$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx]
	addss	xmm0, xmm1
	mov	eax, 1
	imul	ecx, eax, 0
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _netcolors[ecx+eax*4+20], dl
	mov	ecx, 3
	shl	ecx, 0
	lea	edx, DWORD PTR _mincolor$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax]
	cvtsi2ss xmm0, ecx
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR _dc$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR _f$[ebp]
	mulss	xmm1, DWORD PTR [eax+ecx]
	addss	xmm0, xmm1
	mov	edx, 1
	shl	edx, 0
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _netcolors[edx+ecx*4+20], al
	mov	edx, 3
	shl	edx, 0
	lea	eax, DWORD PTR _mincolor$[ebp+edx]
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [eax+ecx]
	cvtsi2ss xmm0, edx
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR _dc$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR _f$[ebp]
	mulss	xmm1, DWORD PTR [ecx+edx]
	addss	xmm0, xmm1
	mov	eax, 1
	shl	eax, 1
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _netcolors[eax+edx*4+20], cl
$LN9@NetGraph_I:

; 154  : 		}
; 155  : 	}

	jmp	$LN5@NetGraph_I
$LN6@NetGraph_I:

; 156  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_NetGraph_InitColors ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _NetGraph_AtEdge
_TEXT	SEGMENT
_x$ = 8							; size = 4
_width$ = 12						; size = 4
_NetGraph_AtEdge PROC					; COMDAT

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 95   : 	if( x > 3 )

	cmp	DWORD PTR _x$[ebp], 3
	jle	SHORT $LN2@NetGraph_A

; 96   : 	{
; 97   : 		if( x >= width - 4 )

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 4
	cmp	DWORD PTR _x$[ebp], eax
	jl	SHORT $LN3@NetGraph_A

; 98   : 			return true;

	mov	eax, 1
	jmp	SHORT $LN1@NetGraph_A
$LN3@NetGraph_A:

; 99   : 		return false;

	xor	eax, eax
	jmp	SHORT $LN1@NetGraph_A
$LN2@NetGraph_A:

; 100  : 	}
; 101  : 	return true;

	mov	eax, 1
$LN1@NetGraph_A:

; 102  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_NetGraph_AtEdge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _NetGraph_DrawRect
_TEXT	SEGMENT
_rect$ = 8						; size = 4
_colors$ = 12						; size = 4
_NetGraph_DrawRect PROC					; COMDAT

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 78   : 	pglColor4ubv( colors );	// color for this quad

	mov	eax, DWORD PTR _colors$[ebp]
	push	eax
	call	DWORD PTR _pglColor4ubv

; 79   : 
; 80   : 	pglVertex2f( rect->left, rect->top );

	mov	eax, DWORD PTR _rect$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _rect$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 81   : 	pglVertex2f( rect->left + rect->right, rect->top );

	mov	eax, DWORD PTR _rect$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _rect$[ebp]
	add	edx, DWORD PTR [eax+4]
	cvtsi2ss xmm0, edx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 82   : 	pglVertex2f( rect->left + rect->right, rect->top + rect->bottom );

	mov	eax, DWORD PTR _rect$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _rect$[ebp]
	add	ecx, DWORD PTR [edx+12]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _rect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _rect$[ebp]
	add	ecx, DWORD PTR [edx+4]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 83   : 	pglVertex2f( rect->left, rect->top + rect->bottom );

	mov	eax, DWORD PTR _rect$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _rect$[ebp]
	add	ecx, DWORD PTR [edx+12]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _rect$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 84   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_NetGraph_DrawRect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _SCR_DrawNetGraph
_TEXT	SEGMENT
_y$ = -40						; size = 4
_x$ = -36						; size = 4
_w$ = -32						; size = 4
_ping_count$ = -28					; size = 4
_avg_ping$ = -24					; size = 4
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_SCR_DrawNetGraph PROC					; COMDAT

; 629  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 630  : 	wrect_t	rect;
; 631  : 	float	avg_ping;
; 632  : 	int	ping_count;
; 633  : 	int	w, x, y;
; 634  : 
; 635  : 	if( !host.allow_console )

	cmp	DWORD PTR _host+34336, 0
	jne	SHORT $LN2@SCR_DrawNe

; 636  : 		return;

	jmp	$LN6@SCR_DrawNe
$LN2@SCR_DrawNe:

; 637  : 
; 638  : 	if( cls.state != ca_active )

	cmp	DWORD PTR _cls, 4
	je	SHORT $LN3@SCR_DrawNe

; 639  : 		return;

	jmp	$LN6@SCR_DrawNe
$LN3@SCR_DrawNe:

; 640  : 
; 641  : 	if( !net_graph->value )

	mov	eax, DWORD PTR _net_graph
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@SCR_DrawNe

; 642  : 		return;

	jmp	$LN6@SCR_DrawNe
$LN4@SCR_DrawNe:

; 643  : 
; 644  : 	if( net_scale->value <= 0 )

	mov	eax, DWORD PTR _net_scale
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [eax+12]
	jb	SHORT $LN5@SCR_DrawNe

; 645  : 		Cvar_SetValue( "net_scale", 0.1f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09LBNBCOKH@net_scale@
	call	_Cvar_SetValue
	add	esp, 8
$LN5@SCR_DrawNe:

; 646  : 
; 647  : 	NetGraph_GetScreenPos( &rect, &w, &x, &y );

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	lea	edx, DWORD PTR _w$[ebp]
	push	edx
	lea	eax, DWORD PTR _rect$[ebp]
	push	eax
	call	_NetGraph_GetScreenPos
	add	esp, 16					; 00000010H

; 648  : 
; 649  : 	NetGraph_GetFrameData( &avg_ping, &ping_count );

	lea	eax, DWORD PTR _ping_count$[ebp]
	push	eax
	lea	ecx, DWORD PTR _avg_ping$[ebp]
	push	ecx
	call	_NetGraph_GetFrameData
	add	esp, 8

; 650  : 
; 651  : 	NetGraph_DrawTextFields( x, y, w, rect, ping_count, avg_ping, packet_loss, packet_choke );

	cvttss2si eax, DWORD PTR _packet_choke
	push	eax
	cvttss2si ecx, DWORD PTR _packet_loss
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _avg_ping$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ping_count$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_NetGraph_DrawTextFields
	add	esp, 44					; 0000002cH

; 652  : 
; 653  : 	if( net_graph->value < 3 )

	mov	eax, DWORD PTR _net_graph
	movss	xmm0, DWORD PTR __real@40400000
	comiss	xmm0, DWORD PTR [eax+12]
	jbe	$LN6@SCR_DrawNe

; 654  : 	{
; 655  : 		pglEnable( GL_BLEND );

	push	3042					; 00000be2H
	call	DWORD PTR _pglEnable

; 656  : 		pglDisable( GL_TEXTURE_2D );

	push	3553					; 00000de1H
	call	DWORD PTR _pglDisable

; 657  : 		pglTexEnvf( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE );

	push	ecx
	movss	xmm0, DWORD PTR __real@46040000
	movss	DWORD PTR [esp], xmm0
	push	8704					; 00002200H
	push	8960					; 00002300H
	call	DWORD PTR _pglTexEnvf

; 658  : 		pglBlendFunc( GL_SRC_ALPHA, GL_ONE );

	push	1
	push	770					; 00000302H
	call	DWORD PTR _pglBlendFunc

; 659  : 		pglBegin( GL_QUADS ); // draw all the fills as a long solid sequence of quads for speedup reasons

	push	7
	call	DWORD PTR _pglBegin

; 660  : 
; 661  : 		// NOTE: fill colors without texture at this point
; 662  : 		NetGraph_DrawDataUsage( x, y, w );

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_NetGraph_DrawDataUsage
	add	esp, 12					; 0000000cH

; 663  : 		NetGraph_DrawTimes( rect, x, w );

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	call	_NetGraph_DrawTimes
	add	esp, 24					; 00000018H

; 664  : 
; 665  : 		pglEnd();

	call	DWORD PTR _pglEnd

; 666  : 		pglColor4ub( 255, 255, 255, 255 );

	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	call	DWORD PTR _pglColor4ub

; 667  : 		pglEnable( GL_TEXTURE_2D );

	push	3553					; 00000de1H
	call	DWORD PTR _pglEnable

; 668  : 		pglDisable( GL_BLEND );

	push	3042					; 00000be2H
	call	DWORD PTR _pglDisable
$LN6@SCR_DrawNe:

; 669  : 	}
; 670  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_DrawNetGraph ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_netgraph.c
;	COMDAT _CL_InitNetgraph
_TEXT	SEGMENT
_CL_InitNetgraph PROC					; COMDAT

; 673  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 674  : 	net_graph = Cvar_Get( "net_graph", "0", FCVAR_ARCHIVE, "draw network usage graph" );

	push	OFFSET ??_C@_0BJ@PHFNKGGL@draw?5network?5usage?5graph@
	push	1
	push	OFFSET ??_C@_01GBGANLPD@0@
	push	OFFSET ??_C@_09NEIEPEEB@net_graph@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _net_graph, eax

; 675  : 	net_graphpos = Cvar_Get( "net_graphpos", "1", FCVAR_ARCHIVE, "network usage graph position" );

	push	OFFSET ??_C@_0BN@NHFBDDFJ@network?5usage?5graph?5position@
	push	1
	push	OFFSET ??_C@_01HIHLOKLC@1@
	push	OFFSET ??_C@_0N@MHPLICBH@net_graphpos@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _net_graphpos, eax

; 676  : 	net_scale = Cvar_Get( "net_scale", "5", FCVAR_ARCHIVE, "network usage graph scale level" );

	push	OFFSET ??_C@_0CA@MGOENFJH@network?5usage?5graph?5scale?5level@
	push	1
	push	OFFSET ??_C@_01BMBHCPLG@5@
	push	OFFSET ??_C@_09LBNBCOKH@net_scale@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _net_scale, eax

; 677  : 	net_graphwidth = Cvar_Get( "net_graphwidth", "192", FCVAR_ARCHIVE, "network usage graph width" );

	push	OFFSET ??_C@_0BK@CMGLPNGA@network?5usage?5graph?5width@
	push	1
	push	OFFSET ??_C@_03FAOGDFEJ@192@
	push	OFFSET ??_C@_0P@KHGCCKHM@net_graphwidth@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _net_graphwidth, eax

; 678  : 	net_graphheight = Cvar_Get( "net_graphheight", "64", FCVAR_ARCHIVE, "network usage graph height" );

	push	OFFSET ??_C@_0BL@FKKFKGML@network?5usage?5graph?5height@
	push	1
	push	OFFSET ??_C@_02JLHCEMDI@64@
	push	OFFSET ??_C@_0BA@EOCPPDFD@net_graphheight@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _net_graphheight, eax

; 679  : 	net_graphsolid = Cvar_Get( "net_graphsolid", "1", FCVAR_ARCHIVE, "fill segments in network usage graph" );

	push	OFFSET ??_C@_0CF@BIBPIKE@fill?5segments?5in?5network?5usage?5@
	push	1
	push	OFFSET ??_C@_01HIHLOKLC@1@
	push	OFFSET ??_C@_0P@MOEMMKAK@net_graphsolid@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _net_graphsolid, eax

; 680  : 	packet_loss = packet_choke = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _packet_choke, xmm0
	movss	xmm0, DWORD PTR _packet_choke
	movss	DWORD PTR _packet_loss, xmm0

; 681  : 
; 682  : 	NetGraph_InitColors();

	call	_NetGraph_InitColors

; 683  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_InitNetgraph ENDP
_TEXT	ENDS
END
