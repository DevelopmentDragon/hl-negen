; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\gl_refrag.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
_DATA	ENDS
PUBLIC	_R_StoreEfrags
PUBLIC	_R_RemoveEfrags
PUBLIC	_R_AddEfrags
PUBLIC	??_C@_0BN@DIKDBECF@?$FO1Error?3?$FO7?5too?5many?5efrags?$CB?6@ ; `string'
PUBLIC	__real@3f800000
EXTRN	_Con_Printf:PROC
EXTRN	_Matrix3x4_CreateFromEntity:PROC
EXTRN	_Matrix3x4_TransformAABB:PROC
EXTRN	_BoxOnPlaneSide:PROC
EXTRN	_CL_AddVisibleEntity:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_vec3_origin:BYTE
EXTRN	_cl:BYTE
EXTRN	_clgame:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_lastlink DD	01H DUP (?)
_r_pefragtopnode DD 01H DUP (?)
_r_emins DD	03H DUP (?)
_r_emaxs DD	03H DUP (?)
_r_addent DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_0BN@DIKDBECF@?$FO1Error?3?$FO7?5too?5many?5efrags?$CB?6@
CONST	SEGMENT
??_C@_0BN@DIKDBECF@?$FO1Error?3?$FO7?5too?5many?5efrags?$CB?6@ DB '^1Erro'
	DB	'r:^7 too many efrags!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0124H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_refrag.c
;	COMDAT _R_SplitEntityOnNode
_TEXT	SEGMENT
tv138 = -88						; size = 4
tv131 = -84						; size = 4
tv132 = -80						; size = 4
_sides$ = -12						; size = 4
_leaf$ = -8						; size = 4
_ef$ = -4						; size = 4
_node$ = 8						; size = 4
_R_SplitEntityOnNode PROC				; COMDAT

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 83   : 	efrag_t	*ef;
; 84   : 	mleaf_t	*leaf;
; 85   : 	int	sides;
; 86   : 	
; 87   : 	if( node->contents == CONTENTS_SOLID )

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax], -2			; fffffffeH
	jne	SHORT $LN2@R_SplitEnt

; 88   : 		return;

	jmp	$LN9@R_SplitEnt
$LN2@R_SplitEnt:

; 89   : 	
; 90   : 	// add an efrag if the node is a leaf
; 91   : 	if( node->contents < 0 )

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	$LN3@R_SplitEnt

; 92   : 	{
; 93   : 		if( !r_pefragtopnode )

	cmp	DWORD PTR _r_pefragtopnode, 0
	jne	SHORT $LN4@R_SplitEnt

; 94   : 			r_pefragtopnode = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _r_pefragtopnode, eax
$LN4@R_SplitEnt:

; 95   : 
; 96   : 		leaf = (mleaf_t *)node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _leaf$[ebp], eax

; 97   : 
; 98   : 		// grab an efrag off the free list
; 99   : 		ef = clgame.free_efrags;

	mov	eax, DWORD PTR _clgame+260428
	mov	DWORD PTR _ef$[ebp], eax

; 100  : 		if( !ef )

	cmp	DWORD PTR _ef$[ebp], 0
	jne	SHORT $LN5@R_SplitEnt

; 101  : 		{
; 102  : 			Con_Printf( S_ERROR "too many efrags!\n" );

	push	OFFSET ??_C@_0BN@DIKDBECF@?$FO1Error?3?$FO7?5too?5many?5efrags?$CB?6@
	call	_Con_Printf
	add	esp, 4

; 103  : 			return; // no free fragments...

	jmp	$LN9@R_SplitEnt
$LN5@R_SplitEnt:

; 104  : 		}
; 105  : 
; 106  : 		clgame.free_efrags = clgame.free_efrags->entnext;

	mov	eax, DWORD PTR _clgame+260428
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _clgame+260428, ecx

; 107  : 		ef->entity = r_addent;

	mov	eax, DWORD PTR _ef$[ebp]
	mov	ecx, DWORD PTR _r_addent
	mov	DWORD PTR [eax+8], ecx

; 108  : 		
; 109  : 		// add the entity link	
; 110  : 		*lastlink = ef;

	mov	eax, DWORD PTR _lastlink
	mov	ecx, DWORD PTR _ef$[ebp]
	mov	DWORD PTR [eax], ecx

; 111  : 		lastlink = &ef->entnext;

	mov	eax, DWORD PTR _ef$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _lastlink, eax

; 112  : 		ef->entnext = NULL;

	mov	eax, DWORD PTR _ef$[ebp]
	mov	DWORD PTR [eax+12], 0

; 113  : 		
; 114  : 		// set the leaf links
; 115  : 		ef->leaf = leaf;

	mov	eax, DWORD PTR _ef$[ebp]
	mov	ecx, DWORD PTR _leaf$[ebp]
	mov	DWORD PTR [eax], ecx

; 116  : 		ef->leafnext = leaf->efrags;

	mov	eax, DWORD PTR _ef$[ebp]
	mov	ecx, DWORD PTR _leaf$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+4], edx

; 117  : 		leaf->efrags = ef;

	mov	eax, DWORD PTR _leaf$[ebp]
	mov	ecx, DWORD PTR _ef$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 118  : 		return;

	jmp	$LN9@R_SplitEnt
$LN3@R_SplitEnt:

; 119  : 	}
; 120  : 	
; 121  : 	// NODE_MIXED
; 122  : 	sides = BOX_ON_PLANE_SIDE( r_emins, r_emaxs, node->plane );

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movzx	edx, BYTE PTR [ecx+16]
	cmp	edx, 3
	jge	SHORT $LN15@R_SplitEnt
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movzx	edx, BYTE PTR [eax+16]
	movss	xmm0, DWORD PTR _r_emins[edx*4]
	comiss	xmm0, DWORD PTR [ecx+12]
	jb	SHORT $LN13@R_SplitEnt
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN14@R_SplitEnt
$LN13@R_SplitEnt:
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movzx	edx, BYTE PTR [eax+16]
	movss	xmm0, DWORD PTR [ecx+12]
	comiss	xmm0, DWORD PTR _r_emaxs[edx*4]
	jb	SHORT $LN11@R_SplitEnt
	mov	DWORD PTR tv131[ebp], 2
	jmp	SHORT $LN12@R_SplitEnt
$LN11@R_SplitEnt:
	mov	DWORD PTR tv131[ebp], 3
$LN12@R_SplitEnt:
	mov	eax, DWORD PTR tv131[ebp]
	mov	DWORD PTR tv132[ebp], eax
$LN14@R_SplitEnt:
	mov	ecx, DWORD PTR tv132[ebp]
	mov	DWORD PTR tv138[ebp], ecx
	jmp	SHORT $LN16@R_SplitEnt
$LN15@R_SplitEnt:
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	push	OFFSET _r_emaxs
	push	OFFSET _r_emins
	call	_BoxOnPlaneSide
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv138[ebp], eax
$LN16@R_SplitEnt:
	mov	ecx, DWORD PTR tv138[ebp]
	mov	DWORD PTR _sides$[ebp], ecx

; 123  : 	
; 124  : 	if( sides == 3 )

	cmp	DWORD PTR _sides$[ebp], 3
	jne	SHORT $LN7@R_SplitEnt

; 125  : 	{
; 126  : 		// split on this plane
; 127  : 		// if this is the first splitter of this bmodel, remember it
; 128  : 		if( !r_pefragtopnode ) r_pefragtopnode = node;

	cmp	DWORD PTR _r_pefragtopnode, 0
	jne	SHORT $LN7@R_SplitEnt
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _r_pefragtopnode, eax
$LN7@R_SplitEnt:

; 129  : 	}
; 130  : 	
; 131  : 	// recurse down the contacted sides
; 132  : 	if( sides & 1 ) R_SplitEntityOnNode( node->children[0] );

	mov	eax, DWORD PTR _sides$[ebp]
	and	eax, 1
	je	SHORT $LN8@R_SplitEnt
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+ecx+40]
	push	eax
	call	_R_SplitEntityOnNode
	add	esp, 4
$LN8@R_SplitEnt:

; 133  : 	if( sides & 2 ) R_SplitEntityOnNode( node->children[1] );

	mov	eax, DWORD PTR _sides$[ebp]
	and	eax, 2
	je	SHORT $LN9@R_SplitEnt
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+eax+40]
	push	edx
	call	_R_SplitEntityOnNode
	add	esp, 4
$LN9@R_SplitEnt:

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_SplitEntityOnNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_refrag.c
;	COMDAT _R_AddEfrags
_TEXT	SEGMENT
_i$ = -80						; size = 4
_outmaxs$ = -76						; size = 12
_outmins$ = -64						; size = 12
_transform$ = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_ent$ = 8						; size = 4
_R_AddEfrags PROC					; COMDAT

; 142  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 143  : 	matrix3x4	transform;
; 144  : 	vec3_t	outmins, outmaxs;
; 145  : 	int	i;
; 146  : 		
; 147  : 	if( !ent->model )

	mov	eax, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [eax+3300], 0
	jne	SHORT $LN5@R_AddEfrag

; 148  : 		return;

	jmp	$LN1@R_AddEfrag
$LN5@R_AddEfrag:

; 149  : 
; 150  : 	r_addent = ent;

	mov	eax, DWORD PTR _ent$[ebp]
	mov	DWORD PTR _r_addent, eax

; 151  : 	lastlink = &ent->efrag;

	mov	eax, DWORD PTR _ent$[ebp]
	add	eax, 3304				; 00000ce8H
	mov	DWORD PTR _lastlink, eax

; 152  : 	r_pefragtopnode = NULL;

	mov	DWORD PTR _r_pefragtopnode, 0

; 153  : 
; 154  : 	// handle entity rotation for right bbox expanding
; 155  : 	Matrix3x4_CreateFromEntity( transform, ent->angles, vec3_origin, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET _vec3_origin
	mov	eax, DWORD PTR _ent$[ebp]
	add	eax, 3236				; 00000ca4H
	push	eax
	lea	ecx, DWORD PTR _transform$[ebp]
	push	ecx
	call	_Matrix3x4_CreateFromEntity
	add	esp, 16					; 00000010H

; 156  : 	Matrix3x4_TransformAABB( transform, ent->model->mins, ent->model->maxs, outmins, outmaxs );

	lea	eax, DWORD PTR _outmaxs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outmins$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR [edx+3300]
	add	eax, 96					; 00000060H
	push	eax
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR [ecx+3300]
	add	edx, 84					; 00000054H
	push	edx
	lea	eax, DWORD PTR _transform$[ebp]
	push	eax
	call	_Matrix3x4_TransformAABB
	add	esp, 20					; 00000014H

; 157  : 
; 158  : 	for( i = 0; i < 3; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@R_AddEfrag
$LN2@R_AddEfrag:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@R_AddEfrag:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN3@R_AddEfrag

; 159  : 	{
; 160  : 		r_emins[i] = ent->origin[i] + outmins[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+3224]
	addss	xmm0, DWORD PTR _outmins$[ebp+edx*4]
	mov	eax, DWORD PTR _i$[ebp]
	movss	DWORD PTR _r_emins[eax*4], xmm0

; 161  : 		r_emaxs[i] = ent->origin[i] + outmaxs[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+3224]
	addss	xmm0, DWORD PTR _outmaxs$[ebp+edx*4]
	mov	eax, DWORD PTR _i$[ebp]
	movss	DWORD PTR _r_emaxs[eax*4], xmm0

; 162  : 	}

	jmp	SHORT $LN2@R_AddEfrag
$LN3@R_AddEfrag:

; 163  : 
; 164  : 	R_SplitEntityOnNode( cl.worldmodel->nodes );

	mov	eax, DWORD PTR _cl+4579004
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	call	_R_SplitEntityOnNode
	add	esp, 4

; 165  : 	ent->topnode = r_pefragtopnode;

	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR _r_pefragtopnode
	mov	DWORD PTR [eax+3308], ecx
$LN1@R_AddEfrag:

; 166  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_R_AddEfrags ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_refrag.c
;	COMDAT _R_RemoveEfrags
_TEXT	SEGMENT
_prev$ = -16						; size = 4
_walk$ = -12						; size = 4
_old$ = -8						; size = 4
_ef$ = -4						; size = 4
_ent$ = 8						; size = 4
_R_RemoveEfrags PROC					; COMDAT

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 45   : 	efrag_t	*ef, *old, *walk, **prev;
; 46   : 	
; 47   : 	ef = ent->efrag;

	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+3304]
	mov	DWORD PTR _ef$[ebp], ecx
$LN2@R_RemoveEf:

; 48   : 	
; 49   : 	while( ef )

	cmp	DWORD PTR _ef$[ebp], 0
	je	SHORT $LN3@R_RemoveEf

; 50   : 	{
; 51   : 		prev = &ef->leaf->efrags;

	mov	eax, DWORD PTR _ef$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _prev$[ebp], ecx
$LN4@R_RemoveEf:

; 52   : 		while( 1 )

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@R_RemoveEf

; 53   : 		{
; 54   : 			walk = *prev;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _walk$[ebp], ecx

; 55   : 			if( !walk ) break;

	cmp	DWORD PTR _walk$[ebp], 0
	jne	SHORT $LN6@R_RemoveEf
	jmp	SHORT $LN5@R_RemoveEf
$LN6@R_RemoveEf:

; 56   : 
; 57   : 			if( walk == ef )

	mov	eax, DWORD PTR _walk$[ebp]
	cmp	eax, DWORD PTR _ef$[ebp]
	jne	SHORT $LN7@R_RemoveEf

; 58   : 			{	
; 59   : 				// remove this fragment
; 60   : 				*prev = ef->leafnext;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR _ef$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 61   : 				break;

	jmp	SHORT $LN5@R_RemoveEf

; 62   : 			}

	jmp	SHORT $LN8@R_RemoveEf
$LN7@R_RemoveEf:

; 63   : 			else prev = &walk->leafnext;

	mov	eax, DWORD PTR _walk$[ebp]
	add	eax, 4
	mov	DWORD PTR _prev$[ebp], eax
$LN8@R_RemoveEf:

; 64   : 		}

	jmp	SHORT $LN4@R_RemoveEf
$LN5@R_RemoveEf:

; 65   : 				
; 66   : 		old = ef;

	mov	eax, DWORD PTR _ef$[ebp]
	mov	DWORD PTR _old$[ebp], eax

; 67   : 		ef = ef->entnext;

	mov	eax, DWORD PTR _ef$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _ef$[ebp], ecx

; 68   : 		
; 69   : 		// put it on the free list
; 70   : 		old->entnext = clgame.free_efrags;

	mov	eax, DWORD PTR _old$[ebp]
	mov	ecx, DWORD PTR _clgame+260428
	mov	DWORD PTR [eax+12], ecx

; 71   : 		clgame.free_efrags = old;

	mov	eax, DWORD PTR _old$[ebp]
	mov	DWORD PTR _clgame+260428, eax

; 72   : 	}

	jmp	SHORT $LN2@R_RemoveEf
$LN3@R_RemoveEf:

; 73   : 	ent->efrag = NULL; 

	mov	eax, DWORD PTR _ent$[ebp]
	mov	DWORD PTR [eax+3304], 0

; 74   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_RemoveEfrags ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_refrag.c
;	COMDAT _R_StoreEfrags
_TEXT	SEGMENT
tv68 = -80						; size = 4
_pefrag$ = -12						; size = 4
_clmodel$ = -8						; size = 4
_pent$ = -4						; size = 4
_ppefrag$ = 8						; size = 4
_framecount$ = 12					; size = 4
_R_StoreEfrags PROC					; COMDAT

; 175  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
$LN2@R_StoreEfr:

; 176  : 	cl_entity_t	*pent;
; 177  : 	model_t		*clmodel;
; 178  : 	efrag_t		*pefrag;
; 179  : 
; 180  : 	while(( pefrag = *ppefrag ) != NULL )

	mov	eax, DWORD PTR _ppefrag$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pefrag$[ebp], ecx
	cmp	DWORD PTR _pefrag$[ebp], 0
	je	$LN1@R_StoreEfr

; 181  : 	{
; 182  : 		pent = pefrag->entity;

	mov	eax, DWORD PTR _pefrag$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pent$[ebp], ecx

; 183  : 		clmodel = pent->model;

	mov	eax, DWORD PTR _pent$[ebp]
	mov	ecx, DWORD PTR [eax+3300]
	mov	DWORD PTR _clmodel$[ebp], ecx

; 184  : 
; 185  : 		switch( clmodel->type )

	mov	eax, DWORD PTR _clmodel$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR tv68[ebp], ecx
	cmp	DWORD PTR tv68[ebp], 3
	ja	SHORT $LN4@R_StoreEfr
	mov	edx, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN14@R_StoreEfr[edx*4]
$LN9@R_StoreEfr:

; 186  : 		{
; 187  : 		case mod_alias:
; 188  : 		case mod_brush:
; 189  : 		case mod_studio:
; 190  : 		case mod_sprite:
; 191  : 			pent = pefrag->entity;

	mov	eax, DWORD PTR _pefrag$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pent$[ebp], ecx

; 192  : 
; 193  : 			if( pent->visframe != framecount )

	mov	eax, DWORD PTR _pent$[ebp]
	mov	ecx, DWORD PTR [eax+3316]
	cmp	ecx, DWORD PTR _framecount$[ebp]
	je	SHORT $LN10@R_StoreEfr

; 194  : 			{
; 195  : 				if( CL_AddVisibleEntity( pent, ET_FRAGMENTED ))

	push	4
	mov	eax, DWORD PTR _pent$[ebp]
	push	eax
	call	_CL_AddVisibleEntity
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@R_StoreEfr

; 196  : 				{
; 197  : 					// mark that we've recorded this entity for this frame
; 198  : 					pent->curstate.messagenum = cl.parsecount;

	mov	eax, DWORD PTR _pent$[ebp]
	mov	ecx, DWORD PTR _cl+8
	mov	DWORD PTR [eax+924], ecx

; 199  : 					pent->visframe = framecount;

	mov	eax, DWORD PTR _pent$[ebp]
	mov	ecx, DWORD PTR _framecount$[ebp]
	mov	DWORD PTR [eax+3316], ecx
$LN10@R_StoreEfr:

; 200  : 				}
; 201  : 			}
; 202  : 
; 203  : 			ppefrag = &pefrag->leafnext;

	mov	eax, DWORD PTR _pefrag$[ebp]
	add	eax, 4
	mov	DWORD PTR _ppefrag$[ebp], eax
$LN4@R_StoreEfr:

; 204  : 			break;
; 205  : 		default:	
; 206  : 			break;
; 207  : 		}
; 208  : 	}

	jmp	$LN2@R_StoreEfr
$LN1@R_StoreEfr:

; 209  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@R_StoreEfr:
	DD	$LN9@R_StoreEfr
	DD	$LN9@R_StoreEfr
	DD	$LN9@R_StoreEfr
	DD	$LN9@R_StoreEfr
_R_StoreEfrags ENDP
_TEXT	ENDS
END
