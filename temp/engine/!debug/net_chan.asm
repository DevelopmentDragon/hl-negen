; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\net_chan.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_ns_strings
PUBLIC	??_C@_06PJIGMIJB@Client@			; `string'
PUBLIC	??_C@_06LGMEBDBC@Server@			; `string'
_DATA	SEGMENT
COMM	_net_showpackets:DWORD
COMM	_net_from:BYTE:014H
COMM	_net_message:BYTE:014H
COMM	_net_message_buffer:BYTE:020020H
COMM	_net_speeds:DWORD
COMM	_net_drop:DWORD
COMM	_net_chokeloopback:DWORD
COMM	_net_showdrop:DWORD
COMM	_net_qport:DWORD
COMM	_net_mempool:DWORD
_DATA	ENDS
;	COMDAT ??_C@_06LGMEBDBC@Server@
CONST	SEGMENT
??_C@_06LGMEBDBC@Server@ DB 'Server', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PJIGMIJB@Client@
CONST	SEGMENT
??_C@_06PJIGMIJB@Client@ DB 'Client', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_ns_strings DD	FLAT:??_C@_06PJIGMIJB@Client@
	DD	FLAT:??_C@_06LGMEBDBC@Server@
_DATA	ENDS
PUBLIC	_BitByte
PUBLIC	_MSG_GetNumBytesWritten
PUBLIC	_MSG_GetNumBitsWritten
PUBLIC	_MSG_GetMaxBytes
PUBLIC	_MSG_GetNumBitsLeft
PUBLIC	_MSG_GetData
PUBLIC	_Netchan_Init
PUBLIC	_Netchan_Shutdown
PUBLIC	_Netchan_Setup
PUBLIC	_Netchan_CreateFileFragmentsFromBuffer
PUBLIC	_Netchan_CopyNormalFragments
PUBLIC	_Netchan_CopyFileFragments
PUBLIC	_Netchan_CreateFragments
PUBLIC	_Netchan_CreateFileFragments
PUBLIC	_Netchan_Transmit
PUBLIC	_Netchan_TransmitBits
PUBLIC	_Netchan_OutOfBand
PUBLIC	_Netchan_OutOfBandPrint
PUBLIC	_Netchan_Process
PUBLIC	_Netchan_UpdateProgress
PUBLIC	_Netchan_IncomingReady
PUBLIC	_Netchan_CanPacket
PUBLIC	_Netchan_IsLocal
PUBLIC	_Netchan_ReportFlow
PUBLIC	_Netchan_FragSend
PUBLIC	_Netchan_Clear
PUBLIC	_Netchan_FlushIncoming
PUBLIC	_Netchan_AddBufferToList
PUBLIC	_Netchan_UnlinkFragment
PUBLIC	_Netchan_ClearFragbufs
PUBLIC	_Netchan_ClearFragments
PUBLIC	_Netchan_AllocFragbuf
PUBLIC	_Netchan_AddFragbufToTail
PUBLIC	_Netchan_UpdateFlow
PUBLIC	_Netchan_FindBufferById
PUBLIC	_Netchan_CheckForCompletion
PUBLIC	_Netchan_Validate
PUBLIC	?__LINE__Var@?0??Netchan_Init@@9@9		; `Netchan_Init'::`1'::__LINE__Var
PUBLIC	??_C@_0BF@MAEAOHJB@show?5network?5packets@	; `string'
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_0BA@BBOLDPIN@net_showpackets@		; `string'
PUBLIC	??_C@_0CK@NHPJDMIG@apply?5bandwidth?5choke?5to?5loopba@ ; `string'
PUBLIC	??_C@_0O@OAMPIGGJ@net_chokeloop@		; `string'
PUBLIC	??_C@_0BO@GOBOAKPE@show?5packets?5that?5are?5dropped@ ; `string'
PUBLIC	??_C@_0N@NCECIBCF@net_showdrop@			; `string'
PUBLIC	??_C@_0L@EABJDOBI@net_speeds@			; `string'
PUBLIC	??_C@_0BG@JNOOJKIF@current?5quake?5netport@	; `string'
PUBLIC	??_C@_02IKAHHCAI@?$CFi@				; `string'
PUBLIC	??_C@_09HOOHLIKH@net_qport@			; `string'
PUBLIC	??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@ ; `string'
PUBLIC	??_C@_0N@GPFIMFHH@Network?5Pool@		; `string'
PUBLIC	?__LINE__Var@?0??Netchan_Shutdown@@9@9		; `Netchan_Shutdown'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??Netchan_ReportFlow@@9@9	; `Netchan_ReportFlow'::`1'::__LINE__Var
PUBLIC	??_C@_0N@HEPBCEPK@chan?5?$CB?$DN?5NULL@		; `string'
PUBLIC	??_C@_0DH@PGDDIMKN@Signon?5network?5traffic?3?5?5?$CFs?5fro@ ; `string'
PUBLIC	??_C@_07OOAACIFJ@NetData@			; `string'
PUBLIC	?__LINE__Var@?0??Netchan_UnlinkFragment@@9@9	; `Netchan_UnlinkFragment'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??Netchan_ClearFragbufs@@9@9	; `Netchan_ClearFragbufs'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??Netchan_ClearFragments@@9@9	; `Netchan_ClearFragments'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??Netchan_Clear@@9@9		; `Netchan_Clear'::`1'::__LINE__Var
PUBLIC	??_C@_0P@KAPCCABL@SequencePacket@		; `string'
PUBLIC	?__LINE__Var@?0??Netchan_AllocFragbuf@@9@9	; `Netchan_AllocFragbuf'::`1'::__LINE__Var
PUBLIC	??_C@_0N@ILFILPBN@Frag?5Message@		; `string'
PUBLIC	?__LINE__Var@?0??Netchan_FragSend@@9@9		; `Netchan_FragSend'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??Netchan_CreateFragments_@@9@9	; `Netchan_CreateFragments_'::`1'::__LINE__Var
PUBLIC	??_C@_0CL@OHDLHFLM@Compressing?5split?5packet?5?$CI?$CFd?5?9?$DO@ ; `string'
PUBLIC	??_C@_0EJ@EEGOEOHO@?$FO1Error?3?$FO7?5Lost?1dropped?5fragmen@ ; `string'
PUBLIC	??_C@_0L@FBPMLECH@reconnect?6@			; `string'
PUBLIC	?__LINE__Var@?0??Netchan_CreateFileFragmentsFromBuffer@@9@9 ; `Netchan_CreateFileFragmentsFromBuffer'::`1'::__LINE__Var
PUBLIC	??_C@_0CD@MNOEMFON@Compressing?5filebuffer?5?$CI?$CFs?5?9?$DO?5?$CF@ ; `string'
PUBLIC	?__LINE__Var@?0??Netchan_CreateFileFragments@@9@9 ; `Netchan_CreateFileFragments'::`1'::__LINE__Var
PUBLIC	??_C@_0CN@JHLJEPPH@?$FO3Warning?3?$FO7?5Unable?5to?5open?5?$CFs?5@ ; `string'
PUBLIC	??_C@_05ELJENEDK@?4ztmp@			; `string'
PUBLIC	??_C@_0BP@KJFMLEFG@compressed?5file?5?$CFs?5?$CI?$CFs?5?9?$DO?5?$CFs?$CJ?6@ ; `string'
PUBLIC	?__LINE__Var@?0??Netchan_FlushIncoming@@9@9	; `Netchan_FlushIncoming'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??Netchan_CopyNormalFragments@@9@9 ; `Netchan_CopyNormalFragments'::`1'::__LINE__Var
PUBLIC	??_C@_0L@EJNKCDI@NetMessage@			; `string'
PUBLIC	??_C@_0DC@FPKGPAPB@?$FO1Error?3?$FO7?5buffer?5to?5small?5to?5d@ ; `string'
PUBLIC	?__LINE__Var@?0??Netchan_CopyFileFragments@@9@9	; `Netchan_CopyFileFragments'::`1'::__LINE__Var
PUBLIC	??_C@_0EJ@HNOLHMLJ@?$FO1Error?3?$FO7?5file?5fragment?5receiv@ ; `string'
PUBLIC	??_C@_0DL@FCCFCCGO@?$FO1Error?3?$FO7?5file?5fragment?5receiv@ ; `string'
PUBLIC	??_C@_0CO@EDAFCLIP@?$FO1Error?3?$FO7?5can?8t?5download?5?$CFs?0?5a@ ; `string'
PUBLIC	??_C@_0CJ@PACAIEIG@?$FO1Error?3?$FO7?5?$CFs?3outgoing?5message?5@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_07NPGECGHP@NetSend@			; `string'
PUBLIC	??_C@_0DM@GAEICFEB@?$FO3Warning?3?$FO7?5Netchan_Transmit?3?5@ ; `string'
PUBLIC	??_C@_0CK@CMAOGLNL@?5?$CFs?5?9?9?$DO?5sz?$DN?$CFi?5seq?$DN?$CFi?5ack?$DN?$CFi?5rel@ ; `string'
PUBLIC	??_C@_0CK@JBJFHMPG@?5?$CFs?5?$DM?9?9?5sz?$DN?$CFi?5seq?$DN?$CFi?5ack?$DN?$CFi?5rel@ ; `string'
PUBLIC	??_C@_0BO@KFCMLAMP@?$CFs?3duplicate?5packet?5?$CFi?5at?5?$CFi?6@ ; `string'
PUBLIC	??_C@_0CB@GLEACKCK@?$CFs?3out?5of?5order?5packet?5?$CFi?5at?5?$CFi@ ; `string'
PUBLIC	??_C@_0BN@INOGJLEP@?$CFs?3dropped?5?$CFi?5packets?5at?5?$CFi?6@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fd5555555555556
PUBLIC	__real@3fe5555555555555
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@408f400000000000
PUBLIC	__real@40c3878000000000
PUBLIC	__real@42c80000
PUBLIC	__real@44800000
PUBLIC	__real@bf800000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__free:PROC
EXTRN	_Cbuf_AddText:PROC
EXTRN	_Q_strlen:PROC
EXTRN	_Q_strncpy:PROC
EXTRN	_Q_vsnprintf:PROC
EXTRN	_Q_pretifymem:PROC
EXTRN	_va:PROC
EXTRN	__Mem_Alloc:PROC
EXTRN	__Mem_AllocPool:PROC
EXTRN	__Mem_FreePool:PROC
EXTRN	__Mem_Free:PROC
EXTRN	_Cvar_Get:PROC
EXTRN	_Cvar_VariableInteger:PROC
EXTRN	_DBG_AssertFunction:PROC
EXTRN	_NET_IsActive:PROC
EXTRN	_NET_IsLocalAddress:PROC
EXTRN	_NET_AdrToString:PROC
EXTRN	_NET_CompareAdr:PROC
EXTRN	_NET_SendPacket:PROC
EXTRN	_COM_ReplaceExtension:PROC
EXTRN	_FS_LoadFile:PROC
EXTRN	_FS_WriteFile:PROC
EXTRN	_COM_CheckString:PROC
EXTRN	_FS_Open:PROC
EXTRN	_FS_Read:PROC
EXTRN	_FS_Seek:PROC
EXTRN	_FS_FileSize:PROC
EXTRN	_FS_FileTime:PROC
EXTRN	_FS_FileExists:PROC
EXTRN	_FS_Close:PROC
EXTRN	_SV_Active:PROC
EXTRN	_COM_IsSafeFileToDownload:PROC
EXTRN	_Con_Reportf:PROC
EXTRN	_Con_DPrintf:PROC
EXTRN	_Con_Printf:PROC
EXTRN	_CL_IsPlaybackDemo:PROC
EXTRN	_COM_RandomLong:PROC
EXTRN	_LZSS_IsCompressed:PROC
EXTRN	_LZSS_GetActualSize:PROC
EXTRN	_LZSS_Compress:PROC
EXTRN	_LZSS_Decompress:PROC
EXTRN	_MSG_InitExt:PROC
EXTRN	_MSG_InitMasks:PROC
EXTRN	_MSG_SeekToBit:PROC
EXTRN	_MSG_ExciseBits:PROC
EXTRN	_MSG_CheckOverflow:PROC
EXTRN	_MSG_StartWriting:PROC
EXTRN	_MSG_Clear:PROC
EXTRN	_MSG_WriteBits:PROC
EXTRN	_MSG_WriteCmdExt:PROC
EXTRN	_MSG_WriteByte:PROC
EXTRN	_MSG_WriteWord:PROC
EXTRN	_MSG_WriteLong:PROC
EXTRN	_MSG_WriteBytes:PROC
EXTRN	_MSG_WriteString:PROC
EXTRN	_MSG_ReadBits:PROC
EXTRN	_MSG_ReadByte:PROC
EXTRN	_MSG_ReadShort:PROC
EXTRN	_MSG_ReadLong:PROC
EXTRN	_MSG_ReadStringExt:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_scr_download:DWORD
EXTRN	_host:BYTE
EXTRN	_sv_lan:BYTE
EXTRN	_sv_lan_rate:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@40c3878000000000
CONST	SEGMENT
__real@40c3878000000000 DQ 040c3878000000000r	; 9999
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe5555555555555
CONST	SEGMENT
__real@3fe5555555555555 DQ 03fe5555555555555r	; 0.666667
CONST	ENDS
;	COMDAT __real@3fd5555555555556
CONST	SEGMENT
__real@3fd5555555555556 DQ 03fd5555555555556r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0BN@INOGJLEP@?$CFs?3dropped?5?$CFi?5packets?5at?5?$CFi?6@
CONST	SEGMENT
??_C@_0BN@INOGJLEP@?$CFs?3dropped?5?$CFi?5packets?5at?5?$CFi?6@ DB '%s:dr'
	DB	'opped %i packets at %i', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GLEACKCK@?$CFs?3out?5of?5order?5packet?5?$CFi?5at?5?$CFi@
CONST	SEGMENT
??_C@_0CB@GLEACKCK@?$CFs?3out?5of?5order?5packet?5?$CFi?5at?5?$CFi@ DB '%'
	DB	's:out of order packet %i at %i', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KFCMLAMP@?$CFs?3duplicate?5packet?5?$CFi?5at?5?$CFi?6@
CONST	SEGMENT
??_C@_0BO@KFCMLAMP@?$CFs?3duplicate?5packet?5?$CFi?5at?5?$CFi?6@ DB '%s:d'
	DB	'uplicate packet %i at %i', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JBJFHMPG@?5?$CFs?5?$DM?9?9?5sz?$DN?$CFi?5seq?$DN?$CFi?5ack?$DN?$CFi?5rel@
CONST	SEGMENT
??_C@_0CK@JBJFHMPG@?5?$CFs?5?$DM?9?9?5sz?$DN?$CFi?5seq?$DN?$CFi?5ack?$DN?$CFi?5rel@ DB ' '
	DB	'%s <-- sz=%i seq=%i ack=%i rel=%i tm=%f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CMAOGLNL@?5?$CFs?5?9?9?$DO?5sz?$DN?$CFi?5seq?$DN?$CFi?5ack?$DN?$CFi?5rel@
CONST	SEGMENT
??_C@_0CK@CMAOGLNL@?5?$CFs?5?9?9?$DO?5sz?$DN?$CFi?5seq?$DN?$CFi?5ack?$DN?$CFi?5rel@ DB ' '
	DB	'%s --> sz=%i seq=%i ack=%i rel=%i tm=%f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@GAEICFEB@?$FO3Warning?3?$FO7?5Netchan_Transmit?3?5@
CONST	SEGMENT
??_C@_0DM@GAEICFEB@?$FO3Warning?3?$FO7?5Netchan_Transmit?3?5@ DB '^3Warni'
	DB	'ng:^7 Netchan_Transmit: unreliable message overflow', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NPGECGHP@NetSend@
CONST	SEGMENT
??_C@_07NPGECGHP@NetSend@ DB 'NetSend', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PACAIEIG@?$FO1Error?3?$FO7?5?$CFs?3outgoing?5message?5@
CONST	SEGMENT
??_C@_0CJ@PACAIEIG@?$FO1Error?3?$FO7?5?$CFs?3outgoing?5message?5@ DB '^1E'
	DB	'rror:^7 %s:outgoing message overflow', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@EDAFCLIP@?$FO1Error?3?$FO7?5can?8t?5download?5?$CFs?0?5a@
CONST	SEGMENT
??_C@_0CO@EDAFCLIP@?$FO1Error?3?$FO7?5can?8t?5download?5?$CFs?0?5a@ DB '^'
	DB	'1Error:^7 can''t download %s, already exists', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@FCCFCCGO@?$FO1Error?3?$FO7?5file?5fragment?5receiv@
CONST	SEGMENT
??_C@_0DL@FCCFCCGO@?$FO1Error?3?$FO7?5file?5fragment?5receiv@ DB '^1Error'
	DB	':^7 file fragment received with bad path, ignoring', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@HNOLHMLJ@?$FO1Error?3?$FO7?5file?5fragment?5receiv@
CONST	SEGMENT
??_C@_0EJ@HNOLHMLJ@?$FO1Error?3?$FO7?5file?5fragment?5receiv@ DB '^1Error'
	DB	':^7 file fragment received with no filename', 0aH, 'Flushing '
	DB	'input queue', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_CopyFileFragments@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_CopyFileFragments@@9@9 DD 03fcH ; `Netchan_CopyFileFragments'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DC@FPKGPAPB@?$FO1Error?3?$FO7?5buffer?5to?5small?5to?5d@
CONST	SEGMENT
??_C@_0DC@FPKGPAPB@?$FO1Error?3?$FO7?5buffer?5to?5small?5to?5d@ DB '^1Err'
	DB	'or:^7 buffer to small to decompress message', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EJNKCDI@NetMessage@
CONST	SEGMENT
??_C@_0L@EJNKCDI@NetMessage@ DB 'NetMessage', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_CopyNormalFragments@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_CopyNormalFragments@@9@9 DD 03bbH ; `Netchan_CopyNormalFragments'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_FlushIncoming@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_FlushIncoming@@9@9 DD 03a3H	; `Netchan_FlushIncoming'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BP@KJFMLEFG@compressed?5file?5?$CFs?5?$CI?$CFs?5?9?$DO?5?$CFs?$CJ?6@
CONST	SEGMENT
??_C@_0BP@KJFMLEFG@compressed?5file?5?$CFs?5?$CI?$CFs?5?9?$DO?5?$CFs?$CJ?6@ DB 'c'
	DB	'ompressed file %s (%s -> %s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05ELJENEDK@?4ztmp@
CONST	SEGMENT
??_C@_05ELJENEDK@?4ztmp@ DB '.ztmp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JHLJEPPH@?$FO3Warning?3?$FO7?5Unable?5to?5open?5?$CFs?5@
CONST	SEGMENT
??_C@_0CN@JHLJEPPH@?$FO3Warning?3?$FO7?5Unable?5to?5open?5?$CFs?5@ DB '^3'
	DB	'Warning:^7 Unable to open %s for transfer', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_CreateFileFragments@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_CreateFileFragments@@9@9 DD 0330H ; `Netchan_CreateFileFragments'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CD@MNOEMFON@Compressing?5filebuffer?5?$CI?$CFs?5?9?$DO?5?$CF@
CONST	SEGMENT
??_C@_0CD@MNOEMFON@Compressing?5filebuffer?5?$CI?$CFs?5?9?$DO?5?$CF@ DB 'C'
	DB	'ompressing filebuffer (%s -> %s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_CreateFileFragmentsFromBuffer@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_CreateFileFragmentsFromBuffer@@9@9 DD 02d7H ; `Netchan_CreateFileFragmentsFromBuffer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@FBPMLECH@reconnect?6@
CONST	SEGMENT
??_C@_0L@FBPMLECH@reconnect?6@ DB 'reconnect', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@EEGOEOHO@?$FO1Error?3?$FO7?5Lost?1dropped?5fragmen@
CONST	SEGMENT
??_C@_0EJ@EEGOEOHO@?$FO1Error?3?$FO7?5Lost?1dropped?5fragmen@ DB '^1Error'
	DB	':^7 Lost/dropped fragment would cause stall, retrying connect'
	DB	'ion', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@OHDLHFLM@Compressing?5split?5packet?5?$CI?$CFd?5?9?$DO@
CONST	SEGMENT
??_C@_0CL@OHDLHFLM@Compressing?5split?5packet?5?$CI?$CFd?5?9?$DO@ DB 'Com'
	DB	'pressing split packet (%d -> %d bytes)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_CreateFragments_@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_CreateFragments_@@9@9 DD 0236H	; `Netchan_CreateFragments_'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_FragSend@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_FragSend@@9@9 DD 01e5H		; `Netchan_FragSend'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@ILFILPBN@Frag?5Message@
CONST	SEGMENT
??_C@_0N@ILFILPBN@Frag?5Message@ DB 'Frag Message', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_AllocFragbuf@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_AllocFragbuf@@9@9 DD 0196H	; `Netchan_AllocFragbuf'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0P@KAPCCABL@SequencePacket@
CONST	SEGMENT
??_C@_0P@KAPCCABL@SequencePacket@ DB 'SequencePacket', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_Clear@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_Clear@@9@9 DD 0147H		; `Netchan_Clear'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_ClearFragments@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_ClearFragments@@9@9 DD 012aH	; `Netchan_ClearFragments'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_ClearFragbufs@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_ClearFragbufs@@9@9 DD 0111H	; `Netchan_ClearFragbufs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_UnlinkFragment@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_UnlinkFragment@@9@9 DD 0ebH	; `Netchan_UnlinkFragment'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_07OOAACIFJ@NetData@
CONST	SEGMENT
??_C@_07OOAACIFJ@NetData@ DB 'NetData', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@PGDDIMKN@Signon?5network?5traffic?3?5?5?$CFs?5fro@
CONST	SEGMENT
??_C@_0DH@PGDDIMKN@Signon?5network?5traffic?3?5?5?$CFs?5fro@ DB 'Signon n'
	DB	'etwork traffic:  %s from server, %s to server', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HEPBCEPK@chan?5?$CB?$DN?5NULL@
CONST	SEGMENT
??_C@_0N@HEPBCEPK@chan?5?$CB?$DN?5NULL@ DB 'chan != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_ReportFlow@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_ReportFlow@@9@9 DD 086H	; `Netchan_ReportFlow'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_Shutdown@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_Shutdown@@9@9 DD 081H		; `Netchan_Shutdown'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@GPFIMFHH@Network?5Pool@
CONST	SEGMENT
??_C@_0N@GPFIMFHH@Network?5Pool@ DB 'Network Pool', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
CONST	SEGMENT
??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@ DB 'D:\DevDrago'
	DB	'n\XashFE\dev\src\engine\common\net_chan.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HOOHLIKH@net_qport@
CONST	SEGMENT
??_C@_09HOOHLIKH@net_qport@ DB 'net_qport', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IKAHHCAI@?$CFi@
CONST	SEGMENT
??_C@_02IKAHHCAI@?$CFi@ DB '%i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JNOOJKIF@current?5quake?5netport@
CONST	SEGMENT
??_C@_0BG@JNOOJKIF@current?5quake?5netport@ DB 'current quake netport', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EABJDOBI@net_speeds@
CONST	SEGMENT
??_C@_0L@EABJDOBI@net_speeds@ DB 'net_speeds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NCECIBCF@net_showdrop@
CONST	SEGMENT
??_C@_0N@NCECIBCF@net_showdrop@ DB 'net_showdrop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GOBOAKPE@show?5packets?5that?5are?5dropped@
CONST	SEGMENT
??_C@_0BO@GOBOAKPE@show?5packets?5that?5are?5dropped@ DB 'show packets th'
	DB	'at are dropped', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OAMPIGGJ@net_chokeloop@
CONST	SEGMENT
??_C@_0O@OAMPIGGJ@net_chokeloop@ DB 'net_chokeloop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NHPJDMIG@apply?5bandwidth?5choke?5to?5loopba@
CONST	SEGMENT
??_C@_0CK@NHPJDMIG@apply?5bandwidth?5choke?5to?5loopba@ DB 'apply bandwid'
	DB	'th choke to loopback packets', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BBOLDPIN@net_showpackets@
CONST	SEGMENT
??_C@_0BA@BBOLDPIN@net_showpackets@ DB 'net_showpackets', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MAEAOHJB@show?5network?5packets@
CONST	SEGMENT
??_C@_0BF@MAEAOHJB@show?5network?5packets@ DB 'show network packets', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Netchan_Init@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??Netchan_Init@@9@9 DD 06fH		; `Netchan_Init'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	0eeH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0280H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	014H
	DW	06e7H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	014H
	DB	094H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	014H
	DB	0beH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	014H
	DW	0c92H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0403H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0533H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	014H
	DW	01daH
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_Validate
_TEXT	SEGMENT
_length$ = -20						; size = 4
_count$ = -16						; size = 4
_offset$ = -12						; size = 4
_buffer$ = -8						; size = 4
_i$ = -4						; size = 4
_chan$ = 8						; size = 4
_sb$ = 12						; size = 4
_frag_message$ = 16					; size = 4
_fragid$ = 20						; size = 4
_frag_offset$ = 24					; size = 4
_frag_length$ = 28					; size = 4
_Netchan_Validate PROC					; COMDAT

; 1142 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 1143 : 	int	i, buffer, offset;
; 1144 : 	int	count, length;
; 1145 : 
; 1146 : 	for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Netchan_Va
$LN2@Netchan_Va:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Netchan_Va:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN3@Netchan_Va

; 1147 : 	{
; 1148 : 		if( !frag_message[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _frag_message$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN5@Netchan_Va

; 1149 : 			continue;

	jmp	SHORT $LN2@Netchan_Va
$LN5@Netchan_Va:

; 1150 : 
; 1151 : 		buffer = FRAG_GETID( fragid[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _fragid$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _buffer$[ebp], edx

; 1152 : 		count = FRAG_GETCOUNT( fragid[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _fragid$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _count$[ebp], edx

; 1153 : 		offset = BitByte( frag_offset[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _frag_offset$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_BitByte
	add	esp, 4
	mov	DWORD PTR _offset$[ebp], eax

; 1154 : 		length = BitByte( frag_length[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _frag_length$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_BitByte
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax

; 1155 : 
; 1156 : 		if( buffer < 0 || buffer > NET_MAX_BUFFER_ID )

	cmp	DWORD PTR _buffer$[ebp], 0
	jl	SHORT $LN7@Netchan_Va
	cmp	DWORD PTR _buffer$[ebp], 32767		; 00007fffH
	jle	SHORT $LN6@Netchan_Va
$LN7@Netchan_Va:

; 1157 : 			return false;

	xor	eax, eax
	jmp	SHORT $LN1@Netchan_Va
$LN6@Netchan_Va:

; 1158 : 
; 1159 : 		if( count < 0 || count > NET_MAX_BUFFERS_COUNT )

	cmp	DWORD PTR _count$[ebp], 0
	jl	SHORT $LN9@Netchan_Va
	cmp	DWORD PTR _count$[ebp], 32767		; 00007fffH
	jle	SHORT $LN8@Netchan_Va
$LN9@Netchan_Va:

; 1160 : 			return false;

	xor	eax, eax
	jmp	SHORT $LN1@Netchan_Va
$LN8@Netchan_Va:

; 1161 : 
; 1162 : 		if( length < 0 || length > ( FRAGMENT_MAX_SIZE << 3 ))

	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN11@Netchan_Va
	cmp	DWORD PTR _length$[ebp], 512000		; 0007d000H
	jle	SHORT $LN10@Netchan_Va
$LN11@Netchan_Va:

; 1163 : 			return false;

	xor	eax, eax
	jmp	SHORT $LN1@Netchan_Va
$LN10@Netchan_Va:

; 1164 : 
; 1165 : 		if( offset < 0 || offset > ( FRAGMENT_MAX_SIZE << 3 ))

	cmp	DWORD PTR _offset$[ebp], 0
	jl	SHORT $LN13@Netchan_Va
	cmp	DWORD PTR _offset$[ebp], 512000		; 0007d000H
	jle	SHORT $LN12@Netchan_Va
$LN13@Netchan_Va:

; 1166 : 			return false;

	xor	eax, eax
	jmp	SHORT $LN1@Netchan_Va
$LN12@Netchan_Va:

; 1167 : 	}

	jmp	$LN2@Netchan_Va
$LN3@Netchan_Va:

; 1168 : 
; 1169 : 	return true;

	mov	eax, 1
$LN1@Netchan_Va:

; 1170 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_Validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_CheckForCompletion
_TEXT	SEGMENT
_p$ = -16						; size = 4
_size$ = -12						; size = 4
_id$ = -8						; size = 4
_c$ = -4						; size = 4
_chan$ = 8						; size = 4
_stream$ = 12						; size = 4
_intotalbuffers$ = 16					; size = 4
_Netchan_CheckForCompletion PROC			; COMDAT

; 687  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 688  : 	int	c, id;
; 689  : 	int	size;
; 690  : 	fragbuf_t	*p;
; 691  : 
; 692  : 	size = 0;

	mov	DWORD PTR _size$[ebp], 0

; 693  : 	c = 0;

	mov	DWORD PTR _c$[ebp], 0

; 694  : 
; 695  : 	p = chan->incomingbufs[stream];

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+262388]
	mov	DWORD PTR _p$[ebp], edx

; 696  : 	if( !p ) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@Netchan_Ch
	jmp	$LN1@Netchan_Ch
$LN2@Netchan_Ch:

; 697  : 
; 698  : 	while( p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@Netchan_Ch

; 699  : 	{
; 700  : 		size += MSG_GetNumBytesWritten( &p->frag_message );

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 701  : 		c++;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax

; 702  : 
; 703  : 		id = FRAG_GETID( p->bufferid );

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sar	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _id$[ebp], ecx

; 704  : 		if( id != c )

	mov	eax, DWORD PTR _id$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	je	SHORT $LN5@Netchan_Ch

; 705  : 		{
; 706  : 			if( chan->sock == NS_CLIENT )

	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@Netchan_Ch

; 707  : 			{
; 708  : 				Con_DPrintf( S_ERROR "Lost/dropped fragment would cause stall, retrying connection\n" );

	push	OFFSET ??_C@_0EJ@EEGOEOHO@?$FO1Error?3?$FO7?5Lost?1dropped?5fragmen@
	call	_Con_DPrintf
	add	esp, 4

; 709  : 				Cbuf_AddText( "reconnect\n" );

	push	OFFSET ??_C@_0L@FBPMLECH@reconnect?6@
	call	_Cbuf_AddText
	add	esp, 4
$LN5@Netchan_Ch:

; 710  : 			}
; 711  : 		}
; 712  : 		p = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx

; 713  : 	}

	jmp	SHORT $LN2@Netchan_Ch
$LN3@Netchan_Ch:

; 714  : 
; 715  : 	// received final message
; 716  : 	if( c == intotalbuffers )

	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _intotalbuffers$[ebp]
	jne	SHORT $LN1@Netchan_Ch

; 717  : 		chan->incomingready[stream] = true;

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262396], 1
$LN1@Netchan_Ch:

; 718  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_CheckForCompletion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_FindBufferById
_TEXT	SEGMENT
_pnewbuf$ = -8						; size = 4
_list$ = -4						; size = 4
_pplist$ = 8						; size = 4
_id$ = 12						; size = 4
_allocate$ = 16						; size = 4
_Netchan_FindBufferById PROC				; COMDAT

; 657  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 658  : 	fragbuf_t	*list = *pplist;

	mov	eax, DWORD PTR _pplist$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _list$[ebp], ecx
$LN2@Netchan_Fi:

; 659  : 	fragbuf_t	*pnewbuf;
; 660  : 
; 661  : 	while( list )

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN3@Netchan_Fi

; 662  : 	{
; 663  : 		if( list->bufferid == id )

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _id$[ebp]
	jne	SHORT $LN4@Netchan_Fi

; 664  : 			return list;

	mov	eax, DWORD PTR _list$[ebp]
	jmp	SHORT $LN1@Netchan_Fi
$LN4@Netchan_Fi:

; 665  : 
; 666  : 		list = list->next;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _list$[ebp], ecx

; 667  : 	}

	jmp	SHORT $LN2@Netchan_Fi
$LN3@Netchan_Fi:

; 668  : 
; 669  : 	if( !allocate )

	cmp	DWORD PTR _allocate$[ebp], 0
	jne	SHORT $LN5@Netchan_Fi

; 670  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@Netchan_Fi
$LN5@Netchan_Fi:

; 671  : 
; 672  : 	// create new entry
; 673  : 	pnewbuf = Netchan_AllocFragbuf();

	call	_Netchan_AllocFragbuf
	mov	DWORD PTR _pnewbuf$[ebp], eax

; 674  : 	pnewbuf->bufferid = id;

	mov	eax, DWORD PTR _pnewbuf$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 675  : 	Netchan_AddBufferToList( pplist, pnewbuf );

	mov	eax, DWORD PTR _pnewbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pplist$[ebp]
	push	ecx
	call	_Netchan_AddBufferToList
	add	esp, 8

; 676  : 
; 677  : 	return pnewbuf;

	mov	eax, DWORD PTR _pnewbuf$[ebp]
$LN1@Netchan_Fi:

; 678  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_FindBufferById ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_CreateFragments_
_TEXT	SEGMENT
tv144 = -112						; size = 4
_pbOut$1 = -44						; size = 4
_uSourceSize$2 = -40					; size = 4
_uCompressedSize$3 = -36				; size = 4
_p$ = -32						; size = 4
_wait$ = -28						; size = 4
_bufferid$ = -24					; size = 4
_pos$ = -20						; size = 4
_bytes$ = -16						; size = 4
_remaining$ = -12					; size = 4
_chunksize$ = -8					; size = 4
_buf$ = -4						; size = 4
_chan$ = 8						; size = 4
_msg$ = 12						; size = 4
_Netchan_CreateFragments_ PROC				; COMDAT

; 566  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi

; 567  : 	fragbuf_t		*buf;
; 568  : 	int		chunksize;
; 569  : 	int		remaining;
; 570  : 	int		bytes, pos;
; 571  : 	int		bufferid = 1;

	mov	DWORD PTR _bufferid$[ebp], 1

; 572  : 	fragbufwaiting_t	*wait, *p;
; 573  : 	
; 574  : 	if( MSG_GetNumBytesWritten( msg ) == 0 )

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@Netchan_Cr

; 575  : 		return;

	jmp	$LN1@Netchan_Cr
$LN6@Netchan_Cr:

; 576  : 
; 577  : 	if( chan->pfnBlockSize != NULL )

	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $LN7@Netchan_Cr

; 578  : 		chunksize = chan->pfnBlockSize( chan->client );

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _chunksize$[ebp], eax
	jmp	SHORT $LN8@Netchan_Cr
$LN7@Netchan_Cr:

; 579  : 	else chunksize = FRAGMENT_MAX_SIZE; // fallback

	mov	DWORD PTR _chunksize$[ebp], 64000	; 0000fa00H
$LN8@Netchan_Cr:

; 580  : 
; 581  : 	wait = (fragbufwaiting_t *)Mem_Calloc( net_mempool, sizeof( fragbufwaiting_t ));

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_CreateFragments_@@9@9
	add	eax, 15					; 0000000fH
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	1
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _net_mempool
	push	ecx
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _wait$[ebp], eax

; 582  : 
; 583  : 	if( !LZSS_IsCompressed( MSG_GetData( msg )))

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetData
	add	esp, 4
	push	eax
	call	_LZSS_IsCompressed
	add	esp, 4
	test	eax, eax
	jne	$LN9@Netchan_Cr

; 584  : 	{
; 585  : 		uint	uCompressedSize = 0;

	mov	DWORD PTR _uCompressedSize$3[ebp], 0

; 586  : 		uint	uSourceSize = MSG_GetNumBytesWritten( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	mov	DWORD PTR _uSourceSize$2[ebp], eax

; 587  : 		byte	*pbOut = LZSS_Compress( msg->pData, uSourceSize, &uCompressedSize );

	lea	eax, DWORD PTR _uCompressedSize$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _uSourceSize$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_LZSS_Compress
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pbOut$1[ebp], eax

; 588  : 
; 589  : 		if( pbOut && uCompressedSize > 0 && uCompressedSize < uSourceSize )

	cmp	DWORD PTR _pbOut$1[ebp], 0
	je	SHORT $LN10@Netchan_Cr
	cmp	DWORD PTR _uCompressedSize$3[ebp], 0
	jbe	SHORT $LN10@Netchan_Cr
	mov	eax, DWORD PTR _uCompressedSize$3[ebp]
	cmp	eax, DWORD PTR _uSourceSize$2[ebp]
	jae	SHORT $LN10@Netchan_Cr

; 590  : 		{
; 591  : 			Con_Reportf( "Compressing split packet (%d -> %d bytes)\n", uSourceSize, uCompressedSize );

	mov	eax, DWORD PTR _uCompressedSize$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _uSourceSize$2[ebp]
	push	ecx
	push	OFFSET ??_C@_0CL@OHDLHFLM@Compressing?5split?5packet?5?$CI?$CFd?5?9?$DO@
	call	_Con_Reportf
	add	esp, 12					; 0000000cH

; 592  : 			memcpy( msg->pData, pbOut, uCompressedSize );

	mov	eax, DWORD PTR _uCompressedSize$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbOut$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 593  : 			MSG_SeekToBit( msg, uCompressedSize << 3, SEEK_SET );

	push	0
	mov	eax, DWORD PTR _uCompressedSize$3[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_SeekToBit
	add	esp, 12					; 0000000cH
$LN10@Netchan_Cr:

; 594  : 		}
; 595  : 		if( pbOut ) free( pbOut );

	cmp	DWORD PTR _pbOut$1[ebp], 0
	je	SHORT $LN9@Netchan_Cr
	mov	eax, DWORD PTR _pbOut$1[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN9@Netchan_Cr:

; 596  : 	}
; 597  : 
; 598  : 	remaining = MSG_GetNumBytesWritten( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	mov	DWORD PTR _remaining$[ebp], eax

; 599  : 	pos = 0;	// current position in bytes

	mov	DWORD PTR _pos$[ebp], 0
$LN2@Netchan_Cr:

; 600  : 
; 601  : 	while( remaining > 0 )

	cmp	DWORD PTR _remaining$[ebp], 0
	jle	$LN3@Netchan_Cr

; 602  : 	{
; 603  : 		bytes = Q_min( remaining, chunksize );

	mov	eax, DWORD PTR _remaining$[ebp]
	cmp	eax, DWORD PTR _chunksize$[ebp]
	jge	SHORT $LN15@Netchan_Cr
	mov	ecx, DWORD PTR _remaining$[ebp]
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN16@Netchan_Cr
$LN15@Netchan_Cr:
	mov	edx, DWORD PTR _chunksize$[ebp]
	mov	DWORD PTR tv144[ebp], edx
$LN16@Netchan_Cr:
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR _bytes$[ebp], eax

; 604  : 		remaining -= bytes;

	mov	eax, DWORD PTR _remaining$[ebp]
	sub	eax, DWORD PTR _bytes$[ebp]
	mov	DWORD PTR _remaining$[ebp], eax

; 605  : 	
; 606  : 		buf = Netchan_AllocFragbuf();

	call	_Netchan_AllocFragbuf
	mov	DWORD PTR _buf$[ebp], eax

; 607  : 		buf->bufferid = bufferid++;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _bufferid$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _bufferid$[ebp]
	add	edx, 1
	mov	DWORD PTR _bufferid$[ebp], edx

; 608  : 
; 609  : 		// Copy in data
; 610  : 		MSG_Clear( &buf->frag_message );

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_Clear
	add	esp, 4

; 611  : 		MSG_WriteBits( &buf->frag_message, &msg->pData[pos], bytes << 3 );

	mov	eax, DWORD PTR _bytes$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_WriteBits
	add	esp, 12					; 0000000cH

; 612  : 
; 613  : 		Netchan_AddFragbufToTail( wait, buf );

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wait$[ebp]
	push	ecx
	call	_Netchan_AddFragbufToTail
	add	esp, 8

; 614  : 		pos += bytes;

	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _bytes$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 615  : 	}

	jmp	$LN2@Netchan_Cr
$LN3@Netchan_Cr:

; 616  : 
; 617  : 	// now add waiting list item to end of buffer queue
; 618  : 	if( !chan->waitlist[FRAG_NORMAL_STREAM] )

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [edx+ecx+262332], 0
	jne	SHORT $LN12@Netchan_Cr

; 619  : 	{
; 620  : 		chan->waitlist[FRAG_NORMAL_STREAM] = wait;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR _wait$[ebp]
	mov	DWORD PTR [edx+ecx+262332], eax

; 621  : 	}

	jmp	SHORT $LN1@Netchan_Cr
$LN12@Netchan_Cr:

; 622  : 	else
; 623  : 	{
; 624  : 		p = chan->waitlist[FRAG_NORMAL_STREAM];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+ecx+262332]
	mov	DWORD PTR _p$[ebp], eax
$LN4@Netchan_Cr:

; 625  : 
; 626  : 		while( p->next )

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Netchan_Cr

; 627  : 			p = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN4@Netchan_Cr
$LN5@Netchan_Cr:

; 628  : 		p->next = wait;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _wait$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@Netchan_Cr:

; 629  : 	}
; 630  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_CreateFragments_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_UpdateFlow
_TEXT	SEGMENT
tv137 = -100						; size = 4
_pstat$1 = -32						; size = 4
_pprev$2 = -28						; size = 4
_pflow$3 = -24						; size = 4
_start$ = -20						; size = 4
_flow$ = -16						; size = 4
_bytes$ = -12						; size = 4
_i$ = -8						; size = 4
_faccumulatedtime$ = -4					; size = 4
_chan$ = 8						; size = 4
_Netchan_UpdateFlow PROC				; COMDAT

; 445  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 446  : 	float	faccumulatedtime = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _faccumulatedtime$[ebp], xmm0

; 447  : 	int	i, bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 448  : 	int	flow, start;
; 449  : 
; 450  : 	if( !chan ) return;

	cmp	DWORD PTR _chan$[ebp], 0
	jne	SHORT $LN8@Netchan_Up
	jmp	$LN3@Netchan_Up
$LN8@Netchan_Up:

; 451  : 
; 452  : 	for( flow = 0; flow < 2; flow++ )

	mov	DWORD PTR _flow$[ebp], 0
	jmp	SHORT $LN4@Netchan_Up
$LN2@Netchan_Up:
	mov	eax, DWORD PTR _flow$[ebp]
	add	eax, 1
	mov	DWORD PTR _flow$[ebp], eax
$LN4@Netchan_Up:
	cmp	DWORD PTR _flow$[ebp], 2
	jge	$LN3@Netchan_Up

; 453  : 	{
; 454  : 		flow_t	*pflow = &chan->flow[flow];

	imul	eax, DWORD PTR _flow$[ebp], 544
	mov	ecx, DWORD PTR _chan$[ebp]
	lea	edx, DWORD PTR [ecx+eax+262672]
	mov	DWORD PTR _pflow$3[ebp], edx

; 455  : 
; 456  : 		if(( host.realtime - pflow->nextcompute ) < FLOW_INTERVAL )

	mov	eax, DWORD PTR _pflow$3[ebp]
	movsd	xmm0, QWORD PTR _host+1440
	subsd	xmm0, QWORD PTR [eax+520]
	movsd	xmm1, QWORD PTR __real@3fb999999999999a
	comisd	xmm1, xmm0
	jbe	SHORT $LN9@Netchan_Up

; 457  : 			continue;

	jmp	SHORT $LN2@Netchan_Up
$LN9@Netchan_Up:

; 458  : 
; 459  : 		pflow->nextcompute = host.realtime + FLOW_INTERVAL;

	movsd	xmm0, QWORD PTR _host+1440
	addsd	xmm0, QWORD PTR __real@3fb999999999999a
	mov	eax, DWORD PTR _pflow$3[ebp]
	movsd	QWORD PTR [eax+520], xmm0

; 460  : 		start = pflow->current - 1;

	mov	eax, DWORD PTR _pflow$3[ebp]
	mov	ecx, DWORD PTR [eax+512]
	sub	ecx, 1
	mov	DWORD PTR _start$[ebp], ecx

; 461  : 
; 462  : 		// compute data flow rate
; 463  : 		for( i = 0; i < MASK_LATENT; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@Netchan_Up
$LN5@Netchan_Up:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@Netchan_Up:
	cmp	DWORD PTR _i$[ebp], 31			; 0000001fH
	jge	SHORT $LN6@Netchan_Up

; 464  : 		{
; 465  : 			flowstats_t *pprev = &pflow->stats[(start - i) & MASK_LATENT];

	mov	eax, DWORD PTR _start$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	and	eax, 31					; 0000001fH
	shl	eax, 4
	add	eax, DWORD PTR _pflow$3[ebp]
	mov	DWORD PTR _pprev$2[ebp], eax

; 466  : 			flowstats_t *pstat = &pflow->stats[(start - i - 1) & MASK_LATENT];

	mov	eax, DWORD PTR _start$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	and	eax, 31					; 0000001fH
	shl	eax, 4
	add	eax, DWORD PTR _pflow$3[ebp]
	mov	DWORD PTR _pstat$1[ebp], eax

; 467  : 
; 468  : 			faccumulatedtime += ( pprev->time - pstat->time );

	mov	eax, DWORD PTR _pprev$2[ebp]
	mov	ecx, DWORD PTR _pstat$1[ebp]
	movsd	xmm0, QWORD PTR [eax+8]
	subsd	xmm0, QWORD PTR [ecx+8]
	cvtss2sd xmm1, DWORD PTR _faccumulatedtime$[ebp]
	addsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _faccumulatedtime$[ebp], xmm0

; 469  : 			bytes += pstat->size;

	mov	eax, DWORD PTR _pstat$1[ebp]
	mov	ecx, DWORD PTR _bytes$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _bytes$[ebp], ecx

; 470  : 		}

	jmp	SHORT $LN5@Netchan_Up
$LN6@Netchan_Up:

; 471  : 
; 472  : 		pflow->kbytespersec = (faccumulatedtime == 0.0f) ? 0.0f : bytes / faccumulatedtime / 1024.0f;

	movss	xmm0, DWORD PTR _faccumulatedtime$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN11@Netchan_Up
	xorps	xmm0, xmm0
	movss	DWORD PTR tv137[ebp], xmm0
	jmp	SHORT $LN12@Netchan_Up
$LN11@Netchan_Up:
	cvtsi2ss xmm0, DWORD PTR _bytes$[ebp]
	divss	xmm0, DWORD PTR _faccumulatedtime$[ebp]
	divss	xmm0, DWORD PTR __real@44800000
	movss	DWORD PTR tv137[ebp], xmm0
$LN12@Netchan_Up:
	mov	eax, DWORD PTR _pflow$3[ebp]
	movss	xmm0, DWORD PTR tv137[ebp]
	movss	DWORD PTR [eax+528], xmm0

; 473  : 		pflow->avgkbytespersec = pflow->avgkbytespersec * FLOW_AVG + pflow->kbytespersec * (1.0 - FLOW_AVG);

	mov	eax, DWORD PTR _pflow$3[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+532]
	mulsd	xmm0, QWORD PTR __real@3fe5555555555555
	mov	ecx, DWORD PTR _pflow$3[ebp]
	cvtss2sd xmm1, DWORD PTR [ecx+528]
	mulsd	xmm1, QWORD PTR __real@3fd5555555555556
	addsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _pflow$3[ebp]
	movss	DWORD PTR [edx+532], xmm0

; 474  : 	}

	jmp	$LN2@Netchan_Up
$LN3@Netchan_Up:

; 475  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_UpdateFlow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_AddFragbufToTail
_TEXT	SEGMENT
_p$ = -4						; size = 4
_wait$ = 8						; size = 4
_buf$ = 12						; size = 4
_Netchan_AddFragbufToTail PROC				; COMDAT

; 422  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 423  : 	fragbuf_t	*p;
; 424  : 
; 425  : 	buf->next = NULL;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax], 0

; 426  : 	wait->fragbufcount++;

	mov	eax, DWORD PTR _wait$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _wait$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 427  : 	p = wait->fragbufs;

	mov	eax, DWORD PTR _wait$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _p$[ebp], ecx

; 428  : 
; 429  : 	if( p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN4@Netchan_Ad
$LN2@Netchan_Ad:

; 430  : 	{
; 431  : 		while( p->next )

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Netchan_Ad

; 432  : 			p = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN2@Netchan_Ad
$LN3@Netchan_Ad:

; 433  : 		p->next = buf;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax], ecx

; 434  : 	}

	jmp	SHORT $LN1@Netchan_Ad
$LN4@Netchan_Ad:

; 435  : 	else wait->fragbufs = buf;

	mov	eax, DWORD PTR _wait$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@Netchan_Ad:

; 436  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_AddFragbufToTail ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_AllocFragbuf
_TEXT	SEGMENT
_buf$ = -4						; size = 4
_Netchan_AllocFragbuf PROC				; COMDAT

; 406  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 407  : 	fragbuf_t	*buf;
; 408  : 
; 409  : 	buf = (fragbuf_t *)Mem_Calloc( net_mempool, sizeof( fragbuf_t ));

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_AllocFragbuf@@9@9
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	1
	push	65844					; 00010134H
	mov	ecx, DWORD PTR _net_mempool
	push	ecx
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buf$[ebp], eax

; 410  : 	MSG_Init( &buf->frag_message, "Frag Message", buf->frag_message_buf, sizeof( buf->frag_message_buf ));

	push	-1
	push	65536					; 00010000H
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	push	OFFSET ??_C@_0N@ILFILPBN@Frag?5Message@
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 8
	push	ecx
	call	_MSG_InitExt
	add	esp, 20					; 00000014H

; 411  : 
; 412  : 	return buf;

	mov	eax, DWORD PTR _buf$[ebp]

; 413  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_AllocFragbuf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_ClearFragments
_TEXT	SEGMENT
_i$ = -12						; size = 4
_next$ = -8						; size = 4
_wait$ = -4						; size = 4
_chan$ = 8						; size = 4
_Netchan_ClearFragments PROC				; COMDAT

; 298  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 299  : 	fragbufwaiting_t	*wait, *next;
; 300  : 	int		i;
; 301  : 
; 302  : 	for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Netchan_Cl
$LN2@Netchan_Cl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Netchan_Cl:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN1@Netchan_Cl

; 303  : 	{
; 304  : 		wait = chan->waitlist[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+262332]
	mov	DWORD PTR _wait$[ebp], edx
$LN5@Netchan_Cl:

; 305  : 
; 306  : 		while( wait )

	cmp	DWORD PTR _wait$[ebp], 0
	je	SHORT $LN6@Netchan_Cl

; 307  : 		{
; 308  : 			next = wait->next;

	mov	eax, DWORD PTR _wait$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx

; 309  : 			Netchan_ClearFragbufs( &wait->fragbufs );

	mov	eax, DWORD PTR _wait$[ebp]
	add	eax, 8
	push	eax
	call	_Netchan_ClearFragbufs
	add	esp, 4

; 310  : 			Mem_Free( wait );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_ClearFragments@@9@9
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _wait$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 311  : 			wait = next;

	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _wait$[ebp], eax

; 312  : 		}

	jmp	SHORT $LN5@Netchan_Cl
$LN6@Netchan_Cl:

; 313  : 		chan->waitlist[i] = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262332], 0

; 314  : 
; 315  : 		Netchan_ClearFragbufs( &chan->fragbufs[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+262356]
	push	edx
	call	_Netchan_ClearFragbufs
	add	esp, 4

; 316  : 		Netchan_FlushIncoming( chan, i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _chan$[ebp]
	push	ecx
	call	_Netchan_FlushIncoming
	add	esp, 8

; 317  : 	}

	jmp	$LN2@Netchan_Cl
$LN1@Netchan_Cl:

; 318  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_ClearFragments ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_ClearFragbufs
_TEXT	SEGMENT
_n$ = -8						; size = 4
_buf$ = -4						; size = 4
_ppbuf$ = 8						; size = 4
_Netchan_ClearFragbufs PROC				; COMDAT

; 273  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 274  : 	fragbuf_t	*buf, *n;
; 275  : 
; 276  : 	if( !ppbuf ) return;

	cmp	DWORD PTR _ppbuf$[ebp], 0
	jne	SHORT $LN4@Netchan_Cl
	jmp	SHORT $LN1@Netchan_Cl
$LN4@Netchan_Cl:

; 277  : 
; 278  : 	// Throw away any that are sitting around
; 279  : 	buf = *ppbuf;

	mov	eax, DWORD PTR _ppbuf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _buf$[ebp], ecx
$LN2@Netchan_Cl:

; 280  : 
; 281  : 	while( buf )

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN3@Netchan_Cl

; 282  : 	{
; 283  : 		n = buf->next;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _n$[ebp], ecx

; 284  : 		Mem_Free( buf );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_ClearFragbufs@@9@9
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 285  : 		buf = n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _buf$[ebp], eax

; 286  : 	}

	jmp	SHORT $LN2@Netchan_Cl
$LN3@Netchan_Cl:

; 287  : 
; 288  : 	*ppbuf = NULL;

	mov	eax, DWORD PTR _ppbuf$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@Netchan_Cl:

; 289  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_ClearFragbufs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_UnlinkFragment
_TEXT	SEGMENT
_search$ = -4						; size = 4
_buf$ = 8						; size = 4
_list$ = 12						; size = 4
_Netchan_UnlinkFragment PROC				; COMDAT

; 235  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 236  : 	fragbuf_t	*search;
; 237  : 
; 238  : 	if( !list ) return;

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN4@Netchan_Un
	jmp	SHORT $LN1@Netchan_Un
$LN4@Netchan_Un:

; 239  : 
; 240  : 	// at head of list
; 241  : 	if( buf == *list )

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN5@Netchan_Un

; 242  : 	{
; 243  : 		// remove first element
; 244  : 		*list = buf->next;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 245  : 		
; 246  : 		// destroy remnant
; 247  : 		Mem_Free( buf );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_UnlinkFragment@@9@9
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 248  : 		return;

	jmp	SHORT $LN1@Netchan_Un
$LN5@Netchan_Un:

; 249  : 	}
; 250  : 
; 251  : 	search = *list;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _search$[ebp], ecx
$LN2@Netchan_Un:

; 252  : 	while( search->next )

	mov	eax, DWORD PTR _search$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Netchan_Un

; 253  : 	{
; 254  : 		if( search->next == buf )

	mov	eax, DWORD PTR _search$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _buf$[ebp]
	jne	SHORT $LN6@Netchan_Un

; 255  : 		{
; 256  : 			search->next = buf->next;

	mov	eax, DWORD PTR _search$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 257  : 
; 258  : 			// destroy remnant
; 259  : 			Mem_Free( buf );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_UnlinkFragment@@9@9
	add	eax, 24					; 00000018H
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 260  : 			return;

	jmp	SHORT $LN1@Netchan_Un
$LN6@Netchan_Un:

; 261  : 		}
; 262  : 		search = search->next;

	mov	eax, DWORD PTR _search$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _search$[ebp], ecx

; 263  : 	}

	jmp	SHORT $LN2@Netchan_Un
$LN1@Netchan_Un:

; 264  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_UnlinkFragment ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_AddBufferToList
_TEXT	SEGMENT
_id2$ = -16						; size = 4
_id1$ = -12						; size = 4
_n$ = -8						; size = 4
_pprev$ = -4						; size = 4
_pplist$ = 8						; size = 4
_pbuf$ = 12						; size = 4
_Netchan_AddBufferToList PROC				; COMDAT

; 521  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 522  : 	// Find best slot
; 523  : 	fragbuf_t	*pprev, *n;
; 524  : 	int	id1, id2;
; 525  : 
; 526  : 	pbuf->next = NULL;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR [eax], 0

; 527  : 
; 528  : 	if( !pplist )

	cmp	DWORD PTR _pplist$[ebp], 0
	jne	SHORT $LN4@Netchan_Ad

; 529  : 		return;

	jmp	$LN1@Netchan_Ad
$LN4@Netchan_Ad:

; 530  : 
; 531  : 	if( !*pplist )

	mov	eax, DWORD PTR _pplist$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@Netchan_Ad

; 532  : 	{
; 533  : 		pbuf->next = *pplist;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	ecx, DWORD PTR _pplist$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 534  : 		*pplist = pbuf;

	mov	eax, DWORD PTR _pplist$[ebp]
	mov	ecx, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR [eax], ecx

; 535  : 		return;

	jmp	SHORT $LN1@Netchan_Ad
$LN5@Netchan_Ad:

; 536  : 	}
; 537  : 
; 538  : 	pprev = *pplist;

	mov	eax, DWORD PTR _pplist$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pprev$[ebp], ecx
$LN2@Netchan_Ad:

; 539  : 	while( pprev->next )

	mov	eax, DWORD PTR _pprev$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Netchan_Ad

; 540  : 	{
; 541  : 		n = pprev->next; // next item in list

	mov	eax, DWORD PTR _pprev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _n$[ebp], ecx

; 542  : 		id1 = FRAG_GETID( n->bufferid );

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sar	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _id1$[ebp], ecx

; 543  : 		id2 = FRAG_GETID( pbuf->bufferid );

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sar	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _id2$[ebp], ecx

; 544  : 
; 545  : 		if( id1 > id2 )

	mov	eax, DWORD PTR _id1$[ebp]
	cmp	eax, DWORD PTR _id2$[ebp]
	jle	SHORT $LN6@Netchan_Ad

; 546  : 		{
; 547  : 			// insert here
; 548  : 			pbuf->next = n->next;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 549  : 			pprev->next = pbuf;

	mov	eax, DWORD PTR _pprev$[ebp]
	mov	ecx, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR [eax], ecx

; 550  : 			return;

	jmp	SHORT $LN1@Netchan_Ad
$LN6@Netchan_Ad:

; 551  : 		}
; 552  : 		pprev = pprev->next;

	mov	eax, DWORD PTR _pprev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pprev$[ebp], ecx

; 553  : 	}

	jmp	SHORT $LN2@Netchan_Ad
$LN3@Netchan_Ad:

; 554  : 
; 555  : 	// insert at end
; 556  : 	pprev->next = pbuf;

	mov	eax, DWORD PTR _pprev$[ebp]
	mov	ecx, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@Netchan_Ad:

; 557  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_AddBufferToList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_FlushIncoming
_TEXT	SEGMENT
_n$ = -8						; size = 4
_p$ = -4						; size = 4
_chan$ = 8						; size = 4
_stream$ = 12						; size = 4
_Netchan_FlushIncoming PROC				; COMDAT

; 931  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 932  : 	fragbuf_t	*p, *n;
; 933  : 
; 934  : 	MSG_Clear( &net_message );

	push	OFFSET _net_message
	call	_MSG_Clear
	add	esp, 4

; 935  : 
; 936  : 	p = chan->incomingbufs[ stream ];

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+262388]
	mov	DWORD PTR _p$[ebp], edx
$LN2@Netchan_Fl:

; 937  : 
; 938  : 	while( p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@Netchan_Fl

; 939  : 	{
; 940  : 		n = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _n$[ebp], ecx

; 941  : 		Mem_Free( p );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_FlushIncoming@@9@9
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 942  : 		p = n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 943  : 	}

	jmp	SHORT $LN2@Netchan_Fl
$LN3@Netchan_Fl:

; 944  : 	chan->incomingbufs[stream] = NULL;

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262388], 0

; 945  : 	chan->incomingready[stream] = false;

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262396], 0

; 946  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_FlushIncoming ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_Clear
_TEXT	SEGMENT
_i$ = -4						; size = 4
_chan$ = 8						; size = 4
_Netchan_Clear PROC					; COMDAT

; 327  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 328  : 	int	i;
; 329  : 
; 330  : 	Netchan_ClearFragments( chan );

	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	call	_Netchan_ClearFragments
	add	esp, 4

; 331  : 
; 332  : 	chan->cleartime = 0.0;

	mov	eax, DWORD PTR _chan$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax+56], xmm0

; 333  : 	chan->reliable_length = 0;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [eax+131224], 0

; 334  : 
; 335  : 	for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Netchan_Cl
$LN2@Netchan_Cl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Netchan_Cl:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN3@Netchan_Cl

; 336  : 	{
; 337  : 		chan->reliable_fragid[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262348], 0

; 338  : 		chan->reliable_fragment[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262340], 0

; 339  : 		chan->fragbufcount[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262364], 0

; 340  : 		chan->frag_startpos[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262372], 0

; 341  : 		chan->frag_length[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262380], 0

; 342  : 		chan->incomingready[i] = false;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262396], 0

; 343  : 	}

	jmp	SHORT $LN2@Netchan_Cl
$LN3@Netchan_Cl:

; 344  : 
; 345  : 	if( chan->tempbuffer )

	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax+262664], 0
	je	SHORT $LN5@Netchan_Cl

; 346  : 	{
; 347  : 		Mem_Free( chan->tempbuffer );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_Clear@@9@9
	add	eax, 20					; 00000014H
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+262664]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 348  : 		chan->tempbuffer = NULL;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [eax+262664], 0
$LN5@Netchan_Cl:

; 349  : 	}
; 350  : 	chan->tempbuffersize = 0;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [eax+262668], 0

; 351  : 
; 352  : 	memset( chan->flow, 0, sizeof( chan->flow ));

	push	1088					; 00000440H
	push	0
	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 262672				; 00040210H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 353  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_Clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_FragSend
_TEXT	SEGMENT
_i$ = -8						; size = 4
_wait$ = -4						; size = 4
_chan$ = 8						; size = 4
_Netchan_FragSend PROC					; COMDAT

; 485  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 486  : 	fragbufwaiting_t	*wait;
; 487  : 	int		i;
; 488  : 
; 489  : 	if( !chan ) return;

	cmp	DWORD PTR _chan$[ebp], 0
	jne	SHORT $LN5@Netchan_Fr
	jmp	$LN1@Netchan_Fr
$LN5@Netchan_Fr:

; 490  : 
; 491  : 	for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Netchan_Fr
$LN2@Netchan_Fr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Netchan_Fr:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN1@Netchan_Fr

; 492  : 	{
; 493  : 		// already something queued up, just leave in waitlist
; 494  : 		if( chan->fragbufs[i] ) continue;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax*4+262356], 0
	je	SHORT $LN6@Netchan_Fr
	jmp	SHORT $LN2@Netchan_Fr
$LN6@Netchan_Fr:

; 495  : 
; 496  : 		wait = chan->waitlist[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+262332]
	mov	DWORD PTR _wait$[ebp], edx

; 497  : 
; 498  : 		// nothing to queue?
; 499  : 		if( !wait ) continue;

	cmp	DWORD PTR _wait$[ebp], 0
	jne	SHORT $LN7@Netchan_Fr
	jmp	SHORT $LN2@Netchan_Fr
$LN7@Netchan_Fr:

; 500  : 
; 501  : 		chan->waitlist[i] = wait->next;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR _wait$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*4+262332], edx

; 502  : 
; 503  : 		wait->next = NULL;

	mov	eax, DWORD PTR _wait$[ebp]
	mov	DWORD PTR [eax], 0

; 504  : 
; 505  : 		// copy in to fragbuf
; 506  : 		chan->fragbufs[i] = wait->fragbufs;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR _wait$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax*4+262356], edx

; 507  : 		chan->fragbufcount[i] = wait->fragbufcount;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR _wait$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*4+262364], edx

; 508  : 
; 509  : 		// throw away wait list
; 510  : 		Mem_Free( wait );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_FragSend@@9@9
	add	eax, 25					; 00000019H
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _wait$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 511  : 	}

	jmp	$LN2@Netchan_Fr
$LN1@Netchan_Fr:

; 512  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_FragSend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_ReportFlow
_TEXT	SEGMENT
tv72 = -200						; size = 4
_outgoing$ = -132					; size = 64
_incoming$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_chan$ = 8						; size = 4
_Netchan_ReportFlow PROC				; COMDAT

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 135  : 	char	incoming[64];
; 136  : 	char	outgoing[64];
; 137  : 
; 138  : 	if( CL_IsPlaybackDemo( ))

	call	_CL_IsPlaybackDemo
	test	eax, eax
	je	SHORT $LN2@Netchan_Re

; 139  : 		return;

	jmp	$LN1@Netchan_Re
$LN2@Netchan_Re:

; 140  : 
; 141  : 	Assert( chan != NULL );

	cmp	DWORD PTR _chan$[ebp], 0
	je	SHORT $LN4@Netchan_Re
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN5@Netchan_Re
$LN4@Netchan_Re:
	mov	DWORD PTR tv72[ebp], 0
$LN5@Netchan_Re:
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_ReportFlow@@9@9
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0N@HEPBCEPK@chan?5?$CB?$DN?5NULL@
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	call	_DBG_AssertFunction
	add	esp, 20					; 00000014H

; 142  : 
; 143  : 	Q_strcpy( incoming, Q_pretifymem((float)chan->flow[FLOW_INCOMING].totalbytes, 3 ));

	push	99999					; 0001869fH
	push	3
	mov	eax, 544				; 00000220H
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+eax+263208]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_Q_pretifymem
	add	esp, 8
	push	eax
	lea	edx, DWORD PTR _incoming$[ebp]
	push	edx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 144  : 	Q_strcpy( outgoing, Q_pretifymem((float)chan->flow[FLOW_OUTGOING].totalbytes, 3 ));

	push	99999					; 0001869fH
	push	3
	mov	eax, 544				; 00000220H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+ecx+263208]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_Q_pretifymem
	add	esp, 8
	push	eax
	lea	eax, DWORD PTR _outgoing$[ebp]
	push	eax
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 145  : 
; 146  : 	Con_DPrintf( "Signon network traffic:  %s from server, %s to server\n", incoming, outgoing );

	lea	eax, DWORD PTR _outgoing$[ebp]
	push	eax
	lea	ecx, DWORD PTR _incoming$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DH@PGDDIMKN@Signon?5network?5traffic?3?5?5?$CFs?5fro@
	call	_Con_DPrintf
	add	esp, 12					; 0000000cH
$LN1@Netchan_Re:

; 147  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_ReportFlow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_IsLocal
_TEXT	SEGMENT
_chan$ = 8						; size = 4
_Netchan_IsLocal PROC					; COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 158  : 	if( !NET_IsActive() || NET_IsLocalAddress( chan->remote_address ))

	call	_NET_IsActive
	test	eax, eax
	je	SHORT $LN3@Netchan_Is
	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 4
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	call	_NET_IsLocalAddress
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN2@Netchan_Is
$LN3@Netchan_Is:

; 159  : 		return true;

	mov	eax, 1
	jmp	SHORT $LN1@Netchan_Is
$LN2@Netchan_Is:

; 160  : 	return false;

	xor	eax, eax
$LN1@Netchan_Is:

; 161  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_IsLocal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_CanPacket
_TEXT	SEGMENT
tv74 = -68						; size = 4
_chan$ = 8						; size = 4
_choke$ = 12						; size = 4
_Netchan_CanPacket PROC					; COMDAT

; 217  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 218  : 	// never choke loopback packets.
; 219  : 	if( !choke || !net_chokeloopback->value && NET_IsLocalAddress( chan->remote_address ))

	cmp	DWORD PTR _choke$[ebp], 0
	je	SHORT $LN3@Netchan_Ca
	mov	eax, DWORD PTR _net_chokeloopback
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@Netchan_Ca
	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 4
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	call	_NET_IsLocalAddress
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN2@Netchan_Ca
$LN3@Netchan_Ca:

; 220  : 	{
; 221  : 		chan->cleartime = host.realtime;

	mov	eax, DWORD PTR _chan$[ebp]
	movsd	xmm0, QWORD PTR _host+1440
	movsd	QWORD PTR [eax+56], xmm0

; 222  : 		return true;

	mov	eax, 1
	jmp	SHORT $LN1@Netchan_Ca
$LN2@Netchan_Ca:

; 223  : 	}
; 224  : 
; 225  : 	return chan->cleartime < host.realtime ? true : false;

	mov	eax, DWORD PTR _chan$[ebp]
	movsd	xmm0, QWORD PTR _host+1440
	comisd	xmm0, QWORD PTR [eax+56]
	jbe	SHORT $LN5@Netchan_Ca
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@Netchan_Ca
$LN5@Netchan_Ca:
	mov	DWORD PTR tv74[ebp], 0
$LN6@Netchan_Ca:
	mov	eax, DWORD PTR tv74[ebp]
$LN1@Netchan_Ca:

; 226  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_CanPacket ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_IncomingReady
_TEXT	SEGMENT
_i$ = -4						; size = 4
_chan$ = 8						; size = 4
_Netchan_IncomingReady PROC				; COMDAT

; 197  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 198  : 	int	i;
; 199  : 
; 200  : 	for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Netchan_In
$LN2@Netchan_In:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Netchan_In:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN3@Netchan_In

; 201  : 	{
; 202  : 		if( chan->incomingready[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax*4+262396], 0
	je	SHORT $LN5@Netchan_In

; 203  : 			return true;

	mov	eax, 1
	jmp	SHORT $LN1@Netchan_In
$LN5@Netchan_In:

; 204  : 	}

	jmp	SHORT $LN2@Netchan_In
$LN3@Netchan_In:

; 205  : 
; 206  : 	return false;

	xor	eax, eax
$LN1@Netchan_In:

; 207  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_IncomingReady ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_UpdateProgress
_TEXT	SEGMENT
_percent$1 = -1068					; size = 4
_len$2 = -1064						; size = 4
_out$3 = -1060						; size = 4
_in$4 = -1056						; size = 4
_sz$5 = -1052						; size = 1024
_percent$6 = -28					; size = 4
_bestpercent$ = -24					; size = 4
_total$ = -20						; size = 4
_c$ = -16						; size = 4
_i$ = -12						; size = 4
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_chan$ = 8						; size = 4
_Netchan_UpdateProgress PROC				; COMDAT

; 1179 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1260				; 000004ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1180 : 	fragbuf_t *p;
; 1181 : 	int	i, c = 0;

	mov	DWORD PTR _c$[ebp], 0

; 1182 : 	int	total = 0;

	mov	DWORD PTR _total$[ebp], 0

; 1183 : 	float	bestpercent = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _bestpercent$[ebp], xmm0

; 1184 : 
; 1185 : 	if( host.downloadcount == 0 )

	cmp	DWORD PTR _host+752, 0
	jne	SHORT $LN9@Netchan_Up

; 1186 : 	{
; 1187 : 		scr_download->value = -1.0f;

	mov	eax, DWORD PTR _scr_download
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+12], xmm0

; 1188 : 		host.downloadfile[0] = '\0';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR _host[ecx+496], 0
$LN9@Netchan_Up:

; 1189 : 	}
; 1190 : 
; 1191 : 	// do show slider for file downloads.
; 1192 : 	if( !chan->incomingbufs[FRAG_FILE_STREAM] )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax+262388], 0
	jne	SHORT $LN10@Netchan_Up

; 1193 : 		return;

	jmp	$LN1@Netchan_Up
$LN10@Netchan_Up:

; 1194 : 
; 1195 : 	for( i = MAX_STREAMS - 1; i >= 0; i-- )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@Netchan_Up
$LN2@Netchan_Up:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Netchan_Up:
	cmp	DWORD PTR _i$[ebp], 0
	jl	$LN3@Netchan_Up

; 1196 : 	{
; 1197 : 		// receiving data
; 1198 : 		if( chan->incomingbufs[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax*4+262388], 0
	je	$LN11@Netchan_Up

; 1199 : 		{
; 1200 : 			p = chan->incomingbufs[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+262388]
	mov	DWORD PTR _p$[ebp], edx

; 1201 : 
; 1202 : 			total = FRAG_GETCOUNT( p->bufferid );

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _total$[ebp], ecx
$LN5@Netchan_Up:

; 1203 : 
; 1204 : 			while( p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN6@Netchan_Up

; 1205 : 			{
; 1206 : 				c++;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax

; 1207 : 				p = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx

; 1208 : 			}

	jmp	SHORT $LN5@Netchan_Up
$LN6@Netchan_Up:

; 1209 : 
; 1210 : 			if( total )

	cmp	DWORD PTR _total$[ebp], 0
	je	SHORT $LN14@Netchan_Up

; 1211 : 			{
; 1212 : 				float	percent = 100.0f * (float)c / (float)total;

	cvtsi2ss xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	cvtsi2ss xmm1, DWORD PTR _total$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _percent$6[ebp], xmm0

; 1213 : 
; 1214 : 				if( percent > bestpercent )

	movss	xmm0, DWORD PTR _percent$6[ebp]
	comiss	xmm0, DWORD PTR _bestpercent$[ebp]
	jbe	SHORT $LN14@Netchan_Up

; 1215 : 					bestpercent = percent;

	movss	xmm0, DWORD PTR _percent$6[ebp]
	movss	DWORD PTR _bestpercent$[ebp], xmm0
$LN14@Netchan_Up:

; 1216 : 			}
; 1217 : 
; 1218 : 			p = chan->incomingbufs[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+262388]
	mov	DWORD PTR _p$[ebp], edx

; 1219 : 
; 1220 : 			if( i == FRAG_FILE_STREAM ) 

	cmp	DWORD PTR _i$[ebp], 1
	jne	$LN17@Netchan_Up

; 1221 : 			{
; 1222 : 				char	sz[MAX_SYSPATH];
; 1223 : 				char	*in, *out;
; 1224 : 				int	len = 0;

	mov	DWORD PTR _len$2[ebp], 0

; 1225 : 
; 1226 : 				in = (char *)MSG_GetData( &p->frag_message );

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetData
	add	esp, 4
	mov	DWORD PTR _in$4[ebp], eax

; 1227 : 				out = sz;

	lea	eax, DWORD PTR _sz$5[ebp]
	mov	DWORD PTR _out$3[ebp], eax
$LN7@Netchan_Up:

; 1228 : 
; 1229 : 				while( *in )

	mov	eax, DWORD PTR _in$4[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN8@Netchan_Up

; 1230 : 				{
; 1231 : 					*out++ = *in++;

	mov	eax, DWORD PTR _out$3[ebp]
	mov	ecx, DWORD PTR _in$4[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _out$3[ebp]
	add	eax, 1
	mov	DWORD PTR _out$3[ebp], eax
	mov	ecx, DWORD PTR _in$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _in$4[ebp], ecx

; 1232 : 					len++;

	mov	eax, DWORD PTR _len$2[ebp]
	add	eax, 1
	mov	DWORD PTR _len$2[ebp], eax

; 1233 : 					if( len > 128 )

	cmp	DWORD PTR _len$2[ebp], 128		; 00000080H
	jle	SHORT $LN16@Netchan_Up

; 1234 : 						break;

	jmp	SHORT $LN8@Netchan_Up
$LN16@Netchan_Up:

; 1235 : 				}

	jmp	SHORT $LN7@Netchan_Up
$LN8@Netchan_Up:

; 1236 : 				*out = '\0';

	mov	eax, DWORD PTR _out$3[ebp]
	mov	BYTE PTR [eax], 0

; 1237 : 
; 1238 : 				if( Q_strlen( sz ) > 0 && sz[0] != '!' )

	lea	eax, DWORD PTR _sz$5[ebp]
	push	eax
	call	_Q_strlen
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN17@Netchan_Up
	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _sz$5[ebp+ecx]
	cmp	edx, 33					; 00000021H
	je	SHORT $LN17@Netchan_Up

; 1239 : 					Q_strncpy( host.downloadfile, sz, sizeof( host.downloadfile ));

	push	256					; 00000100H
	lea	eax, DWORD PTR _sz$5[ebp]
	push	eax
	push	OFFSET _host+496
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
$LN17@Netchan_Up:

; 1240 : 			}
; 1241 : 		}

	jmp	SHORT $LN20@Netchan_Up
$LN11@Netchan_Up:

; 1242 : 		else if( chan->fragbufs[i] )	// Sending data

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax*4+262356], 0
	je	SHORT $LN20@Netchan_Up

; 1243 : 		{
; 1244 : 			if( chan->fragbufcount[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax*4+262364], 0
	je	SHORT $LN20@Netchan_Up

; 1245 : 			{
; 1246 : 				float	percent = 100.0f * (float)chan->fragbufs[i]->bufferid / (float)chan->fragbufcount[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+262356]
	cvtsi2ss xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR __real@42c80000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+eax*4+262364]
	divss	xmm0, xmm1
	movss	DWORD PTR _percent$1[ebp], xmm0

; 1247 : 
; 1248 : 				if( percent > bestpercent )

	movss	xmm0, DWORD PTR _percent$1[ebp]
	comiss	xmm0, DWORD PTR _bestpercent$[ebp]
	jbe	SHORT $LN20@Netchan_Up

; 1249 : 					bestpercent = percent;

	movss	xmm0, DWORD PTR _percent$1[ebp]
	movss	DWORD PTR _bestpercent$[ebp], xmm0
$LN20@Netchan_Up:

; 1250 : 			}
; 1251 : 		}
; 1252 : 
; 1253 : 	}

	jmp	$LN2@Netchan_Up
$LN3@Netchan_Up:

; 1254 : 
; 1255 : 	scr_download->value = bestpercent;

	mov	eax, DWORD PTR _scr_download
	movss	xmm0, DWORD PTR _bestpercent$[ebp]
	movss	DWORD PTR [eax+12], xmm0
$LN1@Netchan_Up:

; 1256 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_UpdateProgress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_Process
_TEXT	SEGMENT
tv84 = -66180						; size = 4
_temp$1 = -65664					; size = 20
_size$2 = -65644					; size = 4
_bits$3 = -65640					; size = 4
_buffer$4 = -65636					; size = 65536
_pbuf$5 = -100						; size = 4
_numbitstoremove$6 = -96				; size = 4
_curbit$7 = -92						; size = 4
_oldpos$8 = -88						; size = 4
_intotalbuffers$9 = -84					; size = 4
_inbufferid$10 = -80					; size = 4
_j$11 = -76						; size = 4
_adr$12 = -72						; size = 4
_statId$ = -68						; size = 4
_qport$ = -64						; size = 4
_i$ = -60						; size = 4
_message_contains_fragments$ = -56			; size = 4
_frag_length$ = -52					; size = 8
_frag_offset$ = -44					; size = 8
_frag_message$ = -36					; size = 8
_fragid$ = -28						; size = 8
_reliable_message$ = -20				; size = 4
_reliable_ack$ = -16					; size = 4
_sequence_ack$ = -12					; size = 4
_sequence$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_chan$ = 8						; size = 4
_msg$ = 12						; size = 4
_Netchan_Process PROC					; COMDAT

; 1572 : {

	push	ebp
	mov	ebp, esp
	mov	eax, 66180				; 00010284H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1573 : 	uint	sequence, sequence_ack;
; 1574 : 	uint	reliable_ack, reliable_message;
; 1575 : 	uint	fragid[MAX_STREAMS] = { 0, 0 };

	mov	DWORD PTR _fragid$[ebp], 0
	mov	DWORD PTR _fragid$[ebp+4], 0

; 1576 : 	qboolean	frag_message[MAX_STREAMS] = { false, false };

	mov	DWORD PTR _frag_message$[ebp], 0
	mov	DWORD PTR _frag_message$[ebp+4], 0

; 1577 : 	int	frag_offset[MAX_STREAMS] = { 0, 0 };

	mov	DWORD PTR _frag_offset$[ebp], 0
	mov	DWORD PTR _frag_offset$[ebp+4], 0

; 1578 : 	int	frag_length[MAX_STREAMS] = { 0, 0 };

	mov	DWORD PTR _frag_length$[ebp], 0
	mov	DWORD PTR _frag_length$[ebp+4], 0

; 1579 : 	qboolean	message_contains_fragments;
; 1580 : 	int	i, qport, statId;
; 1581 : 
; 1582 : 	if( !CL_IsPlaybackDemo() && !NET_CompareAdr( net_from, chan->remote_address ))

	call	_CL_IsPlaybackDemo
	test	eax, eax
	jne	SHORT $LN11@Netchan_Pr
	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 4
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	edx, DWORD PTR _net_from
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _net_from+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _net_from+8
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _net_from+12
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR _net_from+16
	mov	DWORD PTR [ecx+16], edx
	call	_NET_CompareAdr
	add	esp, 40					; 00000028H
	test	eax, eax
	jne	SHORT $LN11@Netchan_Pr

; 1583 : 		return false;

	xor	eax, eax
	jmp	$LN1@Netchan_Pr
$LN11@Netchan_Pr:

; 1584 : 
; 1585 : 	// get sequence numbers
; 1586 : 	MSG_Clear( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_Clear
	add	esp, 4

; 1587 : 	sequence = MSG_ReadLong( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadLong
	add	esp, 4
	mov	DWORD PTR _sequence$[ebp], eax

; 1588 : 	sequence_ack = MSG_ReadLong( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadLong
	add	esp, 4
	mov	DWORD PTR _sequence_ack$[ebp], eax

; 1589 : 
; 1590 : 	// read the qport if we are a server
; 1591 : 	if( chan->sock == NS_SERVER )

	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN12@Netchan_Pr

; 1592 : 		qport = MSG_ReadShort( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadShort
	add	esp, 4
	mov	DWORD PTR _qport$[ebp], eax
$LN12@Netchan_Pr:

; 1593 : 
; 1594 : 	reliable_message = sequence >> 31;

	mov	eax, DWORD PTR _sequence$[ebp]
	shr	eax, 31					; 0000001fH
	mov	DWORD PTR _reliable_message$[ebp], eax

; 1595 : 	reliable_ack = sequence_ack >> 31;

	mov	eax, DWORD PTR _sequence_ack$[ebp]
	shr	eax, 31					; 0000001fH
	mov	DWORD PTR _reliable_ack$[ebp], eax

; 1596 : 
; 1597 : 	message_contains_fragments = FBitSet( sequence, BIT( 30 )) ? true : false;

	mov	eax, DWORD PTR _sequence$[ebp]
	and	eax, 1073741824				; 40000000H
	je	SHORT $LN31@Netchan_Pr
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN32@Netchan_Pr
$LN31@Netchan_Pr:
	mov	DWORD PTR tv84[ebp], 0
$LN32@Netchan_Pr:
	mov	ecx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _message_contains_fragments$[ebp], ecx

; 1598 : 
; 1599 : 	if( message_contains_fragments )

	cmp	DWORD PTR _message_contains_fragments$[ebp], 0
	je	$LN15@Netchan_Pr

; 1600 : 	{
; 1601 : 		for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Netchan_Pr
$LN2@Netchan_Pr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Netchan_Pr:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN3@Netchan_Pr

; 1602 : 		{
; 1603 : 			if( MSG_ReadByte( msg ))

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadByte
	add	esp, 4
	test	eax, eax
	je	SHORT $LN14@Netchan_Pr

; 1604 : 			{
; 1605 : 				frag_message[i] = true;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _frag_message$[ebp+eax*4], 1

; 1606 : 				fragid[i] = MSG_ReadLong( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadLong
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _fragid$[ebp+ecx*4], eax

; 1607 : 				frag_offset[i] = MSG_ReadLong( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadLong
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _frag_offset$[ebp+ecx*4], eax

; 1608 : 				frag_length[i] = MSG_ReadLong( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadLong
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _frag_length$[ebp+ecx*4], eax
$LN14@Netchan_Pr:

; 1609 : 			}
; 1610 : 		}

	jmp	SHORT $LN2@Netchan_Pr
$LN3@Netchan_Pr:

; 1611 : 
; 1612 : 		if( !Netchan_Validate( chan, msg, frag_message, fragid, frag_offset, frag_length ))

	lea	eax, DWORD PTR _frag_length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _frag_offset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fragid$[ebp]
	push	edx
	lea	eax, DWORD PTR _frag_message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _chan$[ebp]
	push	edx
	call	_Netchan_Validate
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN15@Netchan_Pr

; 1613 : 			return false;

	xor	eax, eax
	jmp	$LN1@Netchan_Pr
$LN15@Netchan_Pr:

; 1614 : 	}
; 1615 : 
; 1616 : 	sequence &= ~BIT( 31 );

	mov	eax, DWORD PTR _sequence$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _sequence$[ebp], eax

; 1617 : 	sequence &= ~BIT( 30 );

	mov	eax, DWORD PTR _sequence$[ebp]
	and	eax, -1073741825			; bfffffffH
	mov	DWORD PTR _sequence$[ebp], eax

; 1618 : 	sequence_ack &= ~BIT( 30 );

	mov	eax, DWORD PTR _sequence_ack$[ebp]
	and	eax, -1073741825			; bfffffffH
	mov	DWORD PTR _sequence_ack$[ebp], eax

; 1619 : 	sequence_ack &= ~BIT( 31 );

	mov	eax, DWORD PTR _sequence_ack$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _sequence_ack$[ebp], eax

; 1620 : 
; 1621 : 	if( net_showpackets->value && net_showpackets->value != 3.0f )

	mov	eax, DWORD PTR _net_showpackets
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN16@Netchan_Pr
	mov	eax, DWORD PTR _net_showpackets
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@40400000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN16@Netchan_Pr

; 1622 : 	{
; 1623 : 		Con_Printf( " %s <-- sz=%i seq=%i ack=%i rel=%i tm=%f\n"

	sub	esp, 8
	movsd	xmm0, QWORD PTR _host+1440
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _reliable_message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sequence_ack$[ebp]
	and	ecx, 63					; 0000003fH
	push	ecx
	mov	edx, DWORD PTR _sequence$[ebp]
	and	edx, 63					; 0000003fH
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetMaxBytes
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ns_strings[edx*4]
	push	eax
	push	OFFSET ??_C@_0CK@JBJFHMPG@?5?$CFs?5?$DM?9?9?5sz?$DN?$CFi?5seq?$DN?$CFi?5ack?$DN?$CFi?5rel@
	call	_Con_Printf
	add	esp, 32					; 00000020H
$LN16@Netchan_Pr:

; 1624 : 			, ns_strings[chan->sock]
; 1625 : 			, MSG_GetMaxBytes( msg )
; 1626 : 			, sequence & 63
; 1627 : 			, sequence_ack & 63 
; 1628 : 			, reliable_message
; 1629 : 			, host.realtime );
; 1630 : 	}
; 1631 : 
; 1632 : 	// discard stale or duplicated packets
; 1633 : 	if( sequence <= (uint)chan->incoming_sequence )

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _sequence$[ebp]
	cmp	ecx, DWORD PTR [eax+64]
	ja	$LN17@Netchan_Pr

; 1634 : 	{
; 1635 : 		if( net_showdrop->value )

	mov	eax, DWORD PTR _net_showdrop
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN20@Netchan_Pr

; 1636 : 		{
; 1637 : 			const char *adr = NET_AdrToString( chan->remote_address );

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 4
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	call	_NET_AdrToString
	add	esp, 20					; 00000014H
	mov	DWORD PTR _adr$12[ebp], eax

; 1638 : 
; 1639 : 			if( sequence == (uint)chan->incoming_sequence )

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _sequence$[ebp]
	cmp	ecx, DWORD PTR [eax+64]
	jne	SHORT $LN19@Netchan_Pr

; 1640 : 				Con_Printf( "%s:duplicate packet %i at %i\n", adr, sequence, chan->incoming_sequence );

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _sequence$[ebp]
	push	edx
	mov	eax, DWORD PTR _adr$12[ebp]
	push	eax
	push	OFFSET ??_C@_0BO@KFCMLAMP@?$CFs?3duplicate?5packet?5?$CFi?5at?5?$CFi?6@
	call	_Con_Printf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN20@Netchan_Pr
$LN19@Netchan_Pr:

; 1641 : 			else Con_Printf( "%s:out of order packet %i at %i\n", adr, sequence, chan->incoming_sequence );

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _sequence$[ebp]
	push	edx
	mov	eax, DWORD PTR _adr$12[ebp]
	push	eax
	push	OFFSET ??_C@_0CB@GLEACKCK@?$CFs?3out?5of?5order?5packet?5?$CFi?5at?5?$CFi@
	call	_Con_Printf
	add	esp, 16					; 00000010H
$LN20@Netchan_Pr:

; 1642 : 		}
; 1643 : 		return false;

	xor	eax, eax
	jmp	$LN1@Netchan_Pr
$LN17@Netchan_Pr:

; 1644 : 	}
; 1645 : 
; 1646 : 	// dropped packets don't keep the message from being used
; 1647 : 	net_drop = sequence - ( chan->incoming_sequence + 1 );

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 1
	mov	edx, DWORD PTR _sequence$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _net_drop, edx

; 1648 : 	if( net_drop > 0 && net_showdrop->value )

	cmp	DWORD PTR _net_drop, 0
	jle	SHORT $LN21@Netchan_Pr
	mov	eax, DWORD PTR _net_showdrop
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN21@Netchan_Pr

; 1649 : 		Con_Printf( "%s:dropped %i packets at %i\n", NET_AdrToString( chan->remote_address ), net_drop, sequence );

	mov	eax, DWORD PTR _sequence$[ebp]
	push	eax
	mov	ecx, DWORD PTR _net_drop
	push	ecx
	mov	edx, DWORD PTR _chan$[ebp]
	add	edx, 4
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], edx
	call	_NET_AdrToString
	add	esp, 20					; 00000014H
	push	eax
	push	OFFSET ??_C@_0BN@INOGJLEP@?$CFs?3dropped?5?$CFi?5packets?5at?5?$CFi?6@
	call	_Con_Printf
	add	esp, 16					; 00000010H
$LN21@Netchan_Pr:

; 1650 : 
; 1651 : 	// if the current outgoing reliable message has been acknowledged
; 1652 : 	// clear the buffer to make way for the next
; 1653 : 	if( reliable_ack == (uint)chan->reliable_sequence )

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _reliable_ack$[ebp]
	cmp	ecx, DWORD PTR [eax+84]
	jne	SHORT $LN23@Netchan_Pr

; 1654 : 	{
; 1655 : 		// make sure we actually could have ack'd this message
; 1656 : 		if( sequence_ack >= (uint)chan->last_reliable_sequence )

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _sequence_ack$[ebp]
	cmp	ecx, DWORD PTR [eax+88]
	jb	SHORT $LN23@Netchan_Pr

; 1657 : 		{
; 1658 : 			chan->reliable_length = 0;	// it has been received

	mov	eax, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [eax+131224], 0
$LN23@Netchan_Pr:

; 1659 : 		}
; 1660 : 	}
; 1661 : 	
; 1662 : 	// if this message contains a reliable message, bump incoming_reliable_sequence 
; 1663 : 	chan->incoming_sequence = sequence;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _sequence$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 1664 : 	chan->incoming_acknowledged = sequence_ack;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _sequence_ack$[ebp]
	mov	DWORD PTR [eax+68], ecx

; 1665 : 	chan->incoming_reliable_acknowledged = reliable_ack;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _reliable_ack$[ebp]
	mov	DWORD PTR [eax+72], ecx

; 1666 : 	if( reliable_message )

	cmp	DWORD PTR _reliable_message$[ebp], 0
	je	SHORT $LN24@Netchan_Pr

; 1667 : 	{
; 1668 : 		chan->incoming_reliable_sequence ^= 1;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	xor	ecx, 1
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+76], ecx
$LN24@Netchan_Pr:

; 1669 : 	}
; 1670 : 
; 1671 : 	chan->last_received = host.realtime;

	mov	eax, DWORD PTR _chan$[ebp]
	movsd	xmm0, QWORD PTR _host+1440
	movsd	QWORD PTR [eax+32], xmm0

; 1672 : 
; 1673 : 	// Update data flow stats
; 1674 : 	statId = chan->flow[FLOW_INCOMING].current & MASK_LATENT;

	mov	eax, 544				; 00000220H
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax+263184]
	and	edx, 31					; 0000001fH
	mov	DWORD PTR _statId$[ebp], edx

; 1675 : 	chan->flow[FLOW_INCOMING].stats[statId].size = MSG_GetMaxBytes( msg ) + UDP_HEADER_SIZE;

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetMaxBytes
	add	esp, 4
	add	eax, 28					; 0000001cH
	mov	ecx, 544				; 00000220H
	shl	ecx, 0
	mov	edx, DWORD PTR _chan$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+262672]
	mov	edx, DWORD PTR _statId$[ebp]
	shl	edx, 4
	mov	DWORD PTR [ecx+edx], eax

; 1676 : 	chan->flow[FLOW_INCOMING].stats[statId].time = host.realtime;

	mov	eax, 544				; 00000220H
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	lea	edx, DWORD PTR [ecx+eax+262672]
	mov	eax, DWORD PTR _statId$[ebp]
	shl	eax, 4
	movsd	xmm0, QWORD PTR _host+1440
	movsd	QWORD PTR [edx+eax+8], xmm0

; 1677 : 	chan->flow[FLOW_INCOMING].totalbytes += chan->flow[FLOW_INCOMING].stats[statId].size;

	mov	eax, 544				; 00000220H
	shl	eax, 0
	mov	ecx, 544				; 00000220H
	shl	ecx, 0
	mov	edx, DWORD PTR _chan$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+262672]
	mov	edx, DWORD PTR _statId$[ebp]
	shl	edx, 4
	mov	esi, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [esi+eax+263208]
	add	eax, DWORD PTR [ecx+edx]
	mov	ecx, 544				; 00000220H
	shl	ecx, 0
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+ecx+263208], eax

; 1678 : 	chan->flow[FLOW_INCOMING].current++;

	mov	eax, 544				; 00000220H
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax+263184]
	add	edx, 1
	mov	eax, 544				; 00000220H
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax+263184], edx

; 1679 : 
; 1680 : 	Netchan_UpdateFlow( chan );

	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	call	_Netchan_UpdateFlow
	add	esp, 4

; 1681 : 
; 1682 : 	chan->total_received += MSG_GetMaxBytes( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetMaxBytes
	add	esp, 4
	mov	ecx, DWORD PTR _chan$[ebp]
	add	eax, DWORD PTR [ecx+263764]
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+263764], eax

; 1683 : 
; 1684 : 	if( message_contains_fragments )

	cmp	DWORD PTR _message_contains_fragments$[ebp], 0
	je	$LN29@Netchan_Pr

; 1685 : 	{
; 1686 : 		for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@Netchan_Pr
$LN5@Netchan_Pr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@Netchan_Pr:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN6@Netchan_Pr

; 1687 : 		{
; 1688 : 			int	j, inbufferid;
; 1689 : 			int	intotalbuffers;
; 1690 : 			int	oldpos, curbit;
; 1691 : 			int	numbitstoremove;
; 1692 : 			fragbuf_t	*pbuf;
; 1693 : 
; 1694 : 			if( !frag_message[i] )

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _frag_message$[ebp+eax*4], 0
	jne	SHORT $LN26@Netchan_Pr

; 1695 : 				continue;

	jmp	SHORT $LN5@Netchan_Pr
$LN26@Netchan_Pr:

; 1696 : 		
; 1697 : 			inbufferid = FRAG_GETID( fragid[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _fragid$[ebp+eax*4]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _inbufferid$10[ebp], ecx

; 1698 : 			intotalbuffers = FRAG_GETCOUNT( fragid[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _fragid$[ebp+eax*4]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _intotalbuffers$9[ebp], ecx

; 1699 : 
; 1700 : 			if( fragid[i] != 0 )

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _fragid$[ebp+eax*4], 0
	je	$LN27@Netchan_Pr

; 1701 : 			{
; 1702 : 				pbuf = Netchan_FindBufferById( &chan->incomingbufs[i], fragid[i], true );

	push	1
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _fragid$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _chan$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+262388]
	push	ecx
	call	_Netchan_FindBufferById
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pbuf$5[ebp], eax

; 1703 : 
; 1704 : 				if( pbuf )

	cmp	DWORD PTR _pbuf$5[ebp], 0
	je	$LN28@Netchan_Pr

; 1705 : 				{
; 1706 : 					byte	buffer[NET_MAX_FRAGMENT];
; 1707 : 					int	bits, size;
; 1708 : 					sizebuf_t	temp;
; 1709 : 
; 1710 : 					size = MSG_GetNumBitsRead( msg ) + frag_offset[i];

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetNumBitsWritten
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _frag_offset$[ebp+ecx*4]
	mov	DWORD PTR _size$2[ebp], eax

; 1711 : 					bits = frag_length[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _frag_length$[ebp+eax*4]
	mov	DWORD PTR _bits$3[ebp], ecx

; 1712 : 				
; 1713 : 					// copy in data
; 1714 : 					MSG_Clear( &pbuf->frag_message );

	mov	eax, DWORD PTR _pbuf$5[ebp]
	add	eax, 8
	push	eax
	call	_MSG_Clear
	add	esp, 4

; 1715 : 
; 1716 : 					MSG_StartReading( &temp, msg->pData, MSG_GetMaxBytes( msg ), size, -1 );

	push	-1
	mov	eax, DWORD PTR _size$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_GetMaxBytes
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	lea	ecx, DWORD PTR _temp$1[ebp]
	push	ecx
	call	_MSG_StartWriting
	add	esp, 20					; 00000014H

; 1717 : 					MSG_ReadBits( &temp, buffer, bits );

	mov	eax, DWORD PTR _bits$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _temp$1[ebp]
	push	edx
	call	_MSG_ReadBits
	add	esp, 12					; 0000000cH

; 1718 : 					MSG_WriteBits( &pbuf->frag_message, buffer, bits );

	mov	eax, DWORD PTR _bits$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$5[ebp]
	add	edx, 8
	push	edx
	call	_MSG_WriteBits
	add	esp, 12					; 0000000cH
$LN28@Netchan_Pr:

; 1719 : 				}
; 1720 : 
; 1721 : 				// count # of incoming bufs we've queued? are we done?
; 1722 : 				Netchan_CheckForCompletion( chan, i, intotalbuffers );

	mov	eax, DWORD PTR _intotalbuffers$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _chan$[ebp]
	push	edx
	call	_Netchan_CheckForCompletion
	add	esp, 12					; 0000000cH
$LN27@Netchan_Pr:

; 1723 : 			}
; 1724 : 
; 1725 : 			// rearrange incoming data to not have the frag stuff in the middle of it
; 1726 : 			oldpos = MSG_GetNumBitsRead( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetNumBitsWritten
	add	esp, 4
	mov	DWORD PTR _oldpos$8[ebp], eax

; 1727 : 			curbit = MSG_GetNumBitsRead( msg ) + frag_offset[i];

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetNumBitsWritten
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _frag_offset$[ebp+ecx*4]
	mov	DWORD PTR _curbit$7[ebp], eax

; 1728 : 			numbitstoremove = frag_length[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _frag_length$[ebp+eax*4]
	mov	DWORD PTR _numbitstoremove$6[ebp], ecx

; 1729 : 
; 1730 : 			MSG_ExciseBits( msg, curbit, numbitstoremove );

	mov	eax, DWORD PTR _numbitstoremove$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _curbit$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_ExciseBits
	add	esp, 12					; 0000000cH

; 1731 : 			MSG_SeekToBit( msg, oldpos, SEEK_SET );

	push	0
	mov	eax, DWORD PTR _oldpos$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_SeekToBit
	add	esp, 12					; 0000000cH

; 1732 : 
; 1733 : 			for( j = i + 1; j < MAX_STREAMS; j++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$11[ebp], eax
	jmp	SHORT $LN10@Netchan_Pr
$LN8@Netchan_Pr:
	mov	eax, DWORD PTR _j$11[ebp]
	add	eax, 1
	mov	DWORD PTR _j$11[ebp], eax
$LN10@Netchan_Pr:
	cmp	DWORD PTR _j$11[ebp], 2
	jge	SHORT $LN9@Netchan_Pr

; 1734 : 				frag_offset[j] -= frag_length[i];

	mov	eax, DWORD PTR _j$11[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _frag_offset$[ebp+eax*4]
	sub	edx, DWORD PTR _frag_length$[ebp+ecx*4]
	mov	eax, DWORD PTR _j$11[ebp]
	mov	DWORD PTR _frag_offset$[ebp+eax*4], edx
	jmp	SHORT $LN8@Netchan_Pr
$LN9@Netchan_Pr:

; 1735 : 		}

	jmp	$LN5@Netchan_Pr
$LN6@Netchan_Pr:

; 1736 : 
; 1737 : 		// is there anything left to process?
; 1738 : 		if( MSG_GetNumBitsLeft( msg ) <= 0 )

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetNumBitsLeft
	add	esp, 4
	test	eax, eax
	jg	SHORT $LN29@Netchan_Pr

; 1739 : 		{
; 1740 : 			return false;

	xor	eax, eax
	jmp	SHORT $LN1@Netchan_Pr
$LN29@Netchan_Pr:

; 1741 : 		}
; 1742 : 	}
; 1743 : 
; 1744 : 	return true;

	mov	eax, 1
$LN1@Netchan_Pr:

; 1745 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_Process ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_OutOfBandPrint
_TEXT	SEGMENT
_argptr$ = -8200					; size = 4
_string$ = -8196					; size = 8192
__$ArrayPad$ = -4					; size = 4
_net_socket$ = 8					; size = 4
_adr$ = 12						; size = 20
_format$ = 32						; size = 4
_Netchan_OutOfBandPrint PROC				; COMDAT

; 388  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 8712				; 00002208H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 389  : 	char	string[MAX_PRINT_MSG];
; 390  : 	va_list	argptr;
; 391  : 
; 392  : 	va_start( argptr, format );

	lea	eax, DWORD PTR _format$[ebp+4]
	mov	DWORD PTR _argptr$[ebp], eax

; 393  : 	Q_vsnprintf( string, sizeof( string ) - 1, format, argptr );

	mov	eax, DWORD PTR _argptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	push	8191					; 00001fffH
	lea	edx, DWORD PTR _string$[ebp]
	push	edx
	call	_Q_vsnprintf
	add	esp, 16					; 00000010H

; 394  : 	va_end( argptr );

	mov	DWORD PTR _argptr$[ebp], 0

; 395  : 
; 396  : 	Netchan_OutOfBand( net_socket, adr, Q_strlen( string ), string );

	lea	eax, DWORD PTR _string$[ebp]
	push	eax
	lea	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_Q_strlen
	add	esp, 4
	push	eax
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	eax, DWORD PTR _adr$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _adr$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _adr$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _adr$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _adr$[ebp+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _net_socket$[ebp]
	push	ecx
	call	_Netchan_OutOfBand
	add	esp, 32					; 00000020H

; 397  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_OutOfBandPrint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_OutOfBand
_TEXT	SEGMENT
_send$ = -8216						; size = 20
_send_buf$ = -8196					; size = 8192
__$ArrayPad$ = -4					; size = 4
_net_socket$ = 8					; size = 4
_adr$ = 12						; size = 20
_length$ = 32						; size = 4
_data$ = 36						; size = 4
_Netchan_OutOfBand PROC					; COMDAT

; 363  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 8728				; 00002218H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 364  : 	byte	send_buf[MAX_PRINT_MSG];
; 365  : 	sizebuf_t	send;
; 366  : 
; 367  : 	// write the packet header
; 368  : 	MSG_Init( &send, "SequencePacket", send_buf, sizeof( send_buf ));

	push	-1
	push	8192					; 00002000H
	lea	eax, DWORD PTR _send_buf$[ebp]
	push	eax
	push	OFFSET ??_C@_0P@KAPCCABL@SequencePacket@
	lea	ecx, DWORD PTR _send$[ebp]
	push	ecx
	call	_MSG_InitExt
	add	esp, 20					; 00000014H

; 369  : 	
; 370  : 	MSG_WriteLong( &send, NET_HEADER_OUTOFBANDPACKET ); // -1 sequence means out of band

	push	-1
	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_WriteLong
	add	esp, 8

; 371  : 	MSG_WriteBytes( &send, data, length );

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _send$[ebp]
	push	edx
	call	_MSG_WriteBytes
	add	esp, 12					; 0000000cH

; 372  : 
; 373  : 	if( !CL_IsPlaybackDemo( ))

	call	_CL_IsPlaybackDemo
	test	eax, eax
	jne	SHORT $LN1@Netchan_Ou

; 374  : 	{
; 375  : 		// send the datagram
; 376  : 		NET_SendPacket( net_socket, MSG_GetNumBytesWritten( &send ), MSG_GetData( &send ), adr );

	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	ecx, DWORD PTR _adr$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _adr$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _adr$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _adr$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _adr$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR _send$[ebp]
	push	edx
	call	_MSG_GetData
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _net_socket$[ebp]
	push	ecx
	call	_NET_SendPacket
	add	esp, 32					; 00000020H
$LN1@Netchan_Ou:

; 377  : 	}
; 378  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_OutOfBand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_TransmitBits
_TEXT	SEGMENT
tv502 = -197524						; size = 4
tv86 = -197524						; size = 4
_compressedfilename$1 = -197008				; size = 260
_file$2 = -196748					; size = 4
_filebuffer$3 = -196744					; size = 65536
_temp$4 = -131208					; size = 20
_fragment_size$5 = -131188				; size = 4
_newpayloadsize$6 = -131184				; size = 4
_send_from_regular$7 = -131180				; size = 4
_send_from_frag$8 = -131176				; size = 8
_pbuf$9 = -131168					; size = 4
_send_frag$10 = -131164					; size = 4
_fRate$ = -131160					; size = 4
_j$ = -131156						; size = 4
_i$ = -131152						; size = 4
_send$ = -131148					; size = 20
_send_reliable$ = -131128				; size = 4
_statId$ = -131124					; size = 4
_w2$ = -131120						; size = 4
_w1$ = -131116						; size = 4
_send_reliable_fragment$ = -131112			; size = 4
_send_buf$ = -131108					; size = 131104
__$ArrayPad$ = -4					; size = 4
_chan$ = 8						; size = 4
_length$ = 12						; size = 4
_data$ = 16						; size = 4
_Netchan_TransmitBits PROC				; COMDAT

; 1269 : {

	push	ebp
	mov	ebp, esp
	mov	eax, 197524				; 00030394H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1270 : 	byte	send_buf[NET_MAX_MESSAGE];
; 1271 : 	qboolean	send_reliable_fragment;
; 1272 : 	uint	w1, w2, statId;
; 1273 : 	qboolean	send_reliable;
; 1274 : 	sizebuf_t	send;
; 1275 : 	int	i, j;
; 1276 : 	float	fRate;
; 1277 : 
; 1278 : 	// check for message overflow
; 1279 : 	if( MSG_CheckOverflow( &chan->message ))

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_MSG_CheckOverflow
	add	esp, 4
	test	eax, eax
	je	SHORT $LN26@Netchan_Tr

; 1280 : 	{
; 1281 : 		Con_Printf( S_ERROR "%s:outgoing message overflow\n", NET_AdrToString( chan->remote_address ));

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 4
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	call	_NET_AdrToString
	add	esp, 20					; 00000014H
	push	eax
	push	OFFSET ??_C@_0CJ@PACAIEIG@?$FO1Error?3?$FO7?5?$CFs?3outgoing?5message?5@
	call	_Con_Printf
	add	esp, 8

; 1282 : 		return;

	jmp	$LN60@Netchan_Tr
$LN26@Netchan_Tr:

; 1283 : 	}
; 1284 : 
; 1285 : 	// if the remote side dropped the last reliable message, resend it
; 1286 : 	send_reliable = false;

	mov	DWORD PTR _send_reliable$[ebp], 0

; 1287 : 
; 1288 : 	if( chan->incoming_acknowledged > chan->last_reliable_sequence && chan->incoming_reliable_acknowledged != chan->reliable_sequence )

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [eax+68]
	cmp	edx, DWORD PTR [ecx+88]
	jle	SHORT $LN27@Netchan_Tr
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+84]
	je	SHORT $LN27@Netchan_Tr

; 1289 : 		send_reliable = true;

	mov	DWORD PTR _send_reliable$[ebp], 1
$LN27@Netchan_Tr:

; 1290 : 
; 1291 : 	// A packet can have "reliable payload + frag payload + unreliable payload
; 1292 : 	// frag payload can be a file chunk, if so, it needs to be parsed on the receiving end and reliable payload + unreliable payload need
; 1293 : 	// to be passed on to the message queue.  The processing routine needs to be able to handle the case where a message comes in and a file
; 1294 : 	// transfer completes
; 1295 : 
; 1296 : 	// if the reliable transmit buffer is empty, copy the current message out
; 1297 : 	if( !chan->reliable_length )

	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax+131224], 0
	jne	$LN12@Netchan_Tr

; 1298 : 	{
; 1299 : 		qboolean	send_frag = false;

	mov	DWORD PTR _send_frag$10[ebp], 0

; 1300 : 		fragbuf_t	*pbuf;
; 1301 : 
; 1302 : 		// will be true if we are active and should let chan->message get some bandwidth
; 1303 : 		int	send_from_frag[MAX_STREAMS] = { 0, 0 };

	mov	DWORD PTR _send_from_frag$8[ebp], 0
	mov	DWORD PTR _send_from_frag$8[ebp+4], 0

; 1304 : 		int	send_from_regular = 0;

	mov	DWORD PTR _send_from_regular$7[ebp], 0

; 1305 : 
; 1306 : 		// if we have data in the waiting list(s) and we have cleared the current queue(s), then 
; 1307 : 		// push the waitlist(s) into the current queue(s)
; 1308 : 		Netchan_FragSend( chan );

	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	call	_Netchan_FragSend
	add	esp, 4

; 1309 : 
; 1310 : 		// sending regular payload
; 1311 : 		send_from_regular = MSG_GetNumBytesWritten( &chan->message ) ? 1 : 0;

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	test	eax, eax
	je	SHORT $LN62@Netchan_Tr
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN63@Netchan_Tr
$LN62@Netchan_Tr:
	mov	DWORD PTR tv86[ebp], 0
$LN63@Netchan_Tr:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _send_from_regular$7[ebp], ecx

; 1312 : 
; 1313 : 		// check to see if we are sending a frag payload
; 1314 : 		for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Netchan_Tr
$LN2@Netchan_Tr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Netchan_Tr:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN3@Netchan_Tr

; 1315 : 		{
; 1316 : 			if( chan->fragbufs[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax*4+262356], 0
	je	SHORT $LN29@Netchan_Tr

; 1317 : 				send_from_frag[i] = 1;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _send_from_frag$8[ebp+eax*4], 1
$LN29@Netchan_Tr:

; 1318 : 		}

	jmp	SHORT $LN2@Netchan_Tr
$LN3@Netchan_Tr:

; 1319 : 
; 1320 : 		// stall reliable payloads if sending from frag buffer
; 1321 : 		if( send_from_regular && ( send_from_frag[FRAG_NORMAL_STREAM] ))

	cmp	DWORD PTR _send_from_regular$7[ebp], 0
	je	SHORT $LN31@Netchan_Tr
	mov	eax, 4
	imul	ecx, eax, 0
	cmp	DWORD PTR _send_from_frag$8[ebp+ecx], 0
	je	SHORT $LN31@Netchan_Tr

; 1322 : 		{	
; 1323 : 			send_from_regular = false;

	mov	DWORD PTR _send_from_regular$7[ebp], 0

; 1324 : 
; 1325 : 			// if the reliable buffer has gotten too big, queue it at the end of everything and clear out buffer
; 1326 : 			if( MSG_GetNumBytesWritten( &chan->message ) > MAX_RELIABLE_PAYLOAD )

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	cmp	eax, 1400				; 00000578H
	jle	SHORT $LN31@Netchan_Tr

; 1327 : 			{
; 1328 : 				Netchan_CreateFragments_( chan, &chan->message );

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _chan$[ebp]
	push	ecx
	call	_Netchan_CreateFragments_
	add	esp, 8

; 1329 : 				MSG_Clear( &chan->message );

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_MSG_Clear
	add	esp, 4
$LN31@Netchan_Tr:

; 1330 : 			}
; 1331 : 		}
; 1332 : 
; 1333 : 		// startpos will be zero if there is no regular payload
; 1334 : 		for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@Netchan_Tr
$LN5@Netchan_Tr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@Netchan_Tr:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN6@Netchan_Tr

; 1335 : 		{
; 1336 : 			chan->frag_startpos[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262372], 0

; 1337 : 
; 1338 : 			// assume no fragment is being sent
; 1339 : 			chan->reliable_fragment[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262340], 0

; 1340 : 			chan->reliable_fragid[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262348], 0

; 1341 : 			chan->frag_length[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262380], 0

; 1342 : 
; 1343 : 			if( send_from_frag[i] )

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _send_from_frag$8[ebp+eax*4], 0
	je	SHORT $LN32@Netchan_Tr

; 1344 : 			{
; 1345 : 				send_frag = true;

	mov	DWORD PTR _send_frag$10[ebp], 1
$LN32@Netchan_Tr:

; 1346 : 			}
; 1347 : 		}

	jmp	$LN5@Netchan_Tr
$LN6@Netchan_Tr:

; 1348 : 
; 1349 : 		if( send_from_regular || send_frag )

	cmp	DWORD PTR _send_from_regular$7[ebp], 0
	jne	SHORT $LN34@Netchan_Tr
	cmp	DWORD PTR _send_frag$10[ebp], 0
	je	SHORT $LN33@Netchan_Tr
$LN34@Netchan_Tr:

; 1350 : 		{
; 1351 : 			chan->reliable_sequence ^= 1;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	xor	ecx, 1
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+84], ecx

; 1352 : 			send_reliable = true;

	mov	DWORD PTR _send_reliable$[ebp], 1
$LN33@Netchan_Tr:

; 1353 : 		}
; 1354 : 
; 1355 : 		if( send_from_regular )

	cmp	DWORD PTR _send_from_regular$7[ebp], 0
	je	$LN9@Netchan_Tr

; 1356 : 		{
; 1357 : 			memcpy( chan->reliable_buf, chan->message_buf, MSG_GetNumBytesWritten( &chan->message ));

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _chan$[ebp]
	add	ecx, 120				; 00000078H
	push	ecx
	mov	edx, DWORD PTR _chan$[ebp]
	add	edx, 131228				; 0002009cH
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1358 : 			chan->reliable_length = MSG_GetNumBitsWritten( &chan->message );

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_MSG_GetNumBitsWritten
	add	esp, 4
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+131224], eax

; 1359 : 			MSG_Clear( &chan->message );

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_MSG_Clear
	add	esp, 4

; 1360 : 
; 1361 : 			// if we send fragments, this is where they'll start
; 1362 : 			for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@Netchan_Tr
$LN8@Netchan_Tr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@Netchan_Tr:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN9@Netchan_Tr

; 1363 : 				chan->frag_startpos[i] = chan->reliable_length;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [edx+131224]
	mov	DWORD PTR [ecx+eax*4+262372], edx
	jmp	SHORT $LN8@Netchan_Tr
$LN9@Netchan_Tr:

; 1364 : 		}
; 1365 : 
; 1366 : 		for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@Netchan_Tr
$LN11@Netchan_Tr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@Netchan_Tr:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN12@Netchan_Tr

; 1367 : 		{
; 1368 : 			int	newpayloadsize;
; 1369 : 			int	fragment_size;
; 1370 : 
; 1371 : 			// is there someting in the fragbuf?
; 1372 : 			pbuf = chan->fragbufs[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+262356]
	mov	DWORD PTR _pbuf$9[ebp], edx

; 1373 : 			fragment_size = 0;

	mov	DWORD PTR _fragment_size$5[ebp], 0

; 1374 : 
; 1375 : 			if( pbuf )

	cmp	DWORD PTR _pbuf$9[ebp], 0
	je	SHORT $LN37@Netchan_Tr

; 1376 : 			{
; 1377 : 				fragment_size = MSG_GetNumBytesWritten( &pbuf->frag_message );

	mov	eax, DWORD PTR _pbuf$9[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	mov	DWORD PTR _fragment_size$5[ebp], eax

; 1378 : 				
; 1379 : 				// files set size a bit differently.
; 1380 : 				if( pbuf->isfile && !pbuf->isbuffer )

	mov	eax, DWORD PTR _pbuf$9[ebp]
	cmp	DWORD PTR [eax+65564], 0
	je	SHORT $LN37@Netchan_Tr
	mov	eax, DWORD PTR _pbuf$9[ebp]
	cmp	DWORD PTR [eax+65568], 0
	jne	SHORT $LN37@Netchan_Tr

; 1381 : 				{
; 1382 : 					fragment_size = pbuf->size;

	mov	eax, DWORD PTR _pbuf$9[ebp]
	mov	ecx, DWORD PTR [eax+65840]
	mov	DWORD PTR _fragment_size$5[ebp], ecx
$LN37@Netchan_Tr:

; 1383 : 				}
; 1384 : 			}
; 1385 : 
; 1386 : 			newpayloadsize = (( chan->reliable_length + ( fragment_size << 3 )) + 7 ) >> 3;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+131224]
	mov	edx, DWORD PTR _fragment_size$5[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+7]
	sar	eax, 3
	mov	DWORD PTR _newpayloadsize$6[ebp], eax

; 1387 : 
; 1388 : 			// make sure we have enought space left
; 1389 : 			if( send_from_frag[i] && pbuf && newpayloadsize < NET_MAX_FRAGMENT )

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _send_from_frag$8[ebp+eax*4], 0
	je	$LN15@Netchan_Tr
	cmp	DWORD PTR _pbuf$9[ebp], 0
	je	$LN15@Netchan_Tr
	cmp	DWORD PTR _newpayloadsize$6[ebp], 65536	; 00010000H
	jge	$LN15@Netchan_Tr

; 1390 : 			{
; 1391 : 				sizebuf_t	temp;
; 1392 : 
; 1393 : 				// which buffer are we sending ?
; 1394 : 				chan->reliable_fragid[i] = MAKE_FRAGID( pbuf->bufferid, chan->fragbufcount[i] );

	mov	eax, DWORD PTR _pbuf$9[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 65535				; 0000ffffH
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+262364]
	and	edx, 65535				; 0000ffffH
	or	ecx, edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+eax*4+262348], ecx

; 1395 : 			
; 1396 : 				// if it's not in-memory, then we'll need to copy it in frame the file handle.
; 1397 : 				if( pbuf->isfile && !pbuf->isbuffer )

	mov	eax, DWORD PTR _pbuf$9[ebp]
	cmp	DWORD PTR [eax+65564], 0
	je	$LN39@Netchan_Tr
	mov	eax, DWORD PTR _pbuf$9[ebp]
	cmp	DWORD PTR [eax+65568], 0
	jne	$LN39@Netchan_Tr

; 1398 : 				{
; 1399 : 					byte	filebuffer[NET_MAX_FRAGMENT];
; 1400 : 					file_t	*file;
; 1401 : 
; 1402 : 					if( pbuf->iscompressed )

	mov	eax, DWORD PTR _pbuf$9[ebp]
	cmp	DWORD PTR [eax+65572], 0
	je	SHORT $LN40@Netchan_Tr

; 1403 : 					{
; 1404 : 						char	compressedfilename[MAX_OSPATH];
; 1405 : 
; 1406 : 						Q_strncpy( compressedfilename, pbuf->filename, sizeof( compressedfilename ));

	push	260					; 00000104H
	mov	eax, DWORD PTR _pbuf$9[ebp]
	add	eax, 65576				; 00010028H
	push	eax
	lea	ecx, DWORD PTR _compressedfilename$1[ebp]
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 1407 : 						COM_ReplaceExtension( compressedfilename, ".ztmp" );

	push	OFFSET ??_C@_05ELJENEDK@?4ztmp@
	lea	eax, DWORD PTR _compressedfilename$1[ebp]
	push	eax
	call	_COM_ReplaceExtension
	add	esp, 8

; 1408 : 						file = FS_Open( compressedfilename, "rb", false );

	push	0
	push	OFFSET ??_C@_02JDPG@rb@
	lea	eax, DWORD PTR _compressedfilename$1[ebp]
	push	eax
	call	_FS_Open
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _file$2[ebp], eax

; 1409 : 					}

	jmp	SHORT $LN41@Netchan_Tr
$LN40@Netchan_Tr:

; 1410 : 					else file = FS_Open( pbuf->filename, "rb", false );

	push	0
	push	OFFSET ??_C@_02JDPG@rb@
	mov	eax, DWORD PTR _pbuf$9[ebp]
	add	eax, 65576				; 00010028H
	push	eax
	call	_FS_Open
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _file$2[ebp], eax
$LN41@Netchan_Tr:

; 1411 : 
; 1412 : 					FS_Seek( file, pbuf->foffset, SEEK_SET );

	push	0
	mov	eax, DWORD PTR _pbuf$9[ebp]
	mov	ecx, DWORD PTR [eax+65836]
	push	ecx
	mov	edx, DWORD PTR _file$2[ebp]
	push	edx
	call	_FS_Seek
	add	esp, 12					; 0000000cH

; 1413 : 					FS_Read( file, filebuffer, pbuf->size );

	mov	eax, DWORD PTR _pbuf$9[ebp]
	mov	ecx, DWORD PTR [eax+65840]
	push	ecx
	lea	edx, DWORD PTR _filebuffer$3[ebp]
	push	edx
	mov	eax, DWORD PTR _file$2[ebp]
	push	eax
	call	_FS_Read
	add	esp, 12					; 0000000cH

; 1414 : 
; 1415 : 					MSG_WriteBits( &pbuf->frag_message, filebuffer, pbuf->size << 3 );

	mov	eax, DWORD PTR _pbuf$9[ebp]
	mov	ecx, DWORD PTR [eax+65840]
	shl	ecx, 3
	push	ecx
	lea	edx, DWORD PTR _filebuffer$3[ebp]
	push	edx
	mov	eax, DWORD PTR _pbuf$9[ebp]
	add	eax, 8
	push	eax
	call	_MSG_WriteBits
	add	esp, 12					; 0000000cH

; 1416 : 					FS_Close( file );

	mov	eax, DWORD PTR _file$2[ebp]
	push	eax
	call	_FS_Close
	add	esp, 4
$LN39@Netchan_Tr:

; 1417 : 				}
; 1418 : 
; 1419 : 				// copy frag stuff on top of current buffer
; 1420 : 				MSG_StartWriting( &temp, chan->reliable_buf, sizeof( chan->reliable_buf ), chan->reliable_length, -1 );

	push	-1
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+131224]
	push	ecx
	push	131104					; 00020020H
	mov	edx, DWORD PTR _chan$[ebp]
	add	edx, 131228				; 0002009cH
	push	edx
	lea	eax, DWORD PTR _temp$4[ebp]
	push	eax
	call	_MSG_StartWriting
	add	esp, 20					; 00000014H

; 1421 : 				MSG_WriteBits( &temp, MSG_GetData( &pbuf->frag_message ), MSG_GetNumBitsWritten( &pbuf->frag_message ));

	mov	eax, DWORD PTR _pbuf$9[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetNumBitsWritten
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _pbuf$9[ebp]
	add	ecx, 8
	push	ecx
	call	_MSG_GetData
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR _temp$4[ebp]
	push	edx
	call	_MSG_WriteBits
	add	esp, 12					; 0000000cH

; 1422 : 				chan->reliable_length += MSG_GetNumBitsWritten( &pbuf->frag_message );

	mov	eax, DWORD PTR _pbuf$9[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetNumBitsWritten
	add	esp, 4
	mov	ecx, DWORD PTR _chan$[ebp]
	add	eax, DWORD PTR [ecx+131224]
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+131224], eax

; 1423 : 				chan->frag_length[i] = MSG_GetNumBitsWritten( &pbuf->frag_message );

	mov	eax, DWORD PTR _pbuf$9[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetNumBitsWritten
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+ecx*4+262380], eax

; 1424 : 
; 1425 : 				// unlink pbuf
; 1426 : 				Netchan_UnlinkFragment( pbuf, &chan->fragbufs[i] );	

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+262356]
	push	edx
	mov	eax, DWORD PTR _pbuf$9[ebp]
	push	eax
	call	_Netchan_UnlinkFragment
	add	esp, 8

; 1427 : 
; 1428 : 				chan->reliable_fragment[i] = 1;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262340], 1

; 1429 : 
; 1430 : 				// offset the rest of the starting positions
; 1431 : 				for( j = i + 1; j < MAX_STREAMS; j++ )

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN16@Netchan_Tr
$LN14@Netchan_Tr:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN16@Netchan_Tr:
	cmp	DWORD PTR _j$[ebp], 2
	jge	SHORT $LN15@Netchan_Tr

; 1432 : 					chan->frag_startpos[j] += chan->frag_length[i];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+262372]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	add	edx, DWORD PTR [ecx+eax*4+262380]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax*4+262372], edx
	jmp	SHORT $LN14@Netchan_Tr
$LN15@Netchan_Tr:

; 1433 : 			}
; 1434 : 		}

	jmp	$LN11@Netchan_Tr
$LN12@Netchan_Tr:

; 1435 : 	}
; 1436 : 
; 1437 : 	MSG_Init( &send, "NetSend", send_buf, sizeof( send_buf ));

	push	-1
	push	131104					; 00020020H
	lea	eax, DWORD PTR _send_buf$[ebp]
	push	eax
	push	OFFSET ??_C@_07NPGECGHP@NetSend@
	lea	ecx, DWORD PTR _send$[ebp]
	push	ecx
	call	_MSG_InitExt
	add	esp, 20					; 00000014H

; 1438 : 
; 1439 : 	// prepare the packet header
; 1440 : 	w1 = chan->outgoing_sequence | (send_reliable << 31);

	mov	eax, DWORD PTR _send_reliable$[ebp]
	shl	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _chan$[ebp]
	or	eax, DWORD PTR [ecx+80]
	mov	DWORD PTR _w1$[ebp], eax

; 1441 : 	w2 = chan->incoming_sequence | (chan->incoming_reliable_sequence << 31);

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	shl	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _chan$[ebp]
	or	ecx, DWORD PTR [edx+64]
	mov	DWORD PTR _w2$[ebp], ecx

; 1442 : 
; 1443 : 	send_reliable_fragment = false;

	mov	DWORD PTR _send_reliable_fragment$[ebp], 0

; 1444 : 
; 1445 : 	for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@Netchan_Tr
$LN17@Netchan_Tr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN19@Netchan_Tr:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN18@Netchan_Tr

; 1446 : 	{
; 1447 : 		if( chan->reliable_fragment[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax*4+262340], 0
	je	SHORT $LN42@Netchan_Tr

; 1448 : 		{
; 1449 : 			send_reliable_fragment = true;

	mov	DWORD PTR _send_reliable_fragment$[ebp], 1

; 1450 : 			break;

	jmp	SHORT $LN18@Netchan_Tr
$LN42@Netchan_Tr:

; 1451 : 		}
; 1452 : 	}

	jmp	SHORT $LN17@Netchan_Tr
$LN18@Netchan_Tr:

; 1453 : 
; 1454 : 	if( send_reliable && send_reliable_fragment )

	cmp	DWORD PTR _send_reliable$[ebp], 0
	je	SHORT $LN43@Netchan_Tr
	cmp	DWORD PTR _send_reliable_fragment$[ebp], 0
	je	SHORT $LN43@Netchan_Tr

; 1455 : 		SetBits( w1, BIT( 30 ));

	mov	eax, DWORD PTR _w1$[ebp]
	or	eax, 1073741824				; 40000000H
	mov	DWORD PTR _w1$[ebp], eax
$LN43@Netchan_Tr:

; 1456 : 
; 1457 : 	chan->outgoing_sequence++;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, 1
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+80], ecx

; 1458 : 
; 1459 : 	MSG_WriteLong( &send, w1 );

	mov	eax, DWORD PTR _w1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _send$[ebp]
	push	ecx
	call	_MSG_WriteLong
	add	esp, 8

; 1460 : 	MSG_WriteLong( &send, w2 );

	mov	eax, DWORD PTR _w2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _send$[ebp]
	push	ecx
	call	_MSG_WriteLong
	add	esp, 8

; 1461 : 
; 1462 : 	// send the qport if we are a client
; 1463 : 	if( chan->sock == NS_CLIENT )

	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN44@Netchan_Tr

; 1464 : 	{
; 1465 : 		MSG_WriteWord( &send, Cvar_VariableInteger( "net_qport" ));

	push	OFFSET ??_C@_09HOOHLIKH@net_qport@
	call	_Cvar_VariableInteger
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_WriteWord
	add	esp, 8
$LN44@Netchan_Tr:

; 1466 : 	}	
; 1467 : 
; 1468 : 	if( send_reliable && send_reliable_fragment )

	cmp	DWORD PTR _send_reliable$[ebp], 0
	je	$LN21@Netchan_Tr
	cmp	DWORD PTR _send_reliable_fragment$[ebp], 0
	je	$LN21@Netchan_Tr

; 1469 : 	{
; 1470 : 		for( i = 0; i < MAX_STREAMS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN22@Netchan_Tr
$LN20@Netchan_Tr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN22@Netchan_Tr:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN21@Netchan_Tr

; 1471 : 		{
; 1472 : 			if( chan->reliable_fragment[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax*4+262340], 0
	je	SHORT $LN46@Netchan_Tr

; 1473 : 			{
; 1474 : 				MSG_WriteByte( &send, 1 );

	push	1
	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_WriteByte
	add	esp, 8

; 1475 : 				MSG_WriteLong( &send, chan->reliable_fragid[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+262348]
	push	edx
	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_WriteLong
	add	esp, 8

; 1476 : 				MSG_WriteLong( &send, chan->frag_startpos[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+262372]
	push	edx
	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_WriteLong
	add	esp, 8

; 1477 : 				MSG_WriteLong( &send, chan->frag_length[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+262380]
	push	edx
	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_WriteLong
	add	esp, 8

; 1478 : 			}

	jmp	SHORT $LN47@Netchan_Tr
$LN46@Netchan_Tr:

; 1479 : 			else 
; 1480 : 			{
; 1481 : 				MSG_WriteByte( &send, 0 );

	push	0
	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_WriteByte
	add	esp, 8
$LN47@Netchan_Tr:

; 1482 : 			}
; 1483 : 		}

	jmp	$LN20@Netchan_Tr
$LN21@Netchan_Tr:

; 1484 : 	}
; 1485 : 
; 1486 : 	// copy the reliable message to the packet first
; 1487 : 	if( send_reliable )

	cmp	DWORD PTR _send_reliable$[ebp], 0
	je	SHORT $LN48@Netchan_Tr

; 1488 : 	{
; 1489 : 		MSG_WriteBits( &send, chan->reliable_buf, chan->reliable_length );

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+131224]
	push	ecx
	mov	edx, DWORD PTR _chan$[ebp]
	add	edx, 131228				; 0002009cH
	push	edx
	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_WriteBits
	add	esp, 12					; 0000000cH

; 1490 : 		chan->last_reliable_sequence = chan->outgoing_sequence - 1;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	sub	ecx, 1
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+88], ecx
$LN48@Netchan_Tr:

; 1491 : 	}
; 1492 : 
; 1493 : 	if( MSG_GetNumBitsLeft( &send ) >= length )

	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_GetNumBitsLeft
	add	esp, 4
	cmp	eax, DWORD PTR _length$[ebp]
	jl	SHORT $LN49@Netchan_Tr

; 1494 : 		MSG_WriteBits( &send, data, length );

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _send$[ebp]
	push	edx
	call	_MSG_WriteBits
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN50@Netchan_Tr
$LN49@Netchan_Tr:

; 1495 : 	else Con_Printf( S_WARN "Netchan_Transmit: unreliable message overflow\n" );

	push	OFFSET ??_C@_0DM@GAEICFEB@?$FO3Warning?3?$FO7?5Netchan_Transmit?3?5@
	call	_Con_Printf
	add	esp, 4
$LN50@Netchan_Tr:

; 1496 : 
; 1497 : 	// deal with packets that are too small for some networks
; 1498 : 	if( MSG_GetNumBytesWritten( &send ) < 16 && !NET_IsLocalAddress( chan->remote_address )) // packet too small for some networks

	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	cmp	eax, 16					; 00000010H
	jge	$LN24@Netchan_Tr
	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 4
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	call	_NET_IsLocalAddress
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN24@Netchan_Tr

; 1499 : 	{
; 1500 : 		// go ahead and pad a full 16 extra bytes -- this only happens during authentication / signon
; 1501 : 		for( i = MSG_GetNumBytesWritten( &send ); i < 16; i++ )		

	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN25@Netchan_Tr
$LN23@Netchan_Tr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN25@Netchan_Tr:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN24@Netchan_Tr

; 1502 : 		{
; 1503 : 			if( chan->sock == NS_CLIENT )

	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN52@Netchan_Tr

; 1504 : 				MSG_BeginClientCmd( &send, clc_nop );

	push	0
	push	0
	push	1
	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_WriteCmdExt
	add	esp, 16					; 00000010H
	jmp	SHORT $LN55@Netchan_Tr
$LN52@Netchan_Tr:

; 1505 : 			else if( chan->sock == NS_SERVER )

	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN54@Netchan_Tr

; 1506 : 				MSG_BeginServerCmd( &send, svc_nop );			

	push	0
	push	1
	push	1
	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_WriteCmdExt
	add	esp, 16					; 00000010H
	jmp	SHORT $LN55@Netchan_Tr
$LN54@Netchan_Tr:

; 1507 : 			else break;

	jmp	SHORT $LN24@Netchan_Tr
$LN55@Netchan_Tr:

; 1508 : 		}

	jmp	SHORT $LN23@Netchan_Tr
$LN24@Netchan_Tr:

; 1509 : 	}
; 1510 : 
; 1511 : 	statId = chan->flow[FLOW_OUTGOING].current & MASK_LATENT;

	mov	eax, 544				; 00000220H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+ecx+263184]
	and	eax, 31					; 0000001fH
	mov	DWORD PTR _statId$[ebp], eax

; 1512 : 	chan->flow[FLOW_OUTGOING].stats[statId].size = MSG_GetNumBytesWritten( &send ) + UDP_HEADER_SIZE;

	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	add	eax, 28					; 0000001cH
	mov	ecx, 544				; 00000220H
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	lea	edx, DWORD PTR [ecx+edx+262672]
	mov	ecx, DWORD PTR _statId$[ebp]
	shl	ecx, 4
	mov	DWORD PTR [edx+ecx], eax

; 1513 : 	chan->flow[FLOW_OUTGOING].stats[statId].time = host.realtime;

	mov	eax, 544				; 00000220H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	lea	eax, DWORD PTR [edx+ecx+262672]
	mov	ecx, DWORD PTR _statId$[ebp]
	shl	ecx, 4
	movsd	xmm0, QWORD PTR _host+1440
	movsd	QWORD PTR [eax+ecx+8], xmm0

; 1514 : 	chan->flow[FLOW_OUTGOING].totalbytes += chan->flow[FLOW_OUTGOING].stats[statId].size;

	mov	eax, 544				; 00000220H
	imul	ecx, eax, 0
	mov	edx, 544				; 00000220H
	imul	eax, edx, 0
	mov	edx, DWORD PTR _chan$[ebp]
	lea	eax, DWORD PTR [edx+eax+262672]
	mov	edx, DWORD PTR _statId$[ebp]
	shl	edx, 4
	mov	esi, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [esi+ecx+263208]
	add	ecx, DWORD PTR [eax+edx]
	mov	edx, 544				; 00000220H
	imul	eax, edx, 0
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+eax+263208], ecx

; 1515 : 	chan->flow[FLOW_OUTGOING].current++;

	mov	eax, 544				; 00000220H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+ecx+263184]
	add	eax, 1
	mov	ecx, 544				; 00000220H
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+edx+263184], eax

; 1516 : 
; 1517 : 	Netchan_UpdateFlow( chan );

	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	call	_Netchan_UpdateFlow
	add	esp, 4

; 1518 : 
; 1519 : 	chan->total_sended += MSG_GetNumBytesWritten( &send );

	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	mov	ecx, DWORD PTR _chan$[ebp]
	add	eax, DWORD PTR [ecx+263760]
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+263760], eax

; 1520 : 
; 1521 : 	// send the datagram
; 1522 : 	if( !CL_IsPlaybackDemo( ))

	call	_CL_IsPlaybackDemo
	test	eax, eax
	jne	SHORT $LN56@Netchan_Tr

; 1523 : 	{
; 1524 : 		NET_SendPacket( chan->sock, MSG_GetNumBytesWritten( &send ), MSG_GetData( &send ), chan->remote_address );

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 4
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	lea	ecx, DWORD PTR _send$[ebp]
	push	ecx
	call	_MSG_GetData
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR _send$[ebp]
	push	edx
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_NET_SendPacket
	add	esp, 32					; 00000020H
$LN56@Netchan_Tr:

; 1525 : 	}
; 1526 : 
; 1527 : 	if( SV_Active() && sv_lan.value && sv_lan_rate.value > 1000.0 )

	call	_SV_Active
	test	eax, eax
	je	SHORT $LN57@Netchan_Tr
	movss	xmm0, DWORD PTR _sv_lan+12
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN57@Netchan_Tr
	cvtss2sd xmm0, DWORD PTR _sv_lan_rate+12
	comisd	xmm0, QWORD PTR __real@408f400000000000
	jbe	SHORT $LN57@Netchan_Tr

; 1528 : 		fRate = 1.0f / sv_lan_rate.value;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _sv_lan_rate+12
	movss	DWORD PTR _fRate$[ebp], xmm0
	jmp	SHORT $LN58@Netchan_Tr
$LN57@Netchan_Tr:

; 1529 : 	else fRate = 1.0f / chan->rate;

	mov	eax, DWORD PTR _chan$[ebp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR [eax+48]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _fRate$[ebp], xmm0
$LN58@Netchan_Tr:

; 1530 : 
; 1531 : 	if( chan->cleartime < host.realtime )

	mov	eax, DWORD PTR _chan$[ebp]
	movsd	xmm0, QWORD PTR _host+1440
	comisd	xmm0, QWORD PTR [eax+56]
	jbe	SHORT $LN59@Netchan_Tr

; 1532 : 		chan->cleartime = host.realtime;

	mov	eax, DWORD PTR _chan$[ebp]
	movsd	xmm0, QWORD PTR _host+1440
	movsd	QWORD PTR [eax+56], xmm0
$LN59@Netchan_Tr:

; 1533 : 
; 1534 : 	chan->cleartime += ( MSG_GetNumBytesWritten( &send ) + UDP_HEADER_SIZE ) * fRate;

	lea	eax, DWORD PTR _send$[ebp]
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	add	eax, 28					; 0000001cH
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _fRate$[ebp]
	cvtss2sd xmm0, xmm0
	mov	ecx, DWORD PTR _chan$[ebp]
	addsd	xmm0, QWORD PTR [ecx+56]
	mov	edx, DWORD PTR _chan$[ebp]
	movsd	QWORD PTR [edx+56], xmm0

; 1535 : 
; 1536 : 	if( net_showpackets->value && net_showpackets->value != 2.0f )

	mov	eax, DWORD PTR _net_showpackets
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN60@Netchan_Tr
	mov	eax, DWORD PTR _net_showpackets
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@40000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN60@Netchan_Tr

; 1537 : 	{
; 1538 : 		Con_Printf( " %s --> sz=%i seq=%i ack=%i rel=%i tm=%f\n"

	cmp	DWORD PTR _send_reliable$[ebp], 0
	je	SHORT $LN64@Netchan_Tr
	mov	DWORD PTR tv502[ebp], 1
	jmp	SHORT $LN65@Netchan_Tr
$LN64@Netchan_Tr:
	mov	DWORD PTR tv502[ebp], 0
$LN65@Netchan_Tr:
	cvtsd2ss xmm0, QWORD PTR _host+1440
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR tv502[ebp]
	push	eax
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	and	edx, 63					; 0000003fH
	push	edx
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	sub	ecx, 1
	and	ecx, 63					; 0000003fH
	push	ecx
	lea	edx, DWORD PTR _send$[ebp]
	push	edx
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ns_strings[ecx*4]
	push	edx
	push	OFFSET ??_C@_0CK@CMAOGLNL@?5?$CFs?5?9?9?$DO?5sz?$DN?$CFi?5seq?$DN?$CFi?5ack?$DN?$CFi?5rel@
	call	_Con_Printf
	add	esp, 32					; 00000020H
$LN60@Netchan_Tr:

; 1539 : 			, ns_strings[chan->sock]
; 1540 : 			, MSG_GetNumBytesWritten( &send )
; 1541 : 			, ( chan->outgoing_sequence - 1 ) & 63
; 1542 : 			, chan->incoming_sequence & 63
; 1543 : 			, send_reliable ? 1 : 0
; 1544 : 			, (float)host.realtime );
; 1545 : 	}
; 1546 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_TransmitBits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_Transmit
_TEXT	SEGMENT
_chan$ = 8						; size = 4
_lengthInBytes$ = 12					; size = 4
_data$ = 16						; size = 4
_Netchan_Transmit PROC					; COMDAT

; 1559 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1560 : 	Netchan_TransmitBits( chan, lengthInBytes << 3, data );

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lengthInBytes$[ebp]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _chan$[ebp]
	push	edx
	call	_Netchan_TransmitBits
	add	esp, 12					; 0000000cH

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_Transmit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_CreateFileFragments
_TEXT	SEGMENT
tv233 = -404						; size = 8
tv229 = -396						; size = 4
tv162 = -396						; size = 4
_compressed$1 = -328					; size = 4
_uncompressed$2 = -324					; size = 4
_uCompressedSize$3 = -320				; size = 4
_buf$ = -316						; size = 4
_p$ = -312						; size = 4
_wait$ = -308						; size = 4
_bCompressed$ = -304					; size = 4
_firstfragment$ = -300					; size = 4
_fileTime$ = -296					; size = 4
_compressedFileTime$ = -292				; size = 4
_compressedfilename$ = -288				; size = 260
_filesize$ = -28					; size = 4
_bufferid$ = -24					; size = 4
_remaining$ = -20					; size = 4
_pos$ = -16						; size = 4
_send$ = -12						; size = 4
_chunksize$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_chan$ = 8						; size = 4
_filename$ = 12						; size = 4
_Netchan_CreateFileFragments PROC			; COMDAT

; 816  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 817  : 	int		chunksize;
; 818  : 	int		send, pos;
; 819  : 	int		remaining;
; 820  : 	int		bufferid = 1;

	mov	DWORD PTR _bufferid$[ebp], 1

; 821  : 	int		filesize = 0;

	mov	DWORD PTR _filesize$[ebp], 0

; 822  : 	char		compressedfilename[MAX_OSPATH];
; 823  : 	int		compressedFileTime;
; 824  : 	int		fileTime;
; 825  : 	qboolean		firstfragment = true;

	mov	DWORD PTR _firstfragment$[ebp], 1

; 826  : 	qboolean		bCompressed = false;

	mov	DWORD PTR _bCompressed$[ebp], 0

; 827  : 	fragbufwaiting_t	*wait, *p;
; 828  : 	fragbuf_t		*buf;
; 829  : 	
; 830  : 	if(( filesize = FS_FileSize( filename, false )) <= 0 )

	push	0
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_FS_FileSize
	add	esp, 8
	mov	DWORD PTR _filesize$[ebp], eax
	cmp	DWORD PTR _filesize$[ebp], 0
	jg	SHORT $LN6@Netchan_Cr

; 831  : 	{
; 832  : 		Con_Printf( S_WARN "Unable to open %s for transfer\n", filename );

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CN@JHLJEPPH@?$FO3Warning?3?$FO7?5Unable?5to?5open?5?$CFs?5@
	call	_Con_Printf
	add	esp, 8

; 833  : 		return 0;

	xor	eax, eax
	jmp	$LN1@Netchan_Cr
$LN6@Netchan_Cr:

; 834  : 	}
; 835  : 
; 836  : 	if( chan->pfnBlockSize != NULL )

	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $LN7@Netchan_Cr

; 837  : 		chunksize = chan->pfnBlockSize( chan->client );

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _chunksize$[ebp], eax
	jmp	SHORT $LN8@Netchan_Cr
$LN7@Netchan_Cr:

; 838  : 	else chunksize = FRAGMENT_MAX_SIZE; // fallback

	mov	DWORD PTR _chunksize$[ebp], 64000	; 0000fa00H
$LN8@Netchan_Cr:

; 839  : 
; 840  : 	Q_strncpy( compressedfilename, filename, sizeof( compressedfilename ));

	push	260					; 00000104H
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _compressedfilename$[ebp]
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 841  : 	COM_ReplaceExtension( compressedfilename, ".ztmp" );

	push	OFFSET ??_C@_05ELJENEDK@?4ztmp@
	lea	eax, DWORD PTR _compressedfilename$[ebp]
	push	eax
	call	_COM_ReplaceExtension
	add	esp, 8

; 842  : 	compressedFileTime = FS_FileTime( compressedfilename, false );

	push	0
	lea	eax, DWORD PTR _compressedfilename$[ebp]
	push	eax
	call	_FS_FileTime
	add	esp, 8
	mov	DWORD PTR _compressedFileTime$[ebp], eax

; 843  : 	fileTime = FS_FileTime( filename, false );

	push	0
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_FS_FileTime
	add	esp, 8
	mov	DWORD PTR _fileTime$[ebp], eax

; 844  : 
; 845  : 	if( compressedFileTime >= fileTime )

	mov	eax, DWORD PTR _compressedFileTime$[ebp]
	cmp	eax, DWORD PTR _fileTime$[ebp]
	jl	SHORT $LN9@Netchan_Cr

; 846  : 	{
; 847  : 		// if compressed file already created and newer than source
; 848  : 		if( FS_FileSize( compressedfilename, false ) != -1 )

	push	0
	lea	eax, DWORD PTR _compressedfilename$[ebp]
	push	eax
	call	_FS_FileSize
	add	esp, 8
	cmp	eax, -1
	je	SHORT $LN11@Netchan_Cr

; 849  : 			bCompressed = true;

	mov	DWORD PTR _bCompressed$[ebp], 1
$LN11@Netchan_Cr:

; 850  : 	}

	jmp	$LN10@Netchan_Cr
$LN9@Netchan_Cr:

; 851  : 	else
; 852  : 	{
; 853  : 		uint	uCompressedSize;
; 854  : 		byte	*uncompressed;
; 855  : 		byte	*compressed;
; 856  : 
; 857  : 		uncompressed = FS_LoadFile( filename, &filesize, false );

	push	0
	lea	eax, DWORD PTR _filesize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_FS_LoadFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _uncompressed$2[ebp], eax

; 858  : 		compressed = LZSS_Compress( uncompressed, filesize, &uCompressedSize );

	lea	eax, DWORD PTR _uCompressedSize$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _filesize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uncompressed$2[ebp]
	push	edx
	call	_LZSS_Compress
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _compressed$1[ebp], eax

; 859  : 
; 860  : 		if( compressed )

	cmp	DWORD PTR _compressed$1[ebp], 0
	je	$LN12@Netchan_Cr

; 861  : 		{
; 862  : 			Con_DPrintf( "compressed file %s (%s -> %s)\n", filename, Q_memprint( filesize ), Q_memprint( uCompressedSize ));

	push	2
	mov	eax, DWORD PTR _uCompressedSize$3[ebp]
	mov	DWORD PTR tv229[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv229[ebp]
	mov	ecx, DWORD PTR tv229[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv233[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv233[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_Q_pretifymem
	add	esp, 8
	push	eax
	push	2
	cvtsi2ss xmm0, DWORD PTR _filesize$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_Q_pretifymem
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	push	OFFSET ??_C@_0BP@KJFMLEFG@compressed?5file?5?$CFs?5?$CI?$CFs?5?9?$DO?5?$CFs?$CJ?6@
	call	_Con_DPrintf
	add	esp, 16					; 00000010H

; 863  : 			FS_WriteFile( compressedfilename, compressed, uCompressedSize );

	mov	eax, DWORD PTR _uCompressedSize$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _compressed$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _compressedfilename$[ebp]
	push	edx
	call	_FS_WriteFile
	add	esp, 12					; 0000000cH

; 864  : 			filesize = uCompressedSize;

	mov	eax, DWORD PTR _uCompressedSize$3[ebp]
	mov	DWORD PTR _filesize$[ebp], eax

; 865  : 			bCompressed = true;

	mov	DWORD PTR _bCompressed$[ebp], 1

; 866  : 			free( compressed );

	mov	eax, DWORD PTR _compressed$1[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN12@Netchan_Cr:

; 867  : 		}
; 868  : 		Mem_Free( uncompressed );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_CreateFileFragments@@9@9
	add	eax, 52					; 00000034H
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _uncompressed$2[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN10@Netchan_Cr:

; 869  : 	}
; 870  : 
; 871  : 	wait = (fragbufwaiting_t *)Mem_Calloc( net_mempool, sizeof( fragbufwaiting_t ));

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_CreateFileFragments@@9@9
	add	eax, 55					; 00000037H
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	1
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _net_mempool
	push	ecx
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _wait$[ebp], eax

; 872  : 	remaining = filesize;

	mov	eax, DWORD PTR _filesize$[ebp]
	mov	DWORD PTR _remaining$[ebp], eax

; 873  : 	pos = 0;

	mov	DWORD PTR _pos$[ebp], 0
$LN2@Netchan_Cr:

; 874  : 
; 875  : 	while( remaining > 0 )

	cmp	DWORD PTR _remaining$[ebp], 0
	jle	$LN3@Netchan_Cr

; 876  : 	{
; 877  : 		send = Q_min( remaining, chunksize );

	mov	eax, DWORD PTR _remaining$[ebp]
	cmp	eax, DWORD PTR _chunksize$[ebp]
	jge	SHORT $LN17@Netchan_Cr
	mov	ecx, DWORD PTR _remaining$[ebp]
	mov	DWORD PTR tv162[ebp], ecx
	jmp	SHORT $LN18@Netchan_Cr
$LN17@Netchan_Cr:
	mov	edx, DWORD PTR _chunksize$[ebp]
	mov	DWORD PTR tv162[ebp], edx
$LN18@Netchan_Cr:
	mov	eax, DWORD PTR tv162[ebp]
	mov	DWORD PTR _send$[ebp], eax

; 878  : 
; 879  : 		buf = Netchan_AllocFragbuf();

	call	_Netchan_AllocFragbuf
	mov	DWORD PTR _buf$[ebp], eax

; 880  : 		buf->bufferid = bufferid++;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _bufferid$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _bufferid$[ebp]
	add	edx, 1
	mov	DWORD PTR _bufferid$[ebp], edx

; 881  : 
; 882  : 		// copy in data
; 883  : 		MSG_Clear( &buf->frag_message );

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_Clear
	add	esp, 4

; 884  : 
; 885  : 		if( firstfragment )

	cmp	DWORD PTR _firstfragment$[ebp], 0
	je	SHORT $LN13@Netchan_Cr

; 886  : 		{
; 887  : 			// Write filename
; 888  : 			MSG_WriteString( &buf->frag_message, filename );

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 8
	push	ecx
	call	_MSG_WriteString
	add	esp, 8

; 889  : 
; 890  : 			// Send a bit less on first package
; 891  : 			send -= MSG_GetNumBytesWritten( &buf->frag_message );

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	mov	ecx, DWORD PTR _send$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _send$[ebp], ecx

; 892  : 
; 893  : 			firstfragment = false;

	mov	DWORD PTR _firstfragment$[ebp], 0
$LN13@Netchan_Cr:

; 894  : 		}
; 895  : 
; 896  : 		buf->isfile = true;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+65564], 1

; 897  : 		buf->size = send;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _send$[ebp]
	mov	DWORD PTR [eax+65840], ecx

; 898  : 		buf->foffset = pos;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+65836], ecx

; 899  : 		buf->iscompressed = bCompressed;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _bCompressed$[ebp]
	mov	DWORD PTR [eax+65572], ecx

; 900  : 		Q_strncpy( buf->filename, filename, sizeof( buf->filename ));

	push	260					; 00000104H
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 65576				; 00010028H
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 901  : 
; 902  : 		pos += send;

	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _send$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 903  : 		remaining -= send;

	mov	eax, DWORD PTR _remaining$[ebp]
	sub	eax, DWORD PTR _send$[ebp]
	mov	DWORD PTR _remaining$[ebp], eax

; 904  : 
; 905  : 		Netchan_AddFragbufToTail( wait, buf );

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wait$[ebp]
	push	ecx
	call	_Netchan_AddFragbufToTail
	add	esp, 8

; 906  : 	}

	jmp	$LN2@Netchan_Cr
$LN3@Netchan_Cr:

; 907  : 
; 908  : 	// now add waiting list item to end of buffer queue
; 909  : 	if( !chan->waitlist[FRAG_FILE_STREAM] )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax+262332], 0
	jne	SHORT $LN14@Netchan_Cr

; 910  : 	{
; 911  : 		chan->waitlist[FRAG_FILE_STREAM] = wait;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR _wait$[ebp]
	mov	DWORD PTR [ecx+eax+262332], edx

; 912  : 	}

	jmp	SHORT $LN15@Netchan_Cr
$LN14@Netchan_Cr:

; 913  : 	else
; 914  : 	{
; 915  : 		p = chan->waitlist[FRAG_FILE_STREAM];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax+262332]
	mov	DWORD PTR _p$[ebp], edx
$LN4@Netchan_Cr:

; 916  : 		while( p->next )

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Netchan_Cr

; 917  : 			p = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN4@Netchan_Cr
$LN5@Netchan_Cr:

; 918  : 		p->next = wait;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _wait$[ebp]
	mov	DWORD PTR [eax], ecx
$LN15@Netchan_Cr:

; 919  : 	}
; 920  : 
; 921  : 	return 1;

	mov	eax, 1
$LN1@Netchan_Cr:

; 922  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_CreateFileFragments ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_CreateFragments
_TEXT	SEGMENT
_chan$ = 8						; size = 4
_msg$ = 12						; size = 4
_Netchan_CreateFragments PROC				; COMDAT

; 639  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 640  : 	// always queue any pending reliable data ahead of the fragmentation buffer
; 641  : 	if( MSG_GetNumBytesWritten( &chan->message ) > 0 )

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN2@Netchan_Cr

; 642  : 	{
; 643  : 		Netchan_CreateFragments_( chan, &chan->message );

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR _chan$[ebp]
	push	ecx
	call	_Netchan_CreateFragments_
	add	esp, 8

; 644  : 		MSG_Clear( &chan->message );

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_MSG_Clear
	add	esp, 4
$LN2@Netchan_Cr:

; 645  : 	}
; 646  : 
; 647  : 	Netchan_CreateFragments_( chan, msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _chan$[ebp]
	push	ecx
	call	_Netchan_CreateFragments_
	add	esp, 8

; 648  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_CreateFragments ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_CopyFileFragments
_TEXT	SEGMENT
_uncompressedBuffer$1 = -296				; size = 4
_uncompressedSize$2 = -292				; size = 4
_cursize$3 = -288					; size = 4
_n$ = -284						; size = 4
_p$ = -280						; size = 4
_buffer$ = -276						; size = 4
_pos$ = -272						; size = 4
_nsize$ = -268						; size = 4
_filename$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_chan$ = 8						; size = 4
_msg$ = 12						; size = 4
_Netchan_CopyFileFragments PROC				; COMDAT

; 1020 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 1021 : 	char	filename[MAX_OSPATH];
; 1022 : 	int	nsize, pos;
; 1023 : 	byte	*buffer;
; 1024 : 	fragbuf_t	*p, *n;
; 1025 : 
; 1026 : 	if( !chan->incomingready[FRAG_FILE_STREAM] )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax+262396], 0
	jne	SHORT $LN6@Netchan_Co

; 1027 : 		return false;

	xor	eax, eax
	jmp	$LN1@Netchan_Co
$LN6@Netchan_Co:

; 1028 : 
; 1029 : 	if( !chan->incomingbufs[FRAG_FILE_STREAM] )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax+262388], 0
	jne	SHORT $LN7@Netchan_Co

; 1030 : 	{
; 1031 : 		chan->incomingready[FRAG_FILE_STREAM] = false;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax+262396], 0

; 1032 : 		return false;

	xor	eax, eax
	jmp	$LN1@Netchan_Co
$LN7@Netchan_Co:

; 1033 : 	}
; 1034 : 
; 1035 : 	p = chan->incomingbufs[FRAG_FILE_STREAM];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax+262388]
	mov	DWORD PTR _p$[ebp], edx

; 1036 : 
; 1037 : 	MSG_Init( msg, "NetMessage", net_message_buffer, sizeof( net_message_buffer ));

	push	-1
	push	131104					; 00020020H
	push	OFFSET _net_message_buffer
	push	OFFSET ??_C@_0L@EJNKCDI@NetMessage@
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_InitExt
	add	esp, 20					; 00000014H

; 1038 : 
; 1039 : 	// copy in first chunk so we can get filename out
; 1040 : 	MSG_WriteBytes( msg, MSG_GetData( &p->frag_message ), MSG_GetNumBytesWritten( &p->frag_message ));

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 8
	push	ecx
	call	_MSG_GetData
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteBytes
	add	esp, 12					; 0000000cH

; 1041 : 	MSG_Clear( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_Clear
	add	esp, 4

; 1042 : 
; 1043 : 	Q_strncpy( filename, MSG_ReadString( msg ), sizeof( filename ));

	push	260					; 00000104H
	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_ReadStringExt
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 1044 : 
; 1045 : 	if( !COM_CheckString( filename ))

	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@Netchan_Co

; 1046 : 	{
; 1047 : 		Con_Printf( S_ERROR "file fragment received with no filename\nFlushing input queue\n" );

	push	OFFSET ??_C@_0EJ@HNOLHMLJ@?$FO1Error?3?$FO7?5file?5fragment?5receiv@
	call	_Con_Printf
	add	esp, 4

; 1048 : 		Netchan_FlushIncoming( chan, FRAG_FILE_STREAM );

	push	1
	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	call	_Netchan_FlushIncoming
	add	esp, 8

; 1049 : 		return false;

	xor	eax, eax
	jmp	$LN1@Netchan_Co

; 1050 : 	}

	jmp	SHORT $LN9@Netchan_Co
$LN8@Netchan_Co:

; 1051 : 	else if( filename[0] != '!' && !COM_IsSafeFileToDownload( filename ))

	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _filename$[ebp+ecx]
	cmp	edx, 33					; 00000021H
	je	SHORT $LN9@Netchan_Co
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_COM_IsSafeFileToDownload
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN9@Netchan_Co

; 1052 : 	{
; 1053 : 		Con_Printf( S_ERROR "file fragment received with bad path, ignoring\n" );

	push	OFFSET ??_C@_0DL@FCCFCCGO@?$FO1Error?3?$FO7?5file?5fragment?5receiv@
	call	_Con_Printf
	add	esp, 4

; 1054 : 		Netchan_FlushIncoming( chan, FRAG_FILE_STREAM );

	push	1
	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	call	_Netchan_FlushIncoming
	add	esp, 8

; 1055 : 		return false;

	xor	eax, eax
	jmp	$LN1@Netchan_Co
$LN9@Netchan_Co:

; 1056 : 	}
; 1057 : 
; 1058 : 	Q_strncpy( chan->incomingfilename, filename, sizeof( chan->incomingfilename ));

	push	260					; 00000104H
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _chan$[ebp]
	add	ecx, 262404				; 00040104H
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 1059 : 
; 1060 : 	if( filename[0] != '!' && FS_FileExists( filename, false ))

	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _filename$[ebp+ecx]
	cmp	edx, 33					; 00000021H
	je	SHORT $LN11@Netchan_Co
	push	0
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@Netchan_Co

; 1061 : 	{
; 1062 : 		Con_Printf( S_ERROR "can't download %s, already exists\n", filename );

	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0CO@EDAFCLIP@?$FO1Error?3?$FO7?5can?8t?5download?5?$CFs?0?5a@
	call	_Con_Printf
	add	esp, 8

; 1063 : 		Netchan_FlushIncoming( chan, FRAG_FILE_STREAM );

	push	1
	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	call	_Netchan_FlushIncoming
	add	esp, 8

; 1064 : 		return true;

	mov	eax, 1
	jmp	$LN1@Netchan_Co
$LN11@Netchan_Co:

; 1065 : 	}
; 1066 : 
; 1067 : 	// create file from buffers
; 1068 : 	nsize = 0;

	mov	DWORD PTR _nsize$[ebp], 0
$LN2@Netchan_Co:

; 1069 : 	while ( p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@Netchan_Co

; 1070 : 	{
; 1071 : 		nsize += MSG_GetNumBytesWritten( &p->frag_message ); // Size will include a bit of slop, oh well

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	add	eax, DWORD PTR _nsize$[ebp]
	mov	DWORD PTR _nsize$[ebp], eax

; 1072 : 		if( p == chan->incomingbufs[FRAG_FILE_STREAM] )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR [ecx+eax+262388]
	jne	SHORT $LN12@Netchan_Co

; 1073 : 			nsize -= MSG_GetNumBytesRead( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	mov	ecx, DWORD PTR _nsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _nsize$[ebp], ecx
$LN12@Netchan_Co:

; 1074 : 		p = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx

; 1075 : 	}

	jmp	SHORT $LN2@Netchan_Co
$LN3@Netchan_Co:

; 1076 : 
; 1077 : 	buffer = Mem_Calloc( net_mempool, nsize + 1 );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_CopyFileFragments@@9@9
	add	eax, 57					; 00000039H
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	1
	mov	ecx, DWORD PTR _nsize$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _net_mempool
	push	edx
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buffer$[ebp], eax

; 1078 : 	p = chan->incomingbufs[FRAG_FILE_STREAM];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax+262388]
	mov	DWORD PTR _p$[ebp], edx

; 1079 : 	pos = 0;

	mov	DWORD PTR _pos$[ebp], 0
$LN4@Netchan_Co:

; 1080 : 
; 1081 : 	while( p )

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN5@Netchan_Co

; 1082 : 	{
; 1083 : 		int	cursize;
; 1084 : 
; 1085 : 		n = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _n$[ebp], ecx

; 1086 : 		
; 1087 : 		cursize = MSG_GetNumBytesWritten( &p->frag_message );

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	mov	DWORD PTR _cursize$3[ebp], eax

; 1088 : 
; 1089 : 		// first message has the file name, don't write that into the data stream,
; 1090 : 		// just write the rest of the actual data
; 1091 : 		if( p == chan->incomingbufs[FRAG_FILE_STREAM] ) 

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR [ecx+eax+262388]
	jne	SHORT $LN13@Netchan_Co

; 1092 : 		{
; 1093 : 			// copy it in
; 1094 : 			cursize -= MSG_GetNumBytesRead( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	mov	ecx, DWORD PTR _cursize$3[ebp]
	sub	ecx, eax
	mov	DWORD PTR _cursize$3[ebp], ecx

; 1095 : 			memcpy( &buffer[pos], &p->frag_message.pData[MSG_GetNumBytesRead( msg )], cursize );

	mov	eax, DWORD PTR _cursize$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	add	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1096 : 		}

	jmp	SHORT $LN14@Netchan_Co
$LN13@Netchan_Co:

; 1097 : 		else
; 1098 : 		{
; 1099 : 			memcpy( &buffer[pos], p->frag_message.pData, cursize );

	mov	eax, DWORD PTR _cursize$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN14@Netchan_Co:

; 1100 : 		}
; 1101 : 
; 1102 : 		pos += cursize;

	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _cursize$3[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 1103 : 		Mem_Free( p );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_CopyFileFragments@@9@9
	add	eax, 83					; 00000053H
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 1104 : 		p = n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 1105 : 	}

	jmp	$LN4@Netchan_Co
$LN5@Netchan_Co:

; 1106 : 
; 1107 : 	if( LZSS_IsCompressed( buffer ))

	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_LZSS_IsCompressed
	add	esp, 4
	test	eax, eax
	je	$LN15@Netchan_Co

; 1108 : 	{
; 1109 : 		uint	uncompressedSize = LZSS_GetActualSize( buffer ) + 1;

	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_LZSS_GetActualSize
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _uncompressedSize$2[ebp], eax

; 1110 : 		byte	*uncompressedBuffer = Mem_Calloc( net_mempool, uncompressedSize );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_CopyFileFragments@@9@9
	add	eax, 90					; 0000005aH
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	1
	mov	ecx, DWORD PTR _uncompressedSize$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _net_mempool
	push	edx
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _uncompressedBuffer$1[ebp], eax

; 1111 : 
; 1112 : 		nsize = LZSS_Decompress( buffer, uncompressedBuffer );

	mov	eax, DWORD PTR _uncompressedBuffer$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_LZSS_Decompress
	add	esp, 8
	mov	DWORD PTR _nsize$[ebp], eax

; 1113 : 		Mem_Free( buffer );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_CopyFileFragments@@9@9
	add	eax, 93					; 0000005dH
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 1114 : 		buffer = uncompressedBuffer;

	mov	eax, DWORD PTR _uncompressedBuffer$1[ebp]
	mov	DWORD PTR _buffer$[ebp], eax
$LN15@Netchan_Co:

; 1115 : 	}
; 1116 : 
; 1117 : 	// customization files goes int tempbuffer
; 1118 : 	if( filename[0] == '!' )

	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _filename$[ebp+ecx]
	cmp	edx, 33					; 00000021H
	jne	SHORT $LN16@Netchan_Co

; 1119 : 	{
; 1120 : 		if( chan->tempbuffer )

	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax+262664], 0
	je	SHORT $LN18@Netchan_Co

; 1121 : 			Mem_Free( chan->tempbuffer );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_CopyFileFragments@@9@9
	add	eax, 101				; 00000065H
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+262664]
	push	edx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN18@Netchan_Co:

; 1122 : 		chan->tempbuffer = buffer;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax+262664], ecx

; 1123 : 		chan->tempbuffersize = nsize;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _nsize$[ebp]
	mov	DWORD PTR [eax+262668], ecx

; 1124 : 	}

	jmp	SHORT $LN17@Netchan_Co
$LN16@Netchan_Co:

; 1125 : 	else
; 1126 : 	{
; 1127 : 		// g-cont. it's will be stored downloaded files directly into game folder
; 1128 : 		FS_WriteFile( filename, buffer, nsize );

	mov	eax, DWORD PTR _nsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	lea	edx, DWORD PTR _filename$[ebp]
	push	edx
	call	_FS_WriteFile
	add	esp, 12					; 0000000cH

; 1129 : 		Mem_Free( buffer );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_CopyFileFragments@@9@9
	add	eax, 109				; 0000006dH
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN17@Netchan_Co:

; 1130 : 	}
; 1131 : 
; 1132 : 	// clear remnants
; 1133 : 	MSG_Clear( msg );

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_Clear
	add	esp, 4

; 1134 : 
; 1135 : 	chan->incomingbufs[FRAG_FILE_STREAM] = NULL;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax+262388], 0

; 1136 : 	chan->incomingready[FRAG_FILE_STREAM] = false;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+eax+262396], 0

; 1137 : 
; 1138 : 	return true;

	mov	eax, 1
$LN1@Netchan_Co:

; 1139 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_CopyFileFragments ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_CopyNormalFragments
_TEXT	SEGMENT
_buf$1 = -131124					; size = 131104
_uDecompressedLen$2 = -20				; size = 4
_n$ = -16						; size = 4
_p$ = -12						; size = 4
_size$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_chan$ = 8						; size = 4
_msg$ = 12						; size = 4
_length$ = 16						; size = 4
_Netchan_CopyNormalFragments PROC			; COMDAT

; 955  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 131636				; 00020234H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 956  : 	size_t	size = 0;

	mov	DWORD PTR _size$[ebp], 0

; 957  : 	fragbuf_t	*p, *n;
; 958  : 
; 959  : 	if( !chan->incomingready[FRAG_NORMAL_STREAM] )

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [edx+ecx+262396], 0
	jne	SHORT $LN4@Netchan_Co

; 960  : 		return false;

	xor	eax, eax
	jmp	$LN1@Netchan_Co
$LN4@Netchan_Co:

; 961  : 
; 962  : 	if( !chan->incomingbufs[FRAG_NORMAL_STREAM] )

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [edx+ecx+262388], 0
	jne	SHORT $LN5@Netchan_Co

; 963  : 	{
; 964  : 		chan->incomingready[FRAG_NORMAL_STREAM] = false;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+ecx+262396], 0

; 965  : 		return false;

	xor	eax, eax
	jmp	$LN1@Netchan_Co
$LN5@Netchan_Co:

; 966  : 	}
; 967  : 
; 968  : 	p = chan->incomingbufs[FRAG_NORMAL_STREAM];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+ecx+262388]
	mov	DWORD PTR _p$[ebp], eax

; 969  : 
; 970  : 	MSG_Init( msg, "NetMessage", net_message_buffer, sizeof( net_message_buffer ));

	push	-1
	push	131104					; 00020020H
	push	OFFSET _net_message_buffer
	push	OFFSET ??_C@_0L@EJNKCDI@NetMessage@
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_InitExt
	add	esp, 20					; 00000014H
$LN2@Netchan_Co:

; 971  : 
; 972  : 	while( p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@Netchan_Co

; 973  : 	{
; 974  : 		n = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _n$[ebp], ecx

; 975  : 		
; 976  : 		// copy it in
; 977  : 		MSG_WriteBytes( msg, MSG_GetData( &p->frag_message ), MSG_GetNumBytesWritten( &p->frag_message ));

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 8
	push	ecx
	call	_MSG_GetData
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_MSG_WriteBytes
	add	esp, 12					; 0000000cH

; 978  : 		size += MSG_GetNumBytesWritten( &p->frag_message );

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 979  : 
; 980  : 		Mem_Free( p );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_CopyNormalFragments@@9@9
	add	eax, 25					; 00000019H
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH

; 981  : 		p = n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 982  : 	}

	jmp	SHORT $LN2@Netchan_Co
$LN3@Netchan_Co:

; 983  : 
; 984  : 	if( LZSS_IsCompressed( MSG_GetData( msg )))

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetData
	add	esp, 4
	push	eax
	call	_LZSS_IsCompressed
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@Netchan_Co

; 985  : 	{
; 986  : 		uint	uDecompressedLen = LZSS_GetActualSize( MSG_GetData( msg ));

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_MSG_GetData
	add	esp, 4
	push	eax
	call	_LZSS_GetActualSize
	add	esp, 4
	mov	DWORD PTR _uDecompressedLen$2[ebp], eax

; 987  : 		byte	buf[NET_MAX_MESSAGE];
; 988  : 
; 989  : 		if( uDecompressedLen <= sizeof( buf ))

	cmp	DWORD PTR _uDecompressedLen$2[ebp], 131104 ; 00020020H
	ja	SHORT $LN7@Netchan_Co

; 990  : 		{
; 991  : 			size = LZSS_Decompress( MSG_GetData( msg ), buf );

	lea	eax, DWORD PTR _buf$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_GetData
	add	esp, 4
	push	eax
	call	_LZSS_Decompress
	add	esp, 8
	mov	DWORD PTR _size$[ebp], eax

; 992  : 			memcpy( msg->pData, buf, size );

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 993  : 		}

	jmp	SHORT $LN6@Netchan_Co
$LN7@Netchan_Co:

; 994  : 		else
; 995  : 		{
; 996  : 			// g-cont. this should not happens
; 997  : 			Con_Printf( S_ERROR "buffer to small to decompress message\n" );

	push	OFFSET ??_C@_0DC@FPKGPAPB@?$FO1Error?3?$FO7?5buffer?5to?5small?5to?5d@
	call	_Con_Printf
	add	esp, 4

; 998  : 			return false;

	xor	eax, eax
	jmp	SHORT $LN1@Netchan_Co
$LN6@Netchan_Co:

; 999  : 		}
; 1000 : 	}
; 1001 : 	
; 1002 : 	chan->incomingbufs[FRAG_NORMAL_STREAM] = NULL;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+ecx+262388], 0

; 1003 : 
; 1004 : 	// reset flag
; 1005 : 	chan->incomingready[FRAG_NORMAL_STREAM] = false;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+ecx+262396], 0

; 1006 : 
; 1007 : 	// tell about message size
; 1008 : 	if( length ) *length = size;

	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN9@Netchan_Co
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], ecx
$LN9@Netchan_Co:

; 1009 : 
; 1010 : 	return true;

	mov	eax, 1
$LN1@Netchan_Co:

; 1011 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_CopyNormalFragments ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_CreateFileFragmentsFromBuffer
_TEXT	SEGMENT
tv197 = -120						; size = 8
tv193 = -112						; size = 4
tv138 = -112						; size = 4
_pbOut$1 = -44						; size = 4
_uCompressedSize$2 = -40				; size = 4
_buf$ = -36						; size = 4
_p$ = -32						; size = 4
_wait$ = -28						; size = 4
_firstfragment$ = -24					; size = 4
_bufferid$ = -20					; size = 4
_remaining$ = -16					; size = 4
_pos$ = -12						; size = 4
_send$ = -8						; size = 4
_chunksize$ = -4					; size = 4
_chan$ = 8						; size = 4
_filename$ = 12						; size = 4
_pbuf$ = 16						; size = 4
_size$ = 20						; size = 4
_Netchan_CreateFileFragmentsFromBuffer PROC		; COMDAT

; 727  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	ebx
	push	esi
	push	edi

; 728  : 	int		chunksize;
; 729  : 	int		send, pos;
; 730  : 	int		remaining;
; 731  : 	int		bufferid = 1;

	mov	DWORD PTR _bufferid$[ebp], 1

; 732  : 	qboolean		firstfragment = true;

	mov	DWORD PTR _firstfragment$[ebp], 1

; 733  : 	fragbufwaiting_t	*wait, *p;
; 734  : 	fragbuf_t 	*buf;
; 735  : 
; 736  : 	if( !size ) return;

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN6@Netchan_Cr
	jmp	$LN14@Netchan_Cr
$LN6@Netchan_Cr:

; 737  : 
; 738  : 	if( chan->pfnBlockSize != NULL )

	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $LN7@Netchan_Cr

; 739  : 		chunksize = chan->pfnBlockSize( chan->client );

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 4
	mov	DWORD PTR _chunksize$[ebp], eax
	jmp	SHORT $LN8@Netchan_Cr
$LN7@Netchan_Cr:

; 740  : 	else chunksize = FRAGMENT_MAX_SIZE; // fallback

	mov	DWORD PTR _chunksize$[ebp], 64000	; 0000fa00H
$LN8@Netchan_Cr:

; 741  : 
; 742  : 	if( !LZSS_IsCompressed( pbuf ))

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	call	_LZSS_IsCompressed
	add	esp, 4
	test	eax, eax
	jne	$LN11@Netchan_Cr

; 743  : 	{
; 744  : 		uint	uCompressedSize = 0;

	mov	DWORD PTR _uCompressedSize$2[ebp], 0

; 745  : 		byte	*pbOut = LZSS_Compress( pbuf, size, &uCompressedSize );

	lea	eax, DWORD PTR _uCompressedSize$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	_LZSS_Compress
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pbOut$1[ebp], eax

; 746  : 
; 747  : 		if( pbOut && uCompressedSize > 0 && uCompressedSize < size )

	cmp	DWORD PTR _pbOut$1[ebp], 0
	je	$LN10@Netchan_Cr
	cmp	DWORD PTR _uCompressedSize$2[ebp], 0
	jbe	SHORT $LN10@Netchan_Cr
	mov	eax, DWORD PTR _uCompressedSize$2[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN10@Netchan_Cr

; 748  : 		{
; 749  : 			Con_DPrintf( "Compressing filebuffer (%s -> %s)\n", Q_memprint( size ), Q_memprint( uCompressedSize ));

	push	2
	mov	eax, DWORD PTR _uCompressedSize$2[ebp]
	mov	DWORD PTR tv193[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv193[ebp]
	mov	ecx, DWORD PTR tv193[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv197[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv197[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_Q_pretifymem
	add	esp, 8
	push	eax
	push	2
	cvtsi2ss xmm0, DWORD PTR _size$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_Q_pretifymem
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0CD@MNOEMFON@Compressing?5filebuffer?5?$CI?$CFs?5?9?$DO?5?$CF@
	call	_Con_DPrintf
	add	esp, 12					; 0000000cH

; 750  : 			memcpy( pbuf, pbOut, uCompressedSize );

	mov	eax, DWORD PTR _uCompressedSize$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbOut$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 751  : 			size = uCompressedSize;

	mov	eax, DWORD PTR _uCompressedSize$2[ebp]
	mov	DWORD PTR _size$[ebp], eax
$LN10@Netchan_Cr:

; 752  : 		}
; 753  : 		if( pbOut ) free( pbOut );

	cmp	DWORD PTR _pbOut$1[ebp], 0
	je	SHORT $LN11@Netchan_Cr
	mov	eax, DWORD PTR _pbOut$1[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN11@Netchan_Cr:

; 754  : 	}
; 755  : 
; 756  : 	wait = (fragbufwaiting_t *)Mem_Calloc( net_mempool, sizeof( fragbufwaiting_t ));

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_CreateFileFragmentsFromBuffer@@9@9
	add	eax, 29					; 0000001dH
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	1
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _net_mempool
	push	ecx
	call	__Mem_Alloc
	add	esp, 20					; 00000014H
	mov	DWORD PTR _wait$[ebp], eax

; 757  : 	remaining = size;

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _remaining$[ebp], eax

; 758  : 	pos = 0;

	mov	DWORD PTR _pos$[ebp], 0
$LN2@Netchan_Cr:

; 759  : 
; 760  : 	while( remaining > 0 )

	cmp	DWORD PTR _remaining$[ebp], 0
	jle	$LN3@Netchan_Cr

; 761  : 	{
; 762  : 		send = Q_min( remaining, chunksize );

	mov	eax, DWORD PTR _remaining$[ebp]
	cmp	eax, DWORD PTR _chunksize$[ebp]
	jge	SHORT $LN16@Netchan_Cr
	mov	ecx, DWORD PTR _remaining$[ebp]
	mov	DWORD PTR tv138[ebp], ecx
	jmp	SHORT $LN17@Netchan_Cr
$LN16@Netchan_Cr:
	mov	edx, DWORD PTR _chunksize$[ebp]
	mov	DWORD PTR tv138[ebp], edx
$LN17@Netchan_Cr:
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR _send$[ebp], eax

; 763  : 
; 764  : 		buf = Netchan_AllocFragbuf();

	call	_Netchan_AllocFragbuf
	mov	DWORD PTR _buf$[ebp], eax

; 765  : 		buf->bufferid = bufferid++;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _bufferid$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _bufferid$[ebp]
	add	edx, 1
	mov	DWORD PTR _bufferid$[ebp], edx

; 766  : 
; 767  : 		// copy in data
; 768  : 		MSG_Clear( &buf->frag_message );

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_Clear
	add	esp, 4

; 769  : 
; 770  : 		if( firstfragment )

	cmp	DWORD PTR _firstfragment$[ebp], 0
	je	SHORT $LN12@Netchan_Cr

; 771  : 		{
; 772  : 			// write filename
; 773  : 			MSG_WriteString( &buf->frag_message, filename );

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 8
	push	ecx
	call	_MSG_WriteString
	add	esp, 8

; 774  : 
; 775  : 			// send a bit less on first package
; 776  : 			send -= MSG_GetNumBytesWritten( &buf->frag_message );

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 8
	push	eax
	call	_MSG_GetNumBytesWritten
	add	esp, 4
	mov	ecx, DWORD PTR _send$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _send$[ebp], ecx

; 777  : 
; 778  : 			firstfragment = false;

	mov	DWORD PTR _firstfragment$[ebp], 0
$LN12@Netchan_Cr:

; 779  : 		}
; 780  : 
; 781  : 		buf->isbuffer = true;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+65568], 1

; 782  : 		buf->isfile = true;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+65564], 1

; 783  : 		buf->size = send;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _send$[ebp]
	mov	DWORD PTR [eax+65840], ecx

; 784  : 		buf->foffset = pos;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+65836], ecx

; 785  : 	
; 786  : 		MSG_WriteBits( &buf->frag_message, pbuf + pos, send << 3 );

	mov	eax, DWORD PTR _send$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _pbuf$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, 8
	push	edx
	call	_MSG_WriteBits
	add	esp, 12					; 0000000cH

; 787  : 
; 788  : 		remaining -= send;

	mov	eax, DWORD PTR _remaining$[ebp]
	sub	eax, DWORD PTR _send$[ebp]
	mov	DWORD PTR _remaining$[ebp], eax

; 789  : 		pos += send;

	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _send$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 790  : 
; 791  : 		Netchan_AddFragbufToTail( wait, buf );

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wait$[ebp]
	push	ecx
	call	_Netchan_AddFragbufToTail
	add	esp, 8

; 792  : 	}

	jmp	$LN2@Netchan_Cr
$LN3@Netchan_Cr:

; 793  : 
; 794  : 	// now add waiting list item to end of buffer queue
; 795  : 	if( !chan->waitlist[FRAG_FILE_STREAM] )

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+eax+262332], 0
	jne	SHORT $LN13@Netchan_Cr

; 796  : 	{
; 797  : 		chan->waitlist[FRAG_FILE_STREAM] = wait;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR _wait$[ebp]
	mov	DWORD PTR [ecx+eax+262332], edx

; 798  : 	}

	jmp	SHORT $LN14@Netchan_Cr
$LN13@Netchan_Cr:

; 799  : 	else
; 800  : 	{
; 801  : 		p = chan->waitlist[FRAG_FILE_STREAM];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+eax+262332]
	mov	DWORD PTR _p$[ebp], edx
$LN4@Netchan_Cr:

; 802  : 
; 803  : 		while( p->next )

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Netchan_Cr

; 804  : 			p = p->next;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN4@Netchan_Cr
$LN5@Netchan_Cr:

; 805  : 		p->next = wait;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _wait$[ebp]
	mov	DWORD PTR [eax], ecx
$LN14@Netchan_Cr:

; 806  : 	}
; 807  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_CreateFileFragmentsFromBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_Setup
_TEXT	SEGMENT
_sock$ = 8						; size = 4
_chan$ = 12						; size = 4
_adr$ = 16						; size = 20
_qport$ = 36						; size = 4
_client$ = 40						; size = 4
_pfnBlockSize$ = 44					; size = 4
_Netchan_Setup PROC					; COMDAT

; 171  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 172  : 	Netchan_Clear( chan );

	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	call	_Netchan_Clear
	add	esp, 4

; 173  : 
; 174  : 	memset( chan, 0, sizeof( *chan ));

	push	263768					; 00040658H
	push	0
	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 175  : 	
; 176  : 	chan->sock = sock;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	DWORD PTR [eax], ecx

; 177  : 	chan->remote_address = adr;

	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _adr$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _adr$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _adr$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _adr$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _adr$[ebp+16]
	mov	DWORD PTR [eax+16], ecx

; 178  : 	chan->last_received = host.realtime;

	mov	eax, DWORD PTR _chan$[ebp]
	movsd	xmm0, QWORD PTR _host+1440
	movsd	QWORD PTR [eax+32], xmm0

; 179  : 	chan->connect_time = host.realtime;

	mov	eax, DWORD PTR _chan$[ebp]
	movsd	xmm0, QWORD PTR _host+1440
	movsd	QWORD PTR [eax+40], xmm0

; 180  : 	chan->incoming_sequence = 0;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [eax+64], 0

; 181  : 	chan->outgoing_sequence = 1;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [eax+80], 1

; 182  : 	chan->rate = DEFAULT_RATE;

	mov	eax, DWORD PTR _chan$[ebp]
	movsd	xmm0, QWORD PTR __real@40c3878000000000
	movsd	QWORD PTR [eax+48], xmm0

; 183  : 	chan->qport = qport;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _qport$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 184  : 	chan->client = client;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _client$[ebp]
	mov	DWORD PTR [eax+92], ecx

; 185  : 	chan->pfnBlockSize = pfnBlockSize;

	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _pfnBlockSize$[ebp]
	mov	DWORD PTR [eax+96], ecx

; 186  : 
; 187  : 	MSG_Init( &chan->message, "NetData", chan->message_buf, sizeof( chan->message_buf ));

	push	-1
	push	131104					; 00020020H
	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 120				; 00000078H
	push	eax
	push	OFFSET ??_C@_07OOAACIFJ@NetData@
	mov	ecx, DWORD PTR _chan$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	call	_MSG_InitExt
	add	esp, 20					; 00000014H

; 188  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_Setup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_Shutdown
_TEXT	SEGMENT
_Netchan_Shutdown PROC					; COMDAT

; 129  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 130  : 	Mem_FreePool( &net_mempool );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_Shutdown@@9@9
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET _net_mempool
	call	__Mem_FreePool
	add	esp, 12					; 0000000cH

; 131  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_Shutdown ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_chan.c
;	COMDAT _Netchan_Init
_TEXT	SEGMENT
_port$ = -4						; size = 4
_Netchan_Init PROC					; COMDAT

; 111  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 112  : 	int	port;
; 113  : 
; 114  : 	// pick a port value that should be nice and random
; 115  : 	port = COM_RandomLong( 1, 65535 );

	push	65535					; 0000ffffH
	push	1
	call	_COM_RandomLong
	add	esp, 8
	mov	DWORD PTR _port$[ebp], eax

; 116  : 
; 117  : 	net_showpackets = Cvar_Get ("net_showpackets", "0", 0, "show network packets" );

	push	OFFSET ??_C@_0BF@MAEAOHJB@show?5network?5packets@
	push	0
	push	OFFSET ??_C@_01GBGANLPD@0@
	push	OFFSET ??_C@_0BA@BBOLDPIN@net_showpackets@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _net_showpackets, eax

; 118  : 	net_chokeloopback = Cvar_Get( "net_chokeloop", "0", 0, "apply bandwidth choke to loopback packets" );

	push	OFFSET ??_C@_0CK@NHPJDMIG@apply?5bandwidth?5choke?5to?5loopba@
	push	0
	push	OFFSET ??_C@_01GBGANLPD@0@
	push	OFFSET ??_C@_0O@OAMPIGGJ@net_chokeloop@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _net_chokeloopback, eax

; 119  : 	net_showdrop = Cvar_Get( "net_showdrop", "0", 0, "show packets that are dropped" );

	push	OFFSET ??_C@_0BO@GOBOAKPE@show?5packets?5that?5are?5dropped@
	push	0
	push	OFFSET ??_C@_01GBGANLPD@0@
	push	OFFSET ??_C@_0N@NCECIBCF@net_showdrop@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _net_showdrop, eax

; 120  : 	net_speeds = Cvar_Get( "net_speeds", "0", FCVAR_ARCHIVE, "show network packets" );

	push	OFFSET ??_C@_0BF@MAEAOHJB@show?5network?5packets@
	push	1
	push	OFFSET ??_C@_01GBGANLPD@0@
	push	OFFSET ??_C@_0L@EABJDOBI@net_speeds@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _net_speeds, eax

; 121  : 	net_qport = Cvar_Get( "net_qport", va( "%i", port ), FCVAR_READ_ONLY, "current quake netport" );

	push	OFFSET ??_C@_0BG@JNOOJKIF@current?5quake?5netport@
	push	131072					; 00020000H
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	push	OFFSET ??_C@_02IKAHHCAI@?$CFi@
	call	_va
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_09HOOHLIKH@net_qport@
	call	_Cvar_Get
	add	esp, 16					; 00000010H
	mov	DWORD PTR _net_qport, eax

; 122  : 
; 123  : 	net_mempool = Mem_AllocPool( "Network Pool" );

	mov	eax, DWORD PTR ?__LINE__Var@?0??Netchan_Init@@9@9
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_0DF@EHLJEPDH@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	OFFSET ??_C@_0N@GPFIMFHH@Network?5Pool@
	call	__Mem_AllocPool
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _net_mempool, eax

; 124  : 
; 125  : 	MSG_InitMasks();	// initialize bit-masks

	call	_MSG_InitMasks

; 126  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Netchan_Init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_buffer.h
;	COMDAT _MSG_GetData
_TEXT	SEGMENT
_sb$ = 8						; size = 4
_MSG_GetData PROC					; COMDAT

; 109  : _inline byte *MSG_GetData( sizebuf_t *sb ) { return sb->pData; }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _sb$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_GetData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_buffer.h
;	COMDAT _MSG_GetNumBitsLeft
_TEXT	SEGMENT
_sb$ = 8						; size = 4
_MSG_GetNumBitsLeft PROC				; COMDAT

; 107  : _inline int MSG_GetNumBitsLeft( sizebuf_t *sb ) { return sb->nDataBits - sb->iCurBit; }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _sb$[ebp]
	mov	ecx, DWORD PTR _sb$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR [ecx+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_GetNumBitsLeft ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_buffer.h
;	COMDAT _MSG_GetMaxBytes
_TEXT	SEGMENT
_sb$ = 8						; size = 4
_MSG_GetMaxBytes PROC					; COMDAT

; 106  : _inline int MSG_GetMaxBytes( sizebuf_t *sb ) { return sb->nDataBits >> 3; }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _sb$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sar	eax, 3
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_GetMaxBytes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_buffer.h
;	COMDAT _MSG_GetNumBitsWritten
_TEXT	SEGMENT
_sb$ = 8						; size = 4
_MSG_GetNumBitsWritten PROC				; COMDAT

; 104  : _inline int MSG_GetNumBitsWritten( sizebuf_t *sb ) { return sb->iCurBit; }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _sb$[ebp]
	mov	eax, DWORD PTR [eax+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_GetNumBitsWritten ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_buffer.h
;	COMDAT _MSG_GetNumBytesWritten
_TEXT	SEGMENT
_sb$ = 8						; size = 4
_MSG_GetNumBytesWritten PROC				; COMDAT

; 102  : _inline int MSG_GetNumBytesWritten( sizebuf_t *sb ) { return BitByte( sb->iCurBit ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR _sb$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_BitByte
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_MSG_GetNumBytesWritten ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\net_buffer.h
;	COMDAT _BitByte
_TEXT	SEGMENT
_bits$ = 8						; size = 4
_BitByte PROC						; COMDAT

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 35   : 	return PAD_NUMBER( bits, 8 ) >> 3;

	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	shl	eax, 3
	sar	eax, 3

; 36   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_BitByte ENDP
_TEXT	ENDS
END
