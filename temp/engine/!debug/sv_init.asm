; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\sv_init.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_SV_UPDATE_BACKUP
_DATA	SEGMENT
COMM	_svs:BYTE:012260H
COMM	_sv:BYTE:0279b58H
COMM	_svgame:BYTE:04c8cH
_DATA	ENDS
_DATA	SEGMENT
_SV_UPDATE_BACKUP DD 010H
_DATA	ENDS
PUBLIC	_SV_Active
PUBLIC	_SV_GetMaxClients
PUBLIC	_SV_Initialized
PUBLIC	_SV_ShutdownGame
PUBLIC	_SV_ExecLoadLevel
PUBLIC	_SV_ExecLoadGame
PUBLIC	_SV_ExecChangeLevel
PUBLIC	_SV_InitGameProgs
PUBLIC	_SV_FreeGameProgs
PUBLIC	_SV_ModelIndex
PUBLIC	_SV_SoundIndex
PUBLIC	_SV_EventIndex
PUBLIC	_SV_GenericIndex
PUBLIC	_SV_InitGame
PUBLIC	_SV_ActivateServer
PUBLIC	_SV_SpawnServer
PUBLIC	_SV_ModelHandle
PUBLIC	_SV_DeactivateServer
PUBLIC	_SV_FreeOldEntities
PUBLIC	_SV_SendSingleResource
PUBLIC	_SV_CreateGenericResources
PUBLIC	_SV_CreateResourceList
PUBLIC	_SV_CreateBaseline
PUBLIC	_SV_SetupClients
PUBLIC	??_C@_0CD@NEGAKMCF@MAX_RESOURCES?5limit?5exceeded?5?$CI?$CF@ ; `string'
PUBLIC	??_C@_06PBLIODKG@sound?1@			; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs@			; `string'
PUBLIC	??_C@_0CA@DAAKNEHA@MAX_MODELS?5limit?5exceeded?5?$CI?$CFd?$CJ?6@ ; `string'
PUBLIC	??_C@_0CC@CLIJFIMK@?$FO3Warning?3?$FO7?5late?5precache?5of?5?$CF@ ; `string'
PUBLIC	??_C@_0DD@GKHIBJHL@?$FO3Warning?3?$FO7?5?8?$CFs?8?5do?5not?5precac@ ; `string'
PUBLIC	??_C@_0CA@KFOCAHLD@MAX_SOUNDS?5limit?5exceeded?5?$CI?$CFd?$CJ?6@ ; `string'
PUBLIC	??_C@_0CA@JMECJKPG@MAX_EVENTS?5limit?5exceeded?5?$CI?$CFd?$CJ?6@ ; `string'
PUBLIC	??_C@_0CA@ECOFPAIN@MAX_CUSTOM?5limit?5exceeded?5?$CI?$CFd?$CJ?6@ ; `string'
PUBLIC	?__LINE__Var@?0??SV_CreateGenericResources@@9@9	; `SV_CreateGenericResources'::`1'::__LINE__Var
PUBLIC	??_C@_04MMBENCGO@?4res@				; `string'
PUBLIC	??_C@_0BE@PNJECACD@Precaching?5from?5?$CFs?6@	; `string'
PUBLIC	??_C@_0CE@HDDCAJML@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `string'
PUBLIC	??_C@_05LDOEBFOB@?5?5?$CFs?6@			; `string'
PUBLIC	??_C@_0DE@MNDCHNJK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@ ; `string'
PUBLIC	??_C@_01DCLJPIOD@?$CB@				; `string'
PUBLIC	?__LINE__Var@?0??SV_CreateBaseline@@9@9		; `SV_CreateBaseline'::`1'::__LINE__Var
PUBLIC	??_C@_0BB@PLOODOCK@progs?1player?4mdl@		; `string'
PUBLIC	??_C@_0BC@NCILMEI@models?1player?4mdl@		; `string'
PUBLIC	??_C@_0P@KNIHEOJP@ActivateServer@		; `string'
PUBLIC	??_C@_0L@EJFCEOPJ@sv_newunit@			; `string'
PUBLIC	??_C@_0BK@EDIBGDJO@?$CFi?5player?5server?5started?6@ ; `string'
PUBLIC	??_C@_0O@DOPCMNDH@Game?5started?6@		; `string'
PUBLIC	??_C@_0BN@GBKGJGNG@Started?5map?5?$CC?$CFs?$CC?5?$CICRC?5?$CC?$CFi?$CC?$CJ?6@ ; `string'
PUBLIC	??_C@_0BK@KLHMDMNH@level?5loaded?5at?5?$CF?42f?5sec?6@ ; `string'
PUBLIC	??_C@_0EC@CPBHPIGD@?$FO3Warning?3?$FO7?5?$CFi?5static?5entities@ ; `string'
PUBLIC	??_C@_0EA@PIIENKHP@?$FO3Warning?3?$FO7?5?$CFi?5static?5decals?5w@ ; `string'
PUBLIC	??_C@_0BB@FMAAKPDJ@mapchangecfgfile@		; `string'
PUBLIC	??_C@_08NNCMPFKC@exec?5?$CFs?6@			; `string'
PUBLIC	?__LINE__Var@?0??SV_DeactivateServer@@9@9	; `SV_DeactivateServer'::`1'::__LINE__Var
PUBLIC	??_C@_0CA@JLNKENLN@?$FO1Error?3?$FO7?5can?8t?5initialize?5?$CFs?6@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_07IFACIOED@The?5End@			; `string'
PUBLIC	?__LINE__Var@?0??SV_SetupClients@@9@9		; `SV_SetupClients'::`1'::__LINE__Var
PUBLIC	??_C@_0L@ILDAINPG@deathmatch@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0L@PCNFODNF@maxplayers@			; `string'
PUBLIC	??_C@_0CG@KKMFGJNL@?$CFs?5alloced?5by?5server?5packet?5ent@ ; `string'
PUBLIC	??_C@_0BC@CPFBAOFG@Loading?5map?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_08EHKIGBEA@hostname@			; `string'
PUBLIC	??_C@_0BH@HBFMMMFN@Spawn?5Server?3?5?$CFs?5?$FL?$CFs?$FN?6@ ; `string'
PUBLIC	??_C@_0BC@NLLPAPMG@Spawn?5Server?3?5?$CFs?6@	; `string'
PUBLIC	??_C@_06BHELGMGA@Signon@			; `string'
PUBLIC	??_C@_09DNHBHFFN@Multicast@			; `string'
PUBLIC	??_C@_08COCEEGAP@Datagram@			; `string'
PUBLIC	??_C@_0BC@CPFDHEDP@Reliable?5Datagram@		; `string'
PUBLIC	??_C@_0BD@OFPJAAOD@Spectator?5Datagram@		; `string'
PUBLIC	??_C@_05ODMCMJAJ@skill@				; `string'
PUBLIC	??_C@_0P@CCDIMHBI@sv_clienttrace@		; `string'
PUBLIC	??_C@_01HIHLOKLC@1@				; `string'
PUBLIC	??_C@_0O@DOOGBBKD@sv_background@		; `string'
PUBLIC	??_C@_0O@NGAMONDD@cl_background@		; `string'
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_0M@DKNJHPLK@maps?1?$CFs?4bsp@		; `string'
PUBLIC	??_C@_09DGPGKKIF@progs?4dat@			; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_03JLINDLFM@?$CK?$CFi@			; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@c0f869f000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	_memset:PROC
EXTRN	_Sys_DoubleTime:PROC
EXTRN	_Cbuf_AddText:PROC
EXTRN	_Q_strncpy:PROC
EXTRN	_Q_strnicmp:PROC
EXTRN	_Q_snprintf:PROC
EXTRN	_Q_sprintf:PROC
EXTRN	_Q_pretifymem:PROC
EXTRN	_va:PROC
EXTRN	__Mem_Realloc:PROC
EXTRN	__Mem_EmptyPool:PROC
EXTRN	__Mem_Free:PROC
EXTRN	_Cvar_FullSet:PROC
EXTRN	_Cvar_Set:PROC
EXTRN	_Cvar_SetValue:PROC
EXTRN	_Cvar_VariableString:PROC
EXTRN	_NET_Config:PROC
EXTRN	_COM_FileBase:PROC
EXTRN	_COM_ReplaceExtension:PROC
EXTRN	_FS_LoadFile:PROC
EXTRN	_COM_FixSlashes:PROC
EXTRN	_COM_CheckString:PROC
EXTRN	_FS_Open:PROC
EXTRN	_FS_Read:PROC
EXTRN	_FS_Seek:PROC
EXTRN	_FS_FileSize:PROC
EXTRN	_FS_FileExists:PROC
EXTRN	_FS_Close:PROC
EXTRN	_Host_EndGame:PROC
EXTRN	_Host_ShutdownServer:PROC
EXTRN	_Host_Error:PROC
EXTRN	_COM_IsSafeFileToDownload:PROC
EXTRN	_Con_Reportf:PROC
EXTRN	_Con_DPrintf:PROC
EXTRN	_Con_Printf:PROC
EXTRN	_CRC32_MapFile:PROC
EXTRN	_HPAK_FlushHostQueue:PROC
EXTRN	_COM_ParseFile:PROC
EXTRN	_Log_Printf:PROC
EXTRN	_CL_StopPlayback:PROC
EXTRN	_S_StopBackgroundTrack:PROC
EXTRN	_S_StopAllSounds:PROC
EXTRN	_Mod_LoadWorld:PROC
EXTRN	_Mod_ForName:PROC
EXTRN	_Mod_FreeUnused:PROC
EXTRN	_MSG_InitExt:PROC
EXTRN	_MSG_WriteUBitLong:PROC
EXTRN	_MSG_WriteCmdExt:PROC
EXTRN	_Netchan_Clear:PROC
EXTRN	_SV_FinalMessage:PROC
EXTRN	_SV_UpdateMovevars:PROC
EXTRN	_SV_SendResource:PROC
EXTRN	_Master_Add:PROC
EXTRN	_SV_Physics:PROC
EXTRN	_SV_TransferConsistencyInfo:PROC
EXTRN	_SV_LoadProgs:PROC
EXTRN	_SV_UnloadProgs:PROC
EXTRN	_SV_FreeEdicts:PROC
EXTRN	_SV_FreeEdict:PROC
EXTRN	_SV_InitEdict:PROC
EXTRN	_SV_CheckEdict:PROC
EXTRN	_SV_SpawnEntities:PROC
EXTRN	_SV_EdictNum:PROC
EXTRN	_Log_Open:PROC
EXTRN	_Log_PrintServerVars:PROC
EXTRN	_SV_LoadGameState:PROC
EXTRN	_SV_ChangeLevel:PROC
EXTRN	_SV_ClearGameState:PROC
EXTRN	_SV_ClearWorld:PROC
EXTRN	_SV_ClearPhysEnts:PROC
EXTRN	_MSG_WriteDeltaEntity:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_sv_maxclients:DWORD
EXTRN	_host:BYTE
EXTRN	_SI:BYTE
EXTRN	_deathmatch:BYTE
EXTRN	_hostname:BYTE
EXTRN	_skill:BYTE
EXTRN	_coop:BYTE
EXTRN	_public_server:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c0f869f000000000
CONST	SEGMENT
__real@c0f869f000000000 DQ 0c0f869f000000000r	; -99999
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_03JLINDLFM@?$CK?$CFi@
CONST	SEGMENT
??_C@_03JLINDLFM@?$CK?$CFi@ DB '*%i', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09DGPGKKIF@progs?4dat@
CONST	SEGMENT
??_C@_09DGPGKKIF@progs?4dat@ DB 'progs.dat', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DKNJHPLK@maps?1?$CFs?4bsp@
CONST	SEGMENT
??_C@_0M@DKNJHPLK@maps?1?$CFs?4bsp@ DB 'maps/%s.bsp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NGAMONDD@cl_background@
CONST	SEGMENT
??_C@_0O@NGAMONDD@cl_background@ DB 'cl_background', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DOOGBBKD@sv_background@
CONST	SEGMENT
??_C@_0O@DOOGBBKD@sv_background@ DB 'sv_background', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1@
CONST	SEGMENT
??_C@_01HIHLOKLC@1@ DB '1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CCDIMHBI@sv_clienttrace@
CONST	SEGMENT
??_C@_0P@CCDIMHBI@sv_clienttrace@ DB 'sv_clienttrace', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODMCMJAJ@skill@
CONST	SEGMENT
??_C@_05ODMCMJAJ@skill@ DB 'skill', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OFPJAAOD@Spectator?5Datagram@
CONST	SEGMENT
??_C@_0BD@OFPJAAOD@Spectator?5Datagram@ DB 'Spectator Datagram', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CPFDHEDP@Reliable?5Datagram@
CONST	SEGMENT
??_C@_0BC@CPFDHEDP@Reliable?5Datagram@ DB 'Reliable Datagram', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08COCEEGAP@Datagram@
CONST	SEGMENT
??_C@_08COCEEGAP@Datagram@ DB 'Datagram', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09DNHBHFFN@Multicast@
CONST	SEGMENT
??_C@_09DNHBHFFN@Multicast@ DB 'Multicast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BHELGMGA@Signon@
CONST	SEGMENT
??_C@_06BHELGMGA@Signon@ DB 'Signon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NLLPAPMG@Spawn?5Server?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BC@NLLPAPMG@Spawn?5Server?3?5?$CFs?6@ DB 'Spawn Server: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HBFMMMFN@Spawn?5Server?3?5?$CFs?5?$FL?$CFs?$FN?6@
CONST	SEGMENT
??_C@_0BH@HBFMMMFN@Spawn?5Server?3?5?$CFs?5?$FL?$CFs?$FN?6@ DB 'Spawn Ser'
	DB	'ver: %s [%s]', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EHKIGBEA@hostname@
CONST	SEGMENT
??_C@_08EHKIGBEA@hostname@ DB 'hostname', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CPFBAOFG@Loading?5map?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BC@CPFBAOFG@Loading?5map?5?$CC?$CFs?$CC?6@ DB 'Loading map "%s"', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KKMFGJNL@?$CFs?5alloced?5by?5server?5packet?5ent@
CONST	SEGMENT
??_C@_0CG@KKMFGJNL@?$CFs?5alloced?5by?5server?5packet?5ent@ DB '%s alloce'
	DB	'd by server packet entities', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PCNFODNF@maxplayers@
CONST	SEGMENT
??_C@_0L@PCNFODNF@maxplayers@ DB 'maxplayers', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ILDAINPG@deathmatch@
CONST	SEGMENT
??_C@_0L@ILDAINPG@deathmatch@ DB 'deathmatch', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SV_SetupClients@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??SV_SetupClients@@9@9 DD 02b8H		; `SV_SetupClients'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_07IFACIOED@The?5End@
CONST	SEGMENT
??_C@_07IFACIOED@The?5End@ DB 'The End', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JLNKENLN@?$FO1Error?3?$FO7?5can?8t?5initialize?5?$CFs?6@
CONST	SEGMENT
??_C@_0CA@JLNKENLN@?$FO1Error?3?$FO7?5can?8t?5initialize?5?$CFs?6@ DB '^1'
	DB	'Error:^7 can''t initialize %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SV_DeactivateServer@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??SV_DeactivateServer@@9@9 DD 025dH	; `SV_DeactivateServer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08NNCMPFKC@exec?5?$CFs?6@
CONST	SEGMENT
??_C@_08NNCMPFKC@exec?5?$CFs?6@ DB 'exec %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FMAAKPDJ@mapchangecfgfile@
CONST	SEGMENT
??_C@_0BB@FMAAKPDJ@mapchangecfgfile@ DB 'mapchangecfgfile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@PIIENKHP@?$FO3Warning?3?$FO7?5?$CFi?5static?5decals?5w@
CONST	SEGMENT
??_C@_0EA@PIIENKHP@?$FO3Warning?3?$FO7?5?$CFi?5static?5decals?5w@ DB '^3W'
	DB	'arning:^7 %i static decals was rejected due buffer overflow', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@CPBHPIGD@?$FO3Warning?3?$FO7?5?$CFi?5static?5entities@
CONST	SEGMENT
??_C@_0EC@CPBHPIGD@?$FO3Warning?3?$FO7?5?$CFi?5static?5entities@ DB '^3Wa'
	DB	'rning:^7 %i static entities was rejected due buffer overflow', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KLHMDMNH@level?5loaded?5at?5?$CF?42f?5sec?6@
CONST	SEGMENT
??_C@_0BK@KLHMDMNH@level?5loaded?5at?5?$CF?42f?5sec?6@ DB 'level loaded a'
	DB	't %.2f sec', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GBKGJGNG@Started?5map?5?$CC?$CFs?$CC?5?$CICRC?5?$CC?$CFi?$CC?$CJ?6@
CONST	SEGMENT
??_C@_0BN@GBKGJGNG@Started?5map?5?$CC?$CFs?$CC?5?$CICRC?5?$CC?$CFi?$CC?$CJ?6@ DB 'S'
	DB	'tarted map "%s" (CRC "%i")', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DOPCMNDH@Game?5started?6@
CONST	SEGMENT
??_C@_0O@DOPCMNDH@Game?5started?6@ DB 'Game started', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EDIBGDJO@?$CFi?5player?5server?5started?6@
CONST	SEGMENT
??_C@_0BK@EDIBGDJO@?$CFi?5player?5server?5started?6@ DB '%i player server'
	DB	' started', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EJFCEOPJ@sv_newunit@
CONST	SEGMENT
??_C@_0L@EJFCEOPJ@sv_newunit@ DB 'sv_newunit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KNIHEOJP@ActivateServer@
CONST	SEGMENT
??_C@_0P@KNIHEOJP@ActivateServer@ DB 'ActivateServer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NCILMEI@models?1player?4mdl@
CONST	SEGMENT
??_C@_0BC@NCILMEI@models?1player?4mdl@ DB 'models/player.mdl', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PLOODOCK@progs?1player?4mdl@
CONST	SEGMENT
??_C@_0BB@PLOODOCK@progs?1player?4mdl@ DB 'progs/player.mdl', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SV_CreateBaseline@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??SV_CreateBaseline@@9@9 DD 017bH	; `SV_CreateBaseline'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01DCLJPIOD@?$CB@
CONST	SEGMENT
??_C@_01DCLJPIOD@?$CB@ DB '!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MNDCHNJK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
CONST	SEGMENT
??_C@_0DE@MNDCHNJK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@ DB 'D:\DevDrago'
	DB	'n\XashFE\dev\src\engine\server\sv_init.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LDOEBFOB@?5?5?$CFs?6@
CONST	SEGMENT
??_C@_05LDOEBFOB@?5?5?$CFs?6@ DB '  %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HDDCAJML@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
CONST	SEGMENT
??_C@_0CE@HDDCAJML@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ DB '-'
	DB	'---------------------------------', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PNJECACD@Precaching?5from?5?$CFs?6@
CONST	SEGMENT
??_C@_0BE@PNJECACD@Precaching?5from?5?$CFs?6@ DB 'Precaching from %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04MMBENCGO@?4res@
CONST	SEGMENT
??_C@_04MMBENCGO@?4res@ DB '.res', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SV_CreateGenericResources@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??SV_CreateGenericResources@@9@9 DD 0116H ; `SV_CreateGenericResources'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@ECOFPAIN@MAX_CUSTOM?5limit?5exceeded?5?$CI?$CFd?$CJ?6@
CONST	SEGMENT
??_C@_0CA@ECOFPAIN@MAX_CUSTOM?5limit?5exceeded?5?$CI?$CFd?$CJ?6@ DB 'MAX_'
	DB	'CUSTOM limit exceeded (%d)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JMECJKPG@MAX_EVENTS?5limit?5exceeded?5?$CI?$CFd?$CJ?6@
CONST	SEGMENT
??_C@_0CA@JMECJKPG@MAX_EVENTS?5limit?5exceeded?5?$CI?$CFd?$CJ?6@ DB 'MAX_'
	DB	'EVENTS limit exceeded (%d)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KFOCAHLD@MAX_SOUNDS?5limit?5exceeded?5?$CI?$CFd?$CJ?6@
CONST	SEGMENT
??_C@_0CA@KFOCAHLD@MAX_SOUNDS?5limit?5exceeded?5?$CI?$CFd?$CJ?6@ DB 'MAX_'
	DB	'SOUNDS limit exceeded (%d)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GKHIBJHL@?$FO3Warning?3?$FO7?5?8?$CFs?8?5do?5not?5precac@
CONST	SEGMENT
??_C@_0DD@GKHIBJHL@?$FO3Warning?3?$FO7?5?8?$CFs?8?5do?5not?5precac@ DB '^'
	DB	'3Warning:^7 ''%s'' do not precache sentence names!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CLIJFIMK@?$FO3Warning?3?$FO7?5late?5precache?5of?5?$CF@
CONST	SEGMENT
??_C@_0CC@CLIJFIMK@?$FO3Warning?3?$FO7?5late?5precache?5of?5?$CF@ DB '^3W'
	DB	'arning:^7 late precache of %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DAAKNEHA@MAX_MODELS?5limit?5exceeded?5?$CI?$CFd?$CJ?6@
CONST	SEGMENT
??_C@_0CA@DAAKNEHA@MAX_MODELS?5limit?5exceeded?5?$CI?$CFd?$CJ?6@ DB 'MAX_'
	DB	'MODELS limit exceeded (%d)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBLIODKG@sound?1@
CONST	SEGMENT
??_C@_06PBLIODKG@sound?1@ DB 'sound/', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NEGAKMCF@MAX_RESOURCES?5limit?5exceeded?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CD@NEGAKMCF@MAX_RESOURCES?5limit?5exceeded?5?$CI?$CF@ DB 'MAX_RESO'
	DB	'URCES limit exceeded (%d)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0359H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	013bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	014H
	DW	02f6H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0106H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0106H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0162H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	013fH
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_SetupClients
_TEXT	SEGMENT
tv194 = -80						; size = 8
tv79 = -76						; size = 4
tv75 = -76						; size = 4
tv191 = -72						; size = 4
tv156 = -72						; size = 4
tv95 = -72						; size = 4
tv78 = -72						; size = 4
tv74 = -72						; size = 4
_changed_maxclients$ = -4				; size = 4
_SV_SetupClients PROC					; COMDAT

; 696  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 697  : 	qboolean	changed_maxclients = false;

	mov	DWORD PTR _changed_maxclients$[ebp], 0

; 698  : 
; 699  : 	// check if clients count was really changed
; 700  : 	if( svs.maxclients != (int)sv_maxclients->value )

	mov	eax, DWORD PTR _sv_maxclients
	cvttss2si ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR _svs+16, ecx
	je	SHORT $LN2@SV_SetupCl

; 701  : 		changed_maxclients = true;

	mov	DWORD PTR _changed_maxclients$[ebp], 1
$LN2@SV_SetupCl:

; 702  : 
; 703  : 	if( !changed_maxclients ) return; // nothing to change

	cmp	DWORD PTR _changed_maxclients$[ebp], 0
	jne	SHORT $LN3@SV_SetupCl
	jmp	$LN1@SV_SetupCl
$LN3@SV_SetupCl:

; 704  : 
; 705  : 	// if clients count was changed we need to run full shutdown procedure
; 706  : 	if( svs.maxclients ) Host_ShutdownServer();

	cmp	DWORD PTR _svs+16, 0
	je	SHORT $LN4@SV_SetupCl
	call	_Host_ShutdownServer
$LN4@SV_SetupCl:

; 707  : 
; 708  : 	// copy the actual value from cvar
; 709  : 	svs.maxclients = (int)sv_maxclients->value;

	mov	eax, DWORD PTR _sv_maxclients
	cvttss2si ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _svs+16, ecx

; 710  : 
; 711  : 	// dedicated servers are can't be single player and are usually DM
; 712  : 	if( host.type == HOST_DEDICATED )

	cmp	DWORD PTR _host+164, 1
	jne	SHORT $LN5@SV_SetupCl

; 713  : 		svs.maxclients = bound( 4, svs.maxclients, MAX_CLIENTS );

	cmp	DWORD PTR _svs+16, 4
	jl	SHORT $LN13@SV_SetupCl
	cmp	DWORD PTR _svs+16, 32			; 00000020H
	jge	SHORT $LN11@SV_SetupCl
	mov	eax, DWORD PTR _svs+16
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN12@SV_SetupCl
$LN11@SV_SetupCl:
	mov	DWORD PTR tv74[ebp], 32			; 00000020H
$LN12@SV_SetupCl:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN14@SV_SetupCl
$LN13@SV_SetupCl:
	mov	DWORD PTR tv75[ebp], 4
$LN14@SV_SetupCl:
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _svs+16, edx
	jmp	SHORT $LN6@SV_SetupCl
$LN5@SV_SetupCl:

; 714  : 	else svs.maxclients = bound( 1, svs.maxclients, MAX_CLIENTS );

	cmp	DWORD PTR _svs+16, 1
	jl	SHORT $LN17@SV_SetupCl
	cmp	DWORD PTR _svs+16, 32			; 00000020H
	jge	SHORT $LN15@SV_SetupCl
	mov	eax, DWORD PTR _svs+16
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN16@SV_SetupCl
$LN15@SV_SetupCl:
	mov	DWORD PTR tv78[ebp], 32			; 00000020H
$LN16@SV_SetupCl:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv79[ebp], ecx
	jmp	SHORT $LN18@SV_SetupCl
$LN17@SV_SetupCl:
	mov	DWORD PTR tv79[ebp], 1
$LN18@SV_SetupCl:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _svs+16, edx
$LN6@SV_SetupCl:

; 715  : 
; 716  : 	if( svs.maxclients == 1 )

	cmp	DWORD PTR _svs+16, 1
	jne	SHORT $LN7@SV_SetupCl

; 717  : 		Cvar_SetValue( "deathmatch", 0.0f );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0L@ILDAINPG@deathmatch@
	call	_Cvar_SetValue
	add	esp, 8
	jmp	SHORT $LN8@SV_SetupCl
$LN7@SV_SetupCl:

; 718  : 	else Cvar_SetValue( "deathmatch", 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0L@ILDAINPG@deathmatch@
	call	_Cvar_SetValue
	add	esp, 8
$LN8@SV_SetupCl:

; 719  : 
; 720  : 	// make cvars consistant
; 721  : 	if( coop.value ) Cvar_SetValue( "deathmatch", 0.0f );

	movss	xmm0, DWORD PTR _coop+12
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN9@SV_SetupCl
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0L@ILDAINPG@deathmatch@
	call	_Cvar_SetValue
	add	esp, 8
$LN9@SV_SetupCl:

; 722  : 
; 723  : 	// feedback for cvar
; 724  : 	Cvar_FullSet( "maxplayers", va( "%d", svs.maxclients ), FCVAR_LATCH );

	push	2048					; 00000800H
	mov	eax, DWORD PTR _svs+16
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd@
	call	_va
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0L@PCNFODNF@maxplayers@
	call	_Cvar_FullSet
	add	esp, 12					; 0000000cH

; 725  : 	SV_UPDATE_BACKUP = ( svs.maxclients == 1 ) ? SINGLEPLAYER_BACKUP : MULTIPLAYER_BACKUP;

	cmp	DWORD PTR _svs+16, 1
	jne	SHORT $LN19@SV_SetupCl
	mov	DWORD PTR tv95[ebp], 16			; 00000010H
	jmp	SHORT $LN20@SV_SetupCl
$LN19@SV_SetupCl:
	mov	DWORD PTR tv95[ebp], 64			; 00000040H
$LN20@SV_SetupCl:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR _SV_UPDATE_BACKUP, eax

; 726  : 
; 727  : 	svs.clients = Z_Realloc( svs.clients, sizeof( sv_client_t ) * svs.maxclients );

	mov	eax, DWORD PTR ?__LINE__Var@?0??SV_SetupClients@@9@9
	add	eax, 31					; 0000001fH
	push	eax
	push	OFFSET ??_C@_0DE@MNDCHNJK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	1
	imul	ecx, DWORD PTR _svs+16, 289832
	push	ecx
	mov	edx, DWORD PTR _svs+33344
	push	edx
	mov	eax, DWORD PTR _host+236
	push	eax
	call	__Mem_Realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _svs+33344, eax

; 728  : 	svs.num_client_entities = svs.maxclients * SV_UPDATE_BACKUP * NUM_PACKET_ENTITIES;

	mov	eax, DWORD PTR _svs+16
	imul	eax, DWORD PTR _SV_UPDATE_BACKUP
	shl	eax, 8
	mov	DWORD PTR _svs+33348, eax

; 729  : 	svs.packet_entities = Z_Realloc( svs.packet_entities, sizeof( entity_state_t ) * svs.num_client_entities );

	mov	eax, DWORD PTR ?__LINE__Var@?0??SV_SetupClients@@9@9
	add	eax, 33					; 00000021H
	push	eax
	push	OFFSET ??_C@_0DE@MNDCHNJK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	push	1
	imul	ecx, DWORD PTR _svs+33348, 452
	push	ecx
	mov	edx, DWORD PTR _svs+33356
	push	edx
	mov	eax, DWORD PTR _host+236
	push	eax
	call	__Mem_Realloc
	add	esp, 24					; 00000018H
	mov	DWORD PTR _svs+33356, eax

; 730  : 	Con_Reportf( "%s alloced by server packet entities\n", Q_memprint( sizeof( entity_state_t ) * svs.num_client_entities ));

	push	2
	imul	eax, DWORD PTR _svs+33348, 452
	mov	DWORD PTR tv191[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv191[ebp]
	mov	ecx, DWORD PTR tv191[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv194[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv194[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_Q_pretifymem
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0CG@KKMFGJNL@?$CFs?5alloced?5by?5server?5packet?5ent@
	call	_Con_Reportf
	add	esp, 8

; 731  : 
; 732  : 	// init network stuff
; 733  : 	NET_Config(( svs.maxclients > 1 ));

	cmp	DWORD PTR _svs+16, 1
	jle	SHORT $LN21@SV_SetupCl
	mov	DWORD PTR tv156[ebp], 1
	jmp	SHORT $LN22@SV_SetupCl
$LN21@SV_SetupCl:
	mov	DWORD PTR tv156[ebp], 0
$LN22@SV_SetupCl:
	mov	eax, DWORD PTR tv156[ebp]
	push	eax
	call	_NET_Config
	add	esp, 4

; 734  : 	svgame.numEntities = svs.maxclients + 1; // clients + world

	mov	eax, DWORD PTR _svs+16
	add	eax, 1
	mov	DWORD PTR _svgame+7932, eax

; 735  : 	ClearBits( sv_maxclients->flags, FCVAR_CHANGED );

	mov	eax, DWORD PTR _sv_maxclients
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -8193				; ffffdfffH
	mov	edx, DWORD PTR _sv_maxclients
	mov	DWORD PTR [edx+8], ecx
$LN1@SV_SetupCl:

; 736  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_SetupClients ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_CreateBaseline
_TEXT	SEGMENT
_pEdict$1 = -480					; size = 4
_pEdict$2 = -476					; size = 4
_entnum$ = -472						; size = 4
_delta_type$ = -468					; size = 4
_playermodel$ = -464					; size = 4
_base$ = -460						; size = 4
_nullstate$ = -456					; size = 452
__$ArrayPad$ = -4					; size = 4
_SV_CreateBaseline PROC					; COMDAT

; 379  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 544				; 00000220H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 380  : 	entity_state_t	nullstate, *base;
; 381  : 	int		playermodel;
; 382  : 	int		delta_type;
; 383  : 	int		entnum;
; 384  : 
; 385  : 	if( FBitSet( host.features, ENGINE_QUAKE_COMPATIBLE ))

	mov	eax, DWORD PTR _host+34752
	and	eax, 2
	je	SHORT $LN11@SV_CreateB

; 386  : 		playermodel = SV_ModelIndex( DEFAULT_PLAYER_PATH_QUAKE );

	push	OFFSET ??_C@_0BB@PLOODOCK@progs?1player?4mdl@
	call	_SV_ModelIndex
	add	esp, 4
	mov	DWORD PTR _playermodel$[ebp], eax
	jmp	SHORT $LN12@SV_CreateB
$LN11@SV_CreateB:

; 387  : 	else playermodel = SV_ModelIndex( DEFAULT_PLAYER_PATH_HALFLIFE );

	push	OFFSET ??_C@_0BC@NCILMEI@models?1player?4mdl@
	call	_SV_ModelIndex
	add	esp, 4
	mov	DWORD PTR _playermodel$[ebp], eax
$LN12@SV_CreateB:

; 388  : 
; 389  : 	memset( &nullstate, 0, sizeof( nullstate ));

	push	452					; 000001c4H
	push	0
	lea	eax, DWORD PTR _nullstate$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 390  : 
; 391  : 	for( entnum = 0; entnum < svgame.numEntities; entnum++ )

	mov	DWORD PTR _entnum$[ebp], 0
	jmp	SHORT $LN4@SV_CreateB
$LN2@SV_CreateB:
	mov	eax, DWORD PTR _entnum$[ebp]
	add	eax, 1
	mov	DWORD PTR _entnum$[ebp], eax
$LN4@SV_CreateB:
	mov	eax, DWORD PTR _entnum$[ebp]
	cmp	eax, DWORD PTR _svgame+7932
	jge	$LN3@SV_CreateB

; 392  : 	{
; 393  : 		edict_t	*pEdict = EDICT_NUM( entnum );

	mov	eax, DWORD PTR _entnum$[ebp]
	push	eax
	call	_SV_EdictNum
	add	esp, 4
	mov	DWORD PTR _pEdict$2[ebp], eax

; 394  : 
; 395  : 		if( !SV_IsValidEdict( pEdict ))

	mov	eax, DWORD PTR ?__LINE__Var@?0??SV_CreateBaseline@@9@9
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0DE@MNDCHNJK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _pEdict$2[ebp]
	push	ecx
	call	_SV_CheckEdict
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN13@SV_CreateB

; 396  : 			continue;

	jmp	SHORT $LN2@SV_CreateB
$LN13@SV_CreateB:

; 397  : 
; 398  : 		if( entnum != 0 && entnum <= svs.maxclients )

	cmp	DWORD PTR _entnum$[ebp], 0
	je	SHORT $LN14@SV_CreateB
	mov	eax, DWORD PTR _entnum$[ebp]
	cmp	eax, DWORD PTR _svs+16
	jg	SHORT $LN14@SV_CreateB

; 399  : 		{
; 400  : 			delta_type = DELTA_PLAYER;

	mov	DWORD PTR _delta_type$[ebp], 1

; 401  : 		}

	jmp	SHORT $LN15@SV_CreateB
$LN14@SV_CreateB:

; 402  : 		else
; 403  : 		{
; 404  : 			if( !pEdict->v.modelindex )

	mov	eax, DWORD PTR _pEdict$2[ebp]
	cmp	DWORD PTR [eax+308], 0
	jne	SHORT $LN16@SV_CreateB

; 405  : 				continue; // invisible

	jmp	$LN2@SV_CreateB
$LN16@SV_CreateB:

; 406  : 			delta_type = DELTA_ENTITY;

	mov	DWORD PTR _delta_type$[ebp], 0
$LN15@SV_CreateB:

; 407  : 		}
; 408  : 
; 409  : 		// take current state as baseline
; 410  : 		base = &svs.baselines[entnum];

	imul	eax, DWORD PTR _entnum$[ebp], 452
	add	eax, DWORD PTR _svs+33360
	mov	DWORD PTR _base$[ebp], eax

; 411  : 
; 412  : 		base->number = entnum;

	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _entnum$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 413  : 
; 414  : 		// set entity type
; 415  : 		if( FBitSet( pEdict->v.flags, FL_CUSTOMENTITY ))

	mov	eax, DWORD PTR _pEdict$2[ebp]
	mov	ecx, DWORD PTR [eax+656]
	and	ecx, 536870912				; 20000000H
	je	SHORT $LN17@SV_CreateB

; 416  : 			base->entityType = ENTITY_BEAM;

	mov	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR [eax], 2
	jmp	SHORT $LN18@SV_CreateB
$LN17@SV_CreateB:

; 417  : 		else base->entityType = ENTITY_NORMAL;

	mov	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR [eax], 1
$LN18@SV_CreateB:

; 418  : 
; 419  : 		svgame.dllFuncs.pfnCreateBaseline( delta_type, entnum, base, pEdict, playermodel, host.player_mins[0], host.player_maxs[0] );

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, OFFSET _host+34284
	push	ecx
	mov	edx, 12					; 0000000cH
	imul	eax, edx, 0
	add	eax, OFFSET _host+34236
	push	eax
	mov	ecx, DWORD PTR _playermodel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEdict$2[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _entnum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _delta_type$[ebp]
	push	edx
	call	DWORD PTR _svgame+19432
	add	esp, 28					; 0000001cH

; 420  : 		sv.last_valid_baseline = entnum;

	mov	eax, DWORD PTR _entnum$[ebp]
	mov	DWORD PTR _sv+2415312, eax

; 421  : 	}

	jmp	$LN2@SV_CreateB
$LN3@SV_CreateB:

; 422  : 
; 423  : 	// create the instanced baselines
; 424  : 	svgame.dllFuncs.pfnCreateInstancedBaselines();

	call	DWORD PTR _svgame+19460

; 425  : 
; 426  : 	// now put the baseline into the signon message.
; 427  : 	MSG_BeginServerCmd( &sv.signon, svc_spawnbaseline );

	push	0
	push	1
	push	22					; 00000016H
	push	OFFSET _sv+2456340
	call	_MSG_WriteCmdExt
	add	esp, 16					; 00000010H

; 428  : 
; 429  : 	for( entnum = 0; entnum < svgame.numEntities; entnum++ )

	mov	DWORD PTR _entnum$[ebp], 0
	jmp	SHORT $LN7@SV_CreateB
$LN5@SV_CreateB:
	mov	eax, DWORD PTR _entnum$[ebp]
	add	eax, 1
	mov	DWORD PTR _entnum$[ebp], eax
$LN7@SV_CreateB:
	mov	eax, DWORD PTR _entnum$[ebp]
	cmp	eax, DWORD PTR _svgame+7932
	jge	$LN6@SV_CreateB

; 430  : 	{
; 431  : 		edict_t	*pEdict = EDICT_NUM( entnum );

	mov	eax, DWORD PTR _entnum$[ebp]
	push	eax
	call	_SV_EdictNum
	add	esp, 4
	mov	DWORD PTR _pEdict$1[ebp], eax

; 432  : 
; 433  : 		if( !SV_IsValidEdict( pEdict ))

	mov	eax, DWORD PTR ?__LINE__Var@?0??SV_CreateBaseline@@9@9
	add	eax, 54					; 00000036H
	push	eax
	push	OFFSET ??_C@_0DE@MNDCHNJK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _pEdict$1[ebp]
	push	ecx
	call	_SV_CheckEdict
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN19@SV_CreateB

; 434  : 			continue;

	jmp	SHORT $LN5@SV_CreateB
$LN19@SV_CreateB:

; 435  : 
; 436  : 		if( entnum != 0 && entnum <= svs.maxclients )

	cmp	DWORD PTR _entnum$[ebp], 0
	je	SHORT $LN20@SV_CreateB
	mov	eax, DWORD PTR _entnum$[ebp]
	cmp	eax, DWORD PTR _svs+16
	jg	SHORT $LN20@SV_CreateB

; 437  : 		{
; 438  : 			delta_type = DELTA_PLAYER;

	mov	DWORD PTR _delta_type$[ebp], 1

; 439  : 		}

	jmp	SHORT $LN21@SV_CreateB
$LN20@SV_CreateB:

; 440  : 		else
; 441  : 		{
; 442  : 			if( !pEdict->v.modelindex )

	mov	eax, DWORD PTR _pEdict$1[ebp]
	cmp	DWORD PTR [eax+308], 0
	jne	SHORT $LN22@SV_CreateB

; 443  : 				continue; // invisible

	jmp	$LN5@SV_CreateB
$LN22@SV_CreateB:

; 444  : 			delta_type = DELTA_ENTITY;

	mov	DWORD PTR _delta_type$[ebp], 0
$LN21@SV_CreateB:

; 445  : 		}
; 446  : 
; 447  : 		// take current state as baseline
; 448  : 		base = &svs.baselines[entnum];

	imul	eax, DWORD PTR _entnum$[ebp], 452
	add	eax, DWORD PTR _svs+33360
	mov	DWORD PTR _base$[ebp], eax

; 449  : 
; 450  : 		MSG_WriteDeltaEntity( &nullstate, base, &sv.signon, true, delta_type, 1.0f, 0 );

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _delta_type$[ebp]
	push	eax
	push	1
	push	OFFSET _sv+2456340
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	lea	edx, DWORD PTR _nullstate$[ebp]
	push	edx
	call	_MSG_WriteDeltaEntity
	add	esp, 28					; 0000001cH

; 451  : 	}

	jmp	$LN5@SV_CreateB
$LN6@SV_CreateB:

; 452  : 
; 453  : 	MSG_WriteUBitLong( &sv.signon, LAST_EDICT, MAX_ENTITY_BITS ); // end of baselines

	push	13					; 0000000dH
	push	8191					; 00001fffH
	push	OFFSET _sv+2456340
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 454  : 	MSG_WriteUBitLong( &sv.signon, sv.num_instanced, 6 );

	push	6
	mov	eax, DWORD PTR _sv+2415316
	push	eax
	push	OFFSET _sv+2456340
	call	_MSG_WriteUBitLong
	add	esp, 12					; 0000000cH

; 455  : 
; 456  : 	for( entnum = 0; entnum < sv.num_instanced; entnum++ )

	mov	DWORD PTR _entnum$[ebp], 0
	jmp	SHORT $LN10@SV_CreateB
$LN8@SV_CreateB:
	mov	eax, DWORD PTR _entnum$[ebp]
	add	eax, 1
	mov	DWORD PTR _entnum$[ebp], eax
$LN10@SV_CreateB:
	mov	eax, DWORD PTR _entnum$[ebp]
	cmp	eax, DWORD PTR _sv+2415316
	jge	SHORT $LN9@SV_CreateB

; 457  : 	{
; 458  : 		base = &sv.instanced[entnum].baseline;

	imul	eax, DWORD PTR _entnum$[ebp], 456
	add	eax, OFFSET _sv+2386132
	mov	DWORD PTR _base$[ebp], eax

; 459  : 		MSG_WriteDeltaEntity( &nullstate, base, &sv.signon, true, DELTA_ENTITY, 1.0f, 0 );

	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	1
	push	OFFSET _sv+2456340
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nullstate$[ebp]
	push	ecx
	call	_MSG_WriteDeltaEntity
	add	esp, 28					; 0000001cH

; 460  : 	}

	jmp	SHORT $LN8@SV_CreateB
$LN9@SV_CreateB:

; 461  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_CreateBaseline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_CreateResourceList
_TEXT	SEGMENT
tv154 = -84						; size = 4
_s$ = -16						; size = 4
_nSize$ = -12						; size = 4
_i$ = -8						; size = 4
_ffirstsent$ = -4					; size = 4
_SV_CreateResourceList PROC				; COMDAT

; 308  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 309  : 	qboolean	ffirstsent = false;

	mov	DWORD PTR _ffirstsent$[ebp], 0

; 310  : 	int	i, nSize;
; 311  : 	char	*s;
; 312  : 
; 313  : 	sv.num_resources = 0;

	mov	DWORD PTR _sv+2386124, 0

; 314  : 
; 315  : 	for( i = 1; i < MAX_CUSTOM; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@SV_CreateR
$LN2@SV_CreateR:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SV_CreateR:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jge	SHORT $LN3@SV_CreateR

; 316  : 	{
; 317  : 		s = sv.files_precache[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, OFFSET _sv+590020
	mov	DWORD PTR _s$[ebp], eax

; 318  : 		if( !COM_CheckString( s )) break; // end of list

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN17@SV_CreateR
	jmp	SHORT $LN3@SV_CreateR
$LN17@SV_CreateR:

; 319  : 		nSize = FS_FileSize( s, false );

	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_FS_FileSize
	add	esp, 8
	mov	DWORD PTR _nSize$[ebp], eax

; 320  : 		SV_AddResource( t_generic, s, nSize, RES_FATALIFMISSING, i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _nSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	push	4
	call	_SV_AddResource
	add	esp, 20					; 00000014H

; 321  : 	}

	jmp	SHORT $LN2@SV_CreateR
$LN3@SV_CreateR:

; 322  : 
; 323  : 	for( i = 1; i < MAX_SOUNDS; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN7@SV_CreateR
$LN5@SV_CreateR:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@SV_CreateR:
	cmp	DWORD PTR _i$[ebp], 8192		; 00002000H
	jge	$LN6@SV_CreateR

; 324  : 	{
; 325  : 		s = sv.sound_precache[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, OFFSET _sv+65732
	mov	DWORD PTR _s$[ebp], eax

; 326  : 		if( !COM_CheckString( s ))

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN18@SV_CreateR

; 327  : 			break; // end of list

	jmp	SHORT $LN6@SV_CreateR
$LN18@SV_CreateR:

; 328  : 
; 329  : 		if( s[0] == '!' )

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 33					; 00000021H
	jne	SHORT $LN19@SV_CreateR

; 330  : 		{
; 331  : 			if( !ffirstsent )

	cmp	DWORD PTR _ffirstsent$[ebp], 0
	jne	SHORT $LN21@SV_CreateR

; 332  : 			{
; 333  : 				SV_AddResource( t_sound, "!", 0, RES_FATALIFMISSING, i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	1
	push	0
	push	OFFSET ??_C@_01DCLJPIOD@?$CB@
	push	0
	call	_SV_AddResource
	add	esp, 20					; 00000014H

; 334  : 				ffirstsent = true;

	mov	DWORD PTR _ffirstsent$[ebp], 1
$LN21@SV_CreateR:

; 335  : 			}
; 336  : 		}

	jmp	SHORT $LN20@SV_CreateR
$LN19@SV_CreateR:

; 337  : 		else
; 338  : 		{
; 339  : 			nSize = FS_FileSize( va( "%s%s", DEFAULT_SOUNDPATH, s ), false );

	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	push	OFFSET ??_C@_06PBLIODKG@sound?1@
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs@
	call	_va
	add	esp, 12					; 0000000cH
	push	eax
	call	_FS_FileSize
	add	esp, 8
	mov	DWORD PTR _nSize$[ebp], eax

; 340  : 			SV_AddResource( t_sound, s, nSize, 0, i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _nSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	push	0
	call	_SV_AddResource
	add	esp, 20					; 00000014H
$LN20@SV_CreateR:

; 341  : 		}
; 342  : 	}

	jmp	$LN5@SV_CreateR
$LN6@SV_CreateR:

; 343  : 
; 344  : 	for( i = 1; i < MAX_MODELS; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN10@SV_CreateR
$LN8@SV_CreateR:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@SV_CreateR:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jge	SHORT $LN9@SV_CreateR

; 345  : 	{
; 346  : 		s = sv.model_precache[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, OFFSET _sv+196
	mov	DWORD PTR _s$[ebp], eax

; 347  : 		if( !COM_CheckString( s )) break; // end of list

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN22@SV_CreateR
	jmp	SHORT $LN9@SV_CreateR
$LN22@SV_CreateR:

; 348  : 		nSize = ( s[0] != '*' ) ? FS_FileSize( s, false ) : 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 42					; 0000002aH
	je	SHORT $LN25@SV_CreateR
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_FS_FileSize
	add	esp, 8
	mov	DWORD PTR tv154[ebp], eax
	jmp	SHORT $LN26@SV_CreateR
$LN25@SV_CreateR:
	mov	DWORD PTR tv154[ebp], 0
$LN26@SV_CreateR:
	mov	edx, DWORD PTR tv154[ebp]
	mov	DWORD PTR _nSize$[ebp], edx

; 349  : 		SV_AddResource( t_model, s, nSize, sv.model_precache_flags[i], i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _sv[ecx+721092]
	push	edx
	mov	eax, DWORD PTR _nSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	2
	call	_SV_AddResource
	add	esp, 20					; 00000014H

; 350  : 	}

	jmp	$LN8@SV_CreateR
$LN9@SV_CreateR:

; 351  : 
; 352  : 	// just send names
; 353  : 	for( i = 0; i < MAX_DECALS && host.draw_decals[i][0]; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@SV_CreateR
$LN11@SV_CreateR:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@SV_CreateR:
	cmp	DWORD PTR _i$[ebp], 512			; 00000200H
	jge	SHORT $LN12@SV_CreateR
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR _host[eax+edx+1468]
	test	eax, eax
	je	SHORT $LN12@SV_CreateR

; 354  : 	{
; 355  : 		SV_AddResource( t_decal, host.draw_decals[i], 0, 0, i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	add	ecx, OFFSET _host+1468
	push	ecx
	push	3
	call	_SV_AddResource
	add	esp, 20					; 00000014H

; 356  : 	}

	jmp	SHORT $LN11@SV_CreateR
$LN12@SV_CreateR:

; 357  : 
; 358  : 	for( i = 1; i < MAX_EVENTS; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN16@SV_CreateR
$LN14@SV_CreateR:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@SV_CreateR:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jge	SHORT $LN1@SV_CreateR

; 359  : 	{
; 360  : 		s = sv.event_precache[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, OFFSET _sv+655556
	mov	DWORD PTR _s$[ebp], eax

; 361  : 		if( !COM_CheckString( s )) break; // end of list

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN23@SV_CreateR
	jmp	SHORT $LN1@SV_CreateR
$LN23@SV_CreateR:

; 362  : 		nSize = FS_FileSize( s, false );

	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_FS_FileSize
	add	esp, 8
	mov	DWORD PTR _nSize$[ebp], eax

; 363  : 		SV_AddResource( t_eventscript, s, nSize, RES_FATALIFMISSING, i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _nSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	push	5
	call	_SV_AddResource
	add	esp, 20					; 00000014H

; 364  : 	}

	jmp	SHORT $LN14@SV_CreateR
$LN1@SV_CreateR:

; 365  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_CreateResourceList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_CreateGenericResources
_TEXT	SEGMENT
_pfile$ = -524						; size = 4
_afile$ = -520						; size = 4
_token$ = -516						; size = 256
_filename$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_SV_CreateGenericResources PROC				; COMDAT

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 652				; 0000028cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 279  : 	string	filename, token;
; 280  : 	char	*afile, *pfile;
; 281  : 
; 282  : 	Q_strncpy( filename, sv.model_precache[1], sizeof( filename ));

	push	256					; 00000100H
	mov	eax, 64					; 00000040H
	shl	eax, 0
	add	eax, OFFSET _sv+196
	push	eax
	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 283  : 	COM_ReplaceExtension( filename, ".res" );

	push	OFFSET ??_C@_04MMBENCGO@?4res@
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_COM_ReplaceExtension
	add	esp, 8

; 284  : 	COM_FixSlashes( filename );

	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_COM_FixSlashes
	add	esp, 4

; 285  : 
; 286  : 	afile = FS_LoadFile( filename, NULL, false );

	push	0
	push	0
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_FS_LoadFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _afile$[ebp], eax

; 287  : 	if( !afile ) return;

	cmp	DWORD PTR _afile$[ebp], 0
	jne	SHORT $LN4@SV_CreateG
	jmp	$LN1@SV_CreateG
$LN4@SV_CreateG:

; 288  : 
; 289  : 	pfile = afile;

	mov	eax, DWORD PTR _afile$[ebp]
	mov	DWORD PTR _pfile$[ebp], eax

; 290  : 
; 291  : 	Con_DPrintf( "Precaching from %s\n", filename );

	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0BE@PNJECACD@Precaching?5from?5?$CFs?6@
	call	_Con_DPrintf
	add	esp, 8

; 292  : 	Con_DPrintf( "----------------------------------\n" );

	push	OFFSET ??_C@_0CE@HDDCAJML@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
	call	_Con_DPrintf
	add	esp, 4
$LN2@SV_CreateG:

; 293  : 
; 294  : 	while(( pfile = COM_ParseFile( pfile, token )) != NULL )

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfile$[ebp]
	push	ecx
	call	_COM_ParseFile
	add	esp, 8
	mov	DWORD PTR _pfile$[ebp], eax
	cmp	DWORD PTR _pfile$[ebp], 0
	je	SHORT $LN3@SV_CreateG

; 295  : 	{
; 296  : 		if( !COM_IsSafeFileToDownload( token ))

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_COM_IsSafeFileToDownload
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@SV_CreateG

; 297  : 			continue;

	jmp	SHORT $LN2@SV_CreateG
$LN5@SV_CreateG:

; 298  : 
; 299  : 		Con_DPrintf( "  %s\n", token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET ??_C@_05LDOEBFOB@?5?5?$CFs?6@
	call	_Con_DPrintf
	add	esp, 8

; 300  : 		SV_GenericIndex( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_SV_GenericIndex
	add	esp, 4

; 301  : 	}

	jmp	SHORT $LN2@SV_CreateG
$LN3@SV_CreateG:

; 302  : 
; 303  : 	Con_DPrintf( "----------------------------------\n" );

	push	OFFSET ??_C@_0CE@HDDCAJML@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
	call	_Con_DPrintf
	add	esp, 4

; 304  : 	Mem_Free( afile );

	mov	eax, DWORD PTR ?__LINE__Var@?0??SV_CreateGenericResources@@9@9
	add	eax, 26					; 0000001aH
	push	eax
	push	OFFSET ??_C@_0DE@MNDCHNJK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _afile$[ebp]
	push	ecx
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN1@SV_CreateG:

; 305  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_CreateGenericResources ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_SendSingleResource
_TEXT	SEGMENT
tv77 = -76						; size = 4
tv69 = -76						; size = 4
_nSize$ = -8						; size = 4
_pResource$ = -4					; size = 4
_name$ = 8						; size = 4
_type$ = 12						; size = 4
_index$ = 16						; size = 4
_flags$ = 20						; size = 1
_SV_SendSingleResource PROC				; COMDAT

; 57   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 58   : 	resource_t	*pResource = &sv.resources[sv.num_resources];

	imul	eax, DWORD PTR _sv+2386124, 136
	add	eax, OFFSET _sv+854216
	mov	DWORD PTR _pResource$[ebp], eax

; 59   : 	int		nSize = 0;

	mov	DWORD PTR _nSize$[ebp], 0

; 60   : 
; 61   : 	if( !COM_CheckString( name ))

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN4@SV_SendSin

; 62   : 		return;

	jmp	$LN1@SV_SendSin
$LN4@SV_SendSin:

; 63   : 
; 64   : 	switch( type )

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	cmp	DWORD PTR tv69[ebp], 0
	je	SHORT $LN6@SV_SendSin
	cmp	DWORD PTR tv69[ebp], 2
	je	SHORT $LN5@SV_SendSin
	jmp	SHORT $LN7@SV_SendSin
$LN5@SV_SendSin:

; 65   : 	{
; 66   : 	case t_model:
; 67   : 		nSize = ( name[0] != '*' ) ? FS_FileSize( name, false ) : 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _name$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 42					; 0000002aH
	je	SHORT $LN9@SV_SendSin
	push	0
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_FS_FileSize
	add	esp, 8
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN10@SV_SendSin
$LN9@SV_SendSin:
	mov	DWORD PTR tv77[ebp], 0
$LN10@SV_SendSin:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _nSize$[ebp], edx

; 68   : 		break;

	jmp	SHORT $LN2@SV_SendSin
$LN6@SV_SendSin:

; 69   : 	case t_sound:
; 70   : 		nSize = FS_FileSize( va( "%s%s", DEFAULT_SOUNDPATH, name ), false );

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_06PBLIODKG@sound?1@
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs@
	call	_va
	add	esp, 12					; 0000000cH
	push	eax
	call	_FS_FileSize
	add	esp, 8
	mov	DWORD PTR _nSize$[ebp], eax

; 71   : 		break;

	jmp	SHORT $LN2@SV_SendSin
$LN7@SV_SendSin:

; 72   : 	default:
; 73   : 		nSize = FS_FileSize( name, false );

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_FS_FileSize
	add	esp, 8
	mov	DWORD PTR _nSize$[ebp], eax
$LN2@SV_SendSin:

; 74   : 		break;
; 75   : 	}
; 76   : 
; 77   : 	SV_AddResource( type, name, nSize, flags, index );

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	call	_SV_AddResource
	add	esp, 20					; 00000014H

; 78   : 	MSG_BeginServerCmd( &sv.reliable_datagram, svc_resource );

	push	0
	push	1
	push	16					; 00000010H
	push	OFFSET _sv+2431724
	call	_MSG_WriteCmdExt
	add	esp, 16					; 00000010H

; 79   : 	SV_SendResource( pResource, &sv.reliable_datagram );

	push	OFFSET _sv+2431724
	mov	eax, DWORD PTR _pResource$[ebp]
	push	eax
	call	_SV_SendResource
	add	esp, 8
$LN1@SV_SendSin:

; 80   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_SendSingleResource ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_AddResource
_TEXT	SEGMENT
_pResource$ = -4					; size = 4
_type$ = 8						; size = 4
_name$ = 12						; size = 4
_size$ = 16						; size = 4
_flags$ = 20						; size = 1
_index$ = 24						; size = 4
_SV_AddResource PROC					; COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 36   : 	resource_t	*pResource = &sv.resources[sv.num_resources];

	imul	eax, DWORD PTR _sv+2386124, 136
	add	eax, OFFSET _sv+854216
	mov	DWORD PTR _pResource$[ebp], eax

; 37   : 
; 38   : 	if( sv.num_resources >= MAX_RESOURCES )

	cmp	DWORD PTR _sv+2386124, 11264		; 00002c00H
	jl	SHORT $LN2@SV_AddReso

; 39   : 		Host_Error( "MAX_RESOURCES limit exceeded (%d)\n", MAX_RESOURCES );

	push	11264					; 00002c00H
	push	OFFSET ??_C@_0CD@NEGAKMCF@MAX_RESOURCES?5limit?5exceeded?5?$CI?$CF@
	call	_Host_Error
	add	esp, 8
$LN2@SV_AddReso:

; 40   : 	sv.num_resources++;

	mov	eax, DWORD PTR _sv+2386124
	add	eax, 1
	mov	DWORD PTR _sv+2386124, eax

; 41   : 
; 42   : 	Q_strncpy( pResource->szFileName, name, sizeof( pResource->szFileName ));

	push	64					; 00000040H
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pResource$[ebp]
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 43   : 	pResource->nDownloadSize = size;

	mov	eax, DWORD PTR _pResource$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+72], ecx

; 44   : 	pResource->ucFlags = flags;

	mov	eax, DWORD PTR _pResource$[ebp]
	mov	cl, BYTE PTR _flags$[ebp]
	mov	BYTE PTR [eax+76], cl

; 45   : 	pResource->nIndex = index;

	mov	eax, DWORD PTR _pResource$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+68], ecx

; 46   : 	pResource->type = type;

	mov	eax, DWORD PTR _pResource$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 47   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_AddResource ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_FreeOldEntities
_TEXT	SEGMENT
_i$ = -8						; size = 4
_ent$ = -4						; size = 4
_SV_FreeOldEntities PROC				; COMDAT

; 471  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 472  : 	edict_t	*ent;
; 473  : 	int	i;
; 474  : 
; 475  : 	// at end of frame kill all entities which supposed to it 
; 476  : 	for( i = svs.maxclients + 1; i < svgame.numEntities; i++ )

	mov	eax, DWORD PTR _svs+16
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN4@SV_FreeOld
$LN2@SV_FreeOld:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SV_FreeOld:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _svgame+7932
	jge	SHORT $LN3@SV_FreeOld

; 477  : 	{
; 478  : 		ent = EDICT_NUM( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_SV_EdictNum
	add	esp, 4
	mov	DWORD PTR _ent$[ebp], eax

; 479  : 
; 480  : 		if( !ent->free && FBitSet( ent->v.flags, FL_KILLME ))

	mov	eax, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@SV_FreeOld
	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	and	ecx, 1073741824				; 40000000H
	je	SHORT $LN8@SV_FreeOld

; 481  : 			SV_FreeEdict( ent );

	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	call	_SV_FreeEdict
	add	esp, 4
$LN8@SV_FreeOld:

; 482  : 	}

	jmp	SHORT $LN2@SV_FreeOld
$LN3@SV_FreeOld:

; 483  : 
; 484  : 	// decrement svgame.numEntities if the highest number entities died
; 485  : 	for( ; EDICT_NUM( svgame.numEntities - 1 )->free; svgame.numEntities-- );

	jmp	SHORT $LN7@SV_FreeOld
$LN5@SV_FreeOld:
	mov	eax, DWORD PTR _svgame+7932
	sub	eax, 1
	mov	DWORD PTR _svgame+7932, eax
$LN7@SV_FreeOld:
	mov	eax, DWORD PTR _svgame+7932
	sub	eax, 1
	push	eax
	call	_SV_EdictNum
	add	esp, 4
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@SV_FreeOld
	jmp	SHORT $LN5@SV_FreeOld
$LN1@SV_FreeOld:

; 486  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_FreeOldEntities ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_DeactivateServer
_TEXT	SEGMENT
_i$ = -4						; size = 4
_SV_DeactivateServer PROC				; COMDAT

; 605  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 606  : 	int	i;
; 607  : 
; 608  : 	if( !svs.initialized || sv.state == ss_dead )

	cmp	DWORD PTR _svs, 0
	je	SHORT $LN6@SV_Deactiv
	cmp	DWORD PTR _sv, 0
	jne	SHORT $LN5@SV_Deactiv
$LN6@SV_Deactiv:

; 609  : 		return;

	jmp	$LN1@SV_Deactiv
$LN5@SV_Deactiv:

; 610  : 
; 611  : 	svgame.globals->time = sv.time;

	cvtsd2ss xmm0, QWORD PTR _sv+16
	mov	eax, DWORD PTR _svgame+19268
	movss	DWORD PTR [eax], xmm0

; 612  : 	svgame.dllFuncs.pfnServerDeactivate();

	call	DWORD PTR _svgame+19360

; 613  : 	sv.state = ss_dead;

	mov	DWORD PTR _sv, 0

; 614  : 
; 615  : 	SV_FreeEdicts ();

	call	_SV_FreeEdicts

; 616  : 
; 617  : 	SV_ClearPhysEnts ();

	call	_SV_ClearPhysEnts

; 618  : 
; 619  : 	Mem_EmptyPool( svgame.stringspool );

	mov	eax, DWORD PTR ?__LINE__Var@?0??SV_DeactivateServer@@9@9
	add	eax, 14					; 0000000eH
	push	eax
	push	OFFSET ??_C@_0DE@MNDCHNJK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	mov	ecx, DWORD PTR _svgame+19592
	push	ecx
	call	__Mem_EmptyPool
	add	esp, 12					; 0000000cH

; 620  : 
; 621  : 	for( i = 0; i < svs.maxclients; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SV_Deactiv
$LN2@SV_Deactiv:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SV_Deactiv:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _svs+16
	jge	SHORT $LN3@SV_Deactiv

; 622  : 	{
; 623  : 		// release client frames
; 624  : 		if( svs.clients[i].frames )

	imul	eax, DWORD PTR _i$[ebp], 289832
	mov	ecx, DWORD PTR _svs+33344
	cmp	DWORD PTR [ecx+eax+281884], 0
	je	SHORT $LN7@SV_Deactiv

; 625  : 			Mem_Free( svs.clients[i].frames );

	mov	eax, DWORD PTR ?__LINE__Var@?0??SV_DeactivateServer@@9@9
	add	eax, 20					; 00000014H
	push	eax
	push	OFFSET ??_C@_0DE@MNDCHNJK@D?3?2DevDragon?2XashFE?2dev?2src?2eng@
	imul	ecx, DWORD PTR _i$[ebp], 289832
	mov	edx, DWORD PTR _svs+33344
	mov	eax, DWORD PTR [edx+ecx+281884]
	push	eax
	call	__Mem_Free
	add	esp, 12					; 0000000cH
$LN7@SV_Deactiv:

; 626  : 		svs.clients[i].frames = NULL;

	imul	eax, DWORD PTR _i$[ebp], 289832
	mov	ecx, DWORD PTR _svs+33344
	mov	DWORD PTR [ecx+eax+281884], 0

; 627  : 	}

	jmp	SHORT $LN2@SV_Deactiv
$LN3@SV_Deactiv:

; 628  : 
; 629  : 	svgame.globals->maxEntities = GI->max_edicts;

	mov	eax, DWORD PTR _svgame+19268
	mov	ecx, DWORD PTR _SI+768
	mov	edx, DWORD PTR [ecx+1656]
	mov	DWORD PTR [eax+152], edx

; 630  : 	svgame.globals->maxClients = svs.maxclients;

	mov	eax, DWORD PTR _svgame+19268
	mov	ecx, DWORD PTR _svs+16
	mov	DWORD PTR [eax+148], ecx

; 631  : 	svgame.numEntities = svs.maxclients + 1; // clients + world

	mov	eax, DWORD PTR _svs+16
	add	eax, 1
	mov	DWORD PTR _svgame+7932, eax

; 632  : 	svgame.globals->startspot = 0;

	mov	eax, DWORD PTR _svgame+19268
	mov	DWORD PTR [eax+16], 0

; 633  : 	svgame.globals->mapname = 0;

	mov	eax, DWORD PTR _svgame+19268
	mov	DWORD PTR [eax+12], 0
$LN1@SV_Deactiv:

; 634  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_DeactivateServer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_ModelHandle
_TEXT	SEGMENT
_modelindex$ = 8					; size = 4
_SV_ModelHandle PROC					; COMDAT

; 271  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 272  : 	if( modelindex < 0 || modelindex >= MAX_MODELS )

	cmp	DWORD PTR _modelindex$[ebp], 0
	jl	SHORT $LN3@SV_ModelHa
	cmp	DWORD PTR _modelindex$[ebp], 1024	; 00000400H
	jl	SHORT $LN2@SV_ModelHa
$LN3@SV_ModelHa:

; 273  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@SV_ModelHa
$LN2@SV_ModelHa:

; 274  : 	return sv.models[modelindex];

	mov	eax, DWORD PTR _modelindex$[ebp]
	mov	eax, DWORD PTR _sv[eax*4+722116]
$LN1@SV_ModelHa:

; 275  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_ModelHandle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_SpawnServer
_TEXT	SEGMENT
tv200 = -88						; size = 4
tv288 = -84						; size = 4
tv249 = -84						; size = 4
tv199 = -84						; size = 4
tv196 = -84						; size = 4
tv76 = -84						; size = 4
_f$1 = -16						; size = 4
_ent$ = -12						; size = 4
_current_skill$ = -8					; size = 4
_i$ = -4						; size = 4
_mapname$ = 8						; size = 4
_startspot$ = 12					; size = 4
_background$ = 16					; size = 4
_SV_SpawnServer PROC					; COMDAT

; 747  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi

; 748  : 	int	i, current_skill;
; 749  : 	edict_t	*ent;
; 750  : 
; 751  : 	SV_SetupClients();

	call	_SV_SetupClients

; 752  : 
; 753  : 	if( !SV_InitGame( ))

	call	_SV_InitGame
	test	eax, eax
	jne	SHORT $LN8@SV_SpawnSe

; 754  : 		return false;

	xor	eax, eax
	jmp	$LN1@SV_SpawnSe
$LN8@SV_SpawnSe:

; 755  : 
; 756  : 	Log_Open();

	call	_Log_Open

; 757  : 	Log_Printf( "Loading map \"%s\"\n", mapname );

	mov	eax, DWORD PTR _mapname$[ebp]
	push	eax
	push	OFFSET ??_C@_0BC@CPFBAOFG@Loading?5map?5?$CC?$CFs?$CC?6@
	call	_Log_Printf
	add	esp, 8

; 758  : 	Log_PrintServerVars();

	call	_Log_PrintServerVars

; 759  : 
; 760  : 	svs.timestart = Sys_DoubleTime();

	call	_Sys_DoubleTime
	fstp	QWORD PTR _svs+8

; 761  : 	svs.spawncount++; // any partially connected client will be restarted

	mov	eax, DWORD PTR _svs+33340
	add	eax, 1
	mov	DWORD PTR _svs+33340, eax

; 762  : 
; 763  : 	// let's not have any servers with no name
; 764  : 	if( !COM_CheckString( hostname.string ))

	mov	eax, DWORD PTR _hostname+4
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN9@SV_SpawnSe

; 765  : 		Cvar_Set( "hostname", svgame.dllFuncs.pfnGetGameDescription ? svgame.dllFuncs.pfnGetGameDescription() : FS_Title( ));

	cmp	DWORD PTR _svgame+19384, 0
	je	SHORT $LN22@SV_SpawnSe
	call	DWORD PTR _svgame+19384
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN23@SV_SpawnSe
$LN22@SV_SpawnSe:
	mov	eax, DWORD PTR _SI+768
	add	eax, 384				; 00000180H
	mov	DWORD PTR tv76[ebp], eax
$LN23@SV_SpawnSe:
	mov	ecx, DWORD PTR tv76[ebp]
	push	ecx
	push	OFFSET ??_C@_08EHKIGBEA@hostname@
	call	_Cvar_Set
	add	esp, 8
$LN9@SV_SpawnSe:

; 766  : 
; 767  : 	if( startspot )

	cmp	DWORD PTR _startspot$[ebp], 0
	je	SHORT $LN10@SV_SpawnSe

; 768  : 	{
; 769  : 		Con_Printf( "Spawn Server: %s [%s]\n", mapname, startspot );

	mov	eax, DWORD PTR _startspot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mapname$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BH@HBFMMMFN@Spawn?5Server?3?5?$CFs?5?$FL?$CFs?$FN?6@
	call	_Con_Printf
	add	esp, 12					; 0000000cH

; 770  : 	}

	jmp	SHORT $LN11@SV_SpawnSe
$LN10@SV_SpawnSe:

; 771  : 	else
; 772  : 	{
; 773  : 		Con_DPrintf( "Spawn Server: %s\n", mapname );

	mov	eax, DWORD PTR _mapname$[ebp]
	push	eax
	push	OFFSET ??_C@_0BC@NLLPAPMG@Spawn?5Server?3?5?$CFs?6@
	call	_Con_DPrintf
	add	esp, 8
$LN11@SV_SpawnSe:

; 774  : 	}
; 775  : 
; 776  : 	memset( &sv, 0, sizeof( sv ));	// wipe the entire per-level structure

	push	2595672					; 00279b58H
	push	0
	push	OFFSET _sv
	call	_memset
	add	esp, 12					; 0000000cH

; 777  : 	sv.time = svgame.globals->time = 1.0f;	// server spawn time it's always 1.0 second

	mov	eax, DWORD PTR _svgame+19268
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _sv+16, xmm0

; 778  : 	sv.background = background;

	mov	eax, DWORD PTR _background$[ebp]
	mov	DWORD PTR _sv+4, eax

; 779  : 	
; 780  : 	// initialize buffers
; 781  : 	MSG_Init( &sv.signon, "Signon", sv.signon_buf, sizeof( sv.signon_buf ));

	push	-1
	push	131072					; 00020000H
	push	OFFSET _sv+2456360
	push	OFFSET ??_C@_06BHELGMGA@Signon@
	push	OFFSET _sv+2456340
	call	_MSG_InitExt
	add	esp, 20					; 00000014H

; 782  : 	MSG_Init( &sv.multicast, "Multicast", sv.multicast_buf, sizeof( sv.multicast_buf ));

	push	-1
	push	8192					; 00002000H
	push	OFFSET _sv+2448148
	push	OFFSET ??_C@_09DNHBHFFN@Multicast@
	push	OFFSET _sv+2448128
	call	_MSG_InitExt
	add	esp, 20					; 00000014H

; 783  : 	MSG_Init( &sv.datagram, "Datagram", sv.datagram_buf, sizeof( sv.datagram_buf ));

	push	-1
	push	16384					; 00004000H
	push	OFFSET _sv+2415340
	push	OFFSET ??_C@_08COCEEGAP@Datagram@
	push	OFFSET _sv+2415320
	call	_MSG_InitExt
	add	esp, 20					; 00000014H

; 784  : 	MSG_Init( &sv.reliable_datagram, "Reliable Datagram", sv.reliable_datagram_buf, sizeof( sv.reliable_datagram_buf ));

	push	-1
	push	16384					; 00004000H
	push	OFFSET _sv+2431744
	push	OFFSET ??_C@_0BC@CPFDHEDP@Reliable?5Datagram@
	push	OFFSET _sv+2431724
	call	_MSG_InitExt
	add	esp, 20					; 00000014H

; 785  : 	MSG_Init( &sv.spec_datagram, "Spectator Datagram", sv.spectator_buf, sizeof( sv.spectator_buf ));

	push	-1
	push	8192					; 00002000H
	push	OFFSET _sv+2587452
	push	OFFSET ??_C@_0BD@OFPJAAOD@Spectator?5Datagram@
	push	OFFSET _sv+2587432
	call	_MSG_InitExt
	add	esp, 20					; 00000014H

; 786  : 
; 787  : 	// clearing all the baselines
; 788  : 	memset( svs.static_entities, 0, sizeof( entity_state_t ) * MAX_STATIC_ENTITIES );

	push	1399392					; 00155a60H
	push	0
	mov	eax, DWORD PTR _svs+33364
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 789  : 	memset( svs.baselines, 0, sizeof( entity_state_t ) * GI->max_edicts );

	mov	eax, DWORD PTR _SI+768
	imul	ecx, DWORD PTR [eax+1656], 452
	push	ecx
	push	0
	mov	edx, DWORD PTR _svs+33360
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 790  : 
; 791  : 	// make cvars consistant
; 792  : 	if( coop.value ) Cvar_SetValue( "deathmatch", 0 );

	movss	xmm0, DWORD PTR _coop+12
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN12@SV_SpawnSe
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0L@ILDAINPG@deathmatch@
	call	_Cvar_SetValue
	add	esp, 8
$LN12@SV_SpawnSe:

; 793  : 	current_skill = Q_rint( skill.value );

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR _skill+12
	jbe	SHORT $LN24@SV_SpawnSe
	movss	xmm0, DWORD PTR _skill+12
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv196[ebp], eax
	jmp	SHORT $LN25@SV_SpawnSe
$LN24@SV_SpawnSe:
	movss	xmm0, DWORD PTR _skill+12
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR tv196[ebp], ecx
$LN25@SV_SpawnSe:
	mov	edx, DWORD PTR tv196[ebp]
	mov	DWORD PTR _current_skill$[ebp], edx

; 794  : 	current_skill = bound( SKILL_MIN, current_skill, SKILL_MAX );

	cmp	DWORD PTR _current_skill$[ebp], 1
	jl	SHORT $LN28@SV_SpawnSe
	cmp	DWORD PTR _current_skill$[ebp], 9
	jge	SHORT $LN26@SV_SpawnSe
	mov	eax, DWORD PTR _current_skill$[ebp]
	mov	DWORD PTR tv199[ebp], eax
	jmp	SHORT $LN27@SV_SpawnSe
$LN26@SV_SpawnSe:
	mov	DWORD PTR tv199[ebp], 9
$LN27@SV_SpawnSe:
	mov	ecx, DWORD PTR tv199[ebp]
	mov	DWORD PTR tv200[ebp], ecx
	jmp	SHORT $LN29@SV_SpawnSe
$LN28@SV_SpawnSe:
	mov	DWORD PTR tv200[ebp], 1
$LN29@SV_SpawnSe:
	mov	edx, DWORD PTR tv200[ebp]
	mov	DWORD PTR _current_skill$[ebp], edx

; 795  : 	Cvar_SetValue( "skill", (float)current_skill );

	cvtsi2ss xmm0, DWORD PTR _current_skill$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05ODMCMJAJ@skill@
	call	_Cvar_SetValue
	add	esp, 8

; 796  : 
; 797  : 	// force normal player collisions for single player
; 798  : 	if( svs.maxclients == 1 )

	cmp	DWORD PTR _svs+16, 1
	jne	SHORT $LN13@SV_SpawnSe

; 799  : 		Cvar_SetValue( "sv_clienttrace", 1 );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0P@CCDIMHBI@sv_clienttrace@
	call	_Cvar_SetValue
	add	esp, 8
$LN13@SV_SpawnSe:

; 800  : 
; 801  : 	// copy gamemode into svgame.globals
; 802  : 	svgame.globals->deathmatch = deathmatch.value;

	mov	eax, DWORD PTR _svgame+19268
	movss	xmm0, DWORD PTR _deathmatch+12
	movss	DWORD PTR [eax+20], xmm0

; 803  : 	svgame.globals->coop = coop.value;

	mov	eax, DWORD PTR _svgame+19268
	movss	xmm0, DWORD PTR _coop+12
	movss	DWORD PTR [eax+24], xmm0

; 804  : 	svgame.globals->maxClients = svs.maxclients;

	mov	eax, DWORD PTR _svgame+19268
	mov	ecx, DWORD PTR _svs+16
	mov	DWORD PTR [eax+148], ecx

; 805  : 
; 806  : 	if( sv.background )

	cmp	DWORD PTR _sv+4, 0
	je	SHORT $LN14@SV_SpawnSe

; 807  : 	{
; 808  : 		// tell the game parts about background state
; 809  : 		Cvar_FullSet( "sv_background", "1", FCVAR_READ_ONLY );

	push	131072					; 00020000H
	push	OFFSET ??_C@_01HIHLOKLC@1@
	push	OFFSET ??_C@_0O@DOOGBBKD@sv_background@
	call	_Cvar_FullSet
	add	esp, 12					; 0000000cH

; 810  : 		Cvar_FullSet( "cl_background", "1", FCVAR_READ_ONLY );

	push	131072					; 00020000H
	push	OFFSET ??_C@_01HIHLOKLC@1@
	push	OFFSET ??_C@_0O@NGAMONDD@cl_background@
	call	_Cvar_FullSet
	add	esp, 12					; 0000000cH

; 811  : 	}

	jmp	SHORT $LN15@SV_SpawnSe
$LN14@SV_SpawnSe:

; 812  : 	else
; 813  : 	{
; 814  : 		Cvar_FullSet( "sv_background", "0", FCVAR_READ_ONLY );

	push	131072					; 00020000H
	push	OFFSET ??_C@_01GBGANLPD@0@
	push	OFFSET ??_C@_0O@DOOGBBKD@sv_background@
	call	_Cvar_FullSet
	add	esp, 12					; 0000000cH

; 815  : 		Cvar_FullSet( "cl_background", "0", FCVAR_READ_ONLY );

	push	131072					; 00020000H
	push	OFFSET ??_C@_01GBGANLPD@0@
	push	OFFSET ??_C@_0O@NGAMONDD@cl_background@
	call	_Cvar_FullSet
	add	esp, 12					; 0000000cH
$LN15@SV_SpawnSe:

; 816  : 	}
; 817  : 
; 818  : 	// force normal player collisions for single player
; 819  : 	if( svs.maxclients == 1 ) Cvar_SetValue( "sv_clienttrace", 1 );

	cmp	DWORD PTR _svs+16, 1
	jne	SHORT $LN16@SV_SpawnSe
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0P@CCDIMHBI@sv_clienttrace@
	call	_Cvar_SetValue
	add	esp, 8
$LN16@SV_SpawnSe:

; 820  : 
; 821  : 	// make sure what server name doesn't contain path and extension
; 822  : 	COM_FileBase( mapname, sv.name );

	push	OFFSET _sv+56
	mov	eax, DWORD PTR _mapname$[ebp]
	push	eax
	call	_COM_FileBase
	add	esp, 8

; 823  : 
; 824  : 	// precache and static commands can be issued during map initialization
; 825  : 	sv.state = ss_loading;

	mov	DWORD PTR _sv, 1

; 826  : 
; 827  : 	if( startspot )

	cmp	DWORD PTR _startspot$[ebp], 0
	je	SHORT $LN17@SV_SpawnSe

; 828  : 		Q_strncpy( sv.startspot, startspot, sizeof( sv.startspot ));

	push	64					; 00000040H
	mov	eax, DWORD PTR _startspot$[ebp]
	push	eax
	push	OFFSET _sv+120
	call	_Q_strncpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN18@SV_SpawnSe
$LN17@SV_SpawnSe:

; 829  : 	else sv.startspot[0] = '\0';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR _sv[ecx+120], 0
$LN18@SV_SpawnSe:

; 830  : 
; 831  : 	Q_snprintf( sv.model_precache[WORLD_INDEX], sizeof( sv.model_precache[0] ), "maps/%s.bsp", sv.name );

	push	OFFSET _sv+56
	push	OFFSET ??_C@_0M@DKNJHPLK@maps?1?$CFs?4bsp@
	push	64					; 00000040H
	mov	eax, 64					; 00000040H
	shl	eax, 0
	add	eax, OFFSET _sv+196
	push	eax
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 832  : 	SetBits( sv.model_precache_flags[WORLD_INDEX], RES_FATALIFMISSING );

	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR _sv[eax+721092]
	or	ecx, 1
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR _sv[edx+721092], cl

; 833  : 	sv.worldmodel = sv.models[WORLD_INDEX] = Mod_LoadWorld( sv.model_precache[WORLD_INDEX], true );

	push	1
	mov	eax, 64					; 00000040H
	shl	eax, 0
	add	eax, OFFSET _sv+196
	push	eax
	call	_Mod_LoadWorld
	add	esp, 8
	mov	DWORD PTR tv249[ebp], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR tv249[ebp]
	mov	DWORD PTR _sv[ecx+722116], edx
	mov	eax, DWORD PTR tv249[ebp]
	mov	DWORD PTR _sv+2595644, eax

; 834  : 	CRC32_MapFile( &sv.worldmapCRC, sv.model_precache[WORLD_INDEX], svs.maxclients > 1 );

	cmp	DWORD PTR _svs+16, 1
	jle	SHORT $LN30@SV_SpawnSe
	mov	DWORD PTR tv288[ebp], 1
	jmp	SHORT $LN31@SV_SpawnSe
$LN30@SV_SpawnSe:
	mov	DWORD PTR tv288[ebp], 0
$LN31@SV_SpawnSe:
	mov	eax, DWORD PTR tv288[ebp]
	push	eax
	mov	ecx, 64					; 00000040H
	shl	ecx, 0
	add	ecx, OFFSET _sv+196
	push	ecx
	push	OFFSET _sv+48
	call	_CRC32_MapFile
	add	esp, 12					; 0000000cH

; 835  : 
; 836  : 	if( FBitSet( host.features, ENGINE_QUAKE_COMPATIBLE ) && FS_FileExists( "progs.dat", false ))

	mov	eax, DWORD PTR _host+34752
	and	eax, 2
	je	SHORT $LN19@SV_SpawnSe
	push	0
	push	OFFSET ??_C@_09DGPGKKIF@progs?4dat@
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@SV_SpawnSe

; 837  : 	{
; 838  : 		file_t *f = FS_Open( "progs.dat", "rb", false );

	push	0
	push	OFFSET ??_C@_02JDPG@rb@
	push	OFFSET ??_C@_09DGPGKKIF@progs?4dat@
	call	_FS_Open
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _f$1[ebp], eax

; 839  : 		FS_Seek( f, sizeof( int ), SEEK_SET );

	push	0
	push	4
	mov	eax, DWORD PTR _f$1[ebp]
	push	eax
	call	_FS_Seek
	add	esp, 12					; 0000000cH

; 840  : 		FS_Read( f, &sv.progsCRC, sizeof( int ));

	push	4
	push	OFFSET _sv+52
	mov	eax, DWORD PTR _f$1[ebp]
	push	eax
	call	_FS_Read
	add	esp, 12					; 0000000cH

; 841  : 		FS_Close( f );

	mov	eax, DWORD PTR _f$1[ebp]
	push	eax
	call	_FS_Close
	add	esp, 4
$LN19@SV_SpawnSe:

; 842  : 	}
; 843  : 
; 844  : 	for( i = WORLD_INDEX; i < sv.worldmodel->numsubmodels; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@SV_SpawnSe
$LN2@SV_SpawnSe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SV_SpawnSe:
	mov	eax, DWORD PTR _sv+2595644
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+120]
	jge	SHORT $LN3@SV_SpawnSe

; 845  : 	{
; 846  : 		Q_sprintf( sv.model_precache[i+1], "*%i", i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_03JLINDLFM@?$CK?$CFi@
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	shl	ecx, 6
	add	ecx, OFFSET _sv+196
	push	ecx
	call	_Q_sprintf
	add	esp, 12					; 0000000cH

; 847  : 		sv.models[i+1] = Mod_ForName( sv.model_precache[i+1], false, false );

	push	0
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	shl	eax, 6
	add	eax, OFFSET _sv+196
	push	eax
	call	_Mod_ForName
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _sv[ecx*4+722120], eax

; 848  : 		SetBits( sv.model_precache_flags[i+1], RES_FATALIFMISSING );

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _sv[eax+721093]
	or	ecx, 1
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _sv[edx+721093], cl

; 849  : 	}

	jmp	SHORT $LN2@SV_SpawnSe
$LN3@SV_SpawnSe:

; 850  : 
; 851  : 	// leave slots at start for clients only
; 852  : 	for( i = 0; i < svs.maxclients; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@SV_SpawnSe
$LN5@SV_SpawnSe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@SV_SpawnSe:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _svs+16
	jge	SHORT $LN6@SV_SpawnSe

; 853  : 	{
; 854  : 		// needs to reconnect
; 855  : 		if( svs.clients[i].state > cs_connected )

	imul	eax, DWORD PTR _i$[ebp], 289832
	mov	ecx, DWORD PTR _svs+33344
	cmp	DWORD PTR [ecx+eax], 2
	jle	SHORT $LN20@SV_SpawnSe

; 856  : 			svs.clients[i].state = cs_connected;

	imul	eax, DWORD PTR _i$[ebp], 289832
	mov	ecx, DWORD PTR _svs+33344
	mov	DWORD PTR [ecx+eax], 2
$LN20@SV_SpawnSe:

; 857  : 
; 858  : 		ent = EDICT_NUM( i + 1 );

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	push	eax
	call	_SV_EdictNum
	add	esp, 4
	mov	DWORD PTR _ent$[ebp], eax

; 859  : 		svs.clients[i].pViewEntity = NULL;

	imul	eax, DWORD PTR _i$[ebp], 289832
	mov	ecx, DWORD PTR _svs+33344
	mov	DWORD PTR [ecx+eax+264952], 0

; 860  : 		svs.clients[i].edict = ent;

	imul	eax, DWORD PTR _i$[ebp], 289832
	mov	ecx, DWORD PTR _svs+33344
	mov	edx, DWORD PTR _ent$[ebp]
	mov	DWORD PTR [ecx+eax+264948], edx

; 861  : 		SV_InitEdict( ent );

	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	call	_SV_InitEdict
	add	esp, 4

; 862  : 	}

	jmp	$LN5@SV_SpawnSe
$LN6@SV_SpawnSe:

; 863  : 
; 864  : 	// heartbeats will always be sent to the id master
; 865  : 	svs.last_heartbeat = MAX_HEARTBEAT; // send immediately

	movsd	xmm0, QWORD PTR __real@c0f869f000000000
	movsd	QWORD PTR _svs+33368, xmm0

; 866  : 
; 867  : 	// get actual movevars
; 868  : 	SV_UpdateMovevars( true );

	push	1
	call	_SV_UpdateMovevars
	add	esp, 4

; 869  : 
; 870  : 	// clear physics interaction links
; 871  : 	SV_ClearWorld();

	call	_SV_ClearWorld

; 872  : 
; 873  : 	return true;

	mov	eax, 1
$LN1@SV_SpawnSe:

; 874  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_SpawnServer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_ActivateServer
_TEXT	SEGMENT
tv214 = -131632						; size = 8
tv79 = -131628						; size = 4
_cycle$1 = -131112					; size = 4
_cl$ = -131108						; size = 4
_msg$ = -131104						; size = 20
_msg_buf$ = -131084					; size = 131072
_numFrames$ = -12					; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_runPhysics$ = 8					; size = 4
_SV_ActivateServer PROC					; COMDAT

; 496  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 131632				; 00020230H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 497  : 	int		i, numFrames;
; 498  : 	byte		msg_buf[MAX_INIT_MSG];
; 499  : 	sizebuf_t		msg;
; 500  : 	sv_client_t	*cl;
; 501  : 
; 502  : 	if( !svs.initialized )

	cmp	DWORD PTR _svs, 0
	jne	SHORT $LN8@SV_Activat

; 503  : 		return;

	jmp	$LN19@SV_Activat
$LN8@SV_Activat:

; 504  : 
; 505  : 	MSG_Init( &msg, "ActivateServer", msg_buf, sizeof( msg_buf ));

	push	-1
	push	131072					; 00020000H
	lea	eax, DWORD PTR _msg_buf$[ebp]
	push	eax
	push	OFFSET ??_C@_0P@KNIHEOJP@ActivateServer@
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_MSG_InitExt
	add	esp, 20					; 00000014H

; 506  : 
; 507  : 	// always clearing newunit variable
; 508  : 	Cvar_SetValue( "sv_newunit", 0 );

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0L@EJFCEOPJ@sv_newunit@
	call	_Cvar_SetValue
	add	esp, 8

; 509  : 
; 510  : 	// relese all intermediate entities
; 511  : 	SV_FreeOldEntities ();

	call	_SV_FreeOldEntities

; 512  : 
; 513  : 	// Activate the DLL server code
; 514  : 	svgame.globals->time = sv.time;

	cvtsd2ss xmm0, QWORD PTR _sv+16
	mov	eax, DWORD PTR _svgame+19268
	movss	DWORD PTR [eax], xmm0

; 515  : 	svgame.dllFuncs.pfnServerActivate( svgame.edicts, svgame.numEntities, svs.maxclients );

	mov	eax, DWORD PTR _svs+16
	push	eax
	mov	ecx, DWORD PTR _svgame+7932
	push	ecx
	mov	edx, DWORD PTR _svgame+7928
	push	edx
	call	DWORD PTR _svgame+19356
	add	esp, 12					; 0000000cH

; 516  : 
; 517  : 	// parse user-specified resources
; 518  : 	SV_CreateGenericResources();

	call	_SV_CreateGenericResources

; 519  : 
; 520  : 	if( runPhysics )

	cmp	DWORD PTR _runPhysics$[ebp], 0
	je	SHORT $LN9@SV_Activat

; 521  : 	{
; 522  : 		numFrames = (svs.maxclients <= 1) ? 2 : 8;

	cmp	DWORD PTR _svs+16, 1
	jg	SHORT $LN21@SV_Activat
	mov	DWORD PTR tv79[ebp], 2
	jmp	SHORT $LN22@SV_Activat
$LN21@SV_Activat:
	mov	DWORD PTR tv79[ebp], 8
$LN22@SV_Activat:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR _numFrames$[ebp], eax

; 523  : 		sv.frametime = SV_SPAWN_TIME;

	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _sv+32, xmm0

; 524  : 	}

	jmp	SHORT $LN10@SV_Activat
$LN9@SV_Activat:

; 525  : 	else
; 526  : 	{
; 527  : 		sv.frametime = 0.001;

	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _sv+32, xmm0

; 528  : 		numFrames = 1;

	mov	DWORD PTR _numFrames$[ebp], 1
$LN10@SV_Activat:

; 529  : 	}
; 530  : 
; 531  : 	// run some frames to allow everything to settle
; 532  : 	for( i = 0; i < numFrames; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SV_Activat
$LN2@SV_Activat:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SV_Activat:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numFrames$[ebp]
	jge	SHORT $LN3@SV_Activat

; 533  : 		SV_Physics();

	call	_SV_Physics
	jmp	SHORT $LN2@SV_Activat
$LN3@SV_Activat:

; 534  : 
; 535  : 	// create a baseline for more efficient communications
; 536  : 	SV_CreateBaseline();

	call	_SV_CreateBaseline

; 537  : 
; 538  : 	// collect all info from precached resources
; 539  : 	SV_CreateResourceList();

	call	_SV_CreateResourceList

; 540  : 
; 541  : 	// check and count all files that marked by user as unmodified (typically is a player models etc)
; 542  : 	SV_TransferConsistencyInfo();

	call	_SV_TransferConsistencyInfo

; 543  : 
; 544  : 	// send serverinfo to all connected clients
; 545  : 	for( i = 0, cl = svs.clients; i < svs.maxclients; i++, cl++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _svs+33344
	mov	DWORD PTR _cl$[ebp], eax
	jmp	SHORT $LN7@SV_Activat
$LN5@SV_Activat:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _cl$[ebp]
	add	ecx, 289832				; 00046c28H
	mov	DWORD PTR _cl$[ebp], ecx
$LN7@SV_Activat:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _svs+16
	jge	SHORT $LN6@SV_Activat

; 546  : 	{
; 547  : 		if( cl->state < cs_connected )

	mov	eax, DWORD PTR _cl$[ebp]
	cmp	DWORD PTR [eax], 2
	jge	SHORT $LN11@SV_Activat

; 548  : 			continue;

	jmp	SHORT $LN5@SV_Activat
$LN11@SV_Activat:

; 549  : 
; 550  : 		Netchan_Clear( &cl->netchan );

	mov	eax, DWORD PTR _cl$[ebp]
	add	eax, 560				; 00000230H
	push	eax
	call	_Netchan_Clear
	add	esp, 4

; 551  : 		cl->delta_sequence = -1;

	mov	eax, DWORD PTR _cl$[ebp]
	mov	DWORD PTR [eax+264332], -1

; 552  : 	}

	jmp	SHORT $LN5@SV_Activat
$LN6@SV_Activat:

; 553  : 
; 554  : 	// invoke to refresh all movevars
; 555  : 	memset( &svgame.oldmovevars, 0, sizeof( movevars_t ));

	push	160					; 000000a0H
	push	0
	push	OFFSET _svgame+8096
	call	_memset
	add	esp, 12					; 0000000cH

; 556  : 	svgame.globals->changelevel = false;

	mov	eax, DWORD PTR _svgame+19268
	mov	DWORD PTR [eax+136], 0

; 557  : 
; 558  : 	// setup hostflags
; 559  : 	sv.hostflags = 0;

	mov	DWORD PTR _sv+44, 0

; 560  : 
; 561  : 	HPAK_FlushHostQueue();

	call	_HPAK_FlushHostQueue

; 562  : 
; 563  : 	// tell what kind of server has been started.
; 564  : 	if( svs.maxclients > 1 )

	cmp	DWORD PTR _svs+16, 1
	jle	SHORT $LN12@SV_Activat

; 565  : 		Con_Printf( "%i player server started\n", svs.maxclients );

	mov	eax, DWORD PTR _svs+16
	push	eax
	push	OFFSET ??_C@_0BK@EDIBGDJO@?$CFi?5player?5server?5started?6@
	call	_Con_Printf
	add	esp, 8
	jmp	SHORT $LN13@SV_Activat
$LN12@SV_Activat:

; 566  : 	else Con_Printf( "Game started\n" );

	push	OFFSET ??_C@_0O@DOPCMNDH@Game?5started?6@
	call	_Con_Printf
	add	esp, 4
$LN13@SV_Activat:

; 567  : 
; 568  : 	Log_Printf( "Started map \"%s\" (CRC \"%i\")\n", sv.name, sv.worldmapCRC );

	mov	eax, DWORD PTR _sv+48
	push	eax
	push	OFFSET _sv+56
	push	OFFSET ??_C@_0BN@GBKGJGNG@Started?5map?5?$CC?$CFs?$CC?5?$CICRC?5?$CC?$CFi?$CC?$CJ?6@
	call	_Log_Printf
	add	esp, 12					; 0000000cH

; 569  : 
; 570  : 	// dedicated server purge unused resources here
; 571  : 	if( host.type == HOST_DEDICATED )

	cmp	DWORD PTR _host+164, 1
	jne	SHORT $LN14@SV_Activat

; 572  : 		Mod_FreeUnused ();

	call	_Mod_FreeUnused
$LN14@SV_Activat:

; 573  : 
; 574  : 	host.movevars_changed = true;

	mov	DWORD PTR _host+34416, 1

; 575  : 	sv.state = ss_active;

	mov	DWORD PTR _sv, 2

; 576  : 
; 577  : 	Con_DPrintf( "level loaded at %.2f sec\n", Sys_DoubleTime() - svs.timestart );

	call	_Sys_DoubleTime
	fstp	QWORD PTR tv214[ebp]
	movsd	xmm0, QWORD PTR tv214[ebp]
	subsd	xmm0, QWORD PTR _svs+8
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BK@KLHMDMNH@level?5loaded?5at?5?$CF?42f?5sec?6@
	call	_Con_DPrintf
	add	esp, 12					; 0000000cH

; 578  : 
; 579  : 	if( sv.ignored_static_ents )

	cmp	DWORD PTR _sv+2595660, 0
	je	SHORT $LN15@SV_Activat

; 580  : 		Con_Printf( S_WARN "%i static entities was rejected due buffer overflow\n", sv.ignored_static_ents );

	mov	eax, DWORD PTR _sv+2595660
	push	eax
	push	OFFSET ??_C@_0EC@CPBHPIGD@?$FO3Warning?3?$FO7?5?$CFi?5static?5entities@
	call	_Con_Printf
	add	esp, 8
$LN15@SV_Activat:

; 581  : 
; 582  : 	if( sv.ignored_world_decals )

	cmp	DWORD PTR _sv+2595664, 0
	je	SHORT $LN16@SV_Activat

; 583  : 		Con_Printf( S_WARN "%i static decals was rejected due buffer overflow\n", sv.ignored_world_decals );

	mov	eax, DWORD PTR _sv+2595664
	push	eax
	push	OFFSET ??_C@_0EA@PIIENKHP@?$FO3Warning?3?$FO7?5?$CFi?5static?5decals?5w@
	call	_Con_Printf
	add	esp, 8
$LN16@SV_Activat:

; 584  : 
; 585  : 	if( svs.maxclients > 1 )

	cmp	DWORD PTR _svs+16, 1
	jle	SHORT $LN19@SV_Activat

; 586  : 	{
; 587  : 		const char *cycle = Cvar_VariableString( "mapchangecfgfile" );

	push	OFFSET ??_C@_0BB@FMAAKPDJ@mapchangecfgfile@
	call	_Cvar_VariableString
	add	esp, 4
	mov	DWORD PTR _cycle$1[ebp], eax

; 588  : 
; 589  : 		if( COM_CheckString( cycle ))

	mov	eax, DWORD PTR _cycle$1[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	je	SHORT $LN18@SV_Activat

; 590  : 			Cbuf_AddText( va( "exec %s\n", cycle ));

	mov	eax, DWORD PTR _cycle$1[ebp]
	push	eax
	push	OFFSET ??_C@_08NNCMPFKC@exec?5?$CFs?6@
	call	_va
	add	esp, 8
	push	eax
	call	_Cbuf_AddText
	add	esp, 4
$LN18@SV_Activat:

; 591  : 
; 592  : 		if( public_server->value )

	mov	eax, DWORD PTR _public_server
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN19@SV_Activat

; 593  : 			Master_Add( );

	call	_Master_Add
$LN19@SV_Activat:

; 594  : 	}
; 595  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_ActivateServer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_InitGame
_TEXT	SEGMENT
_SV_InitGame PROC					; COMDAT

; 644  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 645  : 	if( svs.initialized )

	cmp	DWORD PTR _svs, 0
	je	SHORT $LN2@SV_InitGam

; 646  : 		return true; // already initialized ?

	mov	eax, 1
	jmp	SHORT $LN1@SV_InitGam
$LN2@SV_InitGam:

; 647  : 
; 648  : 	// first initialize?
; 649  : 	if( !SV_LoadProgs( GI->game_dll ))

	mov	eax, DWORD PTR _SI+768
	add	eax, 516				; 00000204H
	push	eax
	call	_SV_LoadProgs
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@SV_InitGam

; 650  : 	{
; 651  : 		Con_Printf( S_ERROR "can't initialize %s\n", GI->game_dll );

	mov	eax, DWORD PTR _SI+768
	add	eax, 516				; 00000204H
	push	eax
	push	OFFSET ??_C@_0CA@JLNKENLN@?$FO1Error?3?$FO7?5can?8t?5initialize?5?$CFs?6@
	call	_Con_Printf
	add	esp, 8

; 652  : 		return false; // failed to loading server.dll

	xor	eax, eax
	jmp	SHORT $LN1@SV_InitGam
$LN3@SV_InitGam:

; 653  : 	}
; 654  : 
; 655  : 	// client frames will be allocated in SV_ClientConnect
; 656  : 	svs.initialized = true;

	mov	DWORD PTR _svs, 1

; 657  : 
; 658  : 	return true;

	mov	eax, 1
$LN1@SV_InitGam:

; 659  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_InitGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_GenericIndex
_TEXT	SEGMENT
_i$ = -72						; size = 4
_name$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_SV_GenericIndex PROC					; COMDAT

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 230  : 	char	name[MAX_QPATH];
; 231  : 	int	i;
; 232  : 
; 233  : 	if( !COM_CheckString( filename ))

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@SV_Generic

; 234  : 		return 0;

	xor	eax, eax
	jmp	$LN1@SV_Generic
$LN5@SV_Generic:

; 235  : 
; 236  : 	Q_strncpy( name, filename, sizeof( name ));

	push	64					; 00000040H
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 237  : 	COM_FixSlashes( name );

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_COM_FixSlashes
	add	esp, 4

; 238  : 
; 239  : 	for( i = 1; i < MAX_CUSTOM && sv.files_precache[i][0]; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@SV_Generic
$LN2@SV_Generic:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SV_Generic:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jge	SHORT $LN3@SV_Generic
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR _sv[eax+edx+590020]
	test	eax, eax
	je	SHORT $LN3@SV_Generic

; 240  : 	{
; 241  : 		if( !Q_stricmp( sv.files_precache[i], name ))

	push	99999					; 0001869fH
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	add	ecx, OFFSET _sv+590020
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@SV_Generic

; 242  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN1@SV_Generic
$LN6@SV_Generic:

; 243  : 	}

	jmp	SHORT $LN2@SV_Generic
$LN3@SV_Generic:

; 244  : 
; 245  : 	if( i == MAX_CUSTOM )

	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jne	SHORT $LN7@SV_Generic

; 246  : 	{
; 247  : 		Host_Error( "MAX_CUSTOM limit exceeded (%d)\n", MAX_CUSTOM );

	push	1024					; 00000400H
	push	OFFSET ??_C@_0CA@ECOFPAIN@MAX_CUSTOM?5limit?5exceeded?5?$CI?$CFd?$CJ?6@
	call	_Host_Error
	add	esp, 8

; 248  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@SV_Generic
$LN7@SV_Generic:

; 249  : 	}
; 250  : 
; 251  : 	// register new generic resource
; 252  : 	Q_strncpy( sv.files_precache[i], name, sizeof( sv.files_precache[i] ));

	push	64					; 00000040H
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	add	ecx, OFFSET _sv+590020
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 253  : 
; 254  : 	if( sv.state != ss_loading )

	cmp	DWORD PTR _sv, 1
	je	SHORT $LN8@SV_Generic

; 255  : 	{
; 256  : 		// send the update to everyone
; 257  : 		SV_SendSingleResource( name, t_generic, i, RES_FATALIFMISSING );

	push	1
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_SV_SendSingleResource
	add	esp, 16					; 00000010H
$LN8@SV_Generic:

; 258  : 	}
; 259  : 
; 260  : 	return i;

	mov	eax, DWORD PTR _i$[ebp]
$LN1@SV_Generic:

; 261  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_GenericIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_EventIndex
_TEXT	SEGMENT
_i$ = -72						; size = 4
_name$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_SV_EventIndex PROC					; COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 188  : 	char	name[MAX_QPATH];
; 189  : 	int	i;
; 190  : 
; 191  : 	if( !COM_CheckString( filename ))

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@SV_EventIn

; 192  : 		return 0;

	xor	eax, eax
	jmp	$LN1@SV_EventIn
$LN5@SV_EventIn:

; 193  : 
; 194  : 	Q_strncpy( name, filename, sizeof( name ));

	push	64					; 00000040H
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 195  : 	COM_FixSlashes( name );

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_COM_FixSlashes
	add	esp, 4

; 196  : 
; 197  : 	for( i = 1; i < MAX_EVENTS && sv.event_precache[i][0]; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@SV_EventIn
$LN2@SV_EventIn:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SV_EventIn:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jge	SHORT $LN3@SV_EventIn
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR _sv[eax+edx+655556]
	test	eax, eax
	je	SHORT $LN3@SV_EventIn

; 198  : 	{
; 199  : 		if( !Q_stricmp( sv.event_precache[i], name ))

	push	99999					; 0001869fH
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	add	ecx, OFFSET _sv+655556
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@SV_EventIn

; 200  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN1@SV_EventIn
$LN6@SV_EventIn:

; 201  : 	}

	jmp	SHORT $LN2@SV_EventIn
$LN3@SV_EventIn:

; 202  : 
; 203  : 	if( i == MAX_EVENTS )

	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jne	SHORT $LN7@SV_EventIn

; 204  : 	{
; 205  : 		Host_Error( "MAX_EVENTS limit exceeded (%d)\n", MAX_EVENTS );

	push	1024					; 00000400H
	push	OFFSET ??_C@_0CA@JMECJKPG@MAX_EVENTS?5limit?5exceeded?5?$CI?$CFd?$CJ?6@
	call	_Host_Error
	add	esp, 8

; 206  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@SV_EventIn
$LN7@SV_EventIn:

; 207  : 	}
; 208  : 
; 209  : 	// register new event
; 210  : 	Q_strncpy( sv.event_precache[i], name, sizeof( sv.event_precache[i] ));

	push	64					; 00000040H
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	add	ecx, OFFSET _sv+655556
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 211  : 
; 212  : 	if( sv.state != ss_loading )

	cmp	DWORD PTR _sv, 1
	je	SHORT $LN8@SV_EventIn

; 213  : 	{
; 214  : 		// send the update to everyone
; 215  : 		SV_SendSingleResource( name, t_eventscript, i, RES_FATALIFMISSING );

	push	1
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	5
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_SV_SendSingleResource
	add	esp, 16					; 00000010H
$LN8@SV_EventIn:

; 216  : 	}
; 217  : 
; 218  : 	return i;

	mov	eax, DWORD PTR _i$[ebp]
$LN1@SV_EventIn:

; 219  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_EventIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_SoundIndex
_TEXT	SEGMENT
_i$ = -72						; size = 4
_name$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_SV_SoundIndex PROC					; COMDAT

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 136  : 	char	name[MAX_QPATH];
; 137  : 	int	i;
; 138  : 
; 139  : 	// don't precache sentence names!
; 140  : 	if( !COM_CheckString( filename ))

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@SV_SoundIn

; 141  : 		return 0;

	xor	eax, eax
	jmp	$LN1@SV_SoundIn
$LN5@SV_SoundIn:

; 142  : 
; 143  : 	if( filename[0] == '!' )

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _filename$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 33					; 00000021H
	jne	SHORT $LN6@SV_SoundIn

; 144  : 	{
; 145  : 		Con_Printf( S_WARN "'%s' do not precache sentence names!\n", filename );

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	OFFSET ??_C@_0DD@GKHIBJHL@?$FO3Warning?3?$FO7?5?8?$CFs?8?5do?5not?5precac@
	call	_Con_Printf
	add	esp, 8

; 146  : 		return 0;

	xor	eax, eax
	jmp	$LN1@SV_SoundIn
$LN6@SV_SoundIn:

; 147  : 	}
; 148  : 
; 149  : 	if( *filename == '\\' || *filename == '/' )

	mov	eax, DWORD PTR _filename$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN8@SV_SoundIn
	mov	eax, DWORD PTR _filename$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN7@SV_SoundIn
$LN8@SV_SoundIn:

; 150  : 		filename++;

	mov	eax, DWORD PTR _filename$[ebp]
	add	eax, 1
	mov	DWORD PTR _filename$[ebp], eax
$LN7@SV_SoundIn:

; 151  : 	Q_strncpy( name, filename, sizeof( name ));

	push	64					; 00000040H
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 152  : 	COM_FixSlashes( name );

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_COM_FixSlashes
	add	esp, 4

; 153  : 
; 154  : 	for( i = 1; i < MAX_SOUNDS && sv.sound_precache[i][0]; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@SV_SoundIn
$LN2@SV_SoundIn:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SV_SoundIn:
	cmp	DWORD PTR _i$[ebp], 8192		; 00002000H
	jge	SHORT $LN3@SV_SoundIn
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR _sv[eax+edx+65732]
	test	eax, eax
	je	SHORT $LN3@SV_SoundIn

; 155  : 	{
; 156  : 		if( !Q_stricmp( sv.sound_precache[i], name ))

	push	99999					; 0001869fH
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	add	ecx, OFFSET _sv+65732
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN9@SV_SoundIn

; 157  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN1@SV_SoundIn
$LN9@SV_SoundIn:

; 158  : 	}

	jmp	SHORT $LN2@SV_SoundIn
$LN3@SV_SoundIn:

; 159  : 
; 160  : 	if( i == MAX_SOUNDS )

	cmp	DWORD PTR _i$[ebp], 8192		; 00002000H
	jne	SHORT $LN10@SV_SoundIn

; 161  : 	{
; 162  : 		Host_Error( "MAX_SOUNDS limit exceeded (%d)\n", MAX_SOUNDS );

	push	8192					; 00002000H
	push	OFFSET ??_C@_0CA@KFOCAHLD@MAX_SOUNDS?5limit?5exceeded?5?$CI?$CFd?$CJ?6@
	call	_Host_Error
	add	esp, 8

; 163  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@SV_SoundIn
$LN10@SV_SoundIn:

; 164  : 	}
; 165  : 
; 166  : 	// register new sound
; 167  : 	Q_strncpy( sv.sound_precache[i], name, sizeof( sv.sound_precache[i] ));

	push	64					; 00000040H
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	add	ecx, OFFSET _sv+65732
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 168  : 
; 169  : 	if( sv.state != ss_loading )

	cmp	DWORD PTR _sv, 1
	je	SHORT $LN11@SV_SoundIn

; 170  : 	{	
; 171  : 		// send the update to everyone
; 172  : 		SV_SendSingleResource( name, t_sound, i, 0 );

	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_SV_SendSingleResource
	add	esp, 16					; 00000010H

; 173  : 		Con_Printf( S_WARN "late precache of %s\n", name );

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0CC@CLIJFIMK@?$FO3Warning?3?$FO7?5late?5precache?5of?5?$CF@
	call	_Con_Printf
	add	esp, 8
$LN11@SV_SoundIn:

; 174  : 	}
; 175  : 
; 176  : 	return i;

	mov	eax, DWORD PTR _i$[ebp]
$LN1@SV_SoundIn:

; 177  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_SoundIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_ModelIndex
_TEXT	SEGMENT
_i$ = -72						; size = 4
_name$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_SV_ModelIndex PROC					; COMDAT

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 91   : 	char	name[MAX_QPATH];
; 92   : 	int	i;
; 93   : 
; 94   : 	if( !COM_CheckString( filename ))

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_COM_CheckString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@SV_ModelIn

; 95   : 		return 0;

	xor	eax, eax
	jmp	$LN1@SV_ModelIn
$LN5@SV_ModelIn:

; 96   : 
; 97   : 	if( *filename == '\\' || *filename == '/' )

	mov	eax, DWORD PTR _filename$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN7@SV_ModelIn
	mov	eax, DWORD PTR _filename$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN6@SV_ModelIn
$LN7@SV_ModelIn:

; 98   : 		filename++;

	mov	eax, DWORD PTR _filename$[ebp]
	add	eax, 1
	mov	DWORD PTR _filename$[ebp], eax
$LN6@SV_ModelIn:

; 99   : 	Q_strncpy( name, filename, sizeof( name ));

	push	64					; 00000040H
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 100  : 	COM_FixSlashes( name );

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_COM_FixSlashes
	add	esp, 4

; 101  : 
; 102  : 	for( i = 1; i < MAX_MODELS && sv.model_precache[i][0]; i++ )

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@SV_ModelIn
$LN2@SV_ModelIn:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SV_ModelIn:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jge	SHORT $LN3@SV_ModelIn
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR _sv[eax+edx+196]
	test	eax, eax
	je	SHORT $LN3@SV_ModelIn

; 103  : 	{
; 104  : 		if( !Q_stricmp( sv.model_precache[i], name ))

	push	99999					; 0001869fH
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	add	ecx, OFFSET _sv+196
	push	ecx
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@SV_ModelIn

; 105  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN1@SV_ModelIn
$LN8@SV_ModelIn:

; 106  : 	}

	jmp	SHORT $LN2@SV_ModelIn
$LN3@SV_ModelIn:

; 107  : 
; 108  : 	if( i == MAX_MODELS )

	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jne	SHORT $LN9@SV_ModelIn

; 109  : 	{
; 110  : 		Host_Error( "MAX_MODELS limit exceeded (%d)\n", MAX_MODELS );

	push	1024					; 00000400H
	push	OFFSET ??_C@_0CA@DAAKNEHA@MAX_MODELS?5limit?5exceeded?5?$CI?$CFd?$CJ?6@
	call	_Host_Error
	add	esp, 8

; 111  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@SV_ModelIn
$LN9@SV_ModelIn:

; 112  : 	}
; 113  : 
; 114  : 	// register new model
; 115  : 	Q_strncpy( sv.model_precache[i], name, sizeof( sv.model_precache[i] ));

	push	64					; 00000040H
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	add	ecx, OFFSET _sv+196
	push	ecx
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 116  : 
; 117  : 	if( sv.state != ss_loading )

	cmp	DWORD PTR _sv, 1
	je	SHORT $LN10@SV_ModelIn

; 118  : 	{	
; 119  : 		// send the update to everyone
; 120  : 		SV_SendSingleResource( name, t_model, i, sv.model_precache_flags[i] );

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _sv[eax+721092]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	2
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_SV_SendSingleResource
	add	esp, 16					; 00000010H

; 121  : 		Con_Printf( S_WARN "late precache of %s\n", name );

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0CC@CLIJFIMK@?$FO3Warning?3?$FO7?5late?5precache?5of?5?$CF@
	call	_Con_Printf
	add	esp, 8
$LN10@SV_ModelIn:

; 122  : 	}
; 123  : 
; 124  : 	return i;

	mov	eax, DWORD PTR _i$[ebp]
$LN1@SV_ModelIn:

; 125  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_ModelIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_FreeGameProgs
_TEXT	SEGMENT
_SV_FreeGameProgs PROC					; COMDAT

; 900  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 901  : 	if( svs.initialized ) return;	// server is active

	cmp	DWORD PTR _svs, 0
	je	SHORT $LN2@SV_FreeGam
	jmp	SHORT $LN1@SV_FreeGam
$LN2@SV_FreeGam:

; 902  : 
; 903  : 	// unload progs (free cvars and commands)
; 904  : 	SV_UnloadProgs();

	call	_SV_UnloadProgs
$LN1@SV_FreeGam:

; 905  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_FreeGameProgs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_InitGameProgs
_TEXT	SEGMENT
_SV_InitGameProgs PROC					; COMDAT

; 892  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 893  : 	if( svgame.hInstance ) return; // already loaded

	cmp	DWORD PTR _svgame+7920, 0
	je	SHORT $LN2@SV_InitGam
	jmp	SHORT $LN1@SV_InitGam
$LN2@SV_InitGam:

; 894  : 
; 895  : 	// just try to initialize
; 896  : 	SV_LoadProgs( GI->game_dll );

	mov	eax, DWORD PTR _SI+768
	add	eax, 516				; 00000204H
	push	eax
	call	_SV_LoadProgs
	add	esp, 4
$LN1@SV_InitGam:

; 897  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_InitGameProgs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_ExecChangeLevel
_TEXT	SEGMENT
_SV_ExecChangeLevel PROC				; COMDAT

; 948  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 949  : 	SV_ChangeLevel( GameState->loadGame, GameState->levelName, GameState->landmarkName, GameState->backgroundMap );

	mov	eax, DWORD PTR _host+152
	push	eax
	push	OFFSET _host+88
	push	OFFSET _host+24
	mov	ecx, DWORD PTR _host+156
	push	ecx
	call	_SV_ChangeLevel
	add	esp, 16					; 00000010H

; 950  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_ExecChangeLevel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_ExecLoadGame
_TEXT	SEGMENT
_SV_ExecLoadGame PROC					; COMDAT

; 931  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 932  : 	if( SV_SpawnServer( GameState->levelName, NULL, false ))

	push	0
	push	0
	push	OFFSET _host+24
	call	_SV_SpawnServer
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@SV_ExecLoa

; 933  : 	{
; 934  : 		if( !SV_LoadGameState( GameState->levelName ))

	push	OFFSET _host+24
	call	_SV_LoadGameState
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@SV_ExecLoa

; 935  : 			SV_SpawnEntities( GameState->levelName );

	push	OFFSET _host+24
	call	_SV_SpawnEntities
	add	esp, 4
$LN3@SV_ExecLoa:

; 936  : 		SV_ActivateServer( false );

	push	0
	call	_SV_ActivateServer
	add	esp, 4
$LN1@SV_ExecLoa:

; 937  : 	}
; 938  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_ExecLoadGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_ExecLoadLevel
_TEXT	SEGMENT
_SV_ExecLoadLevel PROC					; COMDAT

; 915  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 916  : 	if( SV_SpawnServer( GameState->levelName, NULL, GameState->backgroundMap ))

	mov	eax, DWORD PTR _host+152
	push	eax
	push	0
	push	OFFSET _host+24
	call	_SV_SpawnServer
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@SV_ExecLoa

; 917  : 	{
; 918  : 		SV_SpawnEntities( GameState->levelName );

	push	OFFSET _host+24
	call	_SV_SpawnEntities
	add	esp, 4

; 919  : 		SV_ActivateServer( true );

	push	1
	call	_SV_ActivateServer
	add	esp, 4
$LN1@SV_ExecLoa:

; 920  : 	}
; 921  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_ExecLoadLevel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_ShutdownGame
_TEXT	SEGMENT
_SV_ShutdownGame PROC					; COMDAT

; 669  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 670  : 	if( !GameState->loadGame )

	cmp	DWORD PTR _host+156, 0
	jne	SHORT $LN2@SV_Shutdow

; 671  : 		SV_ClearGameState();

	call	_SV_ClearGameState
$LN2@SV_Shutdow:

; 672  : 
; 673  : 	SV_FinalMessage( "", true );

	push	1
	push	OFFSET ??_C@_00CNPNBAHC@@
	call	_SV_FinalMessage
	add	esp, 8

; 674  : 	S_StopBackgroundTrack();

	call	_S_StopBackgroundTrack

; 675  : 	CL_StopPlayback(); // stop demo too

	call	_CL_StopPlayback

; 676  : 
; 677  : 	if( GameState->newGame )

	cmp	DWORD PTR _host+160, 0
	je	SHORT $LN3@SV_Shutdow

; 678  : 	{
; 679  : 		Host_EndGame( false, DEFAULT_ENDGAME_MESSAGE );

	push	OFFSET ??_C@_07IFACIOED@The?5End@
	push	0
	call	_Host_EndGame
	add	esp, 8

; 680  : 	}

	jmp	SHORT $LN1@SV_Shutdow
$LN3@SV_Shutdow:

; 681  : 	else
; 682  : 	{
; 683  : 		S_StopAllSounds( true );

	push	1
	call	_S_StopAllSounds
	add	esp, 4

; 684  : 		SV_DeactivateServer();

	call	_SV_DeactivateServer
$LN1@SV_Shutdow:

; 685  : 	}
; 686  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_ShutdownGame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_Initialized
_TEXT	SEGMENT
_SV_Initialized PROC					; COMDAT

; 882  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 883  : 	return svs.initialized;

	mov	eax, DWORD PTR _svs

; 884  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_Initialized ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_GetMaxClients
_TEXT	SEGMENT
_SV_GetMaxClients PROC					; COMDAT

; 887  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 888  : 	return svs.maxclients;

	mov	eax, DWORD PTR _svs+16

; 889  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_GetMaxClients ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\server\sv_init.c
;	COMDAT _SV_Active
_TEXT	SEGMENT
tv65 = -68						; size = 4
_SV_Active PROC						; COMDAT

; 877  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 878  : 	return (sv.state != ss_dead);

	cmp	DWORD PTR _sv, 0
	je	SHORT $LN3@SV_Active
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@SV_Active
$LN3@SV_Active:
	mov	DWORD PTR tv65[ebp], 0
$LN4@SV_Active:
	mov	eax, DWORD PTR tv65[ebp]

; 879  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SV_Active ENDP
_TEXT	ENDS
END
