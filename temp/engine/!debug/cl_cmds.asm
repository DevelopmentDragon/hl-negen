; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\cl_cmds.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
_DATA	ENDS
PUBLIC	_CL_ScreenShot_f
PUBLIC	_CL_SnapShot_f
PUBLIC	_CL_PlayCDTrack_f
PUBLIC	_CL_EnvShot_f
PUBLIC	_CL_SkyShot_f
PUBLIC	_CL_SaveShot_f
PUBLIC	_CL_LevelShot_f
PUBLIC	_CL_SetSky_f
PUBLIC	_SCR_Viewpos_f
PUBLIC	_SCR_TimeRefresh_f
PUBLIC	_CL_DeleteDemo_f
PUBLIC	_CL_PlayVideo_f
PUBLIC	_CL_ScreenshotGetName
PUBLIC	_CL_SnapshotGetName
PUBLIC	??_C@_0CB@FILKEHJL@Usage?3?5movie?5?$DMmoviename?$DO?5?$FLfull?$FN@ ; `string'
PUBLIC	??_C@_0EI@JNAHLJBH@Can?8t?5play?5movie?5while?5connecte@ ; `string'
PUBLIC	??_C@_0N@KGAPJLAD@media?1?$CFs?4avi@		; `string'
PUBLIC	??_C@_02LIELOMNJ@on@				; `string'
PUBLIC	??_C@_04GBHMDDO@play@				; `string'
PUBLIC	??_C@_04GKOOIABA@loop@				; `string'
PUBLIC	??_C@_03PCBNCGFH@pos@				; `string'
PUBLIC	??_C@_06HOKAPKFF@onloop@			; `string'
PUBLIC	??_C@_08IHECAEFP@restored@			; `string'
PUBLIC	??_C@_06LPGBNFFB@onLoop@			; `string'
PUBLIC	??_C@_05PDJBBECF@pause@				; `string'
PUBLIC	??_C@_06PLELHCEK@resume@			; `string'
PUBLIC	??_C@_04PEGFANN@stop@				; `string'
PUBLIC	??_C@_03MCADLMAF@off@				; `string'
PUBLIC	??_C@_04NIDJFNBE@info@				; `string'
PUBLIC	??_C@_0BI@ENGHJEMN@?$CFs?3?5unknown?5command?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0CH@EGIADOFJ@?$FO1Error?3?$FO7?5unable?5to?5write?5scre@ ; `string'
PUBLIC	??_C@_0BN@FHOKJAOI@scrshots?1?$CFs_shot?$CFi?$CFi?$CFi?$CFi?4bmp@ ; `string'
PUBLIC	??_C@_0CF@MPMGHECI@?$FO1Error?3?$FO7?5unable?5to?5write?5snap@ ; `string'
PUBLIC	??_C@_0BD@MEFNINLM@?4?4?1?$CFs_?$CFi?$CFi?$CFi?$CFi?4bmp@ ; `string'
PUBLIC	??_C@_0BB@JGGBAEGJ@overviews?1?$CFs?4bmp@	; `string'
PUBLIC	??_C@_0BL@FGNCNBEF@Usage?3?5envshot?5?$DMshotname?$DO?6@ ; `string'
PUBLIC	??_C@_0L@FGEKBPJ@gfx?1env?1?$CFs@		; `string'
PUBLIC	??_C@_0BL@PKMCMOGH@Usage?3?5skyshot?5?$DMshotname?$DO?6@ ; `string'
PUBLIC	??_C@_04CELKIKPL@16x9@				; `string'
PUBLIC	??_C@_03PHLBDMN@4x3@				; `string'
PUBLIC	??_C@_0BF@PKFPINK@levelshots?1?$CFs_?$CFs?4bmp@	; `string'
PUBLIC	??_C@_06CGFKKEMF@?$CFs?4dem@			; `string'
PUBLIC	??_C@_0BM@OENJEOAH@Usage?3?5saveshot?5?$DMsavename?$DO?6@ ; `string'
PUBLIC	??_C@_05HFINLBCI@save?1@			; `string'
PUBLIC	??_C@_08GDJCFMPC@?$CFs?$CFs?4bmp@		; `string'
PUBLIC	??_C@_0BI@GEGNLCEM@Usage?3?5killdemo?5?$DMname?$DO?6@ ; `string'
PUBLIC	??_C@_0BN@EIPHJELI@Can?8t?5delete?5?$CFs?5?9?5recording?6@ ; `string'
PUBLIC	??_C@_0BJ@MHFIAPDK@Usage?3?5skyname?5?$DMskybox?$DO?6@ ; `string'
PUBLIC	??_C@_0BF@JDOPKDD@?$CFf?5seconds?5?$CI?$CFf?5fps?$CJ?6@ ; `string'
PUBLIC	??_C@_0BC@ECABBKBL@org?5?$CI?5?$CFg?5?$CFg?5?$CFg?5?$CJ?6@ ; `string'
PUBLIC	??_C@_0BC@NJGFPJLO@ang?5?$CI?5?$CFg?5?$CFg?5?$CFg?5?$CJ?6@ ; `string'
PUBLIC	__real@4060000000000000
PUBLIC	__real@4076800000000000
EXTRN	__imp__atol:PROC
EXTRN	_Sys_DoubleTime:PROC
EXTRN	_Cmd_Argc:PROC
EXTRN	_Cmd_Argv:PROC
EXTRN	_Q_strncpy:PROC
EXTRN	_Q_isdigit:PROC
EXTRN	_Q_atoi:PROC
EXTRN	_Q_strnicmp:PROC
EXTRN	_Q_strncmp:PROC
EXTRN	_Q_snprintf:PROC
EXTRN	_Q_sprintf:PROC
EXTRN	_va:PROC
EXTRN	_FS_AllowDirectPaths:PROC
EXTRN	_FS_FileTime:PROC
EXTRN	_FS_FileExists:PROC
EXTRN	_FS_Delete:PROC
EXTRN	_Con_Printf:PROC
EXTRN	_S_StopBackgroundTrack:PROC
EXTRN	_CL_IsDevOverviewMode:PROC
EXTRN	_S_StartBackgroundTrack:PROC
EXTRN	_S_StreamSetPause:PROC
EXTRN	_SCR_PlayCinematic:PROC
EXTRN	_R_RenderScene:PROC
EXTRN	_R_BeginFrame:PROC
EXTRN	_R_EndFrame:PROC
EXTRN	_R_SetupSky:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_cl:BYTE
EXTRN	_cls:BYTE
EXTRN	_clgame:BYTE
EXTRN	_RI:BYTE
EXTRN	_glState:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?paused@?1??CL_PlayCDTrack_f@@9@9 DD 01H DUP (?)	; `CL_PlayCDTrack_f'::`2'::paused
?looped@?1??CL_PlayCDTrack_f@@9@9 DD 01H DUP (?)	; `CL_PlayCDTrack_f'::`2'::looped
_BSS	ENDS
;	COMDAT __real@4076800000000000
CONST	SEGMENT
__real@4076800000000000 DQ 04076800000000000r	; 360
CONST	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
;	COMDAT ??_C@_0BC@NJGFPJLO@ang?5?$CI?5?$CFg?5?$CFg?5?$CFg?5?$CJ?6@
CONST	SEGMENT
??_C@_0BC@NJGFPJLO@ang?5?$CI?5?$CFg?5?$CFg?5?$CFg?5?$CJ?6@ DB 'ang ( %g %'
	DB	'g %g )', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ECABBKBL@org?5?$CI?5?$CFg?5?$CFg?5?$CFg?5?$CJ?6@
CONST	SEGMENT
??_C@_0BC@ECABBKBL@org?5?$CI?5?$CFg?5?$CFg?5?$CFg?5?$CJ?6@ DB 'org ( %g %'
	DB	'g %g )', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JDOPKDD@?$CFf?5seconds?5?$CI?$CFf?5fps?$CJ?6@
CONST	SEGMENT
??_C@_0BF@JDOPKDD@?$CFf?5seconds?5?$CI?$CFf?5fps?$CJ?6@ DB '%f seconds (%'
	DB	'f fps)', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MHFIAPDK@Usage?3?5skyname?5?$DMskybox?$DO?6@
CONST	SEGMENT
??_C@_0BJ@MHFIAPDK@Usage?3?5skyname?5?$DMskybox?$DO?6@ DB 'Usage: skyname'
	DB	' <skybox>', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EIPHJELI@Can?8t?5delete?5?$CFs?5?9?5recording?6@
CONST	SEGMENT
??_C@_0BN@EIPHJELI@Can?8t?5delete?5?$CFs?5?9?5recording?6@ DB 'Can''t del'
	DB	'ete %s - recording', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GEGNLCEM@Usage?3?5killdemo?5?$DMname?$DO?6@
CONST	SEGMENT
??_C@_0BI@GEGNLCEM@Usage?3?5killdemo?5?$DMname?$DO?6@ DB 'Usage: killdemo'
	DB	' <name>', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDJCFMPC@?$CFs?$CFs?4bmp@
CONST	SEGMENT
??_C@_08GDJCFMPC@?$CFs?$CFs?4bmp@ DB '%s%s.bmp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFINLBCI@save?1@
CONST	SEGMENT
??_C@_05HFINLBCI@save?1@ DB 'save/', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OENJEOAH@Usage?3?5saveshot?5?$DMsavename?$DO?6@
CONST	SEGMENT
??_C@_0BM@OENJEOAH@Usage?3?5saveshot?5?$DMsavename?$DO?6@ DB 'Usage: save'
	DB	'shot <savename>', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CGFKKEMF@?$CFs?4dem@
CONST	SEGMENT
??_C@_06CGFKKEMF@?$CFs?4dem@ DB '%s.dem', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PKFPINK@levelshots?1?$CFs_?$CFs?4bmp@
CONST	SEGMENT
??_C@_0BF@PKFPINK@levelshots?1?$CFs_?$CFs?4bmp@ DB 'levelshots/%s_%s.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PHLBDMN@4x3@
CONST	SEGMENT
??_C@_03PHLBDMN@4x3@ DB '4x3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CELKIKPL@16x9@
CONST	SEGMENT
??_C@_04CELKIKPL@16x9@ DB '16x9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PKMCMOGH@Usage?3?5skyshot?5?$DMshotname?$DO?6@
CONST	SEGMENT
??_C@_0BL@PKMCMOGH@Usage?3?5skyshot?5?$DMshotname?$DO?6@ DB 'Usage: skysh'
	DB	'ot <shotname>', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FGEKBPJ@gfx?1env?1?$CFs@
CONST	SEGMENT
??_C@_0L@FGEKBPJ@gfx?1env?1?$CFs@ DB 'gfx/env/%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FGNCNBEF@Usage?3?5envshot?5?$DMshotname?$DO?6@
CONST	SEGMENT
??_C@_0BL@FGNCNBEF@Usage?3?5envshot?5?$DMshotname?$DO?6@ DB 'Usage: envsh'
	DB	'ot <shotname>', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JGGBAEGJ@overviews?1?$CFs?4bmp@
CONST	SEGMENT
??_C@_0BB@JGGBAEGJ@overviews?1?$CFs?4bmp@ DB 'overviews/%s.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MEFNINLM@?4?4?1?$CFs_?$CFi?$CFi?$CFi?$CFi?4bmp@
CONST	SEGMENT
??_C@_0BD@MEFNINLM@?4?4?1?$CFs_?$CFi?$CFi?$CFi?$CFi?4bmp@ DB '../%s_%i%i%'
	DB	'i%i.bmp', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MPMGHECI@?$FO1Error?3?$FO7?5unable?5to?5write?5snap@
CONST	SEGMENT
??_C@_0CF@MPMGHECI@?$FO1Error?3?$FO7?5unable?5to?5write?5snap@ DB '^1Erro'
	DB	'r:^7 unable to write snapshot', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FHOKJAOI@scrshots?1?$CFs_shot?$CFi?$CFi?$CFi?$CFi?4bmp@
CONST	SEGMENT
??_C@_0BN@FHOKJAOI@scrshots?1?$CFs_shot?$CFi?$CFi?$CFi?$CFi?4bmp@ DB 'scr'
	DB	'shots/%s_shot%i%i%i%i.bmp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EGIADOFJ@?$FO1Error?3?$FO7?5unable?5to?5write?5scre@
CONST	SEGMENT
??_C@_0CH@EGIADOFJ@?$FO1Error?3?$FO7?5unable?5to?5write?5scre@ DB '^1Erro'
	DB	'r:^7 unable to write screenshot', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ENGHJEMN@?$CFs?3?5unknown?5command?5?$CFs?6@
CONST	SEGMENT
??_C@_0BI@ENGHJEMN@?$CFs?3?5unknown?5command?5?$CFs?6@ DB '%s: unknown co'
	DB	'mmand %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04NIDJFNBE@info@
CONST	SEGMENT
??_C@_04NIDJFNBE@info@ DB 'info', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MCADLMAF@off@
CONST	SEGMENT
??_C@_03MCADLMAF@off@ DB 'off', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PEGFANN@stop@
CONST	SEGMENT
??_C@_04PEGFANN@stop@ DB 'stop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06PLELHCEK@resume@
CONST	SEGMENT
??_C@_06PLELHCEK@resume@ DB 'resume', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause@
CONST	SEGMENT
??_C@_05PDJBBECF@pause@ DB 'pause', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LPGBNFFB@onLoop@
CONST	SEGMENT
??_C@_06LPGBNFFB@onLoop@ DB 'onLoop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IHECAEFP@restored@
CONST	SEGMENT
??_C@_08IHECAEFP@restored@ DB 'restored', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOKAPKFF@onloop@
CONST	SEGMENT
??_C@_06HOKAPKFF@onloop@ DB 'onloop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PCBNCGFH@pos@
CONST	SEGMENT
??_C@_03PCBNCGFH@pos@ DB 'pos', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GKOOIABA@loop@
CONST	SEGMENT
??_C@_04GKOOIABA@loop@ DB 'loop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBHMDDO@play@
CONST	SEGMENT
??_C@_04GBHMDDO@play@ DB 'play', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LIELOMNJ@on@
CONST	SEGMENT
??_C@_02LIELOMNJ@on@ DB 'on', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?enabled@?1??CL_PlayCDTrack_f@@9@9 DD 01H		; `CL_PlayCDTrack_f'::`2'::enabled
_DATA	ENDS
;	COMDAT ??_C@_0N@KGAPJLAD@media?1?$CFs?4avi@
CONST	SEGMENT
??_C@_0N@KGAPJLAD@media?1?$CFs?4avi@ DB 'media/%s.avi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@JNAHLJBH@Can?8t?5play?5movie?5while?5connecte@
CONST	SEGMENT
??_C@_0EI@JNAHLJBH@Can?8t?5play?5movie?5while?5connecte@ DB 'Can''t play '
	DB	'movie while connected to a server.', 0aH, 'Please disconnect '
	DB	'first.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FILKEHJL@Usage?3?5movie?5?$DMmoviename?$DO?5?$FLfull?$FN@
CONST	SEGMENT
??_C@_0CB@FILKEHJL@Usage?3?5movie?5?$DMmoviename?$DO?5?$FLfull?$FN@ DB 'U'
	DB	'sage: movie <moviename> [full]', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	0bbH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	0154H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	0e6H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	010H
	DB	0cfH
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _CL_SnapshotGetName
_TEXT	SEGMENT
_d$ = -16						; size = 4
_c$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_lastnum$ = 8						; size = 4
_filename$ = 12						; size = 4
_CL_SnapshotGetName PROC				; COMDAT

; 238  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 239  : 	int	a, b, c, d;
; 240  : 
; 241  : 	if( lastnum < 0 || lastnum > 9999 )

	cmp	DWORD PTR _lastnum$[ebp], 0
	jl	SHORT $LN3@CL_Snapsho
	cmp	DWORD PTR _lastnum$[ebp], 9999		; 0000270fH
	jle	SHORT $LN2@CL_Snapsho
$LN3@CL_Snapsho:

; 242  : 	{
; 243  : 		Con_Printf( S_ERROR "unable to write snapshot\n" );

	push	OFFSET ??_C@_0CF@MPMGHECI@?$FO1Error?3?$FO7?5unable?5to?5write?5snap@
	call	_Con_Printf
	add	esp, 4

; 244  : 		FS_AllowDirectPaths( false );

	push	0
	call	_FS_AllowDirectPaths
	add	esp, 4

; 245  : 		return false;

	xor	eax, eax
	jmp	$LN1@CL_Snapsho
$LN2@CL_Snapsho:

; 246  : 	}
; 247  : 
; 248  : 	a = lastnum / 1000;

	mov	eax, DWORD PTR _lastnum$[ebp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	DWORD PTR _a$[ebp], eax

; 249  : 	lastnum -= a * 1000;

	imul	eax, DWORD PTR _a$[ebp], 1000
	mov	ecx, DWORD PTR _lastnum$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _lastnum$[ebp], ecx

; 250  : 	b = lastnum / 100;

	mov	eax, DWORD PTR _lastnum$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _b$[ebp], eax

; 251  : 	lastnum -= b * 100;

	imul	eax, DWORD PTR _b$[ebp], 100
	mov	ecx, DWORD PTR _lastnum$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _lastnum$[ebp], ecx

; 252  : 	c = lastnum / 10;

	mov	eax, DWORD PTR _lastnum$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _c$[ebp], eax

; 253  : 	lastnum -= c * 10;

	imul	eax, DWORD PTR _c$[ebp], 10
	mov	ecx, DWORD PTR _lastnum$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _lastnum$[ebp], ecx

; 254  : 	d = lastnum;

	mov	eax, DWORD PTR _lastnum$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 255  : 
; 256  : 	Q_sprintf( filename, "../%s_%i%i%i%i.bmp", clgame.mapname, a, b, c, d );

	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	OFFSET _clgame+228
	push	OFFSET ??_C@_0BD@MEFNINLM@?4?4?1?$CFs_?$CFi?$CFi?$CFi?$CFi?4bmp@
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_Q_sprintf
	add	esp, 28					; 0000001cH

; 257  : 
; 258  : 	return true;

	mov	eax, 1
$LN1@CL_Snapsho:

; 259  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_SnapshotGetName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _CL_ScreenshotGetName
_TEXT	SEGMENT
_d$ = -16						; size = 4
_c$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_lastnum$ = 8						; size = 4
_filename$ = 12						; size = 4
_CL_ScreenshotGetName PROC				; COMDAT

; 210  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 211  : 	int	a, b, c, d;
; 212  : 
; 213  : 	if( lastnum < 0 || lastnum > 9999 )

	cmp	DWORD PTR _lastnum$[ebp], 0
	jl	SHORT $LN3@CL_Screens
	cmp	DWORD PTR _lastnum$[ebp], 9999		; 0000270fH
	jle	SHORT $LN2@CL_Screens
$LN3@CL_Screens:

; 214  : 	{
; 215  : 		Con_Printf( S_ERROR "unable to write screenshot\n" );

	push	OFFSET ??_C@_0CH@EGIADOFJ@?$FO1Error?3?$FO7?5unable?5to?5write?5scre@
	call	_Con_Printf
	add	esp, 4

; 216  : 		return false;

	xor	eax, eax
	jmp	$LN1@CL_Screens
$LN2@CL_Screens:

; 217  : 	}
; 218  : 
; 219  : 	a = lastnum / 1000;

	mov	eax, DWORD PTR _lastnum$[ebp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	DWORD PTR _a$[ebp], eax

; 220  : 	lastnum -= a * 1000;

	imul	eax, DWORD PTR _a$[ebp], 1000
	mov	ecx, DWORD PTR _lastnum$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _lastnum$[ebp], ecx

; 221  : 	b = lastnum / 100;

	mov	eax, DWORD PTR _lastnum$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _b$[ebp], eax

; 222  : 	lastnum -= b * 100;

	imul	eax, DWORD PTR _b$[ebp], 100
	mov	ecx, DWORD PTR _lastnum$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _lastnum$[ebp], ecx

; 223  : 	c = lastnum / 10;

	mov	eax, DWORD PTR _lastnum$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _c$[ebp], eax

; 224  : 	lastnum -= c * 10;

	imul	eax, DWORD PTR _c$[ebp], 10
	mov	ecx, DWORD PTR _lastnum$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _lastnum$[ebp], ecx

; 225  : 	d = lastnum;

	mov	eax, DWORD PTR _lastnum$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 226  : 
; 227  : 	Q_sprintf( filename, "scrshots/%s_shot%i%i%i%i.bmp", clgame.mapname, a, b, c, d );

	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	OFFSET _clgame+228
	push	OFFSET ??_C@_0BN@FHOKJAOI@scrshots?1?$CFs_shot?$CFi?$CFi?$CFi?$CFi?4bmp@
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_Q_sprintf
	add	esp, 28					; 0000001cH

; 228  : 
; 229  : 	return true;

	mov	eax, 1
$LN1@CL_Screens:

; 230  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_ScreenshotGetName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _CL_PlayVideo_f
_TEXT	SEGMENT
tv72 = -328						; size = 4
_path$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_CL_PlayVideo_f PROC					; COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 29   : 	string	path;
; 30   : 
; 31   : 	if( Cmd_Argc() != 2 && Cmd_Argc() != 3 )

	call	_Cmd_Argc
	cmp	eax, 2
	je	SHORT $LN4@CL_PlayVid
	call	_Cmd_Argc
	cmp	eax, 3
	je	SHORT $LN4@CL_PlayVid

; 32   : 	{
; 33   : 		Con_Printf( S_USAGE "movie <moviename> [full]\n" );

	push	OFFSET ??_C@_0CB@FILKEHJL@Usage?3?5movie?5?$DMmoviename?$DO?5?$FLfull?$FN@
	call	_Con_Printf
	add	esp, 4

; 34   : 		return;

	jmp	SHORT $LN1@CL_PlayVid
$LN4@CL_PlayVid:

; 35   : 	}
; 36   : 
; 37   : 	if( cls.state == ca_active )

	cmp	DWORD PTR _cls, 4
	jne	SHORT $LN5@CL_PlayVid

; 38   : 	{
; 39   : 		Con_Printf( "Can't play movie while connected to a server.\nPlease disconnect first.\n" );

	push	OFFSET ??_C@_0EI@JNAHLJBH@Can?8t?5play?5movie?5while?5connecte@
	call	_Con_Printf
	add	esp, 4

; 40   : 		return;

	jmp	SHORT $LN1@CL_PlayVid
$LN5@CL_PlayVid:

; 41   : 	}
; 42   : 
; 43   : 	switch( Cmd_Argc( ))

	call	_Cmd_Argc
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 2
	je	SHORT $LN6@CL_PlayVid
	cmp	DWORD PTR tv72[ebp], 3
	je	SHORT $LN7@CL_PlayVid
	jmp	SHORT $LN1@CL_PlayVid
$LN6@CL_PlayVid:

; 44   : 	{
; 45   : 	case 2:	// simple user version
; 46   : 		Q_snprintf( path, sizeof( path ), "media/%s.avi", Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0N@KGAPJLAD@media?1?$CFs?4avi@
	push	256					; 00000100H
	lea	eax, DWORD PTR _path$[ebp]
	push	eax
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 47   : 		SCR_PlayCinematic( path );

	lea	eax, DWORD PTR _path$[ebp]
	push	eax
	call	_SCR_PlayCinematic
	add	esp, 4

; 48   : 		break;

	jmp	SHORT $LN1@CL_PlayVid
$LN7@CL_PlayVid:

; 49   : 	case 3:	// sequenced cinematics used this
; 50   : 		SCR_PlayCinematic( Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_SCR_PlayCinematic
	add	esp, 4
$LN1@CL_PlayVid:

; 51   : 		break;
; 52   : 	}
; 53   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_PlayVideo_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _CL_DeleteDemo_f
_TEXT	SEGMENT
_CL_DeleteDemo_f PROC					; COMDAT

; 455  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 456  : 	if( Cmd_Argc() != 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	je	SHORT $LN2@CL_DeleteD

; 457  : 	{
; 458  : 		Con_Printf( S_USAGE "killdemo <name>\n" );

	push	OFFSET ??_C@_0BI@GEGNLCEM@Usage?3?5killdemo?5?$DMname?$DO?6@
	call	_Con_Printf
	add	esp, 4

; 459  : 		return;

	jmp	SHORT $LN1@CL_DeleteD
$LN2@CL_DeleteD:

; 460  : 	}
; 461  : 
; 462  : 	if( cls.demorecording && !Q_stricmp( cls.demoname, Cmd_Argv( 1 )))

	cmp	DWORD PTR _cls+300824, 0
	je	SHORT $LN3@CL_DeleteD
	push	99999					; 0001869fH
	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET _cls+300840
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@CL_DeleteD

; 463  : 	{
; 464  : 		Con_Printf( "Can't delete %s - recording\n", Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0BN@EIPHJELI@Can?8t?5delete?5?$CFs?5?9?5recording?6@
	call	_Con_Printf
	add	esp, 8

; 465  : 		return;

	jmp	SHORT $LN1@CL_DeleteD
$LN3@CL_DeleteD:

; 466  : 	}
; 467  : 
; 468  : 	// delete demo
; 469  : 	FS_Delete( va( "%s.dem", Cmd_Argv( 1 )));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_06CGFKKEMF@?$CFs?4dem@
	call	_va
	add	esp, 8
	push	eax
	call	_FS_Delete
	add	esp, 4
$LN1@CL_DeleteD:

; 470  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_DeleteDemo_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _SCR_TimeRefresh_f
_TEXT	SEGMENT
_time$ = -28						; size = 8
_stop$ = -20						; size = 8
_start$ = -12						; size = 8
_i$ = -4						; size = 4
_SCR_TimeRefresh_f PROC					; COMDAT

; 498  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 499  : 	int	i;
; 500  : 	double	start, stop;
; 501  : 	double	time;
; 502  : 
; 503  : 	if( cls.state != ca_active )

	cmp	DWORD PTR _cls, 4
	je	SHORT $LN8@SCR_TimeRe

; 504  : 		return;

	jmp	$LN1@SCR_TimeRe
$LN8@SCR_TimeRe:

; 505  : 
; 506  : 	start = Sys_DoubleTime();

	call	_Sys_DoubleTime
	fstp	QWORD PTR _start$[ebp]

; 507  : 
; 508  : 	// run without page flipping like GoldSrc
; 509  : 	if( Cmd_Argc() == 1 )

	call	_Cmd_Argc
	cmp	eax, 1
	jne	SHORT $LN9@SCR_TimeRe

; 510  : 	{	
; 511  : 		pglDrawBuffer( GL_FRONT );

	push	1028					; 00000404H
	call	DWORD PTR _pglDrawBuffer

; 512  : 		for( i = 0; i < 128; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SCR_TimeRe
$LN2@SCR_TimeRe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SCR_TimeRe:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jge	SHORT $LN3@SCR_TimeRe

; 513  : 		{
; 514  : 			RI.viewangles[1] = i / 128.0 * 360.0f;

	cvtsi2sd xmm0, DWORD PTR _i$[ebp]
	divsd	xmm0, QWORD PTR __real@4060000000000000
	mulsd	xmm0, QWORD PTR __real@4076800000000000
	mov	eax, 4
	shl	eax, 0
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _RI[eax+212], xmm0

; 515  : 			R_RenderScene();

	call	_R_RenderScene

; 516  : 		}

	jmp	SHORT $LN2@SCR_TimeRe
$LN3@SCR_TimeRe:

; 517  : 		pglFinish();

	call	DWORD PTR _pglFinish

; 518  : 		R_EndFrame();

	call	_R_EndFrame

; 519  : 	}

	jmp	SHORT $LN6@SCR_TimeRe
$LN9@SCR_TimeRe:

; 520  : 	else
; 521  : 	{
; 522  : 		for( i = 0; i < 128; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@SCR_TimeRe
$LN5@SCR_TimeRe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@SCR_TimeRe:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jge	SHORT $LN6@SCR_TimeRe

; 523  : 		{
; 524  : 			R_BeginFrame( true );

	push	1
	call	_R_BeginFrame
	add	esp, 4

; 525  : 			RI.viewangles[1] = i / 128.0 * 360.0f;

	cvtsi2sd xmm0, DWORD PTR _i$[ebp]
	divsd	xmm0, QWORD PTR __real@4060000000000000
	mulsd	xmm0, QWORD PTR __real@4076800000000000
	mov	eax, 4
	shl	eax, 0
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _RI[eax+212], xmm0

; 526  : 			R_RenderScene();

	call	_R_RenderScene

; 527  : 			R_EndFrame();

	call	_R_EndFrame

; 528  : 		}

	jmp	SHORT $LN5@SCR_TimeRe
$LN6@SCR_TimeRe:

; 529  : 	}
; 530  : 
; 531  : 	stop = Sys_DoubleTime ();

	call	_Sys_DoubleTime
	fstp	QWORD PTR _stop$[ebp]

; 532  : 	time = (stop - start);

	movsd	xmm0, QWORD PTR _stop$[ebp]
	subsd	xmm0, QWORD PTR _start$[ebp]
	movsd	QWORD PTR _time$[ebp], xmm0

; 533  : 	Con_Printf( "%f seconds (%f fps)\n", time, 128 / time );

	movsd	xmm0, QWORD PTR __real@4060000000000000
	divsd	xmm0, QWORD PTR _time$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _time$[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BF@JDOPKDD@?$CFf?5seconds?5?$CI?$CFf?5fps?$CJ?6@
	call	_Con_Printf
	add	esp, 20					; 00000014H
$LN1@SCR_TimeRe:

; 534  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_TimeRefresh_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _SCR_Viewpos_f
_TEXT	SEGMENT
_SCR_Viewpos_f PROC					; COMDAT

; 544  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 545  : 	Con_Printf( "org ( %g %g %g )\n", RI.vieworg[0], RI.vieworg[1], RI.vieworg[2] );

	mov	eax, 4
	shl	eax, 1
	cvtss2sd xmm0, DWORD PTR _RI[eax+200]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	cvtss2sd xmm0, DWORD PTR _RI[ecx+200]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	cvtss2sd xmm0, DWORD PTR _RI[eax+200]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BC@ECABBKBL@org?5?$CI?5?$CFg?5?$CFg?5?$CFg?5?$CJ?6@
	call	_Con_Printf
	add	esp, 28					; 0000001cH

; 546  : 	Con_Printf( "ang ( %g %g %g )\n", RI.viewangles[0], RI.viewangles[1], RI.viewangles[2] );

	mov	eax, 4
	shl	eax, 1
	cvtss2sd xmm0, DWORD PTR _RI[eax+212]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	cvtss2sd xmm0, DWORD PTR _RI[ecx+212]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	cvtss2sd xmm0, DWORD PTR _RI[eax+212]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BC@NJGFPJLO@ang?5?$CI?5?$CFg?5?$CFg?5?$CFg?5?$CJ?6@
	call	_Con_Printf
	add	esp, 28					; 0000001cH

; 547  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SCR_Viewpos_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _CL_SetSky_f
_TEXT	SEGMENT
_CL_SetSky_f PROC					; COMDAT

; 480  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 481  : 	if( Cmd_Argc() < 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	jae	SHORT $LN2@CL_SetSky_

; 482  : 	{
; 483  : 		Con_Printf( S_USAGE "skyname <skybox>\n" );

	push	OFFSET ??_C@_0BJ@MHFIAPDK@Usage?3?5skyname?5?$DMskybox?$DO?6@
	call	_Con_Printf
	add	esp, 4

; 484  : 		return;

	jmp	SHORT $LN1@CL_SetSky_
$LN2@CL_SetSky_:

; 485  : 	}
; 486  : 
; 487  : 	R_SetupSky( Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_R_SetupSky
	add	esp, 4
$LN1@CL_SetSky_:

; 488  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_SetSky_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _CL_LevelShot_f
_TEXT	SEGMENT
tv85 = -336						; size = 4
tv69 = -336						; size = 4
_filename$ = -268					; size = 256
_ft2$ = -12						; size = 4
_ft1$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_CL_LevelShot_f PROC					; COMDAT

; 397  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 398  : 	size_t	ft1, ft2;
; 399  : 	string	filename;
; 400  : 
; 401  : 	if( cls.scrshot_request != scrshot_plaque ) return;

	cmp	DWORD PTR _cls+296304, 3
	je	SHORT $LN2@CL_LevelSh
	jmp	$LN1@CL_LevelSh
$LN2@CL_LevelSh:

; 402  : 	cls.scrshot_request = scrshot_inactive;

	mov	DWORD PTR _cls+296304, 0

; 403  : 
; 404  : 	// check for exist
; 405  : 	if( cls.demoplayback && ( cls.demonum != -1 ))

	cmp	DWORD PTR _cls+300828, 0
	je	$LN3@CL_LevelSh
	cmp	DWORD PTR _cls+296712, -1
	je	$LN3@CL_LevelSh

; 406  : 	{
; 407  : 		Q_sprintf( cls.shotname, "levelshots/%s_%s.bmp", cls.demoname, glState.wideScreen ? "16x9" : "4x3" );

	cmp	DWORD PTR _glState+12, 0
	je	SHORT $LN9@CL_LevelSh
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_04CELKIKPL@16x9@
	jmp	SHORT $LN10@CL_LevelSh
$LN9@CL_LevelSh:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_03PHLBDMN@4x3@
$LN10@CL_LevelSh:
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	push	OFFSET _cls+300840
	push	OFFSET ??_C@_0BF@PKFPINK@levelshots?1?$CFs_?$CFs?4bmp@
	push	OFFSET _cls+296324
	call	_Q_sprintf
	add	esp, 16					; 00000010H

; 408  : 		Q_snprintf( filename, sizeof( filename ), "%s.dem", cls.demoname );

	push	OFFSET _cls+300840
	push	OFFSET ??_C@_06CGFKKEMF@?$CFs?4dem@
	push	256					; 00000100H
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 409  : 
; 410  : 		// make sure what levelshot is newer than demo
; 411  : 		ft1 = FS_FileTime( filename, false );

	push	0
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_FS_FileTime
	add	esp, 8
	mov	DWORD PTR _ft1$[ebp], eax

; 412  : 		ft2 = FS_FileTime( cls.shotname, true );

	push	1
	push	OFFSET _cls+296324
	call	_FS_FileTime
	add	esp, 8
	mov	DWORD PTR _ft2$[ebp], eax

; 413  : 	}

	jmp	SHORT $LN4@CL_LevelSh
$LN3@CL_LevelSh:

; 414  : 	else
; 415  : 	{
; 416  : 		Q_sprintf( cls.shotname, "levelshots/%s_%s.bmp", clgame.mapname, glState.wideScreen ? "16x9" : "4x3" );

	cmp	DWORD PTR _glState+12, 0
	je	SHORT $LN11@CL_LevelSh
	mov	DWORD PTR tv85[ebp], OFFSET ??_C@_04CELKIKPL@16x9@
	jmp	SHORT $LN12@CL_LevelSh
$LN11@CL_LevelSh:
	mov	DWORD PTR tv85[ebp], OFFSET ??_C@_03PHLBDMN@4x3@
$LN12@CL_LevelSh:
	mov	eax, DWORD PTR tv85[ebp]
	push	eax
	push	OFFSET _clgame+228
	push	OFFSET ??_C@_0BF@PKFPINK@levelshots?1?$CFs_?$CFs?4bmp@
	push	OFFSET _cls+296324
	call	_Q_sprintf
	add	esp, 16					; 00000010H

; 417  : 
; 418  : 		// make sure what levelshot is newer than bsp
; 419  : 		ft1 = FS_FileTime( cl.worldmodel->name, false );

	push	0
	mov	eax, DWORD PTR _cl+4579004
	push	eax
	call	_FS_FileTime
	add	esp, 8
	mov	DWORD PTR _ft1$[ebp], eax

; 420  : 		ft2 = FS_FileTime( cls.shotname, true );

	push	1
	push	OFFSET _cls+296324
	call	_FS_FileTime
	add	esp, 8
	mov	DWORD PTR _ft2$[ebp], eax
$LN4@CL_LevelSh:

; 421  : 	}
; 422  : 
; 423  : 	// missing levelshot or level never than levelshot
; 424  : 	if( ft2 == -1 || ft1 > ft2 )

	cmp	DWORD PTR _ft2$[ebp], -1
	je	SHORT $LN7@CL_LevelSh
	mov	eax, DWORD PTR _ft1$[ebp]
	cmp	eax, DWORD PTR _ft2$[ebp]
	jbe	SHORT $LN5@CL_LevelSh
$LN7@CL_LevelSh:

; 425  : 		cls.scrshot_action = scrshot_plaque;	// build new frame for levelshot

	mov	DWORD PTR _cls+296308, 3
	jmp	SHORT $LN1@CL_LevelSh
$LN5@CL_LevelSh:

; 426  : 	else cls.scrshot_action = scrshot_inactive;	// disable - not needs

	mov	DWORD PTR _cls+296308, 0
$LN1@CL_LevelSh:

; 427  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_LevelShot_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _CL_SaveShot_f
_TEXT	SEGMENT
_CL_SaveShot_f PROC					; COMDAT

; 437  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 438  : 	if( Cmd_Argc() < 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	jae	SHORT $LN2@CL_SaveSho

; 439  : 	{
; 440  : 		Con_Printf( S_USAGE "saveshot <savename>\n" );

	push	OFFSET ??_C@_0BM@OENJEOAH@Usage?3?5saveshot?5?$DMsavename?$DO?6@
	call	_Con_Printf
	add	esp, 4

; 441  : 		return;

	jmp	SHORT $LN1@CL_SaveSho
$LN2@CL_SaveSho:

; 442  : 	}
; 443  : 
; 444  : 	Q_sprintf( cls.shotname, "%s%s.bmp", DEFAULT_SAVE_DIRECTORY, Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_05HFINLBCI@save?1@
	push	OFFSET ??_C@_08GDJCFMPC@?$CFs?$CFs?4bmp@
	push	OFFSET _cls+296324
	call	_Q_sprintf
	add	esp, 16					; 00000010H

; 445  : 	cls.scrshot_action = scrshot_savegame;	// build new frame for saveshot

	mov	DWORD PTR _cls+296308, 4
$LN1@CL_SaveSho:

; 446  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_SaveShot_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _CL_SkyShot_f
_TEXT	SEGMENT
_CL_SkyShot_f PROC					; COMDAT

; 376  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 377  : 	if( Cmd_Argc() < 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	jae	SHORT $LN2@CL_SkyShot

; 378  : 	{
; 379  : 		Con_Printf( S_USAGE "skyshot <shotname>\n" );

	push	OFFSET ??_C@_0BL@PKMCMOGH@Usage?3?5skyshot?5?$DMshotname?$DO?6@
	call	_Con_Printf
	add	esp, 4

; 380  : 		return;

	jmp	SHORT $LN1@CL_SkyShot
$LN2@CL_SkyShot:

; 381  : 	}
; 382  : 
; 383  : 	Q_sprintf( cls.shotname, "gfx/env/%s", Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0L@FGEKBPJ@gfx?1env?1?$CFs@
	push	OFFSET _cls+296324
	call	_Q_sprintf
	add	esp, 12					; 0000000cH

; 384  : 	cls.scrshot_action = scrshot_skyshot;	// build new frame for skyshot

	mov	DWORD PTR _cls+296308, 6

; 385  : 	cls.envshot_vieworg = NULL; // no custom view

	mov	DWORD PTR _cls+296312, 0

; 386  : 	cls.envshot_viewsize = 0;

	mov	DWORD PTR _cls+296316, 0
$LN1@CL_SkyShot:

; 387  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_SkyShot_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _CL_EnvShot_f
_TEXT	SEGMENT
_CL_EnvShot_f PROC					; COMDAT

; 355  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 356  : 	if( Cmd_Argc() < 2 )

	call	_Cmd_Argc
	cmp	eax, 2
	jae	SHORT $LN2@CL_EnvShot

; 357  : 	{
; 358  : 		Con_Printf( S_USAGE "envshot <shotname>\n" );

	push	OFFSET ??_C@_0BL@FGNCNBEF@Usage?3?5envshot?5?$DMshotname?$DO?6@
	call	_Con_Printf
	add	esp, 4

; 359  : 		return;

	jmp	SHORT $LN1@CL_EnvShot
$LN2@CL_EnvShot:

; 360  : 	}
; 361  : 
; 362  : 	Q_sprintf( cls.shotname, "gfx/env/%s", Cmd_Argv( 1 ));

	push	1
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0L@FGEKBPJ@gfx?1env?1?$CFs@
	push	OFFSET _cls+296324
	call	_Q_sprintf
	add	esp, 12					; 0000000cH

; 363  : 	cls.scrshot_action = scrshot_envshot;	// build new frame for envshot

	mov	DWORD PTR _cls+296308, 5

; 364  : 	cls.envshot_vieworg = NULL; // no custom view

	mov	DWORD PTR _cls+296312, 0

; 365  : 	cls.envshot_viewsize = 0;

	mov	DWORD PTR _cls+296316, 0
$LN1@CL_EnvShot:

; 366  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_EnvShot_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _CL_PlayCDTrack_f
_TEXT	SEGMENT
tv235 = -140						; size = 4
_i$1 = -72						; size = 4
_restoredPos$2 = -68					; size = 4
_onLoopPos$3 = -64					; size = 4
_posArgPos$4 = -60					; size = 4
_loopArgPos$5 = -56					; size = 4
_restored$6 = -52					; size = 4
_onLoop$7 = -48						; size = 4
_position$8 = -44					; size = 4
_numLoop$9 = -40					; size = 4
_onloop$ = -36						; size = 4
_posnum$ = -32						; size = 4
_pos$ = -28						; size = 4
_loopNum$ = -24						; size = 4
_loop$ = -20						; size = 4
_pszMain$ = -16						; size = 4
_pszIntro$ = -12					; size = 4
_command$ = -8						; size = 4
_cdcmd$ = -4						; size = 4
_CL_PlayCDTrack_f PROC					; COMDAT

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi
	push	edi

; 64   : 	const char	*cdcmd;
; 65   : 	const char	*command;
; 66   : 	const char	*pszIntro;
; 67   : 	const char	*pszMain;
; 68   : 	const char	*loop;
; 69   : 	const char	*loopNum;
; 70   : 	const char	*pos;
; 71   : 	const char *posnum;
; 72   : 	const char* onloop;
; 73   : 	static qboolean	paused = false;
; 74   : 	static qboolean	looped = false;
; 75   : 	static qboolean	enabled = true;
; 76   : 
; 77   : 	if( Cmd_Argc() < 2 ) return;

	call	_Cmd_Argc
	cmp	eax, 2
	jae	SHORT $LN5@CL_PlayCDT
	jmp	$LN1@CL_PlayCDT
$LN5@CL_PlayCDT:

; 78   : 
; 79   : 	cdcmd = Cmd_Argv(0);

	push	0
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _cdcmd$[ebp], eax

; 80   : 	command = Cmd_Argv(1);

	push	1
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _command$[ebp], eax

; 81   : 	pszIntro = Cmd_Argv(2);

	push	2
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _pszIntro$[ebp], eax

; 82   : 	pszMain = Cmd_Argv(3);

	push	3
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _pszMain$[ebp], eax

; 83   : 	loop = Cmd_Argv(4);

	push	4
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _loop$[ebp], eax

; 84   : 	loopNum = Cmd_Argv(5);

	push	5
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _loopNum$[ebp], eax

; 85   : 	pos = Cmd_Argv(6);

	push	6
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _pos$[ebp], eax

; 86   : 	posnum = Cmd_Argv(7);

	push	7
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _posnum$[ebp], eax

; 87   : 	onloop = Cmd_Argv(8);

	push	8
	call	_Cmd_Argv
	add	esp, 4
	mov	DWORD PTR _onloop$[ebp], eax

; 88   : 
; 89   : 	if( !enabled && Q_stricmp( command, "on" ))

	cmp	DWORD PTR ?enabled@?1??CL_PlayCDTrack_f@@9@9, 0
	jne	SHORT $LN6@CL_PlayCDT
	push	99999					; 0001869fH
	push	OFFSET ??_C@_02LIELOMNJ@on@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@CL_PlayCDT

; 90   : 		return; // CD-player is disabled

	jmp	$LN1@CL_PlayCDT
$LN6@CL_PlayCDT:

; 91   : 
; 92   : 	if ( !Q_stricmp( command, "play" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_04GBHMDDO@play@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN7@CL_PlayCDT

; 93   : 	{
; 94   : 		// Catch
; 95   : 		if (Cmd_Argc() < 3) return;

	call	_Cmd_Argc
	cmp	eax, 3
	jae	SHORT $LN9@CL_PlayCDT
	jmp	$LN1@CL_PlayCDT
$LN9@CL_PlayCDT:

; 96   : 
; 97   : 		// Loop is definied, check for it
; 98   : 		int numLoop = 0;

	mov	DWORD PTR _numLoop$9[ebp], 0

; 99   : 		long position = 0;

	mov	DWORD PTR _position$8[ebp], 0

; 100  : 		qboolean onLoop = false;

	mov	DWORD PTR _onLoop$7[ebp], 0

; 101  : 		qboolean restored = false;

	mov	DWORD PTR _restored$6[ebp], 0

; 102  : 		int loopArgPos = -1;

	mov	DWORD PTR _loopArgPos$5[ebp], -1

; 103  : 		int posArgPos = -1;

	mov	DWORD PTR _posArgPos$4[ebp], -1

; 104  : 		int onLoopPos = -1;

	mov	DWORD PTR _onLoopPos$3[ebp], -1

; 105  : 		int restoredPos = -1;

	mov	DWORD PTR _restoredPos$2[ebp], -1

; 106  : 
; 107  : 		// Try to find loop argument
; 108  : 		for (int i = 1; i < Cmd_Argc(); i++)

	mov	DWORD PTR _i$1[ebp], 1
	jmp	SHORT $LN4@CL_PlayCDT
$LN2@CL_PlayCDT:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@CL_PlayCDT:
	call	_Cmd_Argc
	cmp	DWORD PTR _i$1[ebp], eax
	jae	$LN3@CL_PlayCDT

; 109  : 		{
; 110  : 			if (loopArgPos == -1)

	cmp	DWORD PTR _loopArgPos$5[ebp], -1
	jne	SHORT $LN10@CL_PlayCDT

; 111  : 			{
; 112  : 				if (!Q_strcmp(Cmd_Argv(i), "loop"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_04GKOOIABA@loop@
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@CL_PlayCDT

; 113  : 				{
; 114  : 					loopArgPos = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _loopArgPos$5[ebp], eax

; 115  : 					numLoop = -1;

	mov	DWORD PTR _numLoop$9[ebp], -1
$LN10@CL_PlayCDT:

; 116  : 				}
; 117  : 			}
; 118  : 
; 119  : 			if (posArgPos == -1)

	cmp	DWORD PTR _posArgPos$4[ebp], -1
	jne	SHORT $LN12@CL_PlayCDT

; 120  : 			{
; 121  : 				if (!Q_strcmp(Cmd_Argv(i), "pos"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_03PCBNCGFH@pos@
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@CL_PlayCDT

; 122  : 				{
; 123  : 					posArgPos = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _posArgPos$4[ebp], eax

; 124  : 					position = 0;

	mov	DWORD PTR _position$8[ebp], 0
$LN12@CL_PlayCDT:

; 125  : 				}
; 126  : 			}
; 127  : 
; 128  : 			if (onLoopPos == -1)

	cmp	DWORD PTR _onLoopPos$3[ebp], -1
	jne	SHORT $LN14@CL_PlayCDT

; 129  : 			{
; 130  : 				if (!Q_strcmp(Cmd_Argv(i), "onloop"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_06HOKAPKFF@onloop@
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN14@CL_PlayCDT

; 131  : 				{
; 132  : 					onLoop = true;

	mov	DWORD PTR _onLoop$7[ebp], 1

; 133  : 					onLoopPos = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _onLoopPos$3[ebp], eax
$LN14@CL_PlayCDT:

; 134  : 				}
; 135  : 			}
; 136  : 
; 137  : 			if (restoredPos == -1)

	cmp	DWORD PTR _restoredPos$2[ebp], -1
	jne	SHORT $LN16@CL_PlayCDT

; 138  : 			{
; 139  : 				if (!Q_strcmp(Cmd_Argv(i), "restored"))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_08IHECAEFP@restored@
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN16@CL_PlayCDT

; 140  : 				{
; 141  : 					restored = true;

	mov	DWORD PTR _restored$6[ebp], 1

; 142  : 					restoredPos = i;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _restoredPos$2[ebp], eax
$LN16@CL_PlayCDT:

; 143  : 				}
; 144  : 			}
; 145  : 		}

	jmp	$LN2@CL_PlayCDT
$LN3@CL_PlayCDT:

; 146  : 
; 147  : 		// Try to find number of loops
; 148  : 		if (loopArgPos != -1)

	cmp	DWORD PTR _loopArgPos$5[ebp], -1
	je	SHORT $LN18@CL_PlayCDT

; 149  : 		{
; 150  : 			if (loopArgPos < (Cmd_Argc() - 1) && Q_isdigit(Cmd_Argv(loopArgPos + 1)))

	call	_Cmd_Argc
	sub	eax, 1
	cmp	DWORD PTR _loopArgPos$5[ebp], eax
	jae	SHORT $LN18@CL_PlayCDT
	mov	eax, DWORD PTR _loopArgPos$5[ebp]
	add	eax, 1
	push	eax
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN18@CL_PlayCDT

; 151  : 				numLoop = Q_atoi(Cmd_Argv(loopArgPos + 1));

	mov	eax, DWORD PTR _loopArgPos$5[ebp]
	add	eax, 1
	push	eax
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_atoi
	add	esp, 4
	mov	DWORD PTR _numLoop$9[ebp], eax
$LN18@CL_PlayCDT:

; 152  : 		}
; 153  : 
; 154  : 		// Try to find position
; 155  : 		if (posArgPos != -1)

	cmp	DWORD PTR _posArgPos$4[ebp], -1
	je	SHORT $LN20@CL_PlayCDT

; 156  : 		{
; 157  : 			if (posArgPos < (Cmd_Argc() - 1) && Q_isdigit(Cmd_Argv(posArgPos + 1)))

	call	_Cmd_Argc
	sub	eax, 1
	cmp	DWORD PTR _posArgPos$4[ebp], eax
	jae	SHORT $LN20@CL_PlayCDT
	mov	eax, DWORD PTR _posArgPos$4[ebp]
	add	eax, 1
	push	eax
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN20@CL_PlayCDT

; 158  : 				position = atol(Cmd_Argv(posArgPos + 1));

	mov	eax, DWORD PTR _posArgPos$4[ebp]
	add	eax, 1
	push	eax
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	DWORD PTR __imp__atol
	add	esp, 4
	mov	DWORD PTR _position$8[ebp], eax
$LN20@CL_PlayCDT:

; 159  : 		}
; 160  : 
; 161  : 		// Do a check for the intro vs main
; 162  : 		if ((Cmd_Argc() >= 4 && (!Q_strcmp(Cmd_Argv(3), "loop") || !Q_strcmp(Cmd_Argv(3), "pos") || !Q_strcmp(Cmd_Argv(3), "onLoop") || !Q_strcmp(Cmd_Argv(3), "restored"))))

	call	_Cmd_Argc
	cmp	eax, 4
	jb	$LN22@CL_PlayCDT
	push	99999					; 0001869fH
	push	OFFSET ??_C@_04GKOOIABA@loop@
	push	3
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN23@CL_PlayCDT
	push	99999					; 0001869fH
	push	OFFSET ??_C@_03PCBNCGFH@pos@
	push	3
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN23@CL_PlayCDT
	push	99999					; 0001869fH
	push	OFFSET ??_C@_06LPGBNFFB@onLoop@
	push	3
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN23@CL_PlayCDT
	push	99999					; 0001869fH
	push	OFFSET ??_C@_08IHECAEFP@restored@
	push	3
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	call	_Q_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN22@CL_PlayCDT
$LN23@CL_PlayCDT:

; 163  : 			pszMain = NULL;

	mov	DWORD PTR _pszMain$[ebp], 0
$LN22@CL_PlayCDT:

; 164  : 
; 165  : 		if (Cmd_Argc() <= 3)

	call	_Cmd_Argc
	cmp	eax, 3
	ja	SHORT $LN24@CL_PlayCDT

; 166  : 			pszMain = NULL;

	mov	DWORD PTR _pszMain$[ebp], 0
$LN24@CL_PlayCDT:

; 167  : 
; 168  : 		S_StartBackgroundTrack( pszIntro, pszMain, position, numLoop, onLoop, restored, true );

	push	1
	mov	eax, DWORD PTR _restored$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _onLoop$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _numLoop$9[ebp]
	push	edx
	mov	eax, DWORD PTR _position$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszMain$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszIntro$[ebp]
	push	edx
	call	_S_StartBackgroundTrack
	add	esp, 28					; 0000001cH

; 169  : 
; 170  : 		paused = false;

	mov	DWORD PTR ?paused@?1??CL_PlayCDTrack_f@@9@9, 0

; 171  : 		looped = (numLoop > 1 || numLoop < 0) ? true : false;

	cmp	DWORD PTR _numLoop$9[ebp], 1
	jg	SHORT $LN38@CL_PlayCDT
	cmp	DWORD PTR _numLoop$9[ebp], 0
	jl	SHORT $LN38@CL_PlayCDT
	mov	DWORD PTR tv235[ebp], 0
	jmp	SHORT $LN39@CL_PlayCDT
$LN38@CL_PlayCDT:
	mov	DWORD PTR tv235[ebp], 1
$LN39@CL_PlayCDT:
	mov	eax, DWORD PTR tv235[ebp]
	mov	DWORD PTR ?looped@?1??CL_PlayCDTrack_f@@9@9, eax

; 172  : 	}

	jmp	$LN1@CL_PlayCDT
$LN7@CL_PlayCDT:

; 173  : 	else if ( !Q_stricmp( command, "pause" ) )

	push	99999					; 0001869fH
	push	OFFSET ??_C@_05PDJBBECF@pause@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN25@CL_PlayCDT

; 174  : 	{
; 175  : 		S_StreamSetPause( true );

	push	1
	call	_S_StreamSetPause
	add	esp, 4

; 176  : 		paused = true;

	mov	DWORD PTR ?paused@?1??CL_PlayCDTrack_f@@9@9, 1

; 177  : 	}

	jmp	$LN1@CL_PlayCDT
$LN25@CL_PlayCDT:

; 178  : 	else if( !Q_stricmp( command, "resume" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_06PLELHCEK@resume@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN27@CL_PlayCDT

; 179  : 	{
; 180  : 		S_StreamSetPause( false );

	push	0
	call	_S_StreamSetPause
	add	esp, 4

; 181  : 		paused = false;

	mov	DWORD PTR ?paused@?1??CL_PlayCDTrack_f@@9@9, 0

; 182  : 	}

	jmp	$LN1@CL_PlayCDT
$LN27@CL_PlayCDT:

; 183  : 	else if( !Q_stricmp( command, "stop" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_04PEGFANN@stop@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN29@CL_PlayCDT

; 184  : 	{
; 185  : 		S_StopBackgroundTrack();

	call	_S_StopBackgroundTrack

; 186  : 		paused = false;

	mov	DWORD PTR ?paused@?1??CL_PlayCDTrack_f@@9@9, 0

; 187  : 		looped = false;

	mov	DWORD PTR ?looped@?1??CL_PlayCDTrack_f@@9@9, 0

; 188  : 	}

	jmp	$LN1@CL_PlayCDT
$LN29@CL_PlayCDT:

; 189  : 	else if( !Q_stricmp( command, "on" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_02LIELOMNJ@on@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN31@CL_PlayCDT

; 190  : 	{
; 191  : 		enabled = true;

	mov	DWORD PTR ?enabled@?1??CL_PlayCDTrack_f@@9@9, 1

; 192  : 	}

	jmp	SHORT $LN1@CL_PlayCDT
$LN31@CL_PlayCDT:

; 193  : 	else if( !Q_stricmp( command, "off" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_03MCADLMAF@off@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN33@CL_PlayCDT

; 194  : 	{
; 195  : 		enabled = false;

	mov	DWORD PTR ?enabled@?1??CL_PlayCDTrack_f@@9@9, 0

; 196  : 	}

	jmp	SHORT $LN1@CL_PlayCDT
$LN33@CL_PlayCDT:

; 197  : 	else if( !Q_stricmp( command, "info" ))

	push	99999					; 0001869fH
	push	OFFSET ??_C@_04NIDJFNBE@info@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_Q_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN35@CL_PlayCDT

; 198  : 	{
; 199  : 
; 200  : 	}

	jmp	SHORT $LN1@CL_PlayCDT
$LN35@CL_PlayCDT:

; 201  : 	else Con_Printf( "%s: unknown command %s\n", Cmd_Argv( 0 ), command );

	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	push	0
	call	_Cmd_Argv
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0BI@ENGHJEMN@?$CFs?3?5unknown?5command?5?$CFs?6@
	call	_Con_Printf
	add	esp, 12					; 0000000cH
$LN1@CL_PlayCDT:

; 202  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_PlayCDTrack_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _CL_SnapShot_f
_TEXT	SEGMENT
_checkname$ = -264					; size = 256
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_CL_SnapShot_f PROC					; COMDAT

; 314  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 315  : 	int	i;
; 316  : 	string	checkname;
; 317  : 
; 318  : 	if( CL_IsDevOverviewMode() == 1 )

	call	_CL_IsDevOverviewMode
	cmp	eax, 1
	jne	SHORT $LN5@CL_SnapSho

; 319  : 	{
; 320  : 		// special case for write overview image and script file
; 321  : 		Q_snprintf( cls.shotname, sizeof( cls.shotname ), "overviews/%s.bmp", clgame.mapname );

	push	OFFSET _clgame+228
	push	OFFSET ??_C@_0BB@JGGBAEGJ@overviews?1?$CFs?4bmp@
	push	256					; 00000100H
	push	OFFSET _cls+296324
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 322  : 		cls.scrshot_action = scrshot_mapshot; // build new frame for mapshot

	mov	DWORD PTR _cls+296308, 7

; 323  : 	}

	jmp	$LN6@CL_SnapSho
$LN5@CL_SnapSho:

; 324  : 	else
; 325  : 	{
; 326  : 		FS_AllowDirectPaths( true );

	push	1
	call	_FS_AllowDirectPaths
	add	esp, 4

; 327  : 
; 328  : 		// scan for a free filename
; 329  : 		for( i = 0; i < 9999; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CL_SnapSho
$LN2@CL_SnapSho:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CL_SnapSho:
	cmp	DWORD PTR _i$[ebp], 9999		; 0000270fH
	jge	SHORT $LN3@CL_SnapSho

; 330  : 		{
; 331  : 			if( !CL_SnapshotGetName( i, checkname ))

	lea	eax, DWORD PTR _checkname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_CL_SnapshotGetName
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@CL_SnapSho

; 332  : 				return;	// no namespace

	jmp	SHORT $LN1@CL_SnapSho
$LN7@CL_SnapSho:

; 333  : 
; 334  : 			if( !FS_FileExists( checkname, false ))

	push	0
	lea	eax, DWORD PTR _checkname$[ebp]
	push	eax
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@CL_SnapSho

; 335  : 				break;

	jmp	SHORT $LN3@CL_SnapSho
$LN8@CL_SnapSho:

; 336  : 		}

	jmp	SHORT $LN2@CL_SnapSho
$LN3@CL_SnapSho:

; 337  : 
; 338  : 		FS_AllowDirectPaths( false );

	push	0
	call	_FS_AllowDirectPaths
	add	esp, 4

; 339  : 		Q_strncpy( cls.shotname, checkname, sizeof( cls.shotname ));

	push	256					; 00000100H
	lea	eax, DWORD PTR _checkname$[ebp]
	push	eax
	push	OFFSET _cls+296324
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 340  : 		cls.scrshot_action = scrshot_snapshot; // build new frame for screenshot

	mov	DWORD PTR _cls+296308, 2
$LN6@CL_SnapSho:

; 341  : 	}
; 342  : 
; 343  : 	cls.envshot_vieworg = NULL; // no custom view

	mov	DWORD PTR _cls+296312, 0

; 344  : 	cls.envshot_viewsize = 0;

	mov	DWORD PTR _cls+296316, 0
$LN1@CL_SnapSho:

; 345  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_SnapShot_f ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\cl_cmds.c
;	COMDAT _CL_ScreenShot_f
_TEXT	SEGMENT
_checkname$ = -264					; size = 256
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_CL_ScreenShot_f PROC					; COMDAT

; 276  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 277  : 	int	i;
; 278  : 	string	checkname;
; 279  : 
; 280  : 	if( CL_IsDevOverviewMode() == 1 )

	call	_CL_IsDevOverviewMode
	cmp	eax, 1
	jne	SHORT $LN5@CL_ScreenS

; 281  : 	{
; 282  : 		// special case for write overview image and script file
; 283  : 		Q_snprintf( cls.shotname, sizeof( cls.shotname ), "overviews/%s.bmp", clgame.mapname );

	push	OFFSET _clgame+228
	push	OFFSET ??_C@_0BB@JGGBAEGJ@overviews?1?$CFs?4bmp@
	push	256					; 00000100H
	push	OFFSET _cls+296324
	call	_Q_snprintf
	add	esp, 16					; 00000010H

; 284  : 		cls.scrshot_action = scrshot_mapshot; // build new frame for mapshot

	mov	DWORD PTR _cls+296308, 7

; 285  : 	}

	jmp	SHORT $LN6@CL_ScreenS
$LN5@CL_ScreenS:

; 286  : 	else
; 287  : 	{
; 288  : 		// scan for a free filename
; 289  : 		for( i = 0; i < 9999; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CL_ScreenS
$LN2@CL_ScreenS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CL_ScreenS:
	cmp	DWORD PTR _i$[ebp], 9999		; 0000270fH
	jge	SHORT $LN3@CL_ScreenS

; 290  : 		{
; 291  : 			if( !CL_ScreenshotGetName( i, checkname ))

	lea	eax, DWORD PTR _checkname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_CL_ScreenshotGetName
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@CL_ScreenS

; 292  : 				return;	// no namespace

	jmp	SHORT $LN1@CL_ScreenS
$LN7@CL_ScreenS:

; 293  : 
; 294  : 			if( !FS_FileExists( checkname, false ))

	push	0
	lea	eax, DWORD PTR _checkname$[ebp]
	push	eax
	call	_FS_FileExists
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@CL_ScreenS

; 295  : 				break;

	jmp	SHORT $LN3@CL_ScreenS
$LN8@CL_ScreenS:

; 296  : 		}

	jmp	SHORT $LN2@CL_ScreenS
$LN3@CL_ScreenS:

; 297  : 
; 298  : 		Q_strncpy( cls.shotname, checkname, sizeof( cls.shotname ));

	push	256					; 00000100H
	lea	eax, DWORD PTR _checkname$[ebp]
	push	eax
	push	OFFSET _cls+296324
	call	_Q_strncpy
	add	esp, 12					; 0000000cH

; 299  : 		cls.scrshot_action = scrshot_normal; // build new frame for screenshot

	mov	DWORD PTR _cls+296308, 1
$LN6@CL_ScreenS:

; 300  : 	}
; 301  : 
; 302  : 	cls.envshot_vieworg = NULL; // no custom view

	mov	DWORD PTR _cls+296312, 0

; 303  : 	cls.envshot_viewsize = 0;

	mov	DWORD PTR _cls+296316, 0
$LN1@CL_ScreenS:

; 304  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_CL_ScreenShot_f ENDP
_TEXT	ENDS
END
