; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\gl_downsample.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_pglGetError:DWORD
COMM	_pglGetString:DWORD
COMM	_pglAccum:DWORD
COMM	_pglAlphaFunc:DWORD
COMM	_pglArrayElement:DWORD
COMM	_pglBegin:DWORD
COMM	_pglBindTexture:DWORD
COMM	_pglBitmap:DWORD
COMM	_pglBlendFunc:DWORD
COMM	_pglCallList:DWORD
COMM	_pglCallLists:DWORD
COMM	_pglClear:DWORD
COMM	_pglClearAccum:DWORD
COMM	_pglClearColor:DWORD
COMM	_pglClearDepth:DWORD
COMM	_pglClearIndex:DWORD
COMM	_pglClearStencil:DWORD
COMM	_pglIsEnabled:DWORD
COMM	_pglIsList:DWORD
COMM	_pglIsTexture:DWORD
COMM	_pglClipPlane:DWORD
COMM	_pglColor3b:DWORD
COMM	_pglColor3bv:DWORD
COMM	_pglColor3d:DWORD
COMM	_pglColor3dv:DWORD
COMM	_pglColor3f:DWORD
COMM	_pglColor3fv:DWORD
COMM	_pglColor3i:DWORD
COMM	_pglColor3iv:DWORD
COMM	_pglColor3s:DWORD
COMM	_pglColor3sv:DWORD
COMM	_pglColor3ub:DWORD
COMM	_pglColor3ubv:DWORD
COMM	_pglColor3ui:DWORD
COMM	_pglColor3uiv:DWORD
COMM	_pglColor3us:DWORD
COMM	_pglColor3usv:DWORD
COMM	_pglColor4b:DWORD
COMM	_pglColor4bv:DWORD
COMM	_pglColor4d:DWORD
COMM	_pglColor4dv:DWORD
COMM	_pglColor4f:DWORD
COMM	_pglColor4fv:DWORD
COMM	_pglColor4i:DWORD
COMM	_pglColor4iv:DWORD
COMM	_pglColor4s:DWORD
COMM	_pglColor4sv:DWORD
COMM	_pglColor4ub:DWORD
COMM	_pglColor4ubv:DWORD
COMM	_pglColor4ui:DWORD
COMM	_pglColor4uiv:DWORD
COMM	_pglColor4us:DWORD
COMM	_pglColor4usv:DWORD
COMM	_pglColorMask:DWORD
COMM	_pglColorMaterial:DWORD
COMM	_pglColorPointer:DWORD
COMM	_pglCopyPixels:DWORD
COMM	_pglCopyTexImage1D:DWORD
COMM	_pglCopyTexImage2D:DWORD
COMM	_pglCopyTexSubImage1D:DWORD
COMM	_pglCopyTexSubImage2D:DWORD
COMM	_pglCullFace:DWORD
COMM	_pglDeleteLists:DWORD
COMM	_pglDeleteTextures:DWORD
COMM	_pglDepthFunc:DWORD
COMM	_pglDepthMask:DWORD
COMM	_pglDepthRange:DWORD
COMM	_pglDisable:DWORD
COMM	_pglDisableClientState:DWORD
COMM	_pglDrawArrays:DWORD
COMM	_pglDrawBuffer:DWORD
COMM	_pglDrawElements:DWORD
COMM	_pglDrawPixels:DWORD
COMM	_pglEdgeFlag:DWORD
COMM	_pglEdgeFlagPointer:DWORD
COMM	_pglEdgeFlagv:DWORD
COMM	_pglEnable:DWORD
COMM	_pglEnableClientState:DWORD
COMM	_pglEnd:DWORD
COMM	_pglEndList:DWORD
COMM	_pglEvalCoord1d:DWORD
COMM	_pglEvalCoord1dv:DWORD
COMM	_pglEvalCoord1f:DWORD
COMM	_pglEvalCoord1fv:DWORD
COMM	_pglEvalCoord2d:DWORD
COMM	_pglEvalCoord2dv:DWORD
COMM	_pglEvalCoord2f:DWORD
COMM	_pglEvalCoord2fv:DWORD
COMM	_pglEvalMesh1:DWORD
COMM	_pglEvalMesh2:DWORD
COMM	_pglEvalPoint1:DWORD
COMM	_pglEvalPoint2:DWORD
COMM	_pglFeedbackBuffer:DWORD
COMM	_pglFinish:DWORD
COMM	_pglFlush:DWORD
COMM	_pglFogf:DWORD
COMM	_pglFogfv:DWORD
COMM	_pglFogi:DWORD
COMM	_pglFogiv:DWORD
COMM	_pglFrontFace:DWORD
COMM	_pglFrustum:DWORD
COMM	_pglGenTextures:DWORD
COMM	_pglGetBooleanv:DWORD
COMM	_pglGetClipPlane:DWORD
COMM	_pglGetDoublev:DWORD
COMM	_pglGetFloatv:DWORD
COMM	_pglGetIntegerv:DWORD
COMM	_pglGetLightfv:DWORD
COMM	_pglGetLightiv:DWORD
COMM	_pglGetMapdv:DWORD
COMM	_pglGetMapfv:DWORD
COMM	_pglGetMapiv:DWORD
COMM	_pglGetMaterialfv:DWORD
COMM	_pglGetMaterialiv:DWORD
COMM	_pglGetPixelMapfv:DWORD
COMM	_pglGetPixelMapuiv:DWORD
COMM	_pglGetPixelMapusv:DWORD
COMM	_pglGetPointerv:DWORD
COMM	_pglGetPolygonStipple:DWORD
COMM	_pglGetTexEnvfv:DWORD
COMM	_pglGetTexEnviv:DWORD
COMM	_pglGetTexGendv:DWORD
COMM	_pglGetTexGenfv:DWORD
COMM	_pglGetTexGeniv:DWORD
COMM	_pglGetTexImage:DWORD
COMM	_pglGetTexLevelParameterfv:DWORD
COMM	_pglGetTexLevelParameteriv:DWORD
COMM	_pglGetTexParameterfv:DWORD
COMM	_pglGetTexParameteriv:DWORD
COMM	_pglHint:DWORD
COMM	_pglIndexMask:DWORD
COMM	_pglIndexPointer:DWORD
COMM	_pglIndexd:DWORD
COMM	_pglIndexdv:DWORD
COMM	_pglIndexf:DWORD
COMM	_pglIndexfv:DWORD
COMM	_pglIndexi:DWORD
COMM	_pglIndexiv:DWORD
COMM	_pglIndexs:DWORD
COMM	_pglIndexsv:DWORD
COMM	_pglIndexub:DWORD
COMM	_pglIndexubv:DWORD
COMM	_pglInitNames:DWORD
COMM	_pglInterleavedArrays:DWORD
COMM	_pglLightModelf:DWORD
COMM	_pglLightModelfv:DWORD
COMM	_pglLightModeli:DWORD
COMM	_pglLightModeliv:DWORD
COMM	_pglLightf:DWORD
COMM	_pglLightfv:DWORD
COMM	_pglLighti:DWORD
COMM	_pglLightiv:DWORD
COMM	_pglLineStipple:DWORD
COMM	_pglLineWidth:DWORD
COMM	_pglListBase:DWORD
COMM	_pglLoadIdentity:DWORD
COMM	_pglLoadMatrixd:DWORD
COMM	_pglLoadMatrixf:DWORD
COMM	_pglLoadName:DWORD
COMM	_pglLogicOp:DWORD
COMM	_pglMap1d:DWORD
COMM	_pglMap1f:DWORD
COMM	_pglMap2d:DWORD
COMM	_pglMap2f:DWORD
COMM	_pglMapGrid1d:DWORD
COMM	_pglMapGrid1f:DWORD
COMM	_pglMapGrid2d:DWORD
COMM	_pglMapGrid2f:DWORD
COMM	_pglMaterialf:DWORD
COMM	_pglMaterialfv:DWORD
COMM	_pglMateriali:DWORD
COMM	_pglMaterialiv:DWORD
COMM	_pglMatrixMode:DWORD
COMM	_pglMultMatrixd:DWORD
COMM	_pglMultMatrixf:DWORD
COMM	_pglNewList:DWORD
COMM	_pglNormal3b:DWORD
COMM	_pglNormal3bv:DWORD
COMM	_pglNormal3d:DWORD
COMM	_pglNormal3dv:DWORD
COMM	_pglNormal3f:DWORD
COMM	_pglNormal3fv:DWORD
COMM	_pglNormal3i:DWORD
COMM	_pglNormal3iv:DWORD
COMM	_pglNormal3s:DWORD
COMM	_pglNormal3sv:DWORD
COMM	_pglNormalPointer:DWORD
COMM	_pglOrtho:DWORD
COMM	_pglPassThrough:DWORD
COMM	_pglPixelMapfv:DWORD
COMM	_pglPixelMapuiv:DWORD
COMM	_pglPixelMapusv:DWORD
COMM	_pglPixelStoref:DWORD
COMM	_pglPixelStorei:DWORD
COMM	_pglPixelTransferf:DWORD
COMM	_pglPixelTransferi:DWORD
COMM	_pglPixelZoom:DWORD
COMM	_pglPointSize:DWORD
COMM	_pglPolygonMode:DWORD
COMM	_pglPolygonOffset:DWORD
COMM	_pglPolygonStipple:DWORD
COMM	_pglPopAttrib:DWORD
COMM	_pglPopClientAttrib:DWORD
COMM	_pglPopMatrix:DWORD
COMM	_pglPopName:DWORD
COMM	_pglPushAttrib:DWORD
COMM	_pglPushClientAttrib:DWORD
COMM	_pglPushMatrix:DWORD
COMM	_pglPushName:DWORD
COMM	_pglRasterPos2d:DWORD
COMM	_pglRasterPos2dv:DWORD
COMM	_pglRasterPos2f:DWORD
COMM	_pglRasterPos2fv:DWORD
COMM	_pglRasterPos2i:DWORD
COMM	_pglRasterPos2iv:DWORD
COMM	_pglRasterPos2s:DWORD
COMM	_pglRasterPos2sv:DWORD
COMM	_pglRasterPos3d:DWORD
COMM	_pglRasterPos3dv:DWORD
COMM	_pglRasterPos3f:DWORD
COMM	_pglRasterPos3fv:DWORD
COMM	_pglRasterPos3i:DWORD
COMM	_pglRasterPos3iv:DWORD
COMM	_pglRasterPos3s:DWORD
COMM	_pglRasterPos3sv:DWORD
COMM	_pglRasterPos4d:DWORD
COMM	_pglRasterPos4dv:DWORD
COMM	_pglRasterPos4f:DWORD
COMM	_pglRasterPos4fv:DWORD
COMM	_pglRasterPos4i:DWORD
COMM	_pglRasterPos4iv:DWORD
COMM	_pglRasterPos4s:DWORD
COMM	_pglRasterPos4sv:DWORD
COMM	_pglReadBuffer:DWORD
COMM	_pglReadPixels:DWORD
COMM	_pglRectd:DWORD
COMM	_pglRectdv:DWORD
COMM	_pglRectf:DWORD
COMM	_pglRectfv:DWORD
COMM	_pglRecti:DWORD
COMM	_pglRectiv:DWORD
COMM	_pglRects:DWORD
COMM	_pglRectsv:DWORD
COMM	_pglRotated:DWORD
COMM	_pglRotatef:DWORD
COMM	_pglScaled:DWORD
COMM	_pglScalef:DWORD
COMM	_pglScissor:DWORD
COMM	_pglSelectBuffer:DWORD
COMM	_pglShadeModel:DWORD
COMM	_pglStencilFunc:DWORD
COMM	_pglStencilMask:DWORD
COMM	_pglStencilOp:DWORD
COMM	_pglTexCoord1d:DWORD
COMM	_pglTexCoord1dv:DWORD
COMM	_pglTexCoord1f:DWORD
COMM	_pglTexCoord1fv:DWORD
COMM	_pglTexCoord1i:DWORD
COMM	_pglTexCoord1iv:DWORD
COMM	_pglTexCoord1s:DWORD
COMM	_pglTexCoord1sv:DWORD
COMM	_pglTexCoord2d:DWORD
COMM	_pglTexCoord2dv:DWORD
COMM	_pglTexCoord2f:DWORD
COMM	_pglTexCoord2fv:DWORD
COMM	_pglTexCoord2i:DWORD
COMM	_pglTexCoord2iv:DWORD
COMM	_pglTexCoord2s:DWORD
COMM	_pglTexCoord2sv:DWORD
COMM	_pglTexCoord3d:DWORD
COMM	_pglTexCoord3dv:DWORD
COMM	_pglTexCoord3f:DWORD
COMM	_pglTexCoord3fv:DWORD
COMM	_pglTexCoord3i:DWORD
COMM	_pglTexCoord3iv:DWORD
COMM	_pglTexCoord3s:DWORD
COMM	_pglTexCoord3sv:DWORD
COMM	_pglTexCoord4d:DWORD
COMM	_pglTexCoord4dv:DWORD
COMM	_pglTexCoord4f:DWORD
COMM	_pglTexCoord4fv:DWORD
COMM	_pglTexCoord4i:DWORD
COMM	_pglTexCoord4iv:DWORD
COMM	_pglTexCoord4s:DWORD
COMM	_pglTexCoord4sv:DWORD
COMM	_pglTexCoordPointer:DWORD
COMM	_pglTexEnvf:DWORD
COMM	_pglTexEnvfv:DWORD
COMM	_pglTexEnvi:DWORD
COMM	_pglTexEnviv:DWORD
COMM	_pglTexGend:DWORD
COMM	_pglTexGendv:DWORD
COMM	_pglTexGenf:DWORD
COMM	_pglTexGenfv:DWORD
COMM	_pglTexGeni:DWORD
COMM	_pglTexGeniv:DWORD
COMM	_pglTexImage1D:DWORD
COMM	_pglTexImage2D:DWORD
COMM	_pglTexParameterf:DWORD
COMM	_pglTexParameterfv:DWORD
COMM	_pglTexParameteri:DWORD
COMM	_pglTexParameteriv:DWORD
COMM	_pglTexSubImage1D:DWORD
COMM	_pglTexSubImage2D:DWORD
COMM	_pglTranslated:DWORD
COMM	_pglTranslatef:DWORD
COMM	_pglVertex2d:DWORD
COMM	_pglVertex2dv:DWORD
COMM	_pglVertex2f:DWORD
COMM	_pglVertex2fv:DWORD
COMM	_pglVertex2i:DWORD
COMM	_pglVertex2iv:DWORD
COMM	_pglVertex2s:DWORD
COMM	_pglVertex2sv:DWORD
COMM	_pglVertex3d:DWORD
COMM	_pglVertex3dv:DWORD
COMM	_pglVertex3f:DWORD
COMM	_pglVertex3fv:DWORD
COMM	_pglVertex3i:DWORD
COMM	_pglVertex3iv:DWORD
COMM	_pglVertex3s:DWORD
COMM	_pglVertex3sv:DWORD
COMM	_pglVertex4d:DWORD
COMM	_pglVertex4dv:DWORD
COMM	_pglVertex4f:DWORD
COMM	_pglVertex4fv:DWORD
COMM	_pglVertex4i:DWORD
COMM	_pglVertex4iv:DWORD
COMM	_pglVertex4s:DWORD
COMM	_pglVertex4sv:DWORD
COMM	_pglVertexPointer:DWORD
COMM	_pglViewport:DWORD
COMM	_pglPointParameterfEXT:DWORD
COMM	_pglPointParameterfvEXT:DWORD
COMM	_pglLockArraysEXT:DWORD
COMM	_pglUnlockArraysEXT:DWORD
COMM	_pglActiveTextureARB:DWORD
COMM	_pglClientActiveTextureARB:DWORD
COMM	_pglGetCompressedTexImage:DWORD
COMM	_pglDrawRangeElements:DWORD
COMM	_pglDrawRangeElementsEXT:DWORD
COMM	_pglMultiTexCoord1f:DWORD
COMM	_pglMultiTexCoord2f:DWORD
COMM	_pglMultiTexCoord3f:DWORD
COMM	_pglMultiTexCoord4f:DWORD
COMM	_pglActiveTexture:DWORD
COMM	_pglClientActiveTexture:DWORD
COMM	_pglCompressedTexImage3DARB:DWORD
COMM	_pglCompressedTexImage2DARB:DWORD
COMM	_pglCompressedTexImage1DARB:DWORD
COMM	_pglCompressedTexSubImage3DARB:DWORD
COMM	_pglCompressedTexSubImage2DARB:DWORD
COMM	_pglCompressedTexSubImage1DARB:DWORD
COMM	_pglDeleteObjectARB:DWORD
COMM	_pglGetHandleARB:DWORD
COMM	_pglDetachObjectARB:DWORD
COMM	_pglCreateShaderObjectARB:DWORD
COMM	_pglShaderSourceARB:DWORD
COMM	_pglCompileShaderARB:DWORD
COMM	_pglCreateProgramObjectARB:DWORD
COMM	_pglAttachObjectARB:DWORD
COMM	_pglLinkProgramARB:DWORD
COMM	_pglUseProgramObjectARB:DWORD
COMM	_pglValidateProgramARB:DWORD
COMM	_pglBindProgramARB:DWORD
COMM	_pglDeleteProgramsARB:DWORD
COMM	_pglGenProgramsARB:DWORD
COMM	_pglProgramStringARB:DWORD
COMM	_pglProgramEnvParameter4fARB:DWORD
COMM	_pglProgramLocalParameter4fARB:DWORD
COMM	_pglUniform1fARB:DWORD
COMM	_pglUniform2fARB:DWORD
COMM	_pglUniform3fARB:DWORD
COMM	_pglUniform4fARB:DWORD
COMM	_pglUniform1iARB:DWORD
COMM	_pglUniform2iARB:DWORD
COMM	_pglUniform3iARB:DWORD
COMM	_pglUniform4iARB:DWORD
COMM	_pglUniform1fvARB:DWORD
COMM	_pglUniform2fvARB:DWORD
COMM	_pglUniform3fvARB:DWORD
COMM	_pglUniform4fvARB:DWORD
COMM	_pglUniform1ivARB:DWORD
COMM	_pglUniform2ivARB:DWORD
COMM	_pglUniform3ivARB:DWORD
COMM	_pglUniform4ivARB:DWORD
COMM	_pglUniformMatrix2fvARB:DWORD
COMM	_pglUniformMatrix3fvARB:DWORD
COMM	_pglUniformMatrix4fvARB:DWORD
COMM	_pglGetObjectParameterfvARB:DWORD
COMM	_pglGetObjectParameterivARB:DWORD
COMM	_pglGetInfoLogARB:DWORD
COMM	_pglGetAttachedObjectsARB:DWORD
COMM	_pglGetUniformLocationARB:DWORD
COMM	_pglGetActiveUniformARB:DWORD
COMM	_pglGetUniformfvARB:DWORD
COMM	_pglGetUniformivARB:DWORD
COMM	_pglGetShaderSourceARB:DWORD
COMM	_pglTexImage3D:DWORD
COMM	_pglTexSubImage3D:DWORD
COMM	_pglCopyTexSubImage3D:DWORD
COMM	_pglBlendEquationEXT:DWORD
COMM	_pglStencilOpSeparate:DWORD
COMM	_pglStencilFuncSeparate:DWORD
COMM	_pglActiveStencilFaceEXT:DWORD
COMM	_pglVertexAttribPointerARB:DWORD
COMM	_pglEnableVertexAttribArrayARB:DWORD
COMM	_pglDisableVertexAttribArrayARB:DWORD
COMM	_pglBindAttribLocationARB:DWORD
COMM	_pglGetActiveAttribARB:DWORD
COMM	_pglGetAttribLocationARB:DWORD
COMM	_pglBindFragDataLocation:DWORD
COMM	_pglVertexAttrib2fARB:DWORD
COMM	_pglVertexAttrib2fvARB:DWORD
COMM	_pglVertexAttrib3fvARB:DWORD
COMM	_pglBindBufferARB:DWORD
COMM	_pglDeleteBuffersARB:DWORD
COMM	_pglGenBuffersARB:DWORD
COMM	_pglIsBufferARB:DWORD
COMM	_pglMapBufferARB:DWORD
COMM	_pglUnmapBufferARB:DWORD
COMM	_pglBufferDataARB:DWORD
COMM	_pglBufferSubDataARB:DWORD
COMM	_pglGenQueriesARB:DWORD
COMM	_pglDeleteQueriesARB:DWORD
COMM	_pglIsQueryARB:DWORD
COMM	_pglBeginQueryARB:DWORD
COMM	_pglEndQueryARB:DWORD
COMM	_pglGetQueryivARB:DWORD
COMM	_pglGetQueryObjectivARB:DWORD
COMM	_pglGetQueryObjectuivARB:DWORD
COMM	_pglDebugMessageControlARB:DWORD
COMM	_pglDebugMessageInsertARB:DWORD
COMM	_pglDebugMessageCallbackARB:DWORD
COMM	_pglGetDebugMessageLogARB:DWORD
COMM	_pglIsRenderbuffer:DWORD
COMM	_pglBindRenderbuffer:DWORD
COMM	_pglDeleteRenderbuffers:DWORD
COMM	_pglGenRenderbuffers:DWORD
COMM	_pglRenderbufferStorage:DWORD
COMM	_pglRenderbufferStorageMultisample:DWORD
COMM	_pglGetRenderbufferParameteriv:DWORD
COMM	_pglIsFramebuffer:DWORD
COMM	_pglBindFramebuffer:DWORD
COMM	_pglDeleteFramebuffers:DWORD
COMM	_pglGenFramebuffers:DWORD
COMM	_pglCheckFramebufferStatus:DWORD
COMM	_pglFramebufferTexture1D:DWORD
COMM	_pglFramebufferTexture2D:DWORD
COMM	_pglFramebufferTexture3D:DWORD
COMM	_pglFramebufferTextureLayer:DWORD
COMM	_pglFramebufferRenderbuffer:DWORD
COMM	_pglGetFramebufferAttachmentParameteriv:DWORD
COMM	_pglBlitFramebuffer:DWORD
COMM	_pglDrawBuffersARB:DWORD
COMM	_pglGenerateMipmap:DWORD
COMM	_pglBindVertexArray:DWORD
COMM	_pglDeleteVertexArrays:DWORD
COMM	_pglGenVertexArrays:DWORD
COMM	_pglIsVertexArray:DWORD
COMM	_pglSwapInterval:DWORD
COMM	_pwglSwapBuffers:DWORD
COMM	_pwglCopyContext:DWORD
COMM	_pwglCreateContext:DWORD
COMM	_pwglCreateLayerContext:DWORD
COMM	_pwglDeleteContext:DWORD
COMM	_pwglGetCurrentContext:DWORD
COMM	_pwglGetProcAddress:DWORD
COMM	_pwglMakeCurrent:DWORD
COMM	_pwglShareLists:DWORD
COMM	_pwglUseFontBitmaps:DWORD
COMM	_pwglUseFontOutlines:DWORD
COMM	_pwglDescribeLayerPlane:DWORD
COMM	_pwglSetLayerPaletteEntries:DWORD
COMM	_pwglGetLayerPaletteEntries:DWORD
COMM	_pwglRealizeLayerPalette:DWORD
COMM	_pwglSwapLayerBuffers:DWORD
COMM	_pwglSwapIntervalEXT:DWORD
COMM	_pwglCreateContextAttribsARB:DWORD
COMM	_pwglGetPixelFormatAttribiv:DWORD
COMM	_pwglChoosePixelFormat:DWORD
COMM	_pwglGetExtensionsStringEXT:DWORD
_DATA	ENDS
PUBLIC	_R_InitDownSampleTextures
PUBLIC	_R_DownSampling
PUBLIC	??_C@_0BF@NAILFLPF@?$CKsamplebackuptexture@	; `string'
PUBLIC	??_C@_0BF@HFLMALNI@?$CKsampleeffecttexture@	; `string'
PUBLIC	??_C@_0EF@OHCEDEBN@?8R_Sampling_InitTextures?8?5too?5h@ ; `string'
PUBLIC	??_C@_0BF@MNANKBDK@?$CKsamplescreentexture@	; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@4004000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@40a00000
PUBLIC	__real@c024000000000000
EXTRN	_Con_Printf:PROC
EXTRN	_GL_Bind:PROC
EXTRN	_GL_LoadMatrix:PROC
EXTRN	_GL_Cull:PROC
EXTRN	_GL_CreateTexture:PROC
EXTRN	_GL_FreeTexture:PROC
EXTRN	_GL_Support:PROC
EXTRN	_cl:BYTE
EXTRN	_RI:BYTE
EXTRN	_glConfig:BYTE
EXTRN	_glState:BYTE
EXTRN	_r_downsample:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_DOWNSAMPLE_SIZE_X DD 01H DUP (?)
_DOWNSAMPLE_SIZE_Y DD 01H DUP (?)
_r_initsampletexture DD 01H DUP (?)
_r_sampleeffecttexture DD 01H DUP (?)
_r_samplebackuptexture DD 01H DUP (?)
_r_downsampletexture DD 01H DUP (?)
_r_screendownsamplingtexture_size DD 01H DUP (?)
_screen_texture_width DD 01H DUP (?)
_screen_texture_height DD 01H DUP (?)
_r_screenbackuptexture_width DD 01H DUP (?)
_r_screenbackuptexture_height DD 01H DUP (?)
_curView_x DD	01H DUP (?)
_curView_y DD	01H DUP (?)
_curView_width DD 01H DUP (?)
_curView_height DD 01H DUP (?)
_screenTex_tcw DD 01H DUP (?)
_screenTex_tch DD 01H DUP (?)
_sample_width DD 01H DUP (?)
_sample_height DD 01H DUP (?)
_sampleText_tcw DD 01H DUP (?)
_sampleText_tch DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@c024000000000000
CONST	SEGMENT
__real@c024000000000000 DQ 0c024000000000000r	; -10
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4004000000000000
CONST	SEGMENT
__real@4004000000000000 DQ 04004000000000000r	; 2.5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0BF@MNANKBDK@?$CKsamplescreentexture@
CONST	SEGMENT
??_C@_0BF@MNANKBDK@?$CKsamplescreentexture@ DB '*samplescreentexture', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@OHCEDEBN@?8R_Sampling_InitTextures?8?5too?5h@
CONST	SEGMENT
??_C@_0EF@OHCEDEBN@?8R_Sampling_InitTextures?8?5too?5h@ DB '''R_Sampling_'
	DB	'InitTextures'' too high of a resolution, effect disabled', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HFLMALNI@?$CKsampleeffecttexture@
CONST	SEGMENT
??_C@_0BF@HFLMALNI@?$CKsampleeffecttexture@ DB '*sampleeffecttexture', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NAILFLPF@?$CKsamplebackuptexture@
CONST	SEGMENT
??_C@_0BF@NAILFLPF@?$CKsamplebackuptexture@ DB '*samplebackuptexture', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_downsample.c
;	COMDAT _R_Downsample_View
_TEXT	SEGMENT
_midsample_height$ = -8					; size = 4
_midsample_width$ = -4					; size = 4
_R_Downsample_View PROC					; COMDAT

; 224  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 225  : 	// stepped downsample
; 226  : 	int midsample_width = (r_screendownsamplingtexture_size * sampleText_tcw);

	cvtsi2ss xmm0, DWORD PTR _r_screendownsamplingtexture_size
	mulss	xmm0, DWORD PTR _sampleText_tcw
	cvttss2si eax, xmm0
	mov	DWORD PTR _midsample_width$[ebp], eax

; 227  : 	int midsample_height = (r_screendownsamplingtexture_size * sampleText_tch);

	cvtsi2ss xmm0, DWORD PTR _r_screendownsamplingtexture_size
	mulss	xmm0, DWORD PTR _sampleText_tch
	cvttss2si eax, xmm0
	mov	DWORD PTR _midsample_height$[ebp], eax

; 228  : 
; 229  : 	pglDisable(GL_BLEND);

	push	3042					; 00000be2H
	call	DWORD PTR _pglDisable

; 230  : 
; 231  : 	// copy the screen and draw resized
; 232  : 	GL_Bind(GL_TEXTURE0, r_initsampletexture);

	mov	eax, DWORD PTR _r_initsampletexture
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 233  : 	pglCopyTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, curView_x, glState.height - (curView_y + curView_height), curView_width, curView_height);

	mov	eax, DWORD PTR _curView_height
	push	eax
	mov	ecx, DWORD PTR _curView_width
	push	ecx
	mov	edx, DWORD PTR _curView_y
	add	edx, DWORD PTR _curView_height
	mov	eax, DWORD PTR _glState+4
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _curView_x
	push	ecx
	push	0
	push	0
	push	0
	push	3553					; 00000de1H
	call	DWORD PTR _pglCopyTexSubImage2D

; 234  : 	R_Sampling_Quad(0, glState.height - midsample_height, midsample_width, midsample_height, screenTex_tcw, screenTex_tch);

	push	ecx
	movss	xmm0, DWORD PTR _screenTex_tch
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _screenTex_tcw
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _midsample_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _midsample_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _glState+4
	sub	edx, DWORD PTR _midsample_height$[ebp]
	push	edx
	push	0
	call	_R_Sampling_Quad
	add	esp, 24					; 00000018H

; 235  : 
; 236  : 	// now copy into downsampling (mid-sized) texture
; 237  : 	GL_Bind(GL_TEXTURE0, r_downsampletexture);

	mov	eax, DWORD PTR _r_downsampletexture
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 238  : 	pglCopyTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, 0, 0, midsample_width, midsample_height);

	mov	eax, DWORD PTR _midsample_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _midsample_width$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3553					; 00000de1H
	call	DWORD PTR _pglCopyTexSubImage2D

; 239  : 
; 240  : 	// now draw again in bloom size
; 241  : 	R_Sampling_Quad(0, glState.height - sample_height, sample_width, sample_height, sampleText_tcw, sampleText_tch);

	push	ecx
	movss	xmm0, DWORD PTR _sampleText_tch
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sampleText_tcw
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _sample_height
	push	eax
	mov	ecx, DWORD PTR _sample_width
	push	ecx
	mov	edx, DWORD PTR _glState+4
	sub	edx, DWORD PTR _sample_height
	push	edx
	push	0
	call	_R_Sampling_Quad
	add	esp, 24					; 00000018H

; 242  : 
; 243  : 	// now blend the big screen texture into the bloom generation space (hoping it adds some blur)
; 244  : 	GL_Bind(GL_TEXTURE0, r_initsampletexture);

	mov	eax, DWORD PTR _r_initsampletexture
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 245  : 	R_Sampling_Quad(0, glState.height - sample_height, sample_width, sample_height, screenTex_tcw, screenTex_tch);

	push	ecx
	movss	xmm0, DWORD PTR _screenTex_tch
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _screenTex_tcw
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _sample_height
	push	eax
	mov	ecx, DWORD PTR _sample_width
	push	ecx
	mov	edx, DWORD PTR _glState+4
	sub	edx, DWORD PTR _sample_height
	push	edx
	push	0
	call	_R_Sampling_Quad
	add	esp, 24					; 00000018H

; 246  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_Downsample_View ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_downsample.c
;	COMDAT _R_Sampling_GenerateTexture
_TEXT	SEGMENT
_R_Sampling_GenerateTexture PROC			; COMDAT

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 195  : 	// set up sample size workspace
; 196  : 	pglScissor(0, 0, sample_width, sample_height);

	mov	eax, DWORD PTR _sample_height
	push	eax
	mov	ecx, DWORD PTR _sample_width
	push	ecx
	push	0
	push	0
	call	DWORD PTR _pglScissor

; 197  : 	pglViewport(0, 0, sample_width, sample_height);

	mov	eax, DWORD PTR _sample_height
	push	eax
	mov	ecx, DWORD PTR _sample_width
	push	ecx
	push	0
	push	0
	call	DWORD PTR _pglViewport

; 198  : 	pglMatrixMode(GL_PROJECTION);

	push	5889					; 00001701H
	call	DWORD PTR _pglMatrixMode

; 199  : 	pglLoadIdentity();

	call	DWORD PTR _pglLoadIdentity

; 200  : 	pglOrtho(0, sample_width, sample_height, 0, -10, 100);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c024000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _sample_height
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _sample_width
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _pglOrtho

; 201  : 	pglMatrixMode(GL_MODELVIEW);

	push	5888					; 00001700H
	call	DWORD PTR _pglMatrixMode

; 202  : 	pglLoadIdentity();

	call	DWORD PTR _pglLoadIdentity

; 203  : 
; 204  : 	// copy small scene into r_sampleeffecttexture
; 205  : 	GL_Bind(GL_TEXTURE0, r_sampleeffecttexture);

	mov	eax, DWORD PTR _r_sampleeffecttexture
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 206  : 	pglCopyTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, 0, 0, sample_width, sample_height);

	mov	eax, DWORD PTR _sample_height
	push	eax
	mov	ecx, DWORD PTR _sample_width
	push	ecx
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3553					; 00000de1H
	call	DWORD PTR _pglCopyTexSubImage2D

; 207  : 
; 208  : 	// restore full screen workspace
; 209  : 	pglScissor(0, 0, glState.width, glState.height);

	mov	eax, DWORD PTR _glState+4
	push	eax
	mov	ecx, DWORD PTR _glState
	push	ecx
	push	0
	push	0
	call	DWORD PTR _pglScissor

; 210  : 	pglViewport(0, 0, glState.width, glState.height);

	mov	eax, DWORD PTR _glState+4
	push	eax
	mov	ecx, DWORD PTR _glState
	push	ecx
	push	0
	push	0
	call	DWORD PTR _pglViewport

; 211  : 	pglMatrixMode(GL_PROJECTION);

	push	5889					; 00001701H
	call	DWORD PTR _pglMatrixMode

; 212  : 	pglLoadIdentity();

	call	DWORD PTR _pglLoadIdentity

; 213  : 	pglOrtho(0, glState.width, glState.height, 0, -10, 100);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c024000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _glState+4
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _glState
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _pglOrtho

; 214  : 	pglMatrixMode(GL_MODELVIEW);

	push	5888					; 00001700H
	call	DWORD PTR _pglMatrixMode

; 215  : 	pglLoadIdentity();

	call	DWORD PTR _pglLoadIdentity

; 216  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_Sampling_GenerateTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_downsample.c
;	COMDAT _R_Sampling_DrawEffect
_TEXT	SEGMENT
_R_Sampling_DrawEffect PROC				; COMDAT

; 173  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 174  : 	GL_Bind(GL_TEXTURE0, r_sampleeffecttexture);

	mov	eax, DWORD PTR _r_sampleeffecttexture
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 175  : 
; 176  : 	pglBegin(GL_QUADS);

	push	7
	call	DWORD PTR _pglBegin

; 177  : 	pglTexCoord2f(0, sampleText_tch);

	push	ecx
	movss	xmm0, DWORD PTR _sampleText_tch
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 178  : 	pglVertex2f(curView_x, curView_y);

	cvtsi2ss xmm0, DWORD PTR _curView_y
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _curView_x
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 179  : 	pglTexCoord2f(0, 0);

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 180  : 	pglVertex2f(curView_x, curView_y + curView_height);

	mov	eax, DWORD PTR _curView_y
	add	eax, DWORD PTR _curView_height
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _curView_x
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 181  : 	pglTexCoord2f(sampleText_tcw, 0);

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sampleText_tcw
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 182  : 	pglVertex2f(curView_x + curView_width, curView_y + curView_height);

	mov	eax, DWORD PTR _curView_y
	add	eax, DWORD PTR _curView_height
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _curView_x
	add	ecx, DWORD PTR _curView_width
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 183  : 	pglTexCoord2f(sampleText_tcw, sampleText_tch);

	push	ecx
	movss	xmm0, DWORD PTR _sampleText_tch
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sampleText_tcw
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 184  : 	pglVertex2f(curView_x + curView_width, curView_y);

	cvtsi2ss xmm0, DWORD PTR _curView_y
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _curView_x
	add	eax, DWORD PTR _curView_width
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 185  : 	pglEnd();

	call	DWORD PTR _pglEnd

; 186  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_Sampling_DrawEffect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_downsample.c
;	COMDAT _R_Sampling_Quad
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
_texwidth$ = 24						; size = 4
_texheight$ = 28					; size = 4
_R_Sampling_Quad PROC					; COMDAT

; 154  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 155  : 	pglBegin(GL_QUADS);

	push	7
	call	DWORD PTR _pglBegin

; 156  : 	pglTexCoord2f(0, texheight);

	push	ecx
	movss	xmm0, DWORD PTR _texheight$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 157  : 	pglVertex2f(x, y);

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 158  : 	pglTexCoord2f(0, 0);

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 159  : 	pglVertex2f(x, y + h);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _h$[ebp]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _x$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 160  : 	pglTexCoord2f(texwidth, 0);

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _texwidth$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 161  : 	pglVertex2f(x + w, y + h);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _h$[ebp]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _w$[ebp]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 162  : 	pglTexCoord2f(texwidth, texheight);

	push	ecx
	movss	xmm0, DWORD PTR _texheight$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _texwidth$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglTexCoord2f

; 163  : 	pglVertex2f(x + w, y);

	cvtsi2ss xmm0, DWORD PTR _y$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _w$[ebp]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglVertex2f

; 164  : 	pglEnd();

	call	DWORD PTR _pglEnd

; 165  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_Sampling_Quad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_downsample.c
;	COMDAT _R_Sampling_InitTextures
_TEXT	SEGMENT
_R_Sampling_InitTextures PROC				; COMDAT

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 87   : 	if (GL_Support(GL_ARB_TEXTURE_NPOT_EXT))

	push	14					; 0000000eH
	call	_GL_Support
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@R_Sampling

; 88   : 	{
; 89   : 		screen_texture_width = glState.width;

	mov	eax, DWORD PTR _glState
	mov	DWORD PTR _screen_texture_width, eax

; 90   : 		screen_texture_height = glState.height;

	mov	eax, DWORD PTR _glState+4
	mov	DWORD PTR _screen_texture_height, eax

; 91   : 	}

	jmp	SHORT $LN9@R_Sampling
$LN8@R_Sampling:

; 92   : 	else
; 93   : 	{
; 94   : 		// find closer power of 2 to screen size 
; 95   : 		for (screen_texture_width = 1; screen_texture_width < glState.width; screen_texture_width <<= 1);

	mov	DWORD PTR _screen_texture_width, 1
	jmp	SHORT $LN4@R_Sampling
$LN2@R_Sampling:
	mov	eax, DWORD PTR _screen_texture_width
	shl	eax, 1
	mov	DWORD PTR _screen_texture_width, eax
$LN4@R_Sampling:
	mov	eax, DWORD PTR _screen_texture_width
	cmp	eax, DWORD PTR _glState
	jge	SHORT $LN3@R_Sampling
	jmp	SHORT $LN2@R_Sampling
$LN3@R_Sampling:

; 96   : 		for (screen_texture_height = 1; screen_texture_height < glState.height; screen_texture_height <<= 1);

	mov	DWORD PTR _screen_texture_height, 1
	jmp	SHORT $LN7@R_Sampling
$LN5@R_Sampling:
	mov	eax, DWORD PTR _screen_texture_height
	shl	eax, 1
	mov	DWORD PTR _screen_texture_height, eax
$LN7@R_Sampling:
	mov	eax, DWORD PTR _screen_texture_height
	cmp	eax, DWORD PTR _glState+4
	jge	SHORT $LN9@R_Sampling
	jmp	SHORT $LN5@R_Sampling
$LN9@R_Sampling:

; 97   : 	}
; 98   : 
; 99   : 	// disable blooms if we can't handle a texture of that size
; 100  : 	if (screen_texture_width > glConfig.max_2d_texture_size || screen_texture_height > glConfig.max_2d_texture_size)

	mov	eax, DWORD PTR _screen_texture_width
	cmp	eax, DWORD PTR _glConfig+60
	jg	SHORT $LN11@R_Sampling
	mov	eax, DWORD PTR _screen_texture_height
	cmp	eax, DWORD PTR _glConfig+60
	jle	SHORT $LN10@R_Sampling
$LN11@R_Sampling:

; 101  : 	{
; 102  : 		screen_texture_width = screen_texture_height = 0;

	mov	DWORD PTR _screen_texture_height, 0
	mov	eax, DWORD PTR _screen_texture_height
	mov	DWORD PTR _screen_texture_width, eax

; 103  : 		//ALERT( at_warning, "'R_InitBloomScreenTexture' too high resolution for light bloom, effect disabled\n" );
; 104  : 		Con_Printf("'R_Sampling_InitTextures' too high of a resolution, effect disabled\n");

	push	OFFSET ??_C@_0EF@OHCEDEBN@?8R_Sampling_InitTextures?8?5too?5h@
	call	_Con_Printf
	add	esp, 4

; 105  : 		return;

	jmp	SHORT $LN1@R_Sampling
$LN10@R_Sampling:

; 106  : 	}
; 107  : 
; 108  : 	r_initsampletexture = GL_CreateTexture("*samplescreentexture", screen_texture_width, screen_texture_height, NULL, TF_NEAREST);

	push	1
	push	0
	mov	eax, DWORD PTR _screen_texture_height
	push	eax
	mov	ecx, DWORD PTR _screen_texture_width
	push	ecx
	push	OFFSET ??_C@_0BF@MNANKBDK@?$CKsamplescreentexture@
	call	_GL_CreateTexture
	add	esp, 20					; 00000014H
	mov	DWORD PTR _r_initsampletexture, eax

; 109  : 
; 110  : 	// validate bloom size and init the bloom effect texture
; 111  : 	R_Bloom_InitEffectTexture();

	call	_R_Bloom_InitEffectTexture

; 112  : 
; 113  : 	// if screensize is more than 2x the bloom effect texture, set up for stepped downsampling
; 114  : 	r_downsampletexture = 0;

	mov	DWORD PTR _r_downsampletexture, 0

; 115  : 	r_screendownsamplingtexture_size = 0;

	mov	DWORD PTR _r_screendownsamplingtexture_size, 0

; 116  : 
; 117  : 	R_Bloom_InitBackUpTexture(DOWNSAMPLE_SIZE_X, DOWNSAMPLE_SIZE_Y);

	mov	eax, DWORD PTR _DOWNSAMPLE_SIZE_Y
	push	eax
	mov	ecx, DWORD PTR _DOWNSAMPLE_SIZE_X
	push	ecx
	call	_R_Bloom_InitBackUpTexture
	add	esp, 8
$LN1@R_Sampling:

; 118  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_Sampling_InitTextures ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_downsample.c
;	COMDAT _R_Bloom_InitEffectTexture
_TEXT	SEGMENT
_R_Bloom_InitEffectTexture PROC				; COMDAT

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 60   : 	if (r_downsample->value < 0)

	mov	eax, DWORD PTR _r_downsample
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [eax+12]
	jbe	SHORT $LN2@R_Bloom_In

; 61   : 		r_downsample->value = 0;

	mov	eax, DWORD PTR _r_downsample
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+12], xmm0
$LN2@R_Bloom_In:

; 62   : 
; 63   : 	if (r_downsample->value > 5.0f)

	mov	eax, DWORD PTR _r_downsample
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR __real@40a00000
	jbe	SHORT $LN3@R_Bloom_In

; 64   : 		r_downsample->value = 5.0f;

	mov	eax, DWORD PTR _r_downsample
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [eax+12], xmm0
$LN3@R_Bloom_In:

; 65   : 
; 66   : 	if (cl.local.waterlevel >= 3)

	cmp	DWORD PTR _cl+2212736, 3
	jl	SHORT $LN4@R_Bloom_In

; 67   : 	{
; 68   : 		DOWNSAMPLE_SIZE_X = screen_texture_width / (2.5);

	cvtsi2sd xmm0, DWORD PTR _screen_texture_width
	divsd	xmm0, QWORD PTR __real@4004000000000000
	cvttsd2si eax, xmm0
	mov	DWORD PTR _DOWNSAMPLE_SIZE_X, eax

; 69   : 		DOWNSAMPLE_SIZE_Y = screen_texture_width / (2.5);

	cvtsi2sd xmm0, DWORD PTR _screen_texture_width
	divsd	xmm0, QWORD PTR __real@4004000000000000
	cvttsd2si eax, xmm0
	mov	DWORD PTR _DOWNSAMPLE_SIZE_Y, eax

; 70   : 	}

	jmp	SHORT $LN5@R_Bloom_In
$LN4@R_Bloom_In:

; 71   : 	else
; 72   : 	{
; 73   : 		DOWNSAMPLE_SIZE_X = screen_texture_width / (r_downsample->value * 2);

	cvtsi2ss xmm0, DWORD PTR _screen_texture_width
	mov	eax, DWORD PTR _r_downsample
	movss	xmm1, DWORD PTR [eax+12]
	mulss	xmm1, DWORD PTR __real@40000000
	divss	xmm0, xmm1
	cvttss2si ecx, xmm0
	mov	DWORD PTR _DOWNSAMPLE_SIZE_X, ecx

; 74   : 		DOWNSAMPLE_SIZE_Y = screen_texture_width / (r_downsample->value * 2);

	cvtsi2ss xmm0, DWORD PTR _screen_texture_width
	mov	eax, DWORD PTR _r_downsample
	movss	xmm1, DWORD PTR [eax+12]
	mulss	xmm1, DWORD PTR __real@40000000
	divss	xmm0, xmm1
	cvttss2si ecx, xmm0
	mov	DWORD PTR _DOWNSAMPLE_SIZE_Y, ecx
$LN5@R_Bloom_In:

; 75   : 	}
; 76   : 
; 77   : 	r_sampleeffecttexture = GL_CreateTexture("*sampleeffecttexture", DOWNSAMPLE_SIZE_X, DOWNSAMPLE_SIZE_Y, NULL, TF_NEAREST);

	push	1
	push	0
	mov	eax, DWORD PTR _DOWNSAMPLE_SIZE_Y
	push	eax
	mov	ecx, DWORD PTR _DOWNSAMPLE_SIZE_X
	push	ecx
	push	OFFSET ??_C@_0BF@HFLMALNI@?$CKsampleeffecttexture@
	call	_GL_CreateTexture
	add	esp, 20					; 00000014H
	mov	DWORD PTR _r_sampleeffecttexture, eax

; 78   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_Bloom_InitEffectTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_downsample.c
;	COMDAT _R_Bloom_InitBackUpTexture
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_R_Bloom_InitBackUpTexture PROC				; COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 47   : 	r_screenbackuptexture_width = width;

	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR _r_screenbackuptexture_width, eax

; 48   : 	r_screenbackuptexture_height = height;

	mov	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR _r_screenbackuptexture_height, eax

; 49   : 
; 50   : 	r_samplebackuptexture = GL_CreateTexture("*samplebackuptexture", width, height, NULL, TF_NEAREST);

	push	1
	push	0
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BF@NAILFLPF@?$CKsamplebackuptexture@
	call	_GL_CreateTexture
	add	esp, 20					; 00000014H
	mov	DWORD PTR _r_samplebackuptexture, eax

; 51   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_Bloom_InitBackUpTexture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_downsample.c
;	COMDAT _R_DownSampling
_TEXT	SEGMENT
_R_DownSampling PROC					; COMDAT

; 254  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 255  : 	if ( (!r_downsample->value) && (cl.local.waterlevel < 3))

	mov	eax, DWORD PTR _r_downsample
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@R_DownSamp
	cmp	DWORD PTR _cl+2212736, 3
	jge	SHORT $LN2@R_DownSamp

; 256  : 		return;

	jmp	$LN1@R_DownSamp
$LN2@R_DownSamp:

; 257  : 
; 258  : 	if (!DOWNSAMPLE_SIZE_X && !DOWNSAMPLE_SIZE_Y)

	cmp	DWORD PTR _DOWNSAMPLE_SIZE_X, 0
	jne	SHORT $LN3@R_DownSamp
	cmp	DWORD PTR _DOWNSAMPLE_SIZE_Y, 0
	jne	SHORT $LN3@R_DownSamp

; 259  : 		R_Sampling_InitTextures();

	call	_R_Sampling_InitTextures
$LN3@R_DownSamp:

; 260  : 
; 261  : 	if (screen_texture_width < DOWNSAMPLE_SIZE_X || screen_texture_height < DOWNSAMPLE_SIZE_Y)

	mov	eax, DWORD PTR _screen_texture_width
	cmp	eax, DWORD PTR _DOWNSAMPLE_SIZE_X
	jl	SHORT $LN5@R_DownSamp
	mov	eax, DWORD PTR _screen_texture_height
	cmp	eax, DWORD PTR _DOWNSAMPLE_SIZE_Y
	jge	SHORT $LN4@R_DownSamp
$LN5@R_DownSamp:

; 262  : 		return;

	jmp	$LN1@R_DownSamp
$LN4@R_DownSamp:

; 263  : 
; 264  : 	//if ( cl.local.waterlevel <= 3 )
; 265  : 
; 266  : 	// set up full screen workspace
; 267  : 	pglScissor(0, 0, glState.width, glState.height);

	mov	eax, DWORD PTR _glState+4
	push	eax
	mov	ecx, DWORD PTR _glState
	push	ecx
	push	0
	push	0
	call	DWORD PTR _pglScissor

; 268  : 	pglViewport(0, 0, glState.width, glState.height);

	mov	eax, DWORD PTR _glState+4
	push	eax
	mov	ecx, DWORD PTR _glState
	push	ecx
	push	0
	push	0
	call	DWORD PTR _pglViewport

; 269  : 	pglMatrixMode(GL_PROJECTION);

	push	5889					; 00001701H
	call	DWORD PTR _pglMatrixMode

; 270  : 	pglLoadIdentity();

	call	DWORD PTR _pglLoadIdentity

; 271  : 
; 272  : 	pglOrtho(0, glState.width, glState.height, 0, -10, 100);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c024000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _glState+4
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _glState
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR _pglOrtho

; 273  : 
; 274  : 	pglMatrixMode(GL_MODELVIEW);

	push	5888					; 00001700H
	call	DWORD PTR _pglMatrixMode

; 275  : 	pglLoadIdentity();

	call	DWORD PTR _pglLoadIdentity

; 276  : 
; 277  : 	pglDisable(GL_DEPTH_TEST);

	push	2929					; 00000b71H
	call	DWORD PTR _pglDisable

; 278  : 	pglDisable(GL_ALPHA_TEST);

	push	3008					; 00000bc0H
	call	DWORD PTR _pglDisable

; 279  : 	pglDepthMask(GL_FALSE);

	push	0
	call	DWORD PTR _pglDepthMask

; 280  : 	pglDisable(GL_BLEND);

	push	3042					; 00000be2H
	call	DWORD PTR _pglDisable

; 281  : 
; 282  : 	GL_Cull(0);

	push	0
	call	_GL_Cull
	add	esp, 4

; 283  : 	pglColor4f(1.0f, 1.0f, 1.0f, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _pglColor4f

; 284  : 
; 285  : 	// set up current sizes
; 286  : 	curView_x = RI.viewport[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _RI[ecx+40]
	mov	DWORD PTR _curView_x, edx

; 287  : 	curView_y = RI.viewport[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _RI[eax+40]
	mov	DWORD PTR _curView_y, ecx

; 288  : 	curView_width = RI.viewport[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _RI[eax+40]
	mov	DWORD PTR _curView_width, ecx

; 289  : 	curView_height = RI.viewport[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _RI[ecx+40]
	mov	DWORD PTR _curView_height, edx

; 290  : 
; 291  : 	screenTex_tcw = ((float)curView_width / (float)screen_texture_width);

	cvtsi2ss xmm0, DWORD PTR _curView_width
	cvtsi2ss xmm1, DWORD PTR _screen_texture_width
	divss	xmm0, xmm1
	movss	DWORD PTR _screenTex_tcw, xmm0

; 292  : 	screenTex_tch = ((float)curView_height / (float)screen_texture_height);

	cvtsi2ss xmm0, DWORD PTR _curView_height
	cvtsi2ss xmm1, DWORD PTR _screen_texture_height
	divss	xmm0, xmm1
	movss	DWORD PTR _screenTex_tch, xmm0

; 293  : 	if (curView_height > curView_width)

	mov	eax, DWORD PTR _curView_height
	cmp	eax, DWORD PTR _curView_width
	jle	SHORT $LN6@R_DownSamp

; 294  : 	{
; 295  : 		sampleText_tcw = ((float)curView_width / (float)curView_height);

	cvtsi2ss xmm0, DWORD PTR _curView_width
	cvtsi2ss xmm1, DWORD PTR _curView_height
	divss	xmm0, xmm1
	movss	DWORD PTR _sampleText_tcw, xmm0

; 296  : 		sampleText_tch = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _sampleText_tch, xmm0

; 297  : 	}

	jmp	SHORT $LN7@R_DownSamp
$LN6@R_DownSamp:

; 298  : 	else
; 299  : 	{
; 300  : 		sampleText_tcw = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _sampleText_tcw, xmm0

; 301  : 		sampleText_tch = ((float)curView_height / (float)curView_width);

	cvtsi2ss xmm0, DWORD PTR _curView_height
	cvtsi2ss xmm1, DWORD PTR _curView_width
	divss	xmm0, xmm1
	movss	DWORD PTR _sampleText_tch, xmm0
$LN7@R_DownSamp:

; 302  : 	}
; 303  : 
; 304  : 	sample_width = (DOWNSAMPLE_SIZE_X * sampleText_tcw);

	cvtsi2ss xmm0, DWORD PTR _DOWNSAMPLE_SIZE_X
	mulss	xmm0, DWORD PTR _sampleText_tcw
	cvttss2si eax, xmm0
	mov	DWORD PTR _sample_width, eax

; 305  : 	sample_height = (DOWNSAMPLE_SIZE_Y * sampleText_tch);

	cvtsi2ss xmm0, DWORD PTR _DOWNSAMPLE_SIZE_Y
	mulss	xmm0, DWORD PTR _sampleText_tch
	cvttss2si eax, xmm0
	mov	DWORD PTR _sample_height, eax

; 306  : 
; 307  : 	// copy the screen space we'll use to work into the backup texture
; 308  : 	GL_Bind(GL_TEXTURE0, r_samplebackuptexture);

	mov	eax, DWORD PTR _r_samplebackuptexture
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 309  : 	pglCopyTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, 0, 0, r_screenbackuptexture_width * sampleText_tcw, r_screenbackuptexture_height * sampleText_tch);

	cvtsi2ss xmm0, DWORD PTR _r_screenbackuptexture_height
	mulss	xmm0, DWORD PTR _sampleText_tch
	cvttss2si eax, xmm0
	push	eax
	cvtsi2ss xmm0, DWORD PTR _r_screenbackuptexture_width
	mulss	xmm0, DWORD PTR _sampleText_tcw
	cvttss2si ecx, xmm0
	push	ecx
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3553					; 00000de1H
	call	DWORD PTR _pglCopyTexSubImage2D

; 310  : 
; 311  : 	// create the bloom image
; 312  : 	R_Downsample_View();

	call	_R_Downsample_View

; 313  : 	R_Sampling_GenerateTexture();

	call	_R_Sampling_GenerateTexture

; 314  : 
; 315  : 	pglDisable(GL_BLEND);

	push	3042					; 00000be2H
	call	DWORD PTR _pglDisable

; 316  : 	// restore the screen-backup to the screen
; 317  : 	GL_Bind(GL_TEXTURE0, r_samplebackuptexture);

	mov	eax, DWORD PTR _r_samplebackuptexture
	push	eax
	push	0
	call	_GL_Bind
	add	esp, 8

; 318  : 
; 319  : 
; 320  : 	pglScissor(RI.viewport[0], RI.viewport[1], RI.viewport[2], RI.viewport[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _RI[ecx+40]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _RI[eax+40]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _RI[edx+40]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _RI[edx+40]
	push	eax
	call	DWORD PTR _pglScissor

; 321  : 
; 322  : 	R_Sampling_DrawEffect();

	call	_R_Sampling_DrawEffect

; 323  : 
; 324  : 	pglViewport(RI.viewport[0], RI.viewport[1], RI.viewport[2], RI.viewport[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _RI[ecx+40]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _RI[eax+40]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _RI[edx+40]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _RI[edx+40]
	push	eax
	call	DWORD PTR _pglViewport

; 325  : 
; 326  : 	pglMatrixMode(GL_PROJECTION);

	push	5889					; 00001701H
	call	DWORD PTR _pglMatrixMode

; 327  : 	GL_LoadMatrix(RI.projectionMatrix);

	push	OFFSET _RI+648
	call	_GL_LoadMatrix
	add	esp, 4

; 328  : 
; 329  : 	pglMatrixMode(GL_MODELVIEW);

	push	5888					; 00001700H
	call	DWORD PTR _pglMatrixMode

; 330  : 	GL_LoadMatrix(RI.worldviewMatrix);

	push	OFFSET _RI+520
	call	_GL_LoadMatrix
	add	esp, 4

; 331  : 
; 332  : 	pglEnable(GL_DEPTH_TEST);

	push	2929					; 00000b71H
	call	DWORD PTR _pglEnable

; 333  : 	pglDepthMask(GL_TRUE);

	push	1
	call	DWORD PTR _pglDepthMask

; 334  : 	pglDisable(GL_BLEND);

	push	3042					; 00000be2H
	call	DWORD PTR _pglDisable

; 335  : 	GL_Cull(GL_FRONT);

	push	1028					; 00000404H
	call	_GL_Cull
	add	esp, 4
$LN1@R_DownSamp:

; 336  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_DownSampling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\client\gl_downsample.c
;	COMDAT _R_InitDownSampleTextures
_TEXT	SEGMENT
_R_InitDownSampleTextures PROC				; COMDAT

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 127  : 	DOWNSAMPLE_SIZE_X = 0;

	mov	DWORD PTR _DOWNSAMPLE_SIZE_X, 0

; 128  : 	DOWNSAMPLE_SIZE_Y = 0;

	mov	DWORD PTR _DOWNSAMPLE_SIZE_Y, 0

; 129  : 
; 130  : 	if (r_initsampletexture)

	cmp	DWORD PTR _r_initsampletexture, 0
	je	SHORT $LN2@R_InitDown

; 131  : 		GL_FreeTexture(r_initsampletexture);

	mov	eax, DWORD PTR _r_initsampletexture
	push	eax
	call	_GL_FreeTexture
	add	esp, 4
$LN2@R_InitDown:

; 132  : 	if (r_sampleeffecttexture)

	cmp	DWORD PTR _r_sampleeffecttexture, 0
	je	SHORT $LN3@R_InitDown

; 133  : 		GL_FreeTexture(r_sampleeffecttexture);

	mov	eax, DWORD PTR _r_sampleeffecttexture
	push	eax
	call	_GL_FreeTexture
	add	esp, 4
$LN3@R_InitDown:

; 134  : 	if (r_samplebackuptexture)

	cmp	DWORD PTR _r_samplebackuptexture, 0
	je	SHORT $LN4@R_InitDown

; 135  : 		GL_FreeTexture(r_samplebackuptexture);

	mov	eax, DWORD PTR _r_samplebackuptexture
	push	eax
	call	_GL_FreeTexture
	add	esp, 4
$LN4@R_InitDown:

; 136  : 	if (r_downsampletexture)

	cmp	DWORD PTR _r_downsampletexture, 0
	je	SHORT $LN5@R_InitDown

; 137  : 		GL_FreeTexture(r_downsampletexture);

	mov	eax, DWORD PTR _r_downsampletexture
	push	eax
	call	_GL_FreeTexture
	add	esp, 4
$LN5@R_InitDown:

; 138  : 
; 139  : 	r_initsampletexture = r_sampleeffecttexture = 0;

	mov	DWORD PTR _r_sampleeffecttexture, 0
	mov	eax, DWORD PTR _r_sampleeffecttexture
	mov	DWORD PTR _r_initsampletexture, eax

; 140  : 	r_samplebackuptexture = r_downsampletexture = 0;

	mov	DWORD PTR _r_downsampletexture, 0
	mov	eax, DWORD PTR _r_downsampletexture
	mov	DWORD PTR _r_samplebackuptexture, eax

; 141  : 
; 142  : 	if ((!r_downsample->value) && (cl.local.waterlevel < 3))

	mov	eax, DWORD PTR _r_downsample
	movss	xmm0, DWORD PTR [eax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@R_InitDown
	cmp	DWORD PTR _cl+2212736, 3
	jge	SHORT $LN6@R_InitDown

; 143  : 		return;

	jmp	SHORT $LN1@R_InitDown
$LN6@R_InitDown:

; 144  : 
; 145  : 	R_Sampling_InitTextures();

	call	_R_Sampling_InitTextures
$LN1@R_InitDown:

; 146  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_R_InitDownSampleTextures ENDP
_TEXT	ENDS
END
