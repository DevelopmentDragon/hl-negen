; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32705.0 

	TITLE	D:\DevDragon\XashFE\dev\src\temp\engine\!debug\world.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_et_name
PUBLIC	??_C@_06IKLLLDHL@normal@			; `string'
PUBLIC	??_C@_06BALNJMNP@player@			; `string'
PUBLIC	??_C@_0L@OADIKGOI@tempentity@			; `string'
PUBLIC	??_C@_04EPJBJPAD@beam@				; `string'
PUBLIC	??_C@_0L@HABJJBML@fragmented@			; `string'
;	COMDAT ??_C@_0L@HABJJBML@fragmented@
CONST	SEGMENT
??_C@_0L@HABJJBML@fragmented@ DB 'fragmented', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EPJBJPAD@beam@
CONST	SEGMENT
??_C@_04EPJBJPAD@beam@ DB 'beam', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OADIKGOI@tempentity@
CONST	SEGMENT
??_C@_0L@OADIKGOI@tempentity@ DB 'tempentity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BALNJMNP@player@
CONST	SEGMENT
??_C@_06BALNJMNP@player@ DB 'player', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKLLLDHL@normal@
CONST	SEGMENT
??_C@_06IKLLLDHL@normal@ DB 'normal', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_et_name DD	FLAT:??_C@_06IKLLLDHL@normal@
	DD	FLAT:??_C@_06BALNJMNP@player@
	DD	FLAT:??_C@_0L@OADIKGOI@tempentity@
	DD	FLAT:??_C@_04EPJBJPAD@beam@
	DD	FLAT:??_C@_0L@HABJJBML@fragmented@
_DATA	ENDS
PUBLIC	_InsertLinkBefore
PUBLIC	_RemoveLink
PUBLIC	_ClearLink
PUBLIC	_World_MoveBounds
PUBLIC	_World_TransformAABB
PUBLIC	_World_CombineTraces
PUBLIC	_BoxOnPlaneSide
PUBLIC	_RankForContents
PUBLIC	__real@3f800000
EXTRN	_ClearBounds:PROC
EXTRN	_Matrix4x4_Invert_Simple:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	010H
	DW	04e7H
voltbl	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\world.c
;	COMDAT _RankForContents
_TEXT	SEGMENT
tv64 = -68						; size = 4
_contents$ = 8						; size = 4
_RankForContents PROC					; COMDAT

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 177  : 	switch( contents )

	mov	eax, DWORD PTR _contents$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	add	ecx, 15					; 0000000fH
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 14			; 0000000eH
	ja	SHORT $LN17@RankForCon
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN19@RankForCon[edx*4]
$LN4@RankForCon:

; 178  : 	{
; 179  : 	case CONTENTS_EMPTY:	return 0;

	xor	eax, eax
	jmp	SHORT $LN1@RankForCon
$LN5@RankForCon:

; 180  : 	case CONTENTS_WATER:	return 1;

	mov	eax, 1
	jmp	SHORT $LN1@RankForCon
$LN6@RankForCon:

; 181  : 	case CONTENTS_TRANSLUCENT:	return 2;

	mov	eax, 2
	jmp	SHORT $LN1@RankForCon
$LN7@RankForCon:

; 182  : 	case CONTENTS_CURRENT_0:	return 3;

	mov	eax, 3
	jmp	SHORT $LN1@RankForCon
$LN8@RankForCon:

; 183  : 	case CONTENTS_CURRENT_90:	return 4;

	mov	eax, 4
	jmp	SHORT $LN1@RankForCon
$LN9@RankForCon:

; 184  : 	case CONTENTS_CURRENT_180:	return 5;

	mov	eax, 5
	jmp	SHORT $LN1@RankForCon
$LN10@RankForCon:

; 185  : 	case CONTENTS_CURRENT_270:	return 6;

	mov	eax, 6
	jmp	SHORT $LN1@RankForCon
$LN11@RankForCon:

; 186  : 	case CONTENTS_CURRENT_UP:	return 7;

	mov	eax, 7
	jmp	SHORT $LN1@RankForCon
$LN12@RankForCon:

; 187  : 	case CONTENTS_CURRENT_DOWN:	return 8;

	mov	eax, 8
	jmp	SHORT $LN1@RankForCon
$LN13@RankForCon:

; 188  : 	case CONTENTS_SLIME:	return 9;

	mov	eax, 9
	jmp	SHORT $LN1@RankForCon
$LN14@RankForCon:

; 189  : 	case CONTENTS_LAVA:		return 10;

	mov	eax, 10					; 0000000aH
	jmp	SHORT $LN1@RankForCon
$LN15@RankForCon:

; 190  : 	case CONTENTS_SKY:		return 11;

	mov	eax, 11					; 0000000bH
	jmp	SHORT $LN1@RankForCon
$LN16@RankForCon:

; 191  : 	case CONTENTS_SOLID:	return 12;

	mov	eax, 12					; 0000000cH
	jmp	SHORT $LN1@RankForCon
$LN17@RankForCon:

; 192  : 	default:			return 13; // any user contents has more priority than default

	mov	eax, 13					; 0000000dH
$LN1@RankForCon:

; 193  : 	}
; 194  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@RankForCon:
	DD	$LN6@RankForCon
	DD	$LN12@RankForCon
	DD	$LN11@RankForCon
	DD	$LN10@RankForCon
	DD	$LN9@RankForCon
	DD	$LN8@RankForCon
	DD	$LN7@RankForCon
	DD	$LN17@RankForCon
	DD	$LN17@RankForCon
	DD	$LN15@RankForCon
	DD	$LN14@RankForCon
	DD	$LN13@RankForCon
	DD	$LN5@RankForCon
	DD	$LN16@RankForCon
	DD	$LN4@RankForCon
_RankForContents ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\world.c
;	COMDAT _BoxOnPlaneSide
_TEXT	SEGMENT
tv66 = -80						; size = 4
_sides$ = -12						; size = 4
_dist2$ = -8						; size = 4
_dist1$ = -4						; size = 4
_emins$ = 8						; size = 4
_emaxs$ = 12						; size = 4
_p$ = 16						; size = 4
_BoxOnPlaneSide PROC					; COMDAT

; 204  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 205  : 	float	dist1, dist2;
; 206  : 	int	sides = 0;

	mov	DWORD PTR _sides$[ebp], 0

; 207  : 
; 208  : 	// general case
; 209  : 	switch( p->signbits )

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 7
	ja	$LN12@BoxOnPlane
	mov	edx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN16@BoxOnPlane[edx*4]
$LN4@BoxOnPlane:

; 210  : 	{
; 211  : 	case 0:
; 212  : 		dist1 = p->normal[0]*emaxs[0] + p->normal[1]*emaxs[1] + p->normal[2]*emaxs[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist1$[ebp], xmm0

; 213  : 		dist2 = p->normal[0]*emins[0] + p->normal[1]*emins[1] + p->normal[2]*emins[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist2$[ebp], xmm0

; 214  : 		break;

	jmp	$LN2@BoxOnPlane
$LN5@BoxOnPlane:

; 215  : 	case 1:
; 216  : 		dist1 = p->normal[0]*emins[0] + p->normal[1]*emaxs[1] + p->normal[2]*emaxs[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist1$[ebp], xmm0

; 217  : 		dist2 = p->normal[0]*emaxs[0] + p->normal[1]*emins[1] + p->normal[2]*emins[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist2$[ebp], xmm0

; 218  : 		break;

	jmp	$LN2@BoxOnPlane
$LN6@BoxOnPlane:

; 219  : 	case 2:
; 220  : 		dist1 = p->normal[0]*emaxs[0] + p->normal[1]*emins[1] + p->normal[2]*emaxs[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist1$[ebp], xmm0

; 221  : 		dist2 = p->normal[0]*emins[0] + p->normal[1]*emaxs[1] + p->normal[2]*emins[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist2$[ebp], xmm0

; 222  : 		break;

	jmp	$LN2@BoxOnPlane
$LN7@BoxOnPlane:

; 223  : 	case 3:
; 224  : 		dist1 = p->normal[0]*emins[0] + p->normal[1]*emins[1] + p->normal[2]*emaxs[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist1$[ebp], xmm0

; 225  : 		dist2 = p->normal[0]*emaxs[0] + p->normal[1]*emaxs[1] + p->normal[2]*emins[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist2$[ebp], xmm0

; 226  : 		break;

	jmp	$LN2@BoxOnPlane
$LN8@BoxOnPlane:

; 227  : 	case 4:
; 228  : 		dist1 = p->normal[0]*emaxs[0] + p->normal[1]*emaxs[1] + p->normal[2]*emins[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist1$[ebp], xmm0

; 229  : 		dist2 = p->normal[0]*emins[0] + p->normal[1]*emins[1] + p->normal[2]*emaxs[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist2$[ebp], xmm0

; 230  : 		break;

	jmp	$LN2@BoxOnPlane
$LN9@BoxOnPlane:

; 231  : 	case 5:
; 232  : 		dist1 = p->normal[0]*emins[0] + p->normal[1]*emaxs[1] + p->normal[2]*emins[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist1$[ebp], xmm0

; 233  : 		dist2 = p->normal[0]*emaxs[0] + p->normal[1]*emins[1] + p->normal[2]*emaxs[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist2$[ebp], xmm0

; 234  : 		break;

	jmp	$LN2@BoxOnPlane
$LN10@BoxOnPlane:

; 235  : 	case 6:
; 236  : 		dist1 = p->normal[0]*emaxs[0] + p->normal[1]*emins[1] + p->normal[2]*emins[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist1$[ebp], xmm0

; 237  : 		dist2 = p->normal[0]*emins[0] + p->normal[1]*emaxs[1] + p->normal[2]*emaxs[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist2$[ebp], xmm0

; 238  : 		break;

	jmp	$LN2@BoxOnPlane
$LN11@BoxOnPlane:

; 239  : 	case 7:
; 240  : 		dist1 = p->normal[0]*emins[0] + p->normal[1]*emins[1] + p->normal[2]*emins[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emins$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist1$[ebp], xmm0

; 241  : 		dist2 = p->normal[0]*emaxs[0] + p->normal[1]*emaxs[1] + p->normal[2]*emaxs[2];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _emaxs$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist2$[ebp], xmm0

; 242  : 		break;

	jmp	SHORT $LN2@BoxOnPlane
$LN12@BoxOnPlane:

; 243  : 	default:
; 244  : 		// shut up compiler
; 245  : 		dist1 = dist2 = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _dist2$[ebp], xmm0
	movss	xmm0, DWORD PTR _dist2$[ebp]
	movss	DWORD PTR _dist1$[ebp], xmm0
$LN2@BoxOnPlane:

; 246  : 		break;
; 247  : 	}
; 248  : 
; 249  : 	if( dist1 >= p->dist )

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR _dist1$[ebp]
	comiss	xmm0, DWORD PTR [eax+12]
	jb	SHORT $LN13@BoxOnPlane

; 250  : 		sides = 1;

	mov	DWORD PTR _sides$[ebp], 1
$LN13@BoxOnPlane:

; 251  : 	if( dist2 < p->dist )

	mov	eax, DWORD PTR _p$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR _dist2$[ebp]
	jbe	SHORT $LN14@BoxOnPlane

; 252  : 		sides |= 2;

	mov	eax, DWORD PTR _sides$[ebp]
	or	eax, 2
	mov	DWORD PTR _sides$[ebp], eax
$LN14@BoxOnPlane:

; 253  : 
; 254  : 	return sides;

	mov	eax, DWORD PTR _sides$[ebp]

; 255  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@BoxOnPlane:
	DD	$LN4@BoxOnPlane
	DD	$LN5@BoxOnPlane
	DD	$LN6@BoxOnPlane
	DD	$LN7@BoxOnPlane
	DD	$LN8@BoxOnPlane
	DD	$LN9@BoxOnPlane
	DD	$LN10@BoxOnPlane
	DD	$LN11@BoxOnPlane
_BoxOnPlaneSide ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\world.c
;	COMDAT _World_CombineTraces
_TEXT	SEGMENT
__$ReturnAddress$ = 8					; size = 4
_cliptrace$ = 12					; size = 4
_trace$ = 16						; size = 4
_touch$ = 20						; size = 4
_World_CombineTraces PROC				; COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 106  : 	if( trace->allsolid || trace->startsolid || trace->fraction < cliptrace->fraction )

	mov	eax, DWORD PTR _trace$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@World_Comb
	mov	eax, DWORD PTR _trace$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@World_Comb
	mov	eax, DWORD PTR _cliptrace$[ebp]
	mov	ecx, DWORD PTR _trace$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	comiss	xmm0, DWORD PTR [ecx+16]
	jbe	SHORT $LN5@World_Comb
$LN3@World_Comb:

; 107  : 	{
; 108  : 		trace->ent = touch;

	mov	eax, DWORD PTR _trace$[ebp]
	mov	ecx, DWORD PTR _touch$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 109  : 		
; 110  : 		if( cliptrace->startsolid )

	mov	eax, DWORD PTR _cliptrace$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@World_Comb

; 111  : 		{
; 112  : 			*cliptrace = *trace;

	mov	ecx, 14					; 0000000eH
	mov	esi, DWORD PTR _trace$[ebp]
	mov	edi, DWORD PTR _cliptrace$[ebp]
	rep movsd

; 113  : 			cliptrace->startsolid = true;

	mov	eax, DWORD PTR _cliptrace$[ebp]
	mov	DWORD PTR [eax+4], 1

; 114  : 		}

	jmp	SHORT $LN5@World_Comb
$LN4@World_Comb:

; 115  : 		else *cliptrace = *trace;

	mov	ecx, 14					; 0000000eH
	mov	esi, DWORD PTR _trace$[ebp]
	mov	edi, DWORD PTR _cliptrace$[ebp]
	rep movsd
$LN5@World_Comb:

; 116  : 	}
; 117  : 
; 118  : 	return *cliptrace;

	mov	ecx, 14					; 0000000eH
	mov	esi, DWORD PTR _cliptrace$[ebp]
	mov	edi, DWORD PTR __$ReturnAddress$[ebp]
	rep movsd
	mov	eax, DWORD PTR __$ReturnAddress$[ebp]

; 119  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_World_CombineTraces ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\world.c
;	COMDAT _World_TransformAABB
_TEXT	SEGMENT
tv130 = -164						; size = 4
tv89 = -164						; size = 4
tv80 = -164						; size = 4
_i$ = -96						; size = 4
_itransform$ = -92					; size = 64
_p2$ = -28						; size = 12
_p1$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_transform$ = 8						; size = 4
_mins$ = 12						; size = 4
_maxs$ = 16						; size = 4
_outmins$ = 20						; size = 4
_outmaxs$ = 24						; size = 4
_World_TransformAABB PROC				; COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 128  : 	vec3_t	p1, p2;
; 129  : 	matrix4x4	itransform;
; 130  : 	int	i;
; 131  : 
; 132  : 	if( !outmins || !outmaxs ) return;

	cmp	DWORD PTR _outmins$[ebp], 0
	je	SHORT $LN9@World_Tran
	cmp	DWORD PTR _outmaxs$[ebp], 0
	jne	SHORT $LN8@World_Tran
$LN9@World_Tran:
	jmp	$LN6@World_Tran
$LN8@World_Tran:

; 133  : 
; 134  : 	Matrix4x4_Invert_Simple( itransform, transform );

	mov	eax, DWORD PTR _transform$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itransform$[ebp]
	push	ecx
	call	_Matrix4x4_Invert_Simple
	add	esp, 8

; 135  : 	ClearBounds( outmins, outmaxs );

	mov	eax, DWORD PTR _outmaxs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outmins$[ebp]
	push	ecx
	call	_ClearBounds
	add	esp, 8

; 136  : 
; 137  : 	// compute a full bounding box
; 138  : 	for( i = 0; i < 8; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@World_Tran
$LN2@World_Tran:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@World_Tran:
	cmp	DWORD PTR _i$[ebp], 8
	jge	$LN3@World_Tran

; 139  : 	{
; 140  : 		p1[0] = ( i & 1 ) ? mins[0] : maxs[0];

	mov	eax, DWORD PTR _i$[ebp]
	and	eax, 1
	je	SHORT $LN18@World_Tran
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _mins$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR tv80[ebp], xmm0
	jmp	SHORT $LN19@World_Tran
$LN18@World_Tran:
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _maxs$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR tv80[ebp], xmm0
$LN19@World_Tran:
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv80[ebp]
	movss	DWORD PTR _p1$[ebp+edx], xmm0

; 141  : 		p1[1] = ( i & 2 ) ? mins[1] : maxs[1];

	mov	eax, DWORD PTR _i$[ebp]
	and	eax, 2
	je	SHORT $LN20@World_Tran
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _mins$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR tv89[ebp], xmm0
	jmp	SHORT $LN21@World_Tran
$LN20@World_Tran:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _maxs$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR tv89[ebp], xmm0
$LN21@World_Tran:
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR tv89[ebp]
	movss	DWORD PTR _p1$[ebp+edx], xmm0

; 142  : 		p1[2] = ( i & 4 ) ? mins[2] : maxs[2];

	mov	eax, DWORD PTR _i$[ebp]
	and	eax, 4
	je	SHORT $LN22@World_Tran
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _mins$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR tv130[ebp], xmm0
	jmp	SHORT $LN23@World_Tran
$LN22@World_Tran:
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _maxs$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR tv130[ebp], xmm0
$LN23@World_Tran:
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR tv130[ebp]
	movss	DWORD PTR _p1$[ebp+edx], xmm0

; 143  : 
; 144  : 		p2[0] = DotProduct( p1, itransform[0] );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	lea	edx, DWORD PTR _itransform$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 0
	movss	xmm0, DWORD PTR _p1$[ebp+ecx]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	lea	edx, DWORD PTR _itransform$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR _p1$[ebp+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	lea	edx, DWORD PTR _itransform$[ebp+eax]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR _p1$[ebp+ecx]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _p2$[ebp+edx], xmm0

; 145  : 		p2[1] = DotProduct( p1, itransform[1] );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	lea	eax, DWORD PTR _itransform$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 0
	movss	xmm0, DWORD PTR _p1$[ebp+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	lea	edx, DWORD PTR _itransform$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR _p1$[ebp+eax]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR _itransform$[ebp+eax]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR _p1$[ebp+edx]
	mulss	xmm1, DWORD PTR [ecx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR _p2$[ebp+ecx], xmm0

; 146  : 		p2[2] = DotProduct( p1, itransform[2] );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	lea	eax, DWORD PTR _itransform$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 0
	movss	xmm0, DWORD PTR _p1$[ebp+ecx]
	mulss	xmm0, DWORD PTR [eax+edx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	lea	edx, DWORD PTR _itransform$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR _p1$[ebp+eax]
	mulss	xmm1, DWORD PTR [edx+ecx]
	addss	xmm0, xmm1
	mov	edx, 4
	shl	edx, 1
	mov	eax, 16					; 00000010H
	shl	eax, 1
	lea	ecx, DWORD PTR _itransform$[ebp+eax]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR _p1$[ebp+edx]
	mulss	xmm1, DWORD PTR [ecx+eax]
	addss	xmm0, xmm1
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR _p2$[ebp+ecx], xmm0

; 147  : 
; 148  : 		if( p2[0] < outmins[0] ) outmins[0] = p2[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _outmins$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	comiss	xmm0, DWORD PTR _p2$[ebp+ecx]
	jbe	SHORT $LN10@World_Tran
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _outmins$[ebp]
	mov	ecx, DWORD PTR _p2$[ebp+ecx]
	mov	DWORD PTR [edx+eax], ecx
$LN10@World_Tran:

; 149  : 		if( p2[0] > outmaxs[0] ) outmaxs[0] = p2[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _outmaxs$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+ecx]
	comiss	xmm0, DWORD PTR [edx+eax]
	jbe	SHORT $LN11@World_Tran
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _outmaxs$[ebp]
	mov	ecx, DWORD PTR _p2$[ebp+ecx]
	mov	DWORD PTR [edx+eax], ecx
$LN11@World_Tran:

; 150  : 		if( p2[1] < outmins[1] ) outmins[1] = p2[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _outmins$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	comiss	xmm0, DWORD PTR _p2$[ebp+eax]
	jbe	SHORT $LN12@World_Tran
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _outmins$[ebp]
	mov	eax, DWORD PTR _p2$[ebp+eax]
	mov	DWORD PTR [edx+ecx], eax
$LN12@World_Tran:

; 151  : 		if( p2[1] > outmaxs[1] ) outmaxs[1] = p2[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _outmaxs$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+eax]
	comiss	xmm0, DWORD PTR [edx+ecx]
	jbe	SHORT $LN13@World_Tran
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _outmaxs$[ebp]
	mov	eax, DWORD PTR _p2$[ebp+eax]
	mov	DWORD PTR [edx+ecx], eax
$LN13@World_Tran:

; 152  : 		if( p2[2] < outmins[2] ) outmins[2] = p2[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _outmins$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	comiss	xmm0, DWORD PTR _p2$[ebp+eax]
	jbe	SHORT $LN14@World_Tran
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _outmins$[ebp]
	mov	eax, DWORD PTR _p2$[ebp+eax]
	mov	DWORD PTR [edx+ecx], eax
$LN14@World_Tran:

; 153  : 		if( p2[2] > outmaxs[2] ) outmaxs[2] = p2[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _outmaxs$[ebp]
	movss	xmm0, DWORD PTR _p2$[ebp+eax]
	comiss	xmm0, DWORD PTR [edx+ecx]
	jbe	SHORT $LN15@World_Tran
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _outmaxs$[ebp]
	mov	eax, DWORD PTR _p2$[ebp+eax]
	mov	DWORD PTR [edx+ecx], eax
$LN15@World_Tran:

; 154  : 	}

	jmp	$LN2@World_Tran
$LN3@World_Tran:

; 155  : 
; 156  : 	// sanity check
; 157  : 	for( i = 0; i < 3; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@World_Tran
$LN5@World_Tran:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@World_Tran:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN6@World_Tran

; 158  : 	{
; 159  : 		if( outmins[i] > outmaxs[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _outmins$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _outmaxs$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	comiss	xmm0, DWORD PTR [esi+edx*4]
	jbe	SHORT $LN16@World_Tran

; 160  : 		{
; 161  : 			VectorClear( outmins );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _outmins$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _outmins$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _outmins$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 162  : 			VectorClear( outmaxs );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _outmaxs$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [ecx+eax], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _outmaxs$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _outmaxs$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+edx], xmm0

; 163  : 			return;

	jmp	SHORT $LN6@World_Tran
$LN16@World_Tran:

; 164  : 		}
; 165  : 	}

	jmp	$LN5@World_Tran
$LN6@World_Tran:

; 166  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_World_TransformAABB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\world.c
;	COMDAT _World_MoveBounds
_TEXT	SEGMENT
_i$ = -4						; size = 4
_start$ = 8						; size = 4
_mins$ = 12						; size = 4
_maxs$ = 16						; size = 4
_end$ = 20						; size = 4
_boxmins$ = 24						; size = 4
_boxmaxs$ = 28						; size = 4
_World_MoveBounds PROC					; COMDAT

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 87   : 	int	i;
; 88   : 	
; 89   : 	for( i = 0; i < 3; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@World_Move
$LN2@World_Move:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@World_Move:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN3@World_Move

; 90   : 	{
; 91   : 		if( end[i] > start[i] )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	comiss	xmm0, DWORD PTR [esi+edx*4]
	jbe	SHORT $LN5@World_Move

; 92   : 		{
; 93   : 			boxmins[i] = start[i] + mins[i] - 1.0f;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _mins$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	addss	xmm0, DWORD PTR [esi+edx*4]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _boxmins$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0

; 94   : 			boxmaxs[i] = end[i] + maxs[i] + 1.0f;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _maxs$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	addss	xmm0, DWORD PTR [esi+edx*4]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _boxmaxs$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0

; 95   : 		}

	jmp	SHORT $LN6@World_Move
$LN5@World_Move:

; 96   : 		else
; 97   : 		{
; 98   : 			boxmins[i] = end[i] + mins[i] - 1.0f;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _mins$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	addss	xmm0, DWORD PTR [esi+edx*4]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _boxmins$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0

; 99   : 			boxmaxs[i] = start[i] + maxs[i] + 1.0f;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _maxs$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	addss	xmm0, DWORD PTR [esi+edx*4]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _boxmaxs$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
$LN6@World_Move:

; 100  : 		}
; 101  : 	}

	jmp	$LN2@World_Move
$LN3@World_Move:

; 102  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_World_MoveBounds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\world.c
;	COMDAT _ClearLink
_TEXT	SEGMENT
_l$ = 8							; size = 4
_ClearLink PROC						; COMDAT

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 49   : 	l->prev = l->next = l;

	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR _l$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _l$[ebp]
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR [edx], eax

; 50   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ClearLink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\world.c
;	COMDAT _RemoveLink
_TEXT	SEGMENT
_l$ = 8							; size = 4
_RemoveLink PROC					; COMDAT

; 60   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 61   : 	l->next->prev = l->prev;

	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _l$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 62   : 	l->prev->next = l->next;

	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _l$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 63   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_RemoveLink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\DevDragon\XashFE\dev\src\engine\common\world.c
;	COMDAT _InsertLinkBefore
_TEXT	SEGMENT
_l$ = 8							; size = 4
_before$ = 12						; size = 4
_InsertLinkBefore PROC					; COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 74   : 	l->next = before;

	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR _before$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 75   : 	l->prev = before->prev;

	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR _before$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 76   : 	l->prev->next = l;

	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _l$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 77   : 	l->next->prev = l;

	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _l$[ebp]
	mov	DWORD PTR [ecx], edx

; 78   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_InsertLinkBefore ENDP
_TEXT	ENDS
END
