//========= Copyright © 1996-2002, Valve LLC, All rights reserved. ============
//
// Purpose: 
//
// $NoKeywords: $
//=============================================================================

#pragma once

#ifndef WEAPON_H
#endif

#ifndef WEAPONENUM_H
#define WEAPONENUM_H

// Information about a specific animation
typedef struct animinfo_s
{
	int animId; // the id of animation
	int numframes;
	int framerate;
	bool looping;
} animinfo_t;

// These will be unique to each weapon, they will contain a pointer to the array with anim info as well as the size for utility purposes
typedef struct weaponaniminfo_s
{
	const animinfo_t* pWeaponAnimInfoArray;
	int numAnims;
} weaponaiminfo_t;

extern const weaponaiminfo_t weaponAnimInfoArray[128];

// Do we need this here?
#define	GAUSS_PRIMARY_CHARGE_VOLUME	256// how loud gauss is while charging
#define GAUSS_PRIMARY_FIRE_VOLUME	450// how loud gauss is when discharged

// =========================== //
//           MELEE          //
// =========================== //

// Question
enum question_e
{
	QUESTION_IDLE = 0,

	QUESTION_LAST,
};

// Spanner
enum spanner_e
{
	SPANNER_IDLE1 = 0,
	SPANNER_ATTACK1,
	SPANNER_ATTACK2,
	SPANNER_USE,
	SPANNER_DRAW,
	SPANNER_HOLSTER,

	SPANNER_LAST,
};

// Knife
enum knife_e
{
	KNIFE_IDLE1 = 0,
	KNIFE_IDLE2,
	KNIFE_IDLE3,
	KNIFE_ATTACK1MISS,
	KNIFE_ATTACK1HIT,
	KNIFE_ATTACK2MISS,
	KNIFE_ATTACK2HIT,
	KNIFE_ATTACK3MISS,
	KNIFE_ATTACK3HIT,
	KNIFE_CHARGE,
	KNIFE_STAB,
	KNIFE_DRAW,
	KNIFE_HOLSTER,

	KNIFE_LAST,
};

// Crowbar
enum crowbar_e
{
	CROWBAR_IDLE1 = 0,
	CROWBAR_FIDGET1,
	CROWBAR_FIDGET2,
	CROWBAR_ATTACK1MISS,
	CROWBAR_ATTACK1HIT,
	CROWBAR_ATTACK2MISS,
	CROWBAR_ATTACK2HIT,
	CROWBAR_ATTACK3MISS,
	CROWBAR_ATTACK3HIT,
	CROWBAR_BIGATTACKWINDUP,
	CROWBAR_BIGATTACKMISS,
	CROWBAR_BIGATTACKHIT,
	CROWBAR_THROWWINDUP,
	CROWBAR_THROW,
	CROWBAR_BLOCKSTART,
	CROWBAR_BLOCKCOUNTER,
	CROWBAR_BLOCKCOUNTERHIT,
	CROWBAR_BLOCKEND,
	CROWBAR_BLOCKBREAK,
	CROWBAR_TOOLSTART,
	CROWBAR_TOOLLOOP,
	CROWBAR_TOOLEND,
	CROWBAR_DRAW,
	CROWBAR_HOLSTER,

	CROWBAR_LAST,
};

// Pipewrench
enum pipewrench_e
{
	PIPEWRENCH_IDLE1 = 0,
	PIPEWRENCH_FIDGET1,
	PIPEWRENCH_FIDGET2,
	PIPEWRENCH_ATTACK1MISS,
	PIPEWRENCH_ATTACK1HIT,
	PIPEWRENCH_ATTACK2MISS,
	PIPEWRENCH_ATTACK2HIT,
	PIPEWRENCH_ATTACK3MISS,
	PIPEWRENCH_ATTACK3HIT,
	PIPEWRENCH_ATTACKBIGWIND,
	PIPEWRENCH_ATTACKBIGMISS,
	PIPEWRENCH_ATTACKBIGHIT,
	PIPEWRENCH_DRAW,
	PIPEWRENCH_HOLSTER,

	PIPEWRENCH_LAST,
};

// =========================== //
//           HANDGUNS          //
// =========================== //

// Glock-17
enum glock_e
{
	GLOCK_IDLE1 = 0,
	GLOCK_IDLE1_EMPTY,
	GLOCK_FIDGET1,
	GLOCK_FIDGET1_EMPTY,
	GLOCK_SHOOT,
	GLOCK_SHOOT_EMPTY,
	GLOCK_SHOOT2,
	GLOCK_SHOOT_EMPTY2,
	GLOCK_HOLSTER_FROM_SILENCER,
	GLOCK_HOLSTER_FROM_SILENCER_EMPTY,
	GLOCK_ADD_SILENCER,
	GLOCK_ADD_SILENCER_EMPTY,
	GLOCK_REMOVE_SILENCER,
	GLOCK_REMOVE_SILENCER_EMPTY,
	GLOCK_DRAW_FROM_SILENCER,
	GLOCK_DRAW_FROM_SILENCER_EMPTY,
	GLOCK_RELOAD,
	GLOCK_RELOAD_EMPTY,
	GLOCK_RELOAD2,
	GLOCK_RELOAD_EMPTY2,
	GLOCK_SWITCH,
	GLOCK_SWITCH_EMPTY,
	GLOCK_DRAW,
	GLOCK_DRAW_EMPTY,
	GLOCK_HOLSTER,
	GLOCK_HOLSTER_EMPTY,
	GLOCK_DRAW2,
	GLOCK_DRAW_EMPTY2,
	GLOCK_HOLSTER2,
	GLOCK_HOLSTER_EMPTY2,

	GLOCK_LAST,
};

// Beretta
enum m9_e
{
	M9_IDLE = 0,
	M9_IDLE_EMPTY,
	M9_SHOOT,
	M9_SHOOT_EMPTY,
	M9_RELOAD,
	M9_RELOAD_EMPTY,
	M9_SWITCH,
	M9_SWITCH_EMPTY,
	M9_DRAW,
	M9_DRAW_EMPTY,
	M9_HOLSTER,
	M9_HOLSTER_EMPTY,

	M9_LAST,
};

// Colt Python
enum python_e {
	PYTHON_IDLE1 = 0,
	PYTHON_IDLE2,
	PYTHON_FIDGET,
	PYTHON_FIRE1,
	PYTHON_FIRE2,
	PYTHON_RELOAD,
	PYTHON_SIGHT,
	PYTHON_DRAW,
	PYTHON_HOLSTER,

	PYTHON_LAST
};

// Desert Eagle
enum deagle_e {
	DEAGLE_IDLE = 0,
	DEAGLE_SPECIAL_IDLE1,
	DEAGLE_SPECIAL_IDLE2,
	DEAGLE_SPECIAL_IDLE3,
	DEAGLE_SHOOT,
	DEAGLE_SHOOT_LAST,
	DEAGLE_RELOAD,
	DEAGLE_RELOAD_EMPTY,
	DEAGLE_SIGHT,
	DEAGLE_DRAW,
	DEAGLE_HOLSTER,

	DEAGLE_LAST
};

// =========================== //
// AUTOMATICS & SHOTGUNS       //
// =========================== //

// MP5-SD
enum mp5_e
{
	MP5_IDLE = 0,
	MP5_FIDGET,
	MP5_FIRE1,
	MP5_FIRE2,
	MP5_FIRE3,
	MP5_FIRE_SD1,
	MP5_FIRE_SD2,
	MP5_FIRE_SD3,
	MP5_FIRE_ELITE1,
	MP5_FIRE_ELITE2,
	MP5_FIRE_ELITE3,
	MP5_FIRE_ELITE_SD1,
	MP5_FIRE_ELITE_SD2,
	MP5_FIRE_ELITE_SD3,
	MP5_GRENADE,
	MP5_SWING,
	MP5_RELOAD,
	MP5_RELOAD_EMPTY,
	MP5_RELOAD_EMPTY_COCK,
	MP5_SWITCH_UP,
	MP5_SWITCH_DOWN,
	MP5_DRAW,
	MP5_HOLSTER,

	MP5_LAST
};

// M4
enum m4_e
{
	M4_IDLE = 0,
	M4_FIDGET,
	M4_FIRE1,
	M4_FIRE2,
	M4_FIRE3,
	M4_GRENADE,
	M4_RELOAD,
	M4_RELOAD_EMPTY,
	M4_DRAW,
	M4_HOLSTER,

	M4_LAST
};

// Nailgun
enum nailgun_e
{
	NAILGUN_IDLE = 0,
	NAILGUN_FIDGET,
	NAILGUN_FIRE1,
	NAILGUN_FIRE2,
	NAILGUN_FIRE3,
	NAILGUN_RELOAD,
	NAILGUN_RELOAD_EMPTY,
	NAILGUN_DRAW,
	NAILGUN_HOLSTER,
	SUPERNAILGUN_IDLE,
	SUPERNAILGUN_FIDGET,
	SUPERNAILGUN_FIRE1,
	SUPERNAILGUN_FIRE2,
	SUPERNAILGUN_FIRE3,
	SUPERNAILGUN_RELOAD,
	SUPERNAILGUN_RELOAD_EMPTY,
	SUPERNAILGUN_DRAW,
	SUPERNAILGUN_HOLSTER,

	NAILGUN_LAST,
};

// Shotgun
enum shotgun_e
{
	SHOTGUN_IDLE1 = 0,
	SHOTGUN_IDLE2,
	SHOTGUN_FIDGET1,
	SHOTGUN_FIDGET2,
	SHOTGUN_FIRE,
	SHOTGUN_FIRE_RAPID,
	SHOTGUN_FIRE_DOUBLE,
	SHOTGUN_FIRE_DOUBLE_RAPID,
	SHOTGUN_RELOAD_START,
	SHOTGUN_RELOAD_MID,
	SHOTGUN_RELOAD_END,
	SHOTGUN_RELOAD_PUMP,
	SHOTGUN_DRAW,
	SHOTGUN_HOLSTER,

	SHOTGUN_LAST,
};

// SPAS-12
enum autoshotgun_e
{
	AUTOSHOTGUN_IDLE = 0,
	AUTOSHOTGUN_FIDGET,
	AUTOSHOTGUN_PUMPSHOOT,
	AUTOSHOTGUN_SEMISHOOT,
	AUTOSHOTGUN_AUTOSHOOT,
	AUTOSHOTGUN_SWITCH,
	AUTOSHOTGUN_RELOAD_START,
	AUTOSHOTGUN_RELOAD_MID,
	AUTOSHOTGUN_RELOAD_END,
	AUTOSHOTGUN_RELOAD_PUMP,
	AUTOSHOTGUN_DRAW,
	AUTOSHOTGUN_HOLSTER,

	AUTOSHOTGUN_LAST,
};

// Doubled Barreled Shotgun
enum supershotgun_e
{
	SUPERSHOTGUN_IDLE = 0,
	SUPERSHOTGUN_FIRERIGHT,
	SUPERSHOTGUN_FIRERIGHTRELOAD,
	SUPERSHOTGUN_FIRELEFT,
	SUPERSHOTGUN_FIRELEFTRELOAD,
	SUPERSHOTGUN_FIREDOUBLE,
	SUPERSHOTGUN_FIREDOUBLERELOAD,
	SUPERSHOTGUN_RELOAD,
	SUPERSHOTGUN_DRAW,
	SUPERSHOTGUN_HOLSTER,

	SUPERSHOTGUN_LAST,
};

enum huntingshotgun_e
{
	HUNTINGSHOTGUN_IDLE = 0,
	HUNTINGSHOTGUN_FIDGET,
	HUNTINGSHOTGUN_FIRE,
	HUNTINGSHOTGUN_FIRE2,
	HUNTINGSHOTGUN_FIRE3,
	HUNTINGSHOTGUN_RELOAD_START,
	HUNTINGSHOTGUN_RELOAD_MID,
	HUNTINGSHOTGUN_RELOAD_END,
	HUNTINGSHOTGUN_RELOAD_PUMP,
	HUNTINGSHOTGUN_DRAW,
	HUNTINGSHOTGUN_HOLSTER,

	HUNTINGSHOTGUN_LAST,
};

// =========================== //
//         HEAVY WEAPONS       //
// =========================== //

// Grenade Launcher
enum glauncher_e
{
	GLAUNCHER_IDLE = 0,
	GLAUNCHER_FIDGET,
	GLAUNCHER_FIRE,
	GLAUNCHER_FIRE_ARM,
	GLAUNCHER_DETONATE,
	GLAUNCHER_SWITCH,
	GLAUNCHER_RELOAD,
	GLAUNCHER_RELOAD_EMPTY,
	GLAUNCHER_DRAW,
	GLAUNCHER_HOLSTER,

	GLAUNCHER_LAST,
};

// RPG
enum rpg_e
{
	RPG_IDLE = 0,
	RPG_IDLE2,
	RPG_FIDGET,
	RPG_FIDGET2,
	RPG_FIRE,
	RPG_RELOAD,	// to empty
	RPG_DRAW,
	RPG_DRAW2,
	RPG_HOLSTER,	// loaded
	RPG_HOLSTER2,	// unloaded

	RPG_LAST,
};

// Rocket Rifle
enum rocketrifle_e
{
	ROCKETRIFLE_IDLE = 0,
	ROCKETRIFLE_IDLE_EMPTY,
	ROCKETRIFLE_FIDGET,
	ROCKETRIFLE_FIDGET_EMPTY,
	ROCKETRIFLE_FIRE,
	ROCKETRIFLE_FIRE_EMPTY,
	ROCKETRIFLE_JUMP,
	ROCKETRIFLE_JUMP_EMPTY,
	ROCKETRIFLE_RELOAD_START,
	ROCKETRIFLE_RELOAD_START_EMPTY,
	ROCKETRIFLE_RELOAD_INSERT,
	ROCKETRIFLE_RELOAD_INSERT_LAST,
	ROCKETRIFLE_RELOAD_INTERUPT,
	ROCKETRIFLE_RELOAD_INTERUPT_EMPTY,
	ROCKETRIFLE_DRAW,
	ROCKETRIFLE_DRAW_EMPTY,
	ROCKETRIFLE_HOLSTER,
	ROCKETRIFLE_HOLSTER_EMPTY,

	ROCKETRIFLE_ZOOM,
	ROCKETRIFLE_LAST,
};

// M249 SAW
enum m249_e
{
	M249_IDLE = 0,
	M249_FIDGET,
	M249_FIRE_LOW,
	M249_FIRE_MED,
	M249_FIRE_HIGH,
	M249_BOXOUT,
	M249_BOXIN,
	M249_DRAW,
	M249_HOLSTER,

	M249_LAST,
};

// M60
enum m60_e
{
	M60_IDLE = 0,
	M60_FIRE,
	M60_DRAW,
	M60_HOLSTER,

	M60_LAST,
};

// Chaingun
enum chaingun_e
{
	CHAINGUN_IDLE = 0,
	CHAINGUN_IDLE2,
	CHAINGUN_SPINUP,
	CHAINGUN_SPINDOWN,
	CHAINGUN_FIRE,
	CHAINGUN_DRAW,
	CHAINGUN_HOLSTER,

	CHAINGUN_LAST,
};

// Minigun
//???

// =========================== //
//         RANGED WEAPONS      //
// =========================== //

// Auto-Crossbow
enum crossbow_e
{
	CROSSBOW_IDLE = 0,		// full
	CROSSBOW_IDLE_EMPTY,	// empty
	CROSSBOW_FIDGET,		// full
	CROSSBOW_FIDGET_EMPTY,	// empty
	CROSSBOW_FIRE,			// full
	CROSSBOW_FIRE_EMPTY,	// empty
	CROSSBOW_FIRE_RAPID,
	CROSSBOW_TORQUE,
	CROSSBOW_RELOAD,		// from non-empty
	CROSSBOW_RELOAD_EMPTY,	// from empty
	CROSSBOW_DRAW,			// full
	CROSSBOW_DRAW_EMPTY,	// empty
	CROSSBOW_HOLSTER,		// full
	CROSSBOW_HOLSTER_EMPTY,	// empty

	CROSSBOW_LAST
};

// Torque Bow
// ??

// M40A1 Sniper Rifle
enum m40a1_e
{
	M40A1_IDLE = 0,
	M40A1_IDLE_EMPTY,
	M40A1_FIRE,
	M40A1_FIRE_EMPTY,
	M40A1_RELOAD,
	M40A1_RELOAD_EMPTY,
	M40A1_DRAW,
	M40A1_DRAW_EMPTY,
	M40A1_HOLSTER,
	M40A1_HOLSTER_EMPTY,

	M40A1_LAST,
};

// Autosniper
enum autosniper_e
{
	AUTOSNIPER_AUTO_IDLE = 0,
	AUTOSNIPER_AUTO_FIDGET,
	AUTOSNIPER_AUTO_FIRE,
	AUTOSNIPER_AUTO_RELOAD,
	AUTOSNIPER_AUTO_RELOAD_EMPTY,
	AUTOSNIPER_AUTO_SWITCH,
	AUTOSNIPER_AUTO_SWITCH_EMPTY,
	AUTOSNIPER_AUTO_DRAW,
	AUTOSNIPER_AUTO_HOLSTER,
	AUTOSNIPER_BOLT_IDLE,
	AUTOSNIPER_BOLT_FIDGET,
	AUTOSNIPER_BOLT_FIRE,
	AUTOSNIPER_BOLT_RELOAD,
	AUTOSNIPER_BOLT_SWITCH,
	AUTOSNIPER_BOLT_SWITCH_EMPTY,
	AUTOSNIPER_BOLT_DRAW,
	AUTOSNIPER_BOLT_HOLSTER,
	AUTOSNIPER_ZOOM,

	AUTOSNIPER_LAST,
};

// =========================== //
//    THROWABLE/EXPLOSIVES      //
// =========================== //

// Hand Grenades
enum handgrenade_e
{
	HANDGRENADE_IDLE = 0,
	HANDGRENADE_FIDGET,
	HANDGRENADE_PINPULL,
	HANDGRENADE_THROW_SOFT,	// toss
	HANDGRENADE_THROW_NORMAL,	// medium
	HANDGRENADE_THROW_HARD,	// hard
	HANDGRENADE_HOLSTER,
	HANDGRENADE_DRAW,
	HANDGRENADE_NULL,

	HANDGRENADE_LAST,
};

// Tripmine
enum tripmine_e
{
	TRIPMINE_IDLE1 = 0,
	TRIPMINE_IDLE2,
	TRIPMINE_FIDGET,
	TRIPMINE_PLACE,
	TRIPMINE_PLACE2,
	TRIPMINE_TIMER,
	TRIPMINE_DRAW,
	TRIPMINE_HOLSTER,
	TRIPMINE_NULL,

	TRIPMINE_LAST
};

// Satchel Charge
enum satchel_e {
	SATCHEL_IDLE = 0,
	SATCHEL_FIDGET,
	SATCHEL_PREPTHROW,
	SATCHEL_THROW,
	SATCHEL_SET,
	SATCHEL_FIRE,
	SATCHEL_REDRAW,
	SATCHEL_DRAW,
	SATCHEL_HOLSTER,
	SATCHEL_RADIO_IDLE,
	SATCHEL_RADIO_FIDGET,
	SATCHEL_RADIO_FIRE,
	SATCHEL_RADIO_DRAW,
	SATCHEL_RADIO_HOLSTER,

	SATCHEL_LAST
};

// =========================== //
//    ALIEN WEAPONS			 //
// =========================== //

// Hivehand
enum hgun_e {
	HGUN_IDLE1 = 0,
	HGUN_FIDGETSWAY,
	HGUN_FIDGETSHAKE,
	HGUN_DOWN,
	HGUN_UP,
	HGUN_SHOOT,

	HGUN_LAST,
};

// Shock Roach
enum shockroach_e
{
	SHOCKROACH_IDLE = 0,
	SHOCKROACH_FIDGET,
	SHOCKROACH_FIRE,
	SHOCKROACH_FIRESUPER,
	SHOCKROACH_FIRESUPERLAST,
	SHOCKROACH_BITE,
	SHOCKROACH_BITESUPER,
	SHOCKROACH_BITESUPERLAST,
	SHOCKROACH_START,
	SHOCKROACH_LOOP,
	SHOCKROACH_END,
	SHOCKROACH_DRAW,
	SHOCKROACH_DRAWSUPER,
	SHOCKROACH_HOLSTER,
	SHOCKROACH_HOLSTERSUPER,

	SHOCKROACH_LAST,
};

// Spore Launcher
enum sporelauncher_e {
	SPORELAUNCHER_IDLE1 = 0,
	SPORELAUNCHER_FIDGET1,
	SPORELAUNCHER_FIDGET2,
	SPORELAUNCHER_FIRE,
	SPORELAUNCHER_ALTFIRE,
	SPORELAUNCHER_BITE,
	SPORELAUNCHER_START_RELOAD,
	SPORELAUNCHER_MID_RELOAD,
	SPORELAUNCHER_END_RELOAD,
	SPORELAUNCHER_DRAW,
	SPORELAUNCHER_HOLSTER,

	SPORELAUNCHER_LAST
};

// Snark
enum squeak_e {
	SQUEAK_IDLE1 = 0,
	SQUEAK_FIDGETFIT,
	SQUEAK_FIDGETNIP,
	SQUEAK_DOWN,
	SQUEAK_UP,
	SQUEAK_THROW,

	SQUEAK_LAST
};

// =========================== //
//    ENERGY WEAPONS			//
// =========================== //

enum railgun_e
{
	RAILGUN_IDLE = 0,
	RAILGUN_FIDGET,
	RAILGUN_FIRE,
	RAILGUN_FIRE2,
	RAILGUN_FIREALT,
	RAILGUN_FIREALT2,
	RAILGUN_RELOAD,
	RAILGUN_RELOAD_EMPTY,
	RAILGUN_CHARGE,
	RAILGUN_CHARGE2,
	RAILGUN_SWITCH,
	RAILGUN_DRAW,
	RAILGUN_HOLSTER,

	RAILGUN_LAST,
};

// Plasma Gun
enum plasmarifle_e
{
	PLASMARIFLE_IDLE = 0,
	PLASMARIFLE_FIDGET,
	PLASMARIFLE_FIRE1,
	PLASMARIFLE_FIRE2,
	PLASMARIFLE_FIRE3,
	PLASMARIFLE_GRENADE,
	PLASMARIFLE_RELOAD,
	PLASMARIFLE_RELOAD_EMPTY,
	PLASMARIFLE_DRAW,
	PLASMARIFLE_HOLSTER,

	PLASMARIFLE_LAST
};

// Gauss Gun - Tau Cannon
enum gauss_e
{
	GAUSS_IDLE = 0,
	GAUSS_FIDGET,
	GAUSS_FIRE,
	GAUSS_FIRE2,
	GAUSS_SPINUP,
	GAUSS_SPIN,
	GAUSS_SWITCH,
	GAUSS_DRAW,
	GAUSS_HOLSTER,
	GAUSS_IDLE_HANDLE,
	GAUSS_FIDGET_HANDLE,
	GAUSS_FIRE_HANDLE,
	GAUSS_FIRE2_HANDLE,
	GAUSS_SPINUP_HANDLE,
	GAUSS_SPIN_HANDLE,
	GAUSS_SWITCH_HANDLE,
	GAUSS_DRAW_HANDLE,
	GAUSS_HOLSTER_HANDLE,

	GAUSS_LAST
};

// Gluon Gun
enum egon_e {
	EGON_IDLE1 = 0,
	EGON_FIDGET1,
	EGON_FIRE1,
	EGON_FIRE2,
	EGON_FIRE3,
	EGON_FIRE4,
	EGON_FIRE5,
	EGON_SWITCH,
	EGON_DRAW,
	EGON_HOLSTER,
	EGON_ALTIDLE1,
	EGON_ALTFIDGET1,
	EGON_ALTFIRE1,
	EGON_ALTFIRE2,
	EGON_ALTFIRE3,
	EGON_ALTFIRE4,
	EGON_ALTFIRE5,
	EGON_ALTSWITCH,
	EGON_ALTDRAW,
	EGON_ALTHOLSTER,

	EGON_LAST
};

// Displacer Gun
enum displacer_e
{
	DISPLACER_IDLE1,
	DISPLACER_FIDGET,
	DISPLACER_FIRE,
	DISPLACER_SPINUP,
	DISPLACER_SPINDOWN,
	DISPLACER_SPIN,
	DISPLACER_DRAW,
	DISPLACER_HOLSTER,

	DISPLACER_LAST
};

// =========================== //
//    SUPPORT					//
// =========================== //

// Automatic Medkit
enum medkit_e
{
	MEDKIT_IDLE = 0,
	MEDKIT_LONGIDLE,
	MEDKIT_LONGUSE,
	MEDKIT_SHORTUSE,
	MEDKIT_HOLSTER,
	MEDKIT_DRAW,

	MEDKIT_LAST
};

// Flare
// ???

// DMC Lightning Gun
enum dmg_light_e
{
	LIGHT_IDLE = 0,
	LIGHT_FIRE,
	LIGHT_DRAW,
	LIGHT_DRAW_EMPTY,
	LIGHT_HOLSTER,
	LIGHT_HOLSTER_EMPTY,

	LIGHT_LAST
};

// EXTRA STUFF

enum shotgun_type_reload
{
	RELOAD_NOT = 0,
	RELOAD_START,
	RELOAD_MID,
	RELOAD_END,
};

#endif